var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: i32;

var $M.3: i32;

var $M.4: [ref]i8;

var $M.5: [ref]i8;

var $M.6: [ref]i8;

var $M.7: [ref]i32;

var $M.8: i32;

var $M.9: ref;

var $M.10: i32;

var $M.11: ref;

var $M.12: i32;

var $M.13: ref;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: [ref]i8;

var $M.18: [ref]i8;

var $M.19: [ref]i8;

var $M.20: [ref]i8;

var $M.21: [ref]i8;

var $M.22: [ref]i8;

var $M.23: [ref]i8;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: i32;

var $M.27: i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: [ref]i64;

var $M.39: [ref]i8;

var $M.40: i32;

var $M.41: [ref]i32;

var $M.43: [ref]i64;

var $M.44: i32;

var $M.45: [ref]i32;

var $M.46: [ref]i64;

var $M.47: [ref]i64;

var $M.48: [ref]i64;

var $M.49: [ref]i8;

var $M.51: ref;

var $M.52: i32;

var $M.53: i32;

var $M.54: ref;

var $M.55: i32;

var $M.56: i32;

var $M.57: ref;

var $M.58: i32;

var $M.59: i32;

var $M.60: ref;

var $M.61: i32;

var $M.62: i32;

var $M.63: ref;

var $M.64: ref;

var $M.65: i32;

var $M.66: i32;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: ref;

var $M.87: ref;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: [ref]i8;

var $M.92: [ref]ref;

var $M.93: i32;

var $M.94: i32;

var $M.95: ref;

var $M.96: [ref]i32;

var $M.97: [ref]ref;

var $M.98: [ref]i32;

var $M.99: [ref]ref;

var $M.100: [ref]i8;

var $M.101: [ref]ref;

var $M.102: [ref]i32;

var $M.103: [ref]ref;

var $M.104: i32;

var $M.114: [ref]i32;

var $M.115: [ref]i64;

var $M.116: [ref]i32;

var $M.117: [ref]i32;

var $M.118: [ref]i32;

var $M.119: [ref]i32;

var $M.120: [ref]i32;

var $M.121: [ref]i8;

var $M.122: i32;

var $M.123: [ref]ref;

var $M.124: [ref]i32;

var $M.125: [ref]i32;

var $M.126: [ref]i8;

var $M.127: [ref]i8;

var $M.128: [ref]i8;

var $M.129: [ref]i8;

var $M.130: [ref]i32;

var $M.131: [ref]i8;

var $M.132: [ref]i8;

var $M.133: [ref]i8;

var $M.134: [ref]i64;

var $M.147: [ref]i8;

var $M.169: [ref]i32;

var $M.170: [ref]i32;

var $M.171: [ref]i32;

var $M.172: [ref]i32;

var $M.173: [ref]i32;

var $M.174: [ref]i32;

var $M.175: [ref]i64;

var $M.249: [ref]i8;

var $M.250: [ref]i8;

var $M.251: [ref]i8;

var $M.252: [ref]i8;

var $M.253: [ref]i8;

var $M.254: [ref]i8;

var $M.255: [ref]i8;

var $M.256: [ref]i8;

var $M.257: [ref]i8;

var $M.258: [ref]i8;

var $M.259: [ref]i8;

var $M.260: [ref]i8;

var $M.261: [ref]i8;

var $M.262: [ref]i8;

var $M.263: [ref]i8;

var $M.264: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 695610);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 1028);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 2056);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 3084);

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 4112);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 5140);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 6168);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 7196);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 8224);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 9252);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 10280);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 11312);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 12340);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 13372);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 14400);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 15432);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 16460);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 17492);

const ldv_timer_3_0: ref;

axiom ldv_timer_3_0 == $sub.ref(0, 18520);

const ldv_timer_list_3_0: ref;

axiom ldv_timer_list_3_0 == $sub.ref(0, 19552);

const ldv_timer_3_1: ref;

axiom ldv_timer_3_1 == $sub.ref(0, 20580);

const ldv_timer_list_3_1: ref;

axiom ldv_timer_list_3_1 == $sub.ref(0, 21612);

const ldv_timer_3_2: ref;

axiom ldv_timer_3_2 == $sub.ref(0, 22640);

const ldv_timer_list_3_2: ref;

axiom ldv_timer_list_3_2 == $sub.ref(0, 23672);

const ldv_timer_3_3: ref;

axiom ldv_timer_3_3 == $sub.ref(0, 24700);

const ldv_timer_list_3_3: ref;

axiom ldv_timer_list_3_3 == $sub.ref(0, 25732);

const ipmi_pnp_driver_group0: ref;

axiom ipmi_pnp_driver_group0 == $sub.ref(0, 26764);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 27792);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 28824);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 29852);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 30884);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 31912);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 32944);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 33972);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 35004);

const ipmi_pci_driver_group1: ref;

axiom ipmi_pci_driver_group1 == $sub.ref(0, 36036);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 37064);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 38092);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 39120);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 40148);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 41176);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 42204);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 43232);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 44260);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 45288);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 46316);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 47344);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 48372);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 49400);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 50428);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 51456);

const pci_counter: ref;

axiom pci_counter == $sub.ref(0, 52484);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 53512);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 54540);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 55568);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 56596);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 57624);

const kcs_smi_handlers: ref;

axiom kcs_smi_handlers == $sub.ref(0, 58712);

const bt_debug: ref;

axiom bt_debug == $sub.ref(0, 59740);

const smic_debug: ref;

axiom smic_debug == $sub.ref(0, 60768);

const kcs_debug: ref;

axiom kcs_debug == $sub.ref(0, 61796);

const {:count 3} hotmod_as: ref;

axiom hotmod_as == $sub.ref(0, 62868);

const {:count 4} hotmod_si: ref;

axiom hotmod_si == $sub.ref(0, 63956);

const {:count 3} hotmod_ops: ref;

axiom hotmod_ops == $sub.ref(0, 65028);

const unload_when_empty: ref;

axiom unload_when_empty == $sub.ref(0, 66056);

const {:count 4} ipmi_defaults: ref;

axiom ipmi_defaults == $sub.ref(0, 67112);

const si_trydefaults: ref;

axiom si_trydefaults == $sub.ref(0, 68140);

const handlers: ref;

axiom handlers == $sub.ref(0, 69236);

const smi_num: ref;

axiom smi_num == $sub.ref(0, 70264);

const dell_poweredge_bt_xaction_notifier: ref;

axiom dell_poweredge_bt_xaction_notifier == $sub.ref(0, 71312);

const {:count 2} addr_space_to_str: ref;

axiom addr_space_to_str == $sub.ref(0, 72352);

const acpi_failure: ref;

axiom acpi_failure == $sub.ref(0, 73380);

const {:count 4} slave_addrs: ref;

axiom slave_addrs == $sub.ref(0, 74420);

const {:count 4} irqs: ref;

axiom irqs == $sub.ref(0, 75460);

const {:count 4} regshifts: ref;

axiom regshifts == $sub.ref(0, 76500);

const {:count 4} regsizes: ref;

axiom regsizes == $sub.ref(0, 77540);

const {:count 4} regspacings: ref;

axiom regspacings == $sub.ref(0, 78580);

const {:count 4} addrs: ref;

axiom addrs == $sub.ref(0, 79636);

const {:count 4} ports: ref;

axiom ports == $sub.ref(0, 80676);

const {:count 4} si_type: ref;

axiom si_type == $sub.ref(0, 81732);

const {:count 30} si_type_str: ref;

axiom si_type_str == $sub.ref(0, 82786);

const ipmi_driver: ref;

axiom ipmi_driver == $sub.ref(0, 83962);

const {:count 2} pnp_dev_table: ref;

axiom pnp_dev_table == $sub.ref(0, 85018);

const ipmi_pnp_driver: ref;

axiom ipmi_pnp_driver == $sub.ref(0, 86210);

const pnp_registered: ref;

axiom pnp_registered == $sub.ref(0, 87238);

const {:count 3} ipmi_pci_devices: ref;

axiom ipmi_pci_devices == $sub.ref(0, 88358);

const ipmi_pci_driver: ref;

axiom ipmi_pci_driver == $sub.ref(0, 89662);

const pci_registered: ref;

axiom pci_registered == $sub.ref(0, 90690);

const initialized: ref;

axiom initialized == $sub.ref(0, 91718);

const smi_infos: ref;

axiom smi_infos == $sub.ref(0, 92758);

const smi_infos_lock: ref;

axiom smi_infos_lock == $sub.ref(0, 93934);

const {:count 3} si_to_str: ref;

axiom si_to_str == $sub.ref(0, 94982);

const {:count 9} ipmi_addr_src_to_str: ref;

axiom ipmi_addr_src_to_str == $sub.ref(0, 96078);

const {:count 4} kipmid_max_busy_us: ref;

axiom kipmid_max_busy_us == $sub.ref(0, 97118);

const num_max_busy_us: ref;

axiom num_max_busy_us == $sub.ref(0, 98146);

const {:count 4} force_kipmid: ref;

axiom force_kipmid == $sub.ref(0, 99186);

const num_force_kipmid: ref;

axiom num_force_kipmid == $sub.ref(0, 100214);

const xaction_notifier_list: ref;

axiom xaction_notifier_list == $sub.ref(0, 101310);

const __mod_pci_device_table: ref;

axiom __mod_pci_device_table == $sub.ref(0, 102366);

const bt_smi_handlers_group0: ref;

axiom bt_smi_handlers_group0 == $sub.ref(0, 103398);

const smic_smi_handlers_group0: ref;

axiom smic_smi_handlers_group0 == $sub.ref(0, 104430);

const kcs_smi_handlers_group0: ref;

axiom kcs_smi_handlers_group0 == $sub.ref(0, 105462);

const ldv_init: ref;

axiom ldv_init == $sub.ref(0, 106490);

const bt_smi_handlers: ref;

axiom bt_smi_handlers == $sub.ref(0, 107578);

const smic_smi_handlers: ref;

axiom smic_smi_handlers == $sub.ref(0, 108666);

const {:count 54} .str.125: ref;

axiom .str.125 == $sub.ref(0, 109744);

const {:count 16} .str.126: ref;

axiom .str.126 == $sub.ref(0, 110784);

const {:count 61} .str.127: ref;

axiom .str.127 == $sub.ref(0, 111869);

const {:count 48} .str.128: ref;

axiom .str.128 == $sub.ref(0, 112941);

const {:count 57} .str.129: ref;

axiom .str.129 == $sub.ref(0, 114022);

const {:count 55} .str.130: ref;

axiom .str.130 == $sub.ref(0, 115101);

const {:count 53} .str.131: ref;

axiom .str.131 == $sub.ref(0, 116178);

const {:count 32} .str.132: ref;

axiom .str.132 == $sub.ref(0, 117234);

const {:count 40} .str.133: ref;

axiom .str.133 == $sub.ref(0, 118298);

const {:count 56} .str.134: ref;

axiom .str.134 == $sub.ref(0, 119378);

const {:count 60} .str.135: ref;

axiom .str.135 == $sub.ref(0, 120462);

const {:count 51} .str.136: ref;

axiom .str.136 == $sub.ref(0, 121537);

const {:count 31} .str.137: ref;

axiom .str.137 == $sub.ref(0, 122592);

const {:count 39} .str.138: ref;

axiom .str.138 == $sub.ref(0, 123655);

const {:count 21} .str.139: ref;

axiom .str.139 == $sub.ref(0, 124700);

const {:count 16} .str.140: ref;

axiom .str.140 == $sub.ref(0, 125740);

const {:count 34} .str.141: ref;

axiom .str.141 == $sub.ref(0, 126798);

const {:count 21} .str.124: ref;

axiom .str.124 == $sub.ref(0, 127843);

const {:count 6} .str.110: ref;

axiom .str.110 == $sub.ref(0, 128873);

const {:count 2} .str.111: ref;

axiom .str.111 == $sub.ref(0, 129899);

const {:count 28} .str.123: ref;

axiom .str.123 == $sub.ref(0, 130951);

const {:count 27} .str.188: ref;

axiom .str.188 == $sub.ref(0, 132002);

const {:count 3} .str.148: ref;

axiom .str.148 == $sub.ref(0, 133029);

const {:count 8} .str.149: ref;

axiom .str.149 == $sub.ref(0, 134061);

const {:count 8} .str.150: ref;

axiom .str.150 == $sub.ref(0, 135093);

const {:count 6} .str.151: ref;

axiom .str.151 == $sub.ref(0, 136123);

const {:count 5} .str.152: ref;

axiom .str.152 == $sub.ref(0, 137152);

const {:count 5} .str.153: ref;

axiom .str.153 == $sub.ref(0, 138181);

const {:count 5} .str.154: ref;

axiom .str.154 == $sub.ref(0, 139210);

const {:count 2} .str.155: ref;

axiom .str.155 == $sub.ref(0, 140236);

const {:count 28} .str.145: ref;

axiom .str.145 == $sub.ref(0, 141288);

const {:count 34} .str.146: ref;

axiom .str.146 == $sub.ref(0, 142346);

const {:count 41} .str.147: ref;

axiom .str.147 == $sub.ref(0, 143411);

const {:count 27} .str.181: ref;

axiom .str.181 == $sub.ref(0, 144462);

const {:count 31} .str.182: ref;

axiom .str.182 == $sub.ref(0, 145517);

const {:count 9} .str.183: ref;

axiom .str.183 == $sub.ref(0, 146550);

const .str.185: ref;

axiom .str.185 == $sub.ref(0, 147575);

const {:count 5} .str.186: ref;

axiom .str.186 == $sub.ref(0, 148604);

const {:count 7} .str.184: ref;

axiom .str.184 == $sub.ref(0, 149635);

const {:count 74} .str.187: ref;

axiom .str.187 == $sub.ref(0, 150733);

const {:count 33} .str.180: ref;

axiom .str.180 == $sub.ref(0, 151790);

const {:count 8} .str.173: ref;

axiom .str.173 == $sub.ref(0, 152822);

const {:count 15} .str.174: ref;

axiom .str.174 == $sub.ref(0, 153861);

const {:count 25} .str.175: ref;

axiom .str.175 == $sub.ref(0, 154910);

const {:count 17} .str.176: ref;

axiom .str.176 == $sub.ref(0, 155951);

const {:count 46} .str.177: ref;

axiom .str.177 == $sub.ref(0, 157021);

const {:count 36} .str.178: ref;

axiom .str.178 == $sub.ref(0, 158081);

const {:count 34} .str.179: ref;

axiom .str.179 == $sub.ref(0, 159139);

const {:count 32} .str.171: ref;

axiom .str.171 == $sub.ref(0, 160195);

const {:count 18} .str.172: ref;

axiom .str.172 == $sub.ref(0, 161237);

const {:count 5} .str.156: ref;

axiom .str.156 == $sub.ref(0, 162266);

const {:count 8} .str.157: ref;

axiom .str.157 == $sub.ref(0, 163298);

const {:count 9} .str.158: ref;

axiom .str.158 == $sub.ref(0, 164331);

const {:count 11} .str.159: ref;

axiom .str.159 == $sub.ref(0, 165366);

const {:count 8} .str.160: ref;

axiom .str.160 == $sub.ref(0, 166398);

const {:count 10} .str.161: ref;

axiom .str.161 == $sub.ref(0, 167432);

const {:count 9} .str.162: ref;

axiom .str.162 == $sub.ref(0, 168465);

const {:count 7} .str.163: ref;

axiom .str.163 == $sub.ref(0, 169496);

const {:count 7} .str.164: ref;

axiom .str.164 == $sub.ref(0, 170527);

const {:count 7} .str.165: ref;

axiom .str.165 == $sub.ref(0, 171558);

const {:count 8} .str.166: ref;

axiom .str.166 == $sub.ref(0, 172590);

const {:count 10} .str.167: ref;

axiom .str.167 == $sub.ref(0, 173624);

const {:count 10} .str.168: ref;

axiom .str.168 == $sub.ref(0, 174658);

const {:count 8} .str.169: ref;

axiom .str.169 == $sub.ref(0, 175690);

const {:count 10} .str.170: ref;

axiom .str.170 == $sub.ref(0, 176724);

const {:count 24} .str.144: ref;

axiom .str.144 == $sub.ref(0, 177772);

const {:count 38} .str.142: ref;

axiom .str.142 == $sub.ref(0, 178834);

const {:count 32} .str.143: ref;

axiom .str.143 == $sub.ref(0, 179890);

const {:count 27} .str.5: ref;

axiom .str.5 == $sub.ref(0, 180941);

const {:count 7} .str.23: ref;

axiom .str.23 == $sub.ref(0, 181972);

const {:count 10} .str.24: ref;

axiom .str.24 == $sub.ref(0, 183006);

const {:count 5} .str.25: ref;

axiom .str.25 == $sub.ref(0, 184035);

const {:count 5} .str.26: ref;

axiom .str.26 == $sub.ref(0, 185064);

const {:count 7} .str.27: ref;

axiom .str.27 == $sub.ref(0, 186095);

const {:count 4} .str.28: ref;

axiom .str.28 == $sub.ref(0, 187123);

const {:count 12} .str.29: ref;

axiom .str.29 == $sub.ref(0, 188159);

const {:count 8} .str.30: ref;

axiom .str.30 == $sub.ref(0, 189191);

const {:count 4} .str.31: ref;

axiom .str.31 == $sub.ref(0, 190219);

const {:count 5} .str.32: ref;

axiom .str.32 == $sub.ref(0, 191248);

const {:count 3} .str.33: ref;

axiom .str.33 == $sub.ref(0, 192275);

const {:count 25} .str.34: ref;

axiom .str.34 == $sub.ref(0, 193324);

const {:count 15} .str.35: ref;

axiom .str.35 == $sub.ref(0, 194363);

const {:count 8} .str.15: ref;

axiom .str.15 == $sub.ref(0, 195395);

const {:count 51} .str.36: ref;

axiom .str.36 == $sub.ref(0, 196470);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const .str: ref;

axiom .str == $sub.ref(0, 197523);

const {:count 61} .str.1: ref;

axiom .str.1 == $sub.ref(0, 198608);

const {:count 61} .str.2: ref;

axiom .str.2 == $sub.ref(0, 199693);

const {:count 43} .str.3: ref;

axiom .str.3 == $sub.ref(0, 200760);

const {:count 43} .str.4: ref;

axiom .str.4 == $sub.ref(0, 201827);

const {:count 16} .str.37: ref;

axiom .str.37 == $sub.ref(0, 202867);

const {:count 23} .str.38: ref;

axiom .str.38 == $sub.ref(0, 203914);

const {:count 28} .str.39: ref;

axiom .str.39 == $sub.ref(0, 204966);

const {:count 34} .str.13: ref;

axiom .str.13 == $sub.ref(0, 206024);

const {:count 49} .str.20: ref;

axiom .str.20 == $sub.ref(0, 207097);

const {:count 25} .str.21: ref;

axiom .str.21 == $sub.ref(0, 208146);

const {:count 5} .str.22: ref;

axiom .str.22 == $sub.ref(0, 209175);

const {:count 49} .str.18: ref;

axiom .str.18 == $sub.ref(0, 210248);

const {:count 14} .str.19: ref;

axiom .str.19 == $sub.ref(0, 211286);

const {:count 27} .str.14: ref;

axiom .str.14 == $sub.ref(0, 212337);

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const ioport_resource: ref;

axiom ioport_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 30} .str.8: ref;

axiom .str.8 == $sub.ref(0, 213391);

const {:count 5} .str.9: ref;

axiom .str.9 == $sub.ref(0, 214420);

const {:count 24} .str.10: ref;

axiom .str.10 == $sub.ref(0, 215468);

const {:count 26} .str.11: ref;

axiom .str.11 == $sub.ref(0, 216518);

const {:count 5} .str.12: ref;

axiom .str.12 == $sub.ref(0, 217547);

const {:count 48} .str.16: ref;

axiom .str.16 == $sub.ref(0, 218619);

const {:count 19} .str.17: ref;

axiom .str.17 == $sub.ref(0, 219662);

const pnpacpi_protocol: ref;

axiom pnpacpi_protocol == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const platform_bus_type: ref;

axiom platform_bus_type == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 4} .str.73: ref;

axiom .str.73 == $sub.ref(0, 220690);

const {:count 4} .str.52: ref;

axiom .str.52 == $sub.ref(0, 221718);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 8} .str.6: ref;

axiom .str.6 == $sub.ref(0, 222750);

const {:count 90} .str.7: ref;

axiom .str.7 == $sub.ref(0, 223864);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 4} .str.105: ref;

axiom .str.105 == $sub.ref(0, 224892);

const {:count 7} .str.106: ref;

axiom .str.106 == $sub.ref(0, 225923);

const {:count 24} .str.112: ref;

axiom .str.112 == $sub.ref(0, 226971);

const {:count 32} .str.113: ref;

axiom .str.113 == $sub.ref(0, 228027);

const {:count 34} .str.114: ref;

axiom .str.114 == $sub.ref(0, 229085);

const {:count 29} .str.115: ref;

axiom .str.115 == $sub.ref(0, 230138);

const {:count 33} .str.116: ref;

axiom .str.116 == $sub.ref(0, 231195);

const {:count 34} .str.117: ref;

axiom .str.117 == $sub.ref(0, 232253);

const {:count 29} .str.118: ref;

axiom .str.118 == $sub.ref(0, 233306);

const {:count 29} .str.119: ref;

axiom .str.119 == $sub.ref(0, 234359);

const {:count 22} .str.122: ref;

axiom .str.122 == $sub.ref(0, 235405);

const {:count 31} .str.121: ref;

axiom .str.121 == $sub.ref(0, 236460);

const {:count 22} .str.120: ref;

axiom .str.120 == $sub.ref(0, 237506);

const {:count 27} .str.109: ref;

axiom .str.109 == $sub.ref(0, 238557);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 10} .str.93: ref;

axiom .str.93 == $sub.ref(0, 239591);

const {:count 15} .str.94: ref;

axiom .str.94 == $sub.ref(0, 240630);

const {:count 14} .str.95: ref;

axiom .str.95 == $sub.ref(0, 241668);

const {:count 41} .str.96: ref;

axiom .str.96 == $sub.ref(0, 242733);

const {:count 4} .str.97: ref;

axiom .str.97 == $sub.ref(0, 243761);

const {:count 4} .str.98: ref;

axiom .str.98 == $sub.ref(0, 244789);

const {:count 4} .str.99: ref;

axiom .str.99 == $sub.ref(0, 245817);

const {:count 4} .str.100: ref;

axiom .str.100 == $sub.ref(0, 246845);

const {:count 5} .str.101: ref;

axiom .str.101 == $sub.ref(0, 247874);

const {:count 40} .str.102: ref;

axiom .str.102 == $sub.ref(0, 248938);

const {:count 98} .str.59: ref;

axiom .str.59 == $sub.ref(0, 250060);

const {:count 53} .str.60: ref;

axiom .str.60 == $sub.ref(0, 251137);

const {:count 40} .str.61: ref;

axiom .str.61 == $sub.ref(0, 252201);

const {:count 40} .str.62: ref;

axiom .str.62 == $sub.ref(0, 253265);

const {:count 57} .str.63: ref;

axiom .str.63 == $sub.ref(0, 254346);

const {:count 48} .str.64: ref;

axiom .str.64 == $sub.ref(0, 255418);

const {:count 60} .str.65: ref;

axiom .str.65 == $sub.ref(0, 256502);

const {:count 4} .str.66: ref;

axiom .str.66 == $sub.ref(0, 257530);

const {:count 37} .str.67: ref;

axiom .str.67 == $sub.ref(0, 258591);

const {:count 5} .str.68: ref;

axiom .str.68 == $sub.ref(0, 259620);

const {:count 33} .str.69: ref;

axiom .str.69 == $sub.ref(0, 260677);

const {:count 9} .str.70: ref;

axiom .str.70 == $sub.ref(0, 261710);

const {:count 7} .str.71: ref;

axiom .str.71 == $sub.ref(0, 262741);

const {:count 31} .str.72: ref;

axiom .str.72 == $sub.ref(0, 263796);

const {:count 49} .str.91: ref;

axiom .str.91 == $sub.ref(0, 264869);

const {:count 27} .str.79: ref;

axiom .str.79 == $sub.ref(0, 265920);

const {:count 27} .str.80: ref;

axiom .str.80 == $sub.ref(0, 266971);

const {:count 27} .str.81: ref;

axiom .str.81 == $sub.ref(0, 268022);

const {:count 27} .str.82: ref;

axiom .str.82 == $sub.ref(0, 269073);

const {:count 27} .str.83: ref;

axiom .str.83 == $sub.ref(0, 270124);

const {:count 27} .str.84: ref;

axiom .str.84 == $sub.ref(0, 271175);

const {:count 27} .str.85: ref;

axiom .str.85 == $sub.ref(0, 272226);

const {:count 27} .str.86: ref;

axiom .str.86 == $sub.ref(0, 273277);

const {:count 27} .str.87: ref;

axiom .str.87 == $sub.ref(0, 274328);

const {:count 27} .str.88: ref;

axiom .str.88 == $sub.ref(0, 275379);

const {:count 27} .str.89: ref;

axiom .str.89 == $sub.ref(0, 276430);

const {:count 27} .str.90: ref;

axiom .str.90 == $sub.ref(0, 277481);

const {:count 4} .str.78: ref;

axiom .str.78 == $sub.ref(0, 278509);

const {:count 102} .str.74: ref;

axiom .str.74 == $sub.ref(0, 279635);

const {:count 93} .str.75: ref;

axiom .str.75 == $sub.ref(0, 280752);

const {:count 103} .str.76: ref;

axiom .str.76 == $sub.ref(0, 281879);

const {:count 90} .str.77: ref;

axiom .str.77 == $sub.ref(0, 282993);

const {:count 38} .str.107: ref;

axiom .str.107 == $sub.ref(0, 284055);

const {:count 39} .str.108: ref;

axiom .str.108 == $sub.ref(0, 285118);

const {:count 33} .str.103: ref;

axiom .str.103 == $sub.ref(0, 286175);

const {:count 36} .str.104: ref;

axiom .str.104 == $sub.ref(0, 287235);

const {:count 43} .str.40: ref;

axiom .str.40 == $sub.ref(0, 288302);

const {:count 34} .str.41: ref;

axiom .str.41 == $sub.ref(0, 289360);

const {:count 47} .str.42: ref;

axiom .str.42 == $sub.ref(0, 290431);

const {:count 52} .str.43: ref;

axiom .str.43 == $sub.ref(0, 291507);

const {:count 64} .str.92: ref;

axiom .str.92 == $sub.ref(0, 292595);

const acpi_disabled: ref;

axiom acpi_disabled == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 32} .str.53: ref;

axiom .str.53 == $sub.ref(0, 293651);

const {:count 44} .str.54: ref;

axiom .str.54 == $sub.ref(0, 294719);

const {:count 30} .str.55: ref;

axiom .str.55 == $sub.ref(0, 295773);

const {:count 42} .str.56: ref;

axiom .str.56 == $sub.ref(0, 296839);

const {:count 43} .str.57: ref;

axiom .str.57 == $sub.ref(0, 297906);

const {:count 3} .str.51: ref;

axiom .str.51 == $sub.ref(0, 298933);

const {:count 56} .str.58: ref;

axiom .str.58 == $sub.ref(0, 300013);

const {:count 40} .str.47: ref;

axiom .str.47 == $sub.ref(0, 301077);

const {:count 32} .str.48: ref;

axiom .str.48 == $sub.ref(0, 302133);

const {:count 49} .str.49: ref;

axiom .str.49 == $sub.ref(0, 303206);

const {:count 58} .str.50: ref;

axiom .str.50 == $sub.ref(0, 304288);

const {:count 43} .str.44: ref;

axiom .str.44 == $sub.ref(0, 305355);

const {:count 72} .str.45: ref;

axiom .str.45 == $sub.ref(0, 306451);

const {:count 106} .str.46: ref;

axiom .str.46 == $sub.ref(0, 307581);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 308613);

const {:count 3} .str.1.390: ref;

axiom .str.1.390 == $sub.ref(0, 309640);

const {:count 14} .str.391: ref;

axiom .str.391 == $sub.ref(0, 310678);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 311706);

const init_kcs_data: ref;

axiom init_kcs_data == $sub.ref(0, 312738);

procedure init_kcs_data($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation init_kcs_data($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(288, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(580, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 1000000);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, 1000000);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $r := 2;
    return;
}



const start_kcs_transaction: ref;

axiom start_kcs_transaction == $sub.ref(0, 313770);

procedure start_kcs_transaction($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation start_kcs_transaction($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $i18: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $i17: i32;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i4: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "start_kcs_transaction:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i2, 1);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i2, 272);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $M.1;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 2);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(580, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i2);
    call {:si_unique_call 5} {:cexpr "__len"} boogie_si_record_i64($i27);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(16, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 6} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p29, $p1, $i27, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i2);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i2);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(288, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 1);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, 1000000);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, 1000000);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} vslice_dummy_var_38 := printk.ref(.str.109);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32(0, $i2);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} vslice_dummy_var_40 := printk.ref(.str.111);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb19;

  $bb19:
    call $i18, $p19, $i20, $i21, $i23, $i24, $i17, vslice_dummy_var_39 := start_kcs_transaction_loop_$bb19($p1, $i2, $i18, $p19, $i20, $i21, $i23, $i24, $i17, vslice_dummy_var_39);
    goto $bb19_last;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p1, $mul.ref($i18, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} vslice_dummy_var_39 := printk.ref.i32(.str.110, $i21);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i17, 1);
    call {:si_unique_call 3} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i24 := $ult.i32($i23, $i2);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i23;
    goto $bb21_dummy;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 10);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i4 := 213;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i4 := 200;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i4 := 199;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_55;
}



const get_kcs_result: ref;

axiom get_kcs_result == $sub.ref(0, 314802);

procedure get_kcs_result($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation get_kcs_result($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} {:cexpr "get_kcs_result:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, $i2);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    call {:si_unique_call 8} {:cexpr "__len"} boogie_si_record_i64($i10);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(300, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 9} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p1, $p12, $i10, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i2, 2);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $sub.i8(0, 58));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, 2);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $sub.i8(0, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 3);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i2);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kcs_event: ref;

axiom kcs_event == $sub.ref(0, 315834);

procedure kcs_event($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation kcs_event($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i8;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i8;
  var $i79: i8;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i8;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i8;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i8;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i8;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i14: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i8;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} {:cexpr "kcs_event:arg:time"} boogie_si_record_i64($i1);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i2 := read_status($p0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 12} {:cexpr "status"} boogie_si_record_i8($i2);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i2);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i12 := check_ibf($p0, $i11, $i1);
    call {:si_unique_call 15} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i2);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i16 := $ashr.i32($i15, 6);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    call {:si_unique_call 16} {:cexpr "state"} boogie_si_record_i8($i17);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i19, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i19, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 10);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb89:
    assume $i115 == 1;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} vslice_dummy_var_43 := init_kcs_data($p0, $p117);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i14 := 5;
    goto $bb6;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i17);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i2);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i105 := check_obf($p0, $i104, $i1);
    call {:si_unique_call 50} {:cexpr "tmp___2"} boogie_si_record_i32($i105);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i2);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} clear_obf($p0, $i108);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i111 == 1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, 0);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i14 := 3;
    goto $bb6;

  $bb85:
    assume $i111 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} restart_kcs_transaction($p0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i106 == 1;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb6;

  $bb79:
    assume $i102 == 1;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} start_error_recovery($p0, .str.119);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i17);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i2);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i96 := check_obf($p0, $i95, $i1);
    call {:si_unique_call 45} {:cexpr "tmp___1"} boogie_si_record_i32($i96);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i2);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} clear_obf($p0, $i99);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} write_data($p0, 104);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, 9);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i97 == 1;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb6;

  $bb73:
    assume $i93 == 1;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} start_error_recovery($p0, .str.118);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb11:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i19, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i19, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i2);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} clear_obf($p0, $i90);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} write_data($p0, 0);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 8);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i2);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} clear_obf($p0, $i78);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i79 := read_status($p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 19} {:cexpr "status"} boogie_si_record_i8($i79);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 1);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} write_cmd($p0, 96);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, 7);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb67:
    assume $i82 == 1;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, jiffies);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(600, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i86 := $sub.i64($i83, $i85);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i87 := $slt.i64($i86, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb69:
    assume $i87 == 1;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i14 := 2;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i17);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 1);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i17);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 1);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i68 == 1);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i2);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} clear_obf($p0, $i74);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 0);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i14 := 3;
    goto $bb6;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i68 == 1;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i2);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i71 := check_obf($p0, $i70, $i1);
    call {:si_unique_call 39} {:cexpr "tmp___0"} boogie_si_record_i32($i71);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} read_next_byte($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i72 == 1;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb6;

  $bb55:
    assume $i64 == 1;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i17);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb57;

  $bb58:
    assume $i66 == 1;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} start_error_recovery($p0, .str.117);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i19, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i19, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i29 == 1);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i17);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 2);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i2);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} clear_obf($p0, $i61);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} write_next_byte($p0);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, 5);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i59 == 1;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} start_error_recovery($p0, .str.116);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb28:
    assume $i29 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i17);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 2);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i2);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} clear_obf($p0, $i53);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 1);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i56 == 1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} write_next_byte($p0);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb49:
    assume $i56 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} write_cmd($p0, 98);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 4);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    goto $bb51;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i51 == 1;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} start_error_recovery($p0, .str.115);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb26:
    assume $i28 == 1;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i17);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 2);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_42 := read_data($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i47 == 1);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} write_next_byte($p0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 3);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb43:
    assume $i47 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} write_cmd($p0, 98);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 4);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i43 == 1;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} start_error_recovery($p0, .str.114);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb24:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i30 == 1);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i17);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i2);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} clear_obf($p0, $i40);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} write_cmd($p0, 97);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 2);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i38 == 1;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} start_error_recovery($p0, .str.113);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i19, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb19;

  $bb32:
    assume $i31 == 1;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i2);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} clear_obf($p0, $i33);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i2);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 4);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i14 := 4;
    goto $bb6;

  $bb34:
    assume $i36 == 1;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i14 := 6;
    goto $bb6;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i2);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} vslice_dummy_var_41 := printk.ref.i32.i32(.str.112, $i7, $i8);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const kcs_detect: ref;

axiom kcs_detect == $sub.ref(0, 316866);

procedure kcs_detect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation kcs_detect($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i1 := read_status($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 55} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 255);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const kcs_cleanup: ref;

axiom kcs_cleanup == $sub.ref(0, 317898);

procedure kcs_cleanup($p0: ref);
  free requires assertsPassed;



implementation kcs_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    return;
}



const kcs_size: ref;

axiom kcs_size == $sub.ref(0, 318930);

procedure kcs_size() returns ($r: i32);
  free requires assertsPassed;



implementation kcs_size() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $r := 608;
    return;
}



const init_smic_data: ref;

axiom init_smic_data == $sub.ref(0, 319962);

procedure init_smic_data($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation init_smic_data($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(100, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(196, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 2000000);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $r := 3;
    return;
}



const start_smic_transaction: ref;

axiom start_smic_transaction == $sub.ref(0, 320994);

procedure start_smic_transaction($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation start_smic_transaction($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $i18: i64;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $i17: i32;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i4: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} {:cexpr "start_smic_transaction:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i2, 1);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i2, 80);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $M.2;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 2);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(196, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i2);
    call {:si_unique_call 61} {:cexpr "__len"} boogie_si_record_i64($i27);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 62} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p29, $p1, $i27, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(100, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i2);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i2);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 1);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, 2000000);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_44 := printk.ref(.str.123);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32(0, $i2);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} vslice_dummy_var_46 := printk.ref(.str.111);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb19;

  $bb19:
    call $i18, $p19, $i20, $i21, $i23, $i24, $i17, vslice_dummy_var_45 := start_smic_transaction_loop_$bb19($p1, $i2, $i18, $p19, $i20, $i21, $i23, $i24, $i17, vslice_dummy_var_45);
    goto $bb19_last;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p1, $mul.ref($i18, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_45 := printk.ref.i32(.str.110, $i21);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i17, 1);
    call {:si_unique_call 59} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i24 := $ult.i32($i23, $i2);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i23;
    goto $bb21_dummy;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 10);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i4 := 213;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i4 := 200;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i4 := 199;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_429;
}



const smic_get_result: ref;

axiom smic_get_result == $sub.ref(0, 322026);

procedure smic_get_result($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation smic_get_result($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i10: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} {:cexpr "smic_get_result:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 2);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, $i2);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    call {:si_unique_call 68} {:cexpr "__len"} boogie_si_record_i64($i28);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(108, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 69} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p1, $p30, $i28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i2, 2);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb21:
    assume $i39 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $sub.i8(0, 58));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 0);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i34 := $sle.i32($i33, 2);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb17;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $sub.i8(0, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 3);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i2);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_47 := printk.ref(.str.124);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_49 := printk.ref(.str.111);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    call $i11, $p13, $i14, $i15, $i17, $i18, $i19, $i10, vslice_dummy_var_48 := smic_get_result_loop_$bb6($p0, $p7, $i11, $p13, $i14, $i15, $i17, $i18, $i19, $i10, vslice_dummy_var_48);
    goto $bb6_last;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(108, 1)), $mul.ref($i11, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_48 := printk.ref.i32(.str.110, $i15);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i10, 1);
    call {:si_unique_call 66} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p7);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i17);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_475;
}



const smic_event: ref;

axiom smic_event == $sub.ref(0, 323058);

procedure smic_event($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation smic_event($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i8;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i32;
  var $i115: i8;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i8;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i8;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var $p151: ref;
  var $i8: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "smic_event:arg:time"} boogie_si_record_i64($i1);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 10);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i26 := read_smic_flags($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 75} {:cexpr "flags"} boogie_si_record_i8($i26);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 1);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i30 := read_smic_status($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 77} {:cexpr "status"} boogie_si_record_i8($i30);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i31 := $M.2;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 4);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i40, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i40, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i40, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i145 := $M.2;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 1);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p151, 2000000);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb114:
    assume $i147 == 1;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vslice_dummy_var_56 := printk.ref.i32(.str.139, $i149);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} start_error_recovery___0($p0, .str.140);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} vslice_dummy_var_53 := init_smic_data($p0, $p143);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i8 := 5;
    goto $bb3;

  $bb30:
    assume $i44 == 1;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i30);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 192);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i133 := read_smic_data($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 116} {:cexpr "data"} boogie_si_record_i8($i133);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i135 == 1);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, 0);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i8 := 3;
    goto $bb3;

  $bb108:
    assume $i135 == 1;
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i136 := $M.2;
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} start_error_recovery___0($p0, .str.138);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb110:
    assume $i138 == 1;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i133);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} vslice_dummy_var_55 := printk.ref.i32(.str.137, $i139);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb105:
    assume $i132 == 1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} start_error_recovery___0($p0, .str.136);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb28:
    assume $i43 == 1;
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i30);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i117, 198);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i117, 198);
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} start_error_recovery___0($p0, .str.135);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb95:
    assume $i119 == 1;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} read_next_byte___0($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} write_smic_control($p0, 70);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i26);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i122 := $or.i32($i121, 1);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i8($i122);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} write_smic_flags($p0, $i123);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, 9);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i117, 197);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb97;

  $bb98:
    assume $i120 == 1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i125 := $sext.i8.i32($i26);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i125, 0);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i126 == 1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb101:
    assume $i126 == 1;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} read_next_byte___0($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} write_smic_control($p0, 69);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i26);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i128 := $or.i32($i127, 1);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i128);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} write_smic_flags($p0, $i129);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, 8);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb100;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i40, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i40, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i47 == 1);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i30);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 196);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i111 := $sext.i8.i32($i26);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i111, 0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i112 == 1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb89:
    assume $i112 == 1;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} read_next_byte___0($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} write_smic_control($p0, 69);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i26);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i113, 1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i114);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} write_smic_flags($p0, $i115);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, 8);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i110 == 1;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} start_error_recovery___0($p0, .str.134);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb37:
    assume $i47 == 1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i103 := $sext.i8.i32($i26);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i104 == 1);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb83:
    assume $i104 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} write_smic_control($p0, 68);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i26);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i106 := $or.i32($i105, 1);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} write_smic_flags($p0, $i107);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, 7);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb35:
    assume $i46 == 1;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i30);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 195);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i94 := read_smic_data($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 98} {:cexpr "data"} boogie_si_record_i8($i94);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i96 == 1);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, 6);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb77:
    assume $i96 == 1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i97 := $M.2;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} start_error_recovery___0($p0, .str.133);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb79:
    assume $i99 == 1;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i94);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} vslice_dummy_var_54 := printk.ref.i32(.str.132, $i100);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb74:
    assume $i93 == 1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} start_error_recovery___0($p0, .str.131);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb24:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i50 == 1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i30);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 194);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i26);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 64);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i83 == 1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb68:
    assume $i83 == 1;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(100, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i86 == 1);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} write_smic_control($p0, 66);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, 4);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} write_next_byte___0($p0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i26);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i90 := $or.i32($i89, 1);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} write_smic_flags($p0, $i91);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb70:
    assume $i86 == 1;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} write_smic_control($p0, 67);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 5);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb65:
    assume $i80 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} start_error_recovery___0($p0, .str.130);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb43:
    assume $i50 == 1;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i30);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 193);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i26);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 64);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i70 == 1);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb59:
    assume $i70 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(100, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 1);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i73 == 1);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} write_smic_control($p0, 66);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 4);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} write_next_byte___0($p0);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i26);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i76, 1);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} write_smic_flags($p0, $i78);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb61:
    assume $i73 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} write_smic_control($p0, 67);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 5);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb56:
    assume $i67 == 1;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} start_error_recovery___0($p0, .str.129);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb41:
    assume $i49 == 1;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i30);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 192);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} write_smic_control($p0, 65);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} write_next_byte___0($p0);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i26);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 1);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} write_smic_flags($p0, $i64);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 3);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb53:
    assume $i61 == 1;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} start_error_recovery___0($p0, .str.128);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb39:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i51 == 1);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} write_smic_control($p0, 64);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i26);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, 1);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} write_smic_flags($p0, $i58);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 2);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb45:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb34;

  $bb47:
    assume $i52 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i26);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 4);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i8 := 4;
    goto $bb3;

  $bb49:
    assume $i55 == 1;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i8 := 6;
    goto $bb3;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i26);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i30);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} vslice_dummy_var_52 := printk.ref.i32.i32.i32(.str.127, $i35, $i36, $i37);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i12 := $M.2;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 4);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $sle.i64($i1, 1999999);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i21 := $sub.i64($i20, $i1);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i25 := $slt.i64($i24, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} start_error_recovery___0($p0, .str.126);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} vslice_dummy_var_51 := printk.ref.i64.i64(.str.125, $i16, $i1);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} vslice_dummy_var_50 := init_smic_data($p0, $p6);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i8 := 5;
    goto $bb3;
}



const smic_detect: ref;

axiom smic_detect == $sub.ref(0, 324090);

procedure smic_detect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation smic_detect($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i1 := read_smic_flags($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 122} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 255);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const smic_cleanup: ref;

axiom smic_cleanup == $sub.ref(0, 325122);

procedure smic_cleanup($p0: ref);
  free requires assertsPassed;



implementation smic_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    return;
}



const smic_size: ref;

axiom smic_size == $sub.ref(0, 326154);

procedure smic_size() returns ($r: i32);
  free requires assertsPassed;



implementation smic_size() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $r := 208;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 327186);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const read_smic_flags: ref;

axiom read_smic_flags == $sub.ref(0, 328218);

procedure read_smic_flags($p0: ref) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation read_smic_flags($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 123} $i7 := devirtbounce($p4, $p6, 2);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 124} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 329250);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 125} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 126} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 128} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 129} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 130} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i32.i32.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i32.i32.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 132} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 1} true;
    call {:si_unique_call 135} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 1} true;
    call {:si_unique_call 137} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 138} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.i64.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i64, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.i64.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: i64, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 144} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i32($p0: ref, p.1: i64, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i32($p0: ref, p.1: i64, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 1} true;
    call {:si_unique_call 147} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64, p.4: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 1} true;
    call {:si_unique_call 149} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 150} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64($p0: ref, p.1: i64, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 1} true;
    call {:si_unique_call 153} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 154} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const start_error_recovery___0: ref;

axiom start_error_recovery___0 == $sub.ref(0, 330282);

procedure start_error_recovery___0($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation start_error_recovery___0($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(196, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(196, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(196, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 3);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(100, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 1);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, 2000000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i9 := $M.2;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 10);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vslice_dummy_var_57 := printk.ref.ref(.str.141, $p1);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const read_smic_status: ref;

axiom read_smic_status == $sub.ref(0, 331314);

procedure read_smic_status($p0: ref) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation read_smic_status($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 156} $i7 := devirtbounce($p4, $p6, 1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 157} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const write_smic_control: ref;

axiom write_smic_control == $sub.ref(0, 332346);

procedure write_smic_control($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation write_smic_control($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} {:cexpr "write_smic_control:arg:control"} boogie_si_record_i8($i1);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 159} devirtbounce.1($p5, $p7, 1, $i9);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    return;
}



const write_smic_flags: ref;

axiom write_smic_flags == $sub.ref(0, 333378);

procedure write_smic_flags($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation write_smic_flags($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} {:cexpr "write_smic_flags:arg:flags"} boogie_si_record_i8($i1);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 161} devirtbounce.1($p5, $p7, 2, $i9);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    return;
}



const write_next_byte___0: ref;

axiom write_next_byte___0 == $sub.ref(0, 334410);

procedure write_next_byte___0($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation write_next_byte___0($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(16, 1)), $mul.ref($i3, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} write_si_sm_data($p0, $i8);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(96, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(100, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(100, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    return;
}



const read_smic_data: ref;

axiom read_smic_data == $sub.ref(0, 335442);

procedure read_smic_data($p0: ref) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation read_smic_data($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 163} $i7 := devirtbounce($p4, $p6, 0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 164} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const read_next_byte___0: ref;

axiom read_next_byte___0 == $sub.ref(0, 336474);

procedure read_next_byte___0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation read_next_byte___0($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var vslice_dummy_var_58: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 79);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i6 := read_smic_data($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(108, 1)), $mul.ref($i9, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i6);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(188, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vslice_dummy_var_58 := read_smic_data($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const write_si_sm_data: ref;

axiom write_si_sm_data == $sub.ref(0, 337506);

procedure write_si_sm_data($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation write_si_sm_data($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} {:cexpr "write_si_sm_data:arg:data"} boogie_si_record_i8($i1);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 168} devirtbounce.1($p5, $p7, 0, $i9);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 338538);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const bt_init_data: ref;

axiom bt_init_data == $sub.ref(0, 339570);

procedure bt_init_data($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bt_init_data($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 169} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p2, 0, 616, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i5, $i6);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, 5000000);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 2);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $r := 3;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(4, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bt_start_transaction: ref;

axiom bt_start_transaction == $sub.ref(0, 340602);

procedure bt_start_transaction($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bt_start_transaction($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i18: i1;
  var $i20: i64;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i25: i32;
  var $i26: i1;
  var $i19: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $p33: ref;
  var $i34: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $p44: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i4: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} {:cexpr "bt_start_transaction:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i2, 1);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i2, 272);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 14);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $M.3;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 2);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i2);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i31);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i34);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(4, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    call {:si_unique_call 176} {:cexpr "tmp"} boogie_si_record_i8($i38);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(4, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 1);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(4, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i43);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, $i38);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i2, 1);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    call {:si_unique_call 177} {:cexpr "__len"} boogie_si_record_i64($i48);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(3, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 178} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p51, $p52, $i48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i2, 2);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(584, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(588, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, 0);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 0);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i60);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} force_result($p0, $sub.i8(0, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} vslice_dummy_var_59 := printk.ref(.str.142);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i2, 2);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_60 := printk.ref.i32(.str.143, $i16);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32(0, $i2);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} vslice_dummy_var_62 := printk.ref(.str.111);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb19;

  $bb19:
    call $i20, $p21, $i22, $i23, $i25, $i26, $i19, vslice_dummy_var_61 := bt_start_transaction_loop_$bb19($p1, $i2, $i20, $p21, $i22, $i23, $i25, $i26, $i19, vslice_dummy_var_61);
    goto $bb19_last;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref($i20, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_61 := printk.ref.i32(.str.110, $i23);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i19, 1);
    call {:si_unique_call 174} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i25, $i2);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i26 == 1);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i25;
    goto $bb21_dummy;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i4 := 213;
    goto $bb3;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i4 := 192;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i4 := 200;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i4 := 199;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1075;
}



const bt_get_result: ref;

axiom bt_get_result == $sub.ref(0, 341634);

procedure bt_get_result($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bt_get_result($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $p10: ref;
  var $i11: i8;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i21: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i1;
  var $i34: i64;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i39: i32;
  var $i40: i1;
  var $i33: i32;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} {:cexpr "bt_get_result:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, $sub.i32(0, 2));
    call {:si_unique_call 181} {:cexpr "msg_len"} boogie_si_record_i32($i5);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i5, 2);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i5, 272);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(1, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i11);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(3, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i8, $i2);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i8, $sub.i32(0, 2));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    call {:si_unique_call 183} {:cexpr "__len"} boogie_si_record_i64($i23);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(4, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 184} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p24, $p27, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    assume {:verifier.code 0} true;
    $i21 := $i8;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i28 := $M.3;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 2);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} vslice_dummy_var_63 := printk.ref.i32(.str.144, $i21);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32(0, $i21);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} vslice_dummy_var_65 := printk.ref(.str.111);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb18;

  $bb18:
    call $i34, $p35, $i36, $i37, $i39, $i40, $i33, vslice_dummy_var_64 := bt_get_result_loop_$bb18($p1, $i21, $i34, $p35, $i36, $i37, $i39, $i40, $i33, vslice_dummy_var_64);
    goto $bb18_last;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p1, $mul.ref($i34, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_64 := printk.ref.i32(.str.110, $i37);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i33, 1);
    call {:si_unique_call 187} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, $i21);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i39;
    goto $bb20_dummy;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p1, $mul.ref(2, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $sub.i8(0, 58));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i21 := 3;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} force_result($p0, $sub.i8(0, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i8 := 3;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1181;
}



const bt_event: ref;

axiom bt_event == $sub.ref(0, 342666);

procedure bt_event($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.17, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation bt_event($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $i200: i32;
  var $p201: ref;
  var $p202: ref;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $p209: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i257: i64;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $i269: i32;
  var $p270: ref;
  var $p271: ref;
  var $i273: i1;
  var $p274: ref;
  var $i275: i8;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i279: i8;
  var $i280: i32;
  var $p281: ref;
  var $p282: ref;
  var $i283: i8;
  var $i284: i32;
  var $i285: i32;
  var $i286: i64;
  var $p287: ref;
  var $p288: ref;
  var $i289: i8;
  var $i290: i32;
  var $p291: ref;
  var $p293: ref;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $i299: i64;
  var $p300: ref;
  var $i301: i32;
  var $p303: ref;
  var $i304: i64;
  var $p305: ref;
  var $i306: i32;
  var $i307: i8;
  var $i308: i32;
  var $i40: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 191} {:cexpr "bt_event:arg:time"} boogie_si_record_i64($i1);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 192} $i10 := devirtbounce($p7, $p9, 0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 193} {:cexpr "status"} boogie_si_record_i8($i10);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(588, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i10);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i12, $i13);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(588, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i16 := $M.3;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 4);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i36 := $ule.i32($i35, 1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i61, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i61, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i61, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i61, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i10);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i307 := $trunc.i32.i8($i306);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i308 := error_recovery($p0, $i307, $sub.i8(0, 1));
    call {:si_unique_call 235} {:cexpr "tmp___3"} boogie_si_record_i32($i308);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i40 := $i308;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb35:
    assume $i66 == 1;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i206 := $sext.i8.i32($i10);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i207 := $sge.i32($i206, 0);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  $bb93:
    assume $i207 == 1;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} reset_flags($p0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} vslice_dummy_var_69 := bt_init_data($p0, $p209);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i65 == 1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p268 := $bitcast.ref.ref($p2);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i269 := bt_get_result($p0, $p268, 8);
    call {:si_unique_call 201} {:cexpr "i"} boogie_si_record_i32($i269);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.0, $p270);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} vslice_dummy_var_67 := bt_init_data($p0, $p271);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i269, 8);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_70 := printk.ref(.str.146);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(596, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i294, 0);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i298 := $load.i64($M.0, $p297);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i299 := $sdiv.i64($i298, 1000000);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.0, $p300);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_71 := printk.ref.i64.i32(.str.147, $i299, $i301);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i304 := $load.i64($M.0, $p303);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p305, $i304);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb12;

  $bb105:
    assume $i295 == 1;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(596, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p296, 1);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume $i273 == 1;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i275 := $load.i8($M.6, $p274);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i32($i275);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb101;

  $bb102:
    assume $i277 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i279 := $load.i8($M.6, $p278);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i280 := $zext.i8.i32($i279);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(596, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p281, $i280);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.6, $p282);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i32($i283);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i285 := $mul.i32($i284, 1000000);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i286 := $sext.i32.i64($i285);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p287, $i286);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i289 := $load.i8($M.6, $p288);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i290 := $zext.i8.i32($i289);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p291, $i290);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb31:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i61, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i67 == 1);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(596, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p260, 1);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p261, 24);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p262, 54);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p263, 0);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p3);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} vslice_dummy_var_68 := bt_start_transaction($p0, $p264, 2);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p266, 13);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p267, 1);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  $bb38:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i61, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb37;

  $bb40:
    assume $i68 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p254, 0);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(588, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p255, 0);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i257 := $load.i64($M.0, $p256);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p258, $i257);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p259, 1);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  $bb29:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i61, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i61, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i70 == 1);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i251 := $load.i64($M.0, $p250);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i252 := $sgt.i64($i251, 0);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} drain_BMC2HOST($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p253, 10);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i252 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  $bb44:
    assume $i70 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p213, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    call {:si_unique_call 206} devirtbounce.1($p215, $p217, 0, 1);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p219, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    call {:si_unique_call 207} devirtbounce.1($p221, $p223, 1, 3);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p225, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    call {:si_unique_call 208} devirtbounce.1($p227, $p229, 1, 24);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p231, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    call {:si_unique_call 209} devirtbounce.1($p233, $p235, 1, 42);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p237, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    call {:si_unique_call 210} devirtbounce.1($p239, $p241, 1, 3);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p243, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    call {:si_unique_call 211} devirtbounce.1($p245, $p247, 0, 4);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p248, 6000000);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p249, 9);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  $bb42:
    assume $i69 == 1;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} reset_flags($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} drain_BMC2HOST($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p211, 8);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i61, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i61, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i73 == 1);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i10);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i175, 64);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p185, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    call {:si_unique_call 225} devirtbounce.1($p187, $p189, 0, 2);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i190 := read_all_bytes($p0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 227} {:cexpr "i"} boogie_si_record_i32($i190);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    call {:si_unique_call 228} devirtbounce.1($p194, $p196, 0, 64);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i190, 0);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p201, $i200);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i205 := (if $i204 == 1 then 3 else 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i40 := $i205;
    goto $bb12;

  $bb90:
    assume $i197 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, 4);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb12;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb87:
    assume $i177 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p179, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    call {:si_unique_call 224} devirtbounce.1($p181, $p183, 0, 64);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb50:
    assume $i73 == 1;
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i10);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, 8);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p174, 6);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb12;

  $bb84:
    assume $i167 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p169, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    call {:si_unique_call 223} devirtbounce.1($p171, $p173, 0, 8);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  $bb48:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i74 == 1);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i10);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i149, 8);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 0);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    call {:si_unique_call 221} devirtbounce.1($p155, $p157, 0, 64);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p159, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    call {:si_unique_call 222} devirtbounce.1($p161, $p163, 0, 8);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, 5);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb12;

  $bb81:
    assume $i151 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  $bb52:
    assume $i74 == 1;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i10);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 132);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, 4);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb12;

  $bb78:
    assume $i147 == 1;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  $bb46:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i76 == 1);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i10);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 64);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    call {:si_unique_call 218} devirtbounce.1($p135, $p137, 0, 1);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} write_all_bytes($p0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    call {:si_unique_call 220} devirtbounce.1($p141, $p143, 0, 4);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, 3);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb12;

  $bb75:
    assume $i125 == 1;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    call {:si_unique_call 217} devirtbounce.1($p129, $p131, 0, 64);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb56:
    assume $i76 == 1;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i10);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 132);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    call {:si_unique_call 214} $i112 := devirtbounce($p109, $p111, 0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 215} {:cexpr "tmp___2"} boogie_si_record_i8($i112);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 64);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, 2);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb12;

  $bb72:
    assume $i115 == 1;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    call {:si_unique_call 216} devirtbounce.1($p119, $p121, 0, 64);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i105 == 1;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  $bb54:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i61, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb37;

  $bb58:
    assume $i77 == 1;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i10);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 16);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i10);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 64);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(596, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p102, $i101);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i40 := 4;
    goto $bb12;

  $bb66:
    assume $i98 == 1;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, 12);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb12;

  $bb63:
    assume $i89 == 1;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    call {:si_unique_call 213} devirtbounce.1($p93, $p95, 0, 64);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i80 == 1;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    call {:si_unique_call 212} devirtbounce.1($p84, $p86, 0, 16);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i40 := 6;
    goto $bb12;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i46 := $ule.i32($i45, 10);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb16;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i49 := $sub.i64($i48, $i1);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, $i49);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i53 := $slt.i64($i52, 0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i53 == 1;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i56 := $ule.i32($i55, 6);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb21;

  $bb22:
    assume $i56 == 1;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i10);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i59 := error_recovery($p0, $i58, $sub.i8(0, 61));
    call {:si_unique_call 199} {:cexpr "tmp___1"} boogie_si_record_i32($i59);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i40 := $i59;
    goto $bb12;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i10);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 8);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb9;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} drain_BMC2HOST($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb12;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 11);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb3;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i10);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p24 := status2txt($i23);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $p30 := state2txt($i29);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} vslice_dummy_var_66 := printk.ref.ref.ref.i64.i64(.str.145, $p30, $p24, $i32, $i1);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const bt_detect: ref;

axiom bt_detect == $sub.ref(0, 343698);

procedure bt_detect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $CurrAddr, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation bt_detect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 236} $i7 := devirtbounce($p4, $p6, 0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 237} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 255);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} reset_flags($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 238} $i16 := devirtbounce($p13, $p15, 2);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 239} {:cexpr "tmp___0"} boogie_si_record_i8($i16);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 255);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb5;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const bt_cleanup: ref;

axiom bt_cleanup == $sub.ref(0, 344730);

procedure bt_cleanup($p0: ref);
  free requires assertsPassed;



implementation bt_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    return;
}



const bt_size: ref;

axiom bt_size == $sub.ref(0, 345762);

procedure bt_size() returns ($r: i32);
  free requires assertsPassed;



implementation bt_size() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $r := 616;
    return;
}



const reset_flags: ref;

axiom reset_flags == $sub.ref(0, 346794);

procedure reset_flags($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $CurrAddr, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation reset_flags($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 245} $i20 := devirtbounce($p17, $p19, 0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 246} {:cexpr "tmp___1"} boogie_si_record_i8($i20);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 64);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    call {:si_unique_call 248} devirtbounce.1($p33, $p35, 0, 1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    call {:si_unique_call 249} devirtbounce.1($p39, $p41, 0, 16);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    call {:si_unique_call 250} devirtbounce.1($p45, $p47, 2, $sub.i8(0, 128));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 247} devirtbounce.1($p27, $p29, 0, 64);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 241} $i9 := devirtbounce($p6, $p8, 0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 242} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $p12 := status2txt($i11);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_72 := printk.ref.ref(.str.188, $p12);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const status2txt: ref;

axiom status2txt == $sub.ref(0, 347826);

procedure status2txt($i0: i8) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation status2txt($i0: i8) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var vslice_dummy_var_73: ref;
  var vslice_dummy_var_74: ref;
  var vslice_dummy_var_75: ref;
  var vslice_dummy_var_76: ref;
  var vslice_dummy_var_77: ref;
  var vslice_dummy_var_78: ref;
  var vslice_dummy_var_79: ref;
  var vslice_dummy_var_80: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 252} {:cexpr "status2txt:arg:status"} boogie_si_record_i8($i0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} vslice_dummy_var_73 := strcpy($p2, .str.148);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i0);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 64);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i0);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 32);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 16);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 8);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 4);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} vslice_dummy_var_80 := strcat($p33, .str.155);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $r := $p35;
    return;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p1);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_79 := strcat($p31, .str.154);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} vslice_dummy_var_78 := strcat($p26, .str.153);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_77 := strcat($p21, .str.152);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} vslice_dummy_var_76 := strcat($p16, .str.151);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} vslice_dummy_var_75 := strcat($p11, .str.150);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} vslice_dummy_var_74 := strcat($p6, .str.149);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 348858);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const strcat: ref;

axiom strcat == $sub.ref(0, 349890);

procedure strcat($p0: ref, $p1: ref) returns ($r: ref);



const state2txt: ref;

axiom state2txt == $sub.ref(0, 350922);

procedure state2txt($i0: i8) returns ($r: ref);
  free requires assertsPassed;



implementation state2txt($i0: i8) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "state2txt:arg:state"} boogie_si_record_i8($i0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p18 := .str.170;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb10:
    assume $i6 == 1;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p18 := .str.167;
    goto $bb35;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p18 := .str.169;
    goto $bb35;

  $bb6:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p18 := .str.168;
    goto $bb35;

  $bb13:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb12;

  $bb15:
    assume $i8 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p18 := .str.166;
    goto $bb35;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p18 := .str.165;
    goto $bb35;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p18 := .str.164;
    goto $bb35;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p18 := .str.163;
    goto $bb35;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i13 == 1);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p18 := .str.162;
    goto $bb35;

  $bb25:
    assume $i13 == 1;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p18 := .str.161;
    goto $bb35;

  $bb23:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i14 == 1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p18 := .str.160;
    goto $bb35;

  $bb27:
    assume $i14 == 1;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p18 := .str.159;
    goto $bb35;

  $bb21:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i16 == 1);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p18 := .str.158;
    goto $bb35;

  $bb31:
    assume $i16 == 1;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p18 := .str.157;
    goto $bb35;

  $bb29:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb12;

  $bb33:
    assume $i17 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p18 := .str.156;
    goto $bb35;
}



const drain_BMC2HOST: ref;

axiom drain_BMC2HOST == $sub.ref(0, 351954);

procedure drain_BMC2HOST($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr, $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation drain_BMC2HOST($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i8;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i72: i32;
  var $i73: i1;
  var $i64: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var vslice_dummy_var_81: i8;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i8;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 262} $i7 := devirtbounce($p4, $p6, 0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 263} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 8);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 264} devirtbounce.1($p14, $p16, 0, 64);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 265} devirtbounce.1($p20, $p22, 0, 8);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    call {:si_unique_call 266} vslice_dummy_var_81 := devirtbounce($p26, $p28, 0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    call {:si_unique_call 267} devirtbounce.1($p33, $p35, 0, 8);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    call {:si_unique_call 268} devirtbounce.1($p39, $p41, 0, 2);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i42 := $M.3;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    call {:si_unique_call 273} $i61 := devirtbounce($p58, $p60, 1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 274} {:cexpr "tmp___2"} boogie_si_record_i8($i61);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    call {:si_unique_call 275} {:cexpr "size"} boogie_si_record_i32($i62);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32(0, $i62);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    call {:si_unique_call 278} devirtbounce.1($p77, $p79, 0, 64);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i80 := $M.3;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i81 == 1;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i62, 1);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} vslice_dummy_var_84 := printk.ref.i32(.str.172, $i82);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i63 == 1;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i64 := 0;
    goto $bb11;

  $bb11:
    call $p65, $p66, $p67, $p68, $p69, $p70, $i72, $i73, $i64, vslice_dummy_var_83 := drain_BMC2HOST_loop_$bb11($p0, $i62, $p65, $p66, $p67, $p68, $p69, $p70, $i72, $i73, $i64, vslice_dummy_var_83);
    goto $bb11_last;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    call {:si_unique_call 276} vslice_dummy_var_83 := devirtbounce($p68, $p70, 1);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i64, 1);
    call {:si_unique_call 277} {:cexpr "i"} boogie_si_record_i32($i72);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, $i62);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i73 == 1);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i64 := $i72;
    goto $bb13_dummy;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i43 == 1;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    call {:si_unique_call 269} $i50 := devirtbounce($p47, $p49, 0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 270} {:cexpr "tmp___0"} boogie_si_record_i8($i50);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p53 := status2txt($i52);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_82 := printk.ref.ref(.str.171, $p53);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1851;
}



const error_recovery: ref;

axiom error_recovery == $sub.ref(0, 352986);

procedure error_recovery($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation error_recovery($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i8;
  var $i61: i32;
  var $i62: i8;
  var $i35: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} {:cexpr "error_recovery:arg:status"} boogie_si_record_i8($i1);
    call {:si_unique_call 281} {:cexpr "error_recovery:arg:cCode"} boogie_si_record_i8($i2);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(576, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i4);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 195);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := .str.174;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p11 := status2txt($i10);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p17 := state2txt($i16);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} vslice_dummy_var_85 := printk.ref.ref.ref.ref(.str.175, $p8, $p17, $p11);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(584, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(584, 1));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(584, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i24, $i26);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_87 := printk.ref.i32(.str.177, $i37);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(588, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i41 == 1);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(4, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i50 := $sle.i32($i45, $i49);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 195);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i60 := $i2;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} force_result($p0, $i62);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i35 := 3;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb17:
    assume $i55 == 1;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i32($i1);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i2;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb22;

  $bb19:
    assume $i57 == 1;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 14);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i59 := $sub.i8(0, 64);
    goto $bb21;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} vslice_dummy_var_89 := printk.ref(.str.179);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 7);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb8;

  $bb10:
    assume $i41 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_88 := printk.ref(.str.178);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(608, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(584, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i29, $i31);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_86 := printk.ref.i32(.str.176, $i32);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 10);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb8;

  $bb2:
    assume $i7 == 1;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p8 := .str.173;
    goto $bb4;
}



const write_all_bytes: ref;

axiom write_all_bytes == $sub.ref(0, 354018);

procedure write_all_bytes($p0: ref);
  free requires assertsPassed;



implementation write_all_bytes($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i13: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i27: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 2);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb15;

  $bb15:
    call $p28, $p29, $p30, $p31, $p32, $p33, $i34, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i27 := write_all_bytes_loop_$bb15($p0, $p24, $p28, $p29, $p30, $p31, $p32, $p33, $i34, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $i27);
    goto $bb15_last;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i27);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref($i34, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    call {:si_unique_call 294} devirtbounce.1($p31, $p33, 1, $i39);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i27, 1);
    call {:si_unique_call 295} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p24);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, $i40);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i40;
    goto $bb17_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(4, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_90 := printk.ref.i32.i32(.str.180, $i5, $i8);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 0);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} vslice_dummy_var_92 := printk.ref(.str.111);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    call $i14, $p16, $i17, $i18, $i20, $i21, $i22, $i13, vslice_dummy_var_91 := write_all_bytes_loop_$bb6($p0, $p10, $i14, $p16, $i17, $i18, $i20, $i21, $i22, $i13, vslice_dummy_var_91);
    goto $bb6_last;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref($i14, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} vslice_dummy_var_91 := printk.ref.i32(.str.110, $i18);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i13, 1);
    call {:si_unique_call 292} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p10);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, $i20);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb8_dummy;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2001;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1980;
}



const read_all_bytes: ref;

axiom read_all_bytes == $sub.ref(0, 355050);

procedure read_all_bytes($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation read_all_bytes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $p9: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i32: i8;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i68: i32;
  var $i69: i64;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i67: i8;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i32;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $p139: ref;
  var $i140: i8;
  var $i141: i32;
  var $i28: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 296} $i7 := devirtbounce($p4, $p6, 1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(0, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i7);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(0, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 3);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i17 == 1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 271);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i31 := $sle.i32(1, $i30);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i54 := $M.3;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 2);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(3, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i88, $i92);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i114 := $M.3;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 2);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb41:
    assume $i116 == 1;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i120, 4);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.0, $p127);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(1, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(2, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(3, 1));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i140);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_97 := printk.ref.i32.i32.i32.i32.i32.i32(.str.187, $i121, $i125, $i129, $i133, $i137, $i141);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb33:
    assume $i93 == 1;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(2, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i97, $i101);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb35;

  $bb36:
    assume $i102 == 1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(1, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i111 := $xor.i32($i106, $i110);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 248);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb35;

  $bb38:
    assume $i113 == 1;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb9;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    call {:si_unique_call 300} {:cexpr "max"} boogie_si_record_i32($i58);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(2, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vslice_dummy_var_94 := printk.ref.i32.i32(.str.182, $i58, $i62);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32($i58, 16);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $i58;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32(0, $i65);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, $i65);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p83 := (if $i82 == 1 then .str.185 else .str.186);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} vslice_dummy_var_96 := printk.ref.ref(.str.184, $p83);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i66 == 1;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb27;

  $bb27:
    call $i68, $i69, $p71, $i72, $i73, $i75, $i76, $i77, $i78, $i79, $i67, vslice_dummy_var_95 := read_all_bytes_loop_$bb27($p0, $i65, $i68, $i69, $p71, $i72, $i73, $i75, $i76, $i77, $i78, $i79, $i67, vslice_dummy_var_95);
    goto $bb27_last;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref($i69, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} vslice_dummy_var_95 := printk.ref.i32(.str.183, $i73);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i67);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    call {:si_unique_call 303} {:cexpr "i"} boogie_si_record_i8($i77);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, $i65);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i67 := $i77;
    goto $bb29_dummy;

  $bb21:
    assume $i64 == 1;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i65 := 16;
    goto $bb23;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb14;

  $bb14:
    call $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $i32 := read_all_bytes_loop_$bb14($p0, $p29, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $i32);
    goto $bb14_last;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    call {:si_unique_call 298} $i39 := devirtbounce($p36, $p38, 1);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i32);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref($i41, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i39);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i32);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    call {:si_unique_call 299} {:cexpr "i"} boogie_si_record_i8($i46);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p29);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i49 := $sle.i32($i47, $i48);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i32 := $i46;
    goto $bb16_dummy;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i21 := $M.3;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 2);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(568, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} vslice_dummy_var_93 := printk.ref.i32(.str.181, $i25);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2109;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2063;
}



const force_result: ref;

axiom force_result == $sub.ref(0, 356082);

procedure force_result($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation force_result($p0: ref, $i1: i8)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $p16: ref;
  var $p18: ref;
  var $i19: i8;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} {:cexpr "force_result:arg:completion_code"} boogie_si_record_i8($i1);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(0, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 4);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 4);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(1, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i9);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(2, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i14);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(3, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i19);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(4, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i1);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(564, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 5);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 357114);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ipmi_pci_probe: ref;

axiom ipmi_pci_probe == $sub.ref(0, 358146);

procedure ipmi_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ipmi_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $i70: i32;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i9: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(68, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 255);
    call {:si_unique_call 307} {:cexpr "class_type"} boogie_si_record_i32($i4);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $p5 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 6);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(144, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vslice_dummy_var_98 := _dev_info.ref.ref($p11, .str.37);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p6);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} kfree($p20);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(144, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_99 := _dev_info.ref.ref.i32($p21, .str.38, $i4);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 2);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i23 := pci_enable_device($p0);
    call {:si_unique_call 311} {:cexpr "rv"} boogie_si_record_i32($i23);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(304, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, ipmi_pci_cleanup);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(312, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p0);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(1176, 1)), $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 256);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, mem_setup);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(1176, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i46);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 1);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 1);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(1172, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(144, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p62);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p6);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} pci_set_drvdata($p0, $p64);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(144, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(1176, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} vslice_dummy_var_101 := _dev_info.ref.ref.ref.i32.i32.i32($p65, .str.13, $p67, $i70, $i73, $i75);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i77 := add_smi($p6);
    call {:si_unique_call 319} {:cexpr "tmp___0"} boogie_si_record_i32($i77);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb26:
    assume $i78 == 1;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p6);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} kfree($p79);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i60 == 1;
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, std_irq_setup);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, port_setup);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(144, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_100 := dev_err.ref.ref($p25, .str.39);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p6);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} kfree($p27);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i9 := $i23;
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;
}



const ipmi_pci_remove: ref;

axiom ipmi_pci_remove == $sub.ref(0, 359178);

procedure ipmi_pci_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.5, $M.20, $M.22, $M.9, $M.11, $M.13, $M.15, $M.26, $M.28, $M.30, $M.32, $CurrAddr, $M.43, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation ipmi_pci_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} cleanup_one_si($p2);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ipmi_pci_suspend: ref;

axiom ipmi_pci_suspend == $sub.ref(0, 360210);

procedure ipmi_pci_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation ipmi_pci_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p3, $i1);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ipmi_pci_resume: ref;

axiom ipmi_pci_resume == $sub.ref(0, 361242);

procedure ipmi_pci_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ipmi_pci_resume($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 362274);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(144, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const cleanup_one_si: ref;

axiom cleanup_one_si == $sub.ref(0, 363306);

procedure cleanup_one_si($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.5, $M.20, $M.22, $M.9, $M.11, $M.13, $M.15, $M.26, $M.28, $M.30, $M.32, $CurrAddr, $M.43, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation cleanup_one_si($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var vslice_dummy_var_102: i64;
  var vslice_dummy_var_103: i64;
  var vslice_dummy_var_104: i64;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} list_del($p3);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(488, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} atomic_inc($p4);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} wait_for_timer_and_thread($p0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} ldv_spin_lock_check();
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $p6, $p7, $p9, $p10, $i11, $i12, $i13, $i14, vslice_dummy_var_102 := cleanup_one_si_loop_$bb5($p0, $p5, $p6, $p7, $p9, $p10, $i11, $i12, $i13, $i14, vslice_dummy_var_102);
    goto $bb5_last;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p5);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} disable_si_irq($p0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} spin_unlock_irqrestore($p15, $u0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call $p17, $p19, $p20, $i21, $i22, $i23, $i24, vslice_dummy_var_103 := cleanup_one_si_loop_$bb13($p0, $p16, $p17, $p19, $p20, $i21, $i22, $i23, $i24, vslice_dummy_var_103);
    goto $bb13_last;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i22 == 1);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p16);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    call $p32, $p34, $p35, $i36, $i37, $i38, $i39, vslice_dummy_var_104 := cleanup_one_si_loop_$bb24($p0, $p31, $p32, $p34, $p35, $i36, $i37, $i38, $i39, vslice_dummy_var_104);
    goto $bb24_last;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i37 == 1);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p31);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} kfree($p62);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(304, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(536, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p0);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} kfree($p80);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb47:
    assume $i77 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(528, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} platform_device_unregister($p79);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i72 == 1;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    call {:si_unique_call 346} devirtbounce.2($p74, $p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i66 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(304, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    call {:si_unique_call 345} devirtbounce.2($p68, $p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i53 == 1;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    call {:si_unique_call 343} devirtbounce.3($p57, $p59);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i48 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} vslice_dummy_var_105 := printk.ref.i32(.str.36, $i47);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i43 == 1;
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i46 := ipmi_unregister_smi($p45);
    call {:si_unique_call 341} {:cexpr "rv"} boogie_si_record_i32($i46);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p0);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} poll($p32);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_104 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto corral_source_split_2397_dummy;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb27;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    call {:si_unique_call 337} devirtbounce.2($p30, $p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} poll($p17);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_103 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto corral_source_split_2373_dummy;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb16;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} spin_unlock_irqrestore($p6, $u0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} poll($p7);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} vslice_dummy_var_102 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} ldv_spin_lock_check();
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto corral_source_split_2355_dummy;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb8;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_2397_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2390;

  corral_source_split_2373_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2366;

  corral_source_split_2355_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2345;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 364338);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 365370);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 349} devirtbounce.4(0, $p1, $p1);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    return;
}



const wait_for_timer_and_thread: ref;

axiom wait_for_timer_and_thread == $sub.ref(0, 366402);

procedure wait_for_timer_and_thread($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16;



implementation wait_for_timer_and_thread($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(352, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} vslice_dummy_var_107 := ldv_del_timer_sync_40($p12);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_106 := kthread_stop($p10);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_spin_lock_check: ref;

axiom ldv_spin_lock_check == $sub.ref(0, 367434);

procedure ldv_spin_lock_check();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_spin_lock_check()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i0 := $M.8;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} ldv_error();
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 368466);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} ldv_spin_lock_check();
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} ldv_spin_unlock_irqrestore_13($p0, $i1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const poll: ref;

axiom poll == $sub.ref(0, 369498);

procedure poll($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, assertsPassed, $M.5, $M.20, $M.22, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation poll($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} __const_udelay(42950);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} ldv_spin_lock_check();
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} vslice_dummy_var_108 := smi_event_handler($p1, 10);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} spin_unlock_irqrestore($p3, $u0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const schedule_timeout_uninterruptible: ref;

axiom schedule_timeout_uninterruptible == $sub.ref(0, 370530);

procedure schedule_timeout_uninterruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_uninterruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 360} {:cexpr "schedule_timeout_uninterruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 361} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 362} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_si_irq: ref;

axiom disable_si_irq == $sub.ref(0, 371562);

procedure disable_si_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation disable_si_irq($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(492, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} start_disable_irq($p0);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(492, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(488, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i9 := atomic_read($p8);
    call {:si_unique_call 365} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(352, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, jiffies);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 2);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_109 := ldv_mod_timer_23($p11, $i13);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ipmi_unregister_smi: ref;

axiom ipmi_unregister_smi == $sub.ref(0, 372594);

procedure ipmi_unregister_smi($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ipmi_unregister_smi($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 367} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 368} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 373626);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} free_($p0);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    return;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 374658);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 375690);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 370} $free($p0);
    return;
}



const start_disable_irq: ref;

axiom start_disable_irq == $sub.ref(0, 376722);

procedure start_disable_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation start_disable_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 24);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 47);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    call {:si_unique_call 372} vslice_dummy_var_110 := devirtbounce.5($p7, $p9, $p10, 2);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 8);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 377754);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mod_timer_23: ref;

axiom ldv_mod_timer_23 == $sub.ref(0, 378786);

procedure ldv_mod_timer_23($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation ldv_mod_timer_23($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} {:cexpr "ldv_mod_timer_23:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 375} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 379818);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 377} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 378} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 379} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_3: ref;

axiom activate_pending_timer_3 == $sub.ref(0, 380850);

procedure activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} {:cexpr "activate_pending_timer_3:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 381} {:cexpr "activate_pending_timer_3:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p3 := $M.9;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.11;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.13;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.15;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} activate_suitable_timer_3($p0, $i1);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i34 := $M.16;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p37 := $M.15;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 385} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i25 := $M.14;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p28 := $M.13;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 384} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i16 := $M.12;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p19 := $M.11;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 383} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i7 := $M.10;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.9 := $p0;
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p10 := $M.9;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 382} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_3: ref;

axiom activate_suitable_timer_3 == $sub.ref(0, 381882);

procedure activate_suitable_timer_3($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation activate_suitable_timer_3($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "activate_suitable_timer_3:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i2 := $M.10;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i4 := $M.10;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.12;
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i10 := $M.12;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.14;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i16 := $M.14;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.16;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i22 := $M.16;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p24 := $M.15;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 391} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p18 := $M.13;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 390} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p12 := $M.11;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 389} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.9 := $p0;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p6 := $M.9;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 388} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 382914);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    return;
}



const smi_event_handler: ref;

axiom smi_event_handler == $sub.ref(0, 383946);

procedure smi_event_handler($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $CurrAddr, assertsPassed, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation smi_event_handler($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i13: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i34: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $i95: i32;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $p123: ref;
  var $i87: i32;
  var $i83: i32;
  var $i124: i32;
  var $i96: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 394} {:cexpr "smi_event_handler:arg:time"} boogie_si_record_i32($i1);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb1;

  $bb1:
    call $i3, $p4, $p5, $p6, $p7, $p8, $p9, $i10, $i11, $i12, $p14, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $i22, $i13, $i23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $i33, $i35, $p36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $i34, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $p74, $i75, $p76, $p77, $p78, $i79, $i80, $i81, $i82, $p84, $i85, $i86, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $i95, $p97, $p98, $p100, $p101, $p102, $p104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $i121, $p123, $i87, $i83, vslice_dummy_var_111, vslice_dummy_var_112 := smi_event_handler_loop_$bb1($p0, $p2, $i3, $p4, $p5, $p6, $p7, $p8, $p9, $i10, $i11, $i12, $p14, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $i22, $i13, $i23, $p24, $p25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $i33, $i35, $p36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $i34, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $p74, $i75, $p76, $p77, $p78, $i79, $i80, $i81, $i82, $p84, $i85, $i86, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $i95, $p97, $p98, $p100, $p101, $p102, $p104, $p105, $p106, $p107, $p108, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $p117, $p118, $p119, $p120, $i121, $p123, $i87, $i83, vslice_dummy_var_111, vslice_dummy_var_112);
    goto $bb1_last;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i3);
    call {:si_unique_call 395} $i11 := devirtbounce.6($p7, $p9, $i10);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 396} {:cexpr "si_sm_result"} boogie_si_record_i32($i11);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i13, 3);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i13, 5);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i13;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i34 := $i51;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i58 := ldv__builtin_expect($i57, 1);
    call {:si_unique_call 404} {:cexpr "tmp"} boogie_si_record_i64($i58);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i34, 4);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i81 := $i34;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 4);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i83 := $i81;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i124 := $i83;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i96 := $i124;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $r := $i96;
    return;

  $bb32:
    assume $i82 == 1;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(332, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i85 := atomic_read($p84);
    call {:si_unique_call 415} {:cexpr "tmp___0"} boogie_si_record_i32($i85);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i87 := $i81;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i124 := $i87;
    goto $bb41;

  $bb34:
    assume $i86 == 1;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(332, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} atomic_set($p88, 0);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $p89 := ipmi_alloc_smi_msg();
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $p89);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i93, 0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i95 := $i81;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p98, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 24);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p102, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, 53);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, 2);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    call {:si_unique_call 418} vslice_dummy_var_112 := devirtbounce.5($p111, $p113, $p117, $i121);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 2);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb24_dummy;

  $bb36:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb38;

  $bb26:
    assume $i75 == 1;
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(2, 4));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} atomic_inc($p78);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i79 := start_next_msg($p0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 413} {:cexpr "si_sm_result"} boogie_si_record_i32($i79);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 4);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i81 := $i79;
    goto $bb31;

  $bb28:
    assume $i80 == 1;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i59 == 1;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i34, 6);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb21;

  $bb22:
    assume $i60 == 1;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(4, 4));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} atomic_inc($p63);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p64, 24);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p65, 49);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p2);
    call {:si_unique_call 410} vslice_dummy_var_111 := devirtbounce.5($p69, $p71, $p72, 2);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 1);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(6, 4));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} atomic_inc($p38);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    call {:si_unique_call 407} $i50 := devirtbounce.6($p47, $p49, 0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 408} {:cexpr "si_sm_result"} boogie_si_record_i32($i50);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb18;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i43 == 1;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} return_hosed_msg($p0, 255);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(7, 4));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} atomic_inc($p26);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} handle_transaction_done($p0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    call {:si_unique_call 401} $i33 := devirtbounce.6($p30, $p32, 0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 402} {:cexpr "si_sm_result"} boogie_si_record_i32($i33);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb12;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i12 == 1;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $p14, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $i22 := smi_event_handler_loop_$bb5($p0, $p14, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $i22);
    goto $bb5_last;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 397} $i20 := devirtbounce.6($p17, $p19, 0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 398} {:cexpr "si_sm_result"} boogie_si_record_i32($i20);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb4;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb7_dummy;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb7_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb24_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2703;
}



const handle_transaction_done: ref;

axiom handle_transaction_done == $sub.ref(0, 384978);

procedure handle_transaction_done($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.22, $CurrAddr, $M.17, assertsPassed, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation handle_transaction_done($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i8;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $i141: i32;
  var $i142: i8;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i32;
  var $i169: i8;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p188: ref;
  var $i189: i8;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p205: ref;
  var $i206: i8;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $p210: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i8;
  var $i217: i32;
  var $i218: i32;
  var $i219: i8;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p238: ref;
  var $i239: i8;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $p243: ref;
  var $p245: ref;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p2 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p231, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p6);
    call {:si_unique_call 427} vslice_dummy_var_115 := devirtbounce.5($p233, $p235, $p236, 4);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.23, $p238);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, 0);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p245, 0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb57:
    assume $i241 == 1;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} vslice_dummy_var_124 := dev_warn.ref.ref($p243, .str.4);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p198, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p5);
    call {:si_unique_call 426} vslice_dummy_var_114 := devirtbounce.5($p200, $p202, $p203, 4);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.22, $p205);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i206);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i208 == 1);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p213, 24);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p214, 46);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i216 := $load.i8($M.22, $p215);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i216);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i218 := $and.i32($i217, 252);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i8($i218);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p220, $i219);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p222, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p5);
    call {:si_unique_call 453} vslice_dummy_var_123 := devirtbounce.5($p224, $p226, $p227, 3);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p229, 9);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb54:
    assume $i208 == 1;
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_122 := dev_warn.ref.ref($p210, .str.3);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p212, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p181, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p4);
    call {:si_unique_call 425} vslice_dummy_var_113 := devirtbounce.5($p183, $p185, $p186, 4);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.21, $p188);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i191 == 1);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(492, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, 0);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p196, 0);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb51:
    assume $i191 == 1;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} vslice_dummy_var_121 := dev_warn.ref.ref($p193, .str.2);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb4:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p3);
    call {:si_unique_call 429} vslice_dummy_var_116 := devirtbounce.5($p150, $p152, $p153, 4);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.20, $p155);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i158 == 1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p163, 24);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p164, 46);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.20, $p165);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i167, 3);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i8($i168);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p170, $i169);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p172, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p3);
    call {:si_unique_call 450} vslice_dummy_var_120 := devirtbounce.5($p174, $p176, $p177, 3);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, 7);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb48:
    assume $i158 == 1;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} vslice_dummy_var_119 := dev_warn.ref.ref($p160, .str.1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 592)), $mul.ref(312, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    call {:si_unique_call 428} $i124 := devirtbounce.5($p117, $p119, $p123, 272);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, $i124);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p130, $0.ref);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p129, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.0, $p132);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i135 == 1);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p145, $mul.ref(10, 4));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} atomic_inc($p146);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} handle_flags($p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} deliver_recv_msg($p0, $p129);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i135 == 1;
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p129, $mul.ref(0, 592)), $mul.ref(584, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    call {:si_unique_call 444} devirtbounce.7($p137, $p129);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.0, $p138);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 254);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i8($i141);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, $i142);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} handle_flags($p0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p2);
    call {:si_unique_call 431} vslice_dummy_var_117 := devirtbounce.5($p62, $p64, $p65, 3);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.19, $p67);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 4);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i79 == 1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, 0);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb39:
    assume $i79 == 1;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} start_enable_irq($p0);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i70 == 1;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.19, $p73);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_118 := dev_warn.ref.ref.i32($p72, .str, $i75);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb19:
    assume $i17 == 1;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 592)), $mul.ref(312, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    call {:si_unique_call 430} $i91 := devirtbounce.5($p84, $p86, $p90, 272);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i91);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, $0.ref);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i102 == 1);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref(8, 4));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} atomic_inc($p113);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} handle_flags($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} deliver_recv_msg($p0, $p96);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i102 == 1;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p96, $mul.ref(0, 592)), $mul.ref(584, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    call {:si_unique_call 439} devirtbounce.7($p104, $p96);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 253);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, $i109);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} handle_flags($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i18 == 1);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p1);
    call {:si_unique_call 432} $i48 := devirtbounce.5($p44, $p46, $p47, 4);
    call {:si_unique_call 433} {:cexpr "tmp"} boogie_si_record_i32($i48);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.18, $p49);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i52 == 1);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i54 := $ule.i32($i48, 3);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i54 == 1);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.18, $p56);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i57);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} handle_flags($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i54 == 1;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i52 == 1;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb22:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb24:
    assume $i19 == 1;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 592)), $mul.ref(312, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    call {:si_unique_call 434} $i34 := devirtbounce.5($p27, $p29, $p33, 272);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i34);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} deliver_recv_msg($p0, $p39);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i23 == 1;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    goto $bb28;
}



const return_hosed_msg: ref;

axiom return_hosed_msg == $sub.ref(0, 386010);

procedure return_hosed_msg($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation return_hosed_msg($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p14: ref;
  var $p16: ref;
  var $i17: i8;
  var $p19: ref;
  var $i20: i8;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} {:cexpr "return_hosed_msg:arg:cCode"} boogie_si_record_i32($i1);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 0);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i1, 255);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 4);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i12);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i17);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i6);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i20);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 3);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} deliver_recv_msg($p0, $p3);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := 255;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 387042);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 458} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const start_next_msg: ref;

axiom start_next_msg == $sub.ref(0, 388074);

procedure start_next_msg($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation start_next_msg($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p11: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i22: i32;
  var $i29: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(336, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(184, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i6 := list_empty($p5);
    call {:si_unique_call 461} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i13 := list_empty($p12);
    call {:si_unique_call 463} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p11 := $p18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p11);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} list_del($p11);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p11);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i26 := atomic_notifier_call_chain(xaction_notifier_list, 0, $p25);
    call {:si_unique_call 466} {:cexpr "err"} boogie_si_record_i32($i26);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 32768);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 467} $i44 := devirtbounce.5($p33, $p35, $p39, $i43);
    call {:si_unique_call 468} {:cexpr "err"} boogie_si_record_i32($i44);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i29 := $i22;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(336, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb20:
    assume $i48 == 1;
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(104, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} spin_unlock($p49);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} return_hosed_msg($p0, $i44);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb15;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i22 := 4;
    goto $bb12;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(168, 1)), $mul.ref(0, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p18 := $p17;
    goto $bb9;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(184, 1)), $mul.ref(0, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(104, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} spin_lock($p4);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 389106);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    return;
}



const ipmi_alloc_smi_msg: ref;

axiom ipmi_alloc_smi_msg == $sub.ref(0, 390138);

procedure ipmi_alloc_smi_msg() returns ($r: ref);
  free requires assertsPassed;



implementation ipmi_alloc_smi_msg() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p0 := external_alloc();
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 391170);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 473} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 474} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 392202);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} ldv_spin_lock_check();
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} ldv_spin_lock_6($p0);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 393234);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const atomic_notifier_call_chain: ref;

axiom atomic_notifier_call_chain == $sub.ref(0, 394266);

procedure atomic_notifier_call_chain($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_notifier_call_chain($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 477} {:cexpr "atomic_notifier_call_chain:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 1} true;
    call {:si_unique_call 478} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 395298);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} ldv_spin_lock_check();
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} ldv_spin_unlock_10($p0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_10: ref;

axiom ldv_spin_unlock_10 == $sub.ref(0, 396330);

procedure ldv_spin_unlock_10($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_10($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} _raw_spin_unlock($p2);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 397362);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_6: ref;

axiom ldv_spin_lock_6 == $sub.ref(0, 398394);

procedure ldv_spin_lock_6($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_6($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} _raw_spin_lock($p2);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 399426);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    return;
}



const deliver_recv_msg: ref;

axiom deliver_recv_msg == $sub.ref(0, 400458);

procedure deliver_recv_msg($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation deliver_recv_msg($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(336, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} spin_unlock($p7);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} ipmi_smi_msg_received($p9, $p1);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} spin_lock($p10);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} ipmi_smi_msg_received($p6, $p1);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ipmi_smi_msg_received: ref;

axiom ipmi_smi_msg_received == $sub.ref(0, 401490);

procedure ipmi_smi_msg_received($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ipmi_smi_msg_received($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    return;
}



const handle_flags: ref;

axiom handle_flags == $sub.ref(0, 402522);

procedure handle_flags($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, assertsPassed, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, $M.43, $CurrAddr, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, $M.46, $M.47, $M.48;



implementation handle_flags($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 8);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i9, $p23, $i24, $i25, $i26, $i27, $p62, $i63, $i64, $i65, $i66, $p101, $i102, $i103, $i104, $i105, $p106, $p107, $i108, $i109, $p110, $p111, $i112, $i113 := handle_flags_loop_$bb4($p0, $p1, $i6, $i7, $i8, $i9, $p23, $i24, $i25, $i26, $i27, $p62, $i63, $i64, $i65, $i66, $p101, $i102, $i103, $i104, $i105, $p106, $p107, $i108, $i109, $p110, $p111, $i112, $i113);
    goto $bb4_last;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 1);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 2);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i66 == 1);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 224);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, 0);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i105 == 1;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(320, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb24;

  $bb25:
    assume $i109 == 1;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(320, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    call {:si_unique_call 501} $i112 := devirtbounce.8($p111, $p0);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 502} {:cexpr "tmp"} boogie_si_record_i32($i112);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb5:
    assume $i113 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 8);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7_dummy;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(9, 4));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} atomic_inc($p12);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} start_clear_flags($p0);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 247);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} spin_unlock($p19);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} ipmi_smi_watchdog_pretimeout($p21);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} spin_lock($p22);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i66 == 1;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $p67 := ipmi_alloc_smi_msg();
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p67);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i71, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} enable_si_irq($p0);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 24);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p79, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 53);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, 2);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    call {:si_unique_call 500} vslice_dummy_var_126 := devirtbounce.5($p88, $p90, $p94, $i98);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, 2);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i72 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} disable_si_irq($p0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p28 := ipmi_alloc_smi_msg();
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p28);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} enable_si_irq($p0);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 24);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 51);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 2);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    call {:si_unique_call 496} vslice_dummy_var_125 := devirtbounce.5($p49, $p51, $p55, $i59);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 5);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} disable_si_irq($p0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3369;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 403554);

procedure dev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 1} true;
    call {:si_unique_call 503} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 504} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 505} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 506} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 1} true;
    call {:si_unique_call 507} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 508} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const start_enable_irq: ref;

axiom start_enable_irq == $sub.ref(0, 404586);

procedure start_enable_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation start_enable_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 24);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 47);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    call {:si_unique_call 510} vslice_dummy_var_127 := devirtbounce.5($p7, $p9, $p10, 2);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 6);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    return;
}



const start_clear_flags: ref;

axiom start_clear_flags == $sub.ref(0, 405618);

procedure start_clear_flags($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation start_clear_flags($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $p1 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 24);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 48);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 8);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    call {:si_unique_call 512} vslice_dummy_var_128 := devirtbounce.5($p8, $p10, $p11, 3);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 3);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    return;
}



const ipmi_smi_watchdog_pretimeout: ref;

axiom ipmi_smi_watchdog_pretimeout == $sub.ref(0, 406650);

procedure ipmi_smi_watchdog_pretimeout($p0: ref);
  free requires assertsPassed;



implementation ipmi_smi_watchdog_pretimeout($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    return;
}



const enable_si_irq: ref;

axiom enable_si_irq == $sub.ref(0, 407682);

procedure enable_si_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation enable_si_irq($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(492, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} start_enable_irq($p0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(492, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_spin_unlock_irqrestore_13: ref;

axiom ldv_spin_unlock_irqrestore_13 == $sub.ref(0, 408714);

procedure ldv_spin_unlock_irqrestore_13($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_13($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} {:cexpr "ldv_spin_unlock_irqrestore_13:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 409746);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 410778);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 517} __VERIFIER_error();
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const kthread_stop: ref;

axiom kthread_stop == $sub.ref(0, 411810);

procedure kthread_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kthread_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 1} true;
    call {:si_unique_call 518} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 519} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer_sync_40: ref;

axiom ldv_del_timer_sync_40 == $sub.ref(0, 412842);

procedure ldv_del_timer_sync_40($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16;



implementation ldv_del_timer_sync_40($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i1 := del_timer_sync($p0);
    call {:si_unique_call 521} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} disable_suitable_timer_3($p0);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 413874);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 1} true;
    call {:si_unique_call 523} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_3: ref;

axiom disable_suitable_timer_3 == $sub.ref(0, 414906);

procedure disable_suitable_timer_3($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16;



implementation disable_suitable_timer_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.12;
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.14;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.16;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p22 := $M.15;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 528} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p16 := $M.13;
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 527} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p10 := $M.11;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 526} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p4 := $M.9;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 525} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 415938);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p1 := external_alloc();
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_kzalloc_30: ref;

axiom ldv_kzalloc_30 == $sub.ref(0, 416970);

procedure ldv_kzalloc_30($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_kzalloc_30($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} {:cexpr "ldv_kzalloc_30:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 531} {:cexpr "ldv_kzalloc_30:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p2 := ldv_zalloc($i0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 418002);

procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 1} true;
    call {:si_unique_call 533} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 534} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 535} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 536} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 537} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 538} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 1} true;
    call {:si_unique_call 539} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 540} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 541} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 542} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 419034);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 543} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 544} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 420066);

procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 1} true;
    call {:si_unique_call 545} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 546} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 547} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 548} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ipmi_pci_cleanup: ref;

axiom ipmi_pci_cleanup == $sub.ref(0, 421098);

procedure ipmi_pci_cleanup($p0: ref);
  free requires assertsPassed;



implementation ipmi_pci_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(312, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} pci_disable_device($p3);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    return;
}



const port_setup: ref;

axiom port_setup == $sub.ref(0, 422130);

procedure port_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation port_setup($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $i65: i32;
  var $i66: i1;
  var $i54: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i37: i32;
  var $i6: i32;
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 550} {:cexpr "addr"} boogie_si_record_i32($i4);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, port_cleanup);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} vslice_dummy_var_129 := dev_warn.ref.ref.i32($p29, .str.14, $i32);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, port_inl);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, port_outl);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(296, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32(0, $i35);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb22;

  $bb22:
    call $p39, $i40, $i41, $i42, $i43, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i67, $i68, $i69, $i37 := port_setup_loop_$bb22($p0, $i4, $p34, $p39, $i40, $i41, $i42, $i43, $p45, $i46, $i47, $p48, $i49, $i50, $i51, $i67, $i68, $i69, $i37);
    goto $bb22_last;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32($i40, $i37);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, $i4);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $p48 := __request_region(ioport_resource, $i43, $i47, .str.15, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i51 := $i37;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i37, 1);
    call {:si_unique_call 556} {:cexpr "idx"} boogie_si_record_i32($i67);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p34);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i69 := $ult.i32($i67, $i68);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i69 == 1);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb35:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i37 := $i67;
    goto $bb35_dummy;

  $bb24:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i51, 1);
    call {:si_unique_call 553} {:cexpr "idx"} boogie_si_record_i32($i52);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i51, 0);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb3;

  $bb26:
    assume $i53 == 1;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb29;

  $bb29:
    call $p56, $i57, $i58, $i59, $i60, $p62, $i63, $i64, $i65, $i66, $i54 := port_setup_loop_$bb29($p0, $i4, $p56, $i57, $i58, $i59, $i60, $p62, $i63, $i64, $i65, $i66, $i54);
    goto $bb29_last;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i58 := $mul.i32($i57, $i54);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, $i4);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __release_region(ioport_resource, $i60, $i64);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($i54, 1);
    call {:si_unique_call 555} {:cexpr "idx"} boogie_si_record_i32($i65);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i54, 0);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i66 == 1);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb31:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i54 := $i65;
    goto $bb31_dummy;

  $bb8:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb12;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, port_inw);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, port_outw);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, port_inb);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, port_outb);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  $bb35_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3706;
}



const mem_setup: ref;

axiom mem_setup == $sub.ref(0, 423162);

procedure mem_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation mem_setup($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $i57: i64;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $i66: i64;
  var $i5: i32;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 557} {:cexpr "addr"} boogie_si_record_i64($i3);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, mem_cleanup);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i9, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_130 := dev_warn.ref.ref.i32($p34, .str.14, $i37);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, mem_inq);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, mem_outq);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(296, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i44 := $mul.i32($i40, $i43);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i47, $i50);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i44, $i51);
    call {:si_unique_call 558} {:cexpr "mapsize"} boogie_si_record_i32($i52);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p54 := __request_region(iomem_resource, $i3, $i53, .str.15, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i52);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p58 := ioremap($i3, $i57);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p58);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i52);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __release_region(iomem_resource, $i3, $i66);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 5);
    goto $bb3;

  $bb23:
    assume $i56 == 1;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 5);
    goto $bb3;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, intf_mem_inl);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, intf_mem_outl);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i9, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i9, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb17:
    assume $i15 == 1;
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, intf_mem_inw);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, intf_mem_outw);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i9, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb19:
    assume $i16 == 1;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(0, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, intf_mem_inb);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, intf_mem_outb);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const std_irq_setup: ref;

axiom std_irq_setup == $sub.ref(0, 424194);

procedure std_irq_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32;



implementation std_irq_setup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i17: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i4: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i21 := ldv_request_irq_29($i19, si_irq_handler, 160, .str.15, $p20);
    call {:si_unique_call 566} {:cexpr "rv"} boogie_si_record_i32($i21);
    assume {:verifier.code 0} true;
    $i17 := $i21;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i17, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, std_irq_cleanup);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_132 := _dev_info.ref.ref.i32($p31, .str.19, $i33);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i4 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_131 := dev_warn.ref.ref.ref.i32($p24, .str.18, .str.15, $i26);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i11 := ldv_request_irq_28($i9, si_bt_irq_handler, 160, .str.15, $p10);
    call {:si_unique_call 564} {:cexpr "rv"} boogie_si_record_i32($i11);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $i11;
    goto $bb10;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1));
    call {:si_unique_call 567} devirtbounce.1($p15, $p16, 2, 1);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 425226);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2760)), $mul.ref(144, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} dev_set_drvdata($p2, $p1);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    return;
}



const add_smi: ref;

axiom add_smi == $sub.ref(0, 426258);

procedure add_smi($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation add_smi($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i15: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(ipmi_addr_src_to_str, $mul.ref(0, 72)), $mul.ref($i3, 8));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.24, $p4);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(si_to_str, $mul.ref(0, 24)), $mul.ref($i8, 8));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.25, $p9);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_133 := printk.ref.ref.ref(.str.20, $p5, $p10);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} mutex_lock_nested(smi_infos_lock, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i12 := is_new_interface($p0);
    call {:si_unique_call 574} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_135 := printk.ref(.str.22);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} list_add_tail($p20, smi_infos);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} mutex_unlock(smi_infos_lock);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_134 := printk.ref(.str.21);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb3;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 427290);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    return;
}



const is_new_interface: ref;

axiom is_new_interface == $sub.ref(0, 428322);

procedure is_new_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_new_interface($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p11: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, smi_infos);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} llvm.prefetch($p7, 0, 3, 1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, $p2i.ref.i64(smi_infos));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p11 := $p3;
    goto $bb4;

  $bb4:
    call $p13, $i14, $p16, $i17, $i18, $p20, $i21, $p23, $i24, $i25, $p28, $p29, $p30, $p31, $p33, $p34, $p35, $p36, $i37, $i38, $p11 := is_new_interface_loop_$bb4($p0, $p13, $i14, $p16, $i17, $i18, $p20, $i21, $p23, $i24, $i25, $p28, $p29, $p30, $p31, $p33, $p34, $p35, $p36, $i37, $i38, $p11);
    goto $bb4_last;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i14, $i17);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i21, $i24);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p30, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} llvm.prefetch($p35, 0, 3, 1);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p30, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, $p2i.ref.i64(smi_infos));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p31;
    goto $bb14_dummy;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb12;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 429354);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} __list_add($p0, $p3, $p1);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 430386);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 431418);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    return;
}



const llvm.prefetch: ref;

axiom llvm.prefetch == $sub.ref(0, 432450);

procedure llvm.prefetch($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 433482);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    return;
}



const si_bt_irq_handler: ref;

axiom si_bt_irq_handler == $sub.ref(0, 434514);

procedure si_bt_irq_handler($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, assertsPassed, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation si_bt_irq_handler($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} {:cexpr "si_bt_irq_handler:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1));
    call {:si_unique_call 584} devirtbounce.1($p5, $p6, 2, 3);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i7 := si_irq_handler($i0, $p1);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 586} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;
}



const ldv_request_irq_28: ref;

axiom ldv_request_irq_28 == $sub.ref(0, 435546);

procedure ldv_request_irq_28($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32;



implementation ldv_request_irq_28($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} {:cexpr "ldv_request_irq_28:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 588} {:cexpr "ldv_request_irq_28:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i6 := reg_check_2($p1);
    call {:si_unique_call 592} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} activate_suitable_irq_2($i0, $p4);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const si_irq_handler: ref;

axiom si_irq_handler == $sub.ref(0, 436578);

procedure si_irq_handler($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, assertsPassed, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation si_irq_handler($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} {:cexpr "si_irq_handler:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} ldv_spin_lock_check();
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(3, 4));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} atomic_inc($p5);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_136 := smi_event_handler($p2, 0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} spin_unlock_irqrestore($p7, $u0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;
}



const ldv_request_irq_29: ref;

axiom ldv_request_irq_29 == $sub.ref(0, 437610);

procedure ldv_request_irq_29($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32;



implementation ldv_request_irq_29($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} {:cexpr "ldv_request_irq_29:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 600} {:cexpr "ldv_request_irq_29:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i6 := reg_check_2($p1);
    call {:si_unique_call 604} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} activate_suitable_irq_2($i0, $p4);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const std_irq_cleanup: ref;

axiom std_irq_cleanup == $sub.ref(0, 438642);

procedure std_irq_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.28, $M.30, $M.32;



implementation std_irq_cleanup($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 2);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} ldv_free_irq_27($i9, $p10);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(8, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1));
    call {:si_unique_call 606} devirtbounce.1($p6, $p7, 2, 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_free_irq_27: ref;

axiom ldv_free_irq_27 == $sub.ref(0, 439674);

procedure ldv_free_irq_27($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.26, $M.28, $M.30, $M.32;



implementation ldv_free_irq_27($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} {:cexpr "ldv_free_irq_27:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} free_irq($i0, $p1);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} disable_suitable_irq_2($i0, $p1);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 440706);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_2: ref;

axiom disable_suitable_irq_2 == $sub.ref(0, 441738);

procedure disable_suitable_irq_2($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.26, $M.28, $M.30, $M.32;



implementation disable_suitable_irq_2($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} {:cexpr "disable_suitable_irq_2:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i2 := $M.26;
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.28;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.30;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.32;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i16 := $M.33;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 616} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i12 := $M.31;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 615} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i8 := $M.29;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 614} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i4 := $M.27;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.26 := 0;
    call {:si_unique_call 613} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 442770);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 618} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 620} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_2: ref;

axiom reg_check_2 == $sub.ref(0, 443802);

procedure reg_check_2($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_2($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(si_irq_handler));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_2: ref;

axiom activate_suitable_irq_2 == $sub.ref(0, 444834);

procedure activate_suitable_irq_2($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32;



implementation activate_suitable_irq_2($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} {:cexpr "activate_suitable_irq_2:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i2 := $M.26;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.28;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.30;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.32;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $M.33 := $i0;
    call {:si_unique_call 628} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32($i0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $M.37 := $p1;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 629} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $M.31 := $i0;
    call {:si_unique_call 626} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32($i0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $M.36 := $p1;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 627} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.29 := $i0;
    call {:si_unique_call 624} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32($i0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $M.35 := $p1;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 625} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.27 := $i0;
    call {:si_unique_call 622} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32($i0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $M.34 := $p1;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 623} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 445866);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 630} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 631} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 1} true;
    call {:si_unique_call 632} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 633} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const mem_cleanup: ref;

axiom mem_cleanup == $sub.ref(0, 446898);

procedure mem_cleanup($p0: ref);
  free requires assertsPassed;



implementation mem_cleanup($p0: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 634} {:cexpr "addr"} boogie_si_record_i64($i3);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} iounmap($p11);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(296, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i13, $i16);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, $i23);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i17, $i24);
    call {:si_unique_call 636} {:cexpr "mapsize"} boogie_si_record_i32($i25);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} __release_region(iomem_resource, $i3, $i26);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const intf_mem_inb: ref;

axiom intf_mem_inb == $sub.ref(0, 447930);

procedure intf_mem_inb($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;



implementation intf_mem_inb($p0: ref, $i1: i32) returns ($r: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} {:cexpr "intf_mem_inb:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, $i1);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p3, $mul.ref($i7, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i9 := readb($p8);
    call {:si_unique_call 640} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const intf_mem_outb: ref;

axiom intf_mem_outb == $sub.ref(0, 448962);

procedure intf_mem_outb($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;



implementation intf_mem_outb($p0: ref, $i1: i32, $i2: i8)
{
  var $i3: i32;
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} {:cexpr "intf_mem_outb:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 642} {:cexpr "intf_mem_outb:arg:b"} boogie_si_record_i8($i2);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i8, $i1);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p6, $mul.ref($i10, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} writeb($i4, $p11);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    return;
}



const intf_mem_inw: ref;

axiom intf_mem_inw == $sub.ref(0, 449994);

procedure intf_mem_inw($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;



implementation intf_mem_inw($p0: ref, $i1: i32) returns ($r: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} {:cexpr "intf_mem_inw:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, $i1);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p3, $mul.ref($i7, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i9 := readw($p8);
    call {:si_unique_call 646} {:cexpr "tmp"} boogie_si_record_i16($i9);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i13 := $ashr.i32($i10, $i12);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const intf_mem_outw: ref;

axiom intf_mem_outw == $sub.ref(0, 451026);

procedure intf_mem_outw($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;



implementation intf_mem_outw($p0: ref, $i1: i32, $i2: i8)
{
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} {:cexpr "intf_mem_outw:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 648} {:cexpr "intf_mem_outw:arg:b"} boogie_si_record_i8($i2);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i3, $i5);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i13, $i1);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p11, $mul.ref($i15, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} writeb($i9, $p16);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    return;
}



const intf_mem_inl: ref;

axiom intf_mem_inl == $sub.ref(0, 452058);

procedure intf_mem_inl($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation intf_mem_inl($p0: ref, $i1: i32) returns ($r: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} {:cexpr "intf_mem_inl:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, $i1);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p3, $mul.ref($i7, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i9 := readl($p8);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 652} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i9, $i11);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const intf_mem_outl: ref;

axiom intf_mem_outl == $sub.ref(0, 453090);

procedure intf_mem_outl($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;



implementation intf_mem_outl($p0: ref, $i1: i32, $i2: i8)
{
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} {:cexpr "intf_mem_outl:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 654} {:cexpr "intf_mem_outl:arg:b"} boogie_si_record_i8($i2);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i3, $i5);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, $i1);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p8, $mul.ref($i12, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} writel($i6, $p13);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    return;
}



const mem_inq: ref;

axiom mem_inq == $sub.ref(0, 454122);

procedure mem_inq($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;



implementation mem_inq($p0: ref, $i1: i32) returns ($r: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} {:cexpr "mem_inq:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, $i1);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p3, $mul.ref($i7, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i9 := readq($p8);
    call {:si_unique_call 658} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i64($i9, $i12);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i8($i13);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const mem_outq: ref;

axiom mem_outq == $sub.ref(0, 455154);

procedure mem_outq($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;



implementation mem_outq($p0: ref, $i1: i32, $i2: i8)
{
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} {:cexpr "mem_outq:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 660} {:cexpr "mem_outq:arg:b"} boogie_si_record_i8($i2);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i3, $i5);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, $i1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p9, $mul.ref($i13, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} writeq($i7, $p14);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 456186);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 663} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 664} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p5 := external_alloc();
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 457218);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 667} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p2 := ioremap_nocache($i0, $i1);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 458250);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 670} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 459282);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 672} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p2 := external_alloc();
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const writeq: ref;

axiom writeq == $sub.ref(0, 460314);

procedure writeq($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation writeq($i0: i64, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} {:cexpr "writeq:arg:val"} boogie_si_record_i64($i0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 675} devirtbounce.9(0, $i0, $p2);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    return;
}



const readq: ref;

axiom readq == $sub.ref(0, 461346);

procedure readq($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation readq($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 676} $i2 := devirtbounce.10(0, $p1);
    call {:si_unique_call 677} {:cexpr "ret"} boogie_si_record_i64($i2);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 462378);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 679} devirtbounce.11(0, $i0, $p2);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 463410);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 680} $i2 := devirtbounce.12(0, $p1);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 681} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const writeb: ref;

axiom writeb == $sub.ref(0, 464442);

procedure writeb($i0: i8, $p1: ref);
  free requires assertsPassed;



implementation writeb($i0: i8, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} {:cexpr "writeb:arg:val"} boogie_si_record_i8($i0);
    call {:si_unique_call 683} devirtbounce.13(0, $i0, $p1);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    return;
}



const readw: ref;

axiom readw == $sub.ref(0, 465474);

procedure readw($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation readw($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 684} $i2 := devirtbounce.14(0, $p1);
    call {:si_unique_call 685} {:cexpr "ret"} boogie_si_record_i16($i2);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const readb: ref;

axiom readb == $sub.ref(0, 466506);

procedure readb($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation readb($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i1 := devirtbounce.15(0, $p0);
    call {:si_unique_call 687} {:cexpr "ret"} boogie_si_record_i8($i1);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 467538);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    return;
}



const port_cleanup: ref;

axiom port_cleanup == $sub.ref(0, 468570);

procedure port_cleanup($p0: ref);
  free requires assertsPassed;



implementation port_cleanup($p0: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 688} {:cexpr "addr"} boogie_si_record_i32($i4);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(296, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i7);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    call $p11, $i12, $i13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i9 := port_cleanup_loop_$bb6($p0, $i4, $p6, $p11, $i12, $i13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i9);
    goto $bb6_last;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i12, $i9);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, $i4);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} __release_region(ioport_resource, $i15, $i19);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i9, 1);
    call {:si_unique_call 690} {:cexpr "idx"} boogie_si_record_i32($i20);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p6);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32($i20, $i21);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4302;
}



const port_inb: ref;

axiom port_inb == $sub.ref(0, 469602);

procedure port_inb($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;



implementation port_inb($p0: ref, $i1: i32) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} {:cexpr "port_inb:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 692} {:cexpr "addr"} boogie_si_record_i32($i4);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, $i1);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, $i4);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i9 := inb($i8);
    call {:si_unique_call 694} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const port_outb: ref;

axiom port_outb == $sub.ref(0, 470634);

procedure port_outb($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;



implementation port_outb($p0: ref, $i1: i32, $i2: i8)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} {:cexpr "port_outb:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 696} {:cexpr "port_outb:arg:b"} boogie_si_record_i8($i2);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 697} {:cexpr "addr"} boogie_si_record_i32($i5);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i2);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, $i1);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $i5);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} outb($i7, $i11);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    return;
}



const port_inw: ref;

axiom port_inw == $sub.ref(0, 471666);

procedure port_inw($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;



implementation port_inw($p0: ref, $i1: i32) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} {:cexpr "port_inw:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 700} {:cexpr "addr"} boogie_si_record_i32($i4);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, $i1);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, $i4);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i9 := inw($i8);
    call {:si_unique_call 702} {:cexpr "tmp"} boogie_si_record_i16($i9);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i13 := $ashr.i32($i10, $i12);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const port_outw: ref;

axiom port_outw == $sub.ref(0, 472698);

procedure port_outw($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;



implementation port_outw($p0: ref, $i1: i32, $i2: i8)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} {:cexpr "port_outw:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 704} {:cexpr "port_outw:arg:b"} boogie_si_record_i8($i2);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 705} {:cexpr "addr"} boogie_si_record_i32($i5);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i2);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i6, $i8);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, $i1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, $i5);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} outw($i12, $i16);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    return;
}



const port_inl: ref;

axiom port_inl == $sub.ref(0, 473730);

procedure port_inl($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;



implementation port_inl($p0: ref, $i1: i32) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} {:cexpr "port_inl:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 708} {:cexpr "addr"} boogie_si_record_i32($i4);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, $i1);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, $i4);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i9 := inl($i8);
    call {:si_unique_call 710} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i9, $i11);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const port_outl: ref;

axiom port_outl == $sub.ref(0, 474762);

procedure port_outl($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;



implementation port_outl($p0: ref, $i1: i32, $i2: i8)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} {:cexpr "port_outl:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 712} {:cexpr "port_outl:arg:b"} boogie_si_record_i8($i2);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 713} {:cexpr "addr"} boogie_si_record_i32($i5);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i2);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i6, $i8);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, $i1);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i5);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} outl($i9, $i13);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    return;
}



const outl: ref;

axiom outl == $sub.ref(0, 475794);

procedure outl($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation outl($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} {:cexpr "outl:arg:value"} boogie_si_record_i32($i0);
    call {:si_unique_call 716} {:cexpr "outl:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 717} devirtbounce.16(0, $i0, $i1);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    return;
}



const inl: ref;

axiom inl == $sub.ref(0, 476826);

procedure inl($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation inl($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} {:cexpr "inl:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 719} $i1 := devirtbounce.17(0, $i0);
    call {:si_unique_call 720} {:cexpr "value"} boogie_si_record_i32($i1);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const outw: ref;

axiom outw == $sub.ref(0, 477858);

procedure outw($i0: i16, $i1: i32);
  free requires assertsPassed;



implementation outw($i0: i16, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} {:cexpr "outw:arg:value"} boogie_si_record_i16($i0);
    call {:si_unique_call 722} {:cexpr "outw:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 723} devirtbounce.18(0, $i0, $i1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    return;
}



const inw: ref;

axiom inw == $sub.ref(0, 478890);

procedure inw($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation inw($i0: i32) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} {:cexpr "inw:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 725} $i1 := devirtbounce.19(0, $i0);
    call {:si_unique_call 726} {:cexpr "value"} boogie_si_record_i16($i1);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 479922);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 728} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 729} devirtbounce.20(0, $i0, $i1);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    return;
}



const inb: ref;

axiom inb == $sub.ref(0, 480954);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 731} $i1 := devirtbounce.21(0, $i0);
    call {:si_unique_call 732} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 481986);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 483018);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 733} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 734} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 735} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 736} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $p4 := calloc(1, $i0);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 738} __VERIFIER_assume($i7);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ipmi_pnp_probe: ref;

axiom ipmi_pnp_probe == $sub.ref(0, 484050);

procedure ipmi_pnp_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ipmi_pnp_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p40: ref;
  var $p34: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $i60: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i64;
  var $i67: i32;
  var $p69: ref;
  var $i70: i64;
  var $i71: i32;
  var $i72: i32;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i64;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i64;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $i98: i32;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i6: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p3 := pnp_acpi_device($p0);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p7 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 4);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} vslice_dummy_var_137 := printk.ref(.str.8);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 1880)), $mul.ref(8, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i15 := acpi_evaluate_integer($p14, .str.9, $0.ref, $p2);
    call {:si_unique_call 744} {:cexpr "status"} boogie_si_record_i32($i15);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.38, $p2);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $slt.i64($i17, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i64($i17, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i17, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(0, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.38, $p2);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} vslice_dummy_var_138 := _dev_info.ref.ref.i64($p25, .str.10, $i26);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p8);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} kfree($p107);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb17:
    assume $i20 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 2);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p28 := pnp_get_resource($p0, 256, 0);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i30 == 1);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p35 := pnp_get_resource($p0, 512, 0);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p34 := $p35;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p34);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p34, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i46);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 1);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i55 := (if $i54 == 1 then 256 else 512);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p56 := pnp_get_resource($p0, $i55, 1);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 1);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 0);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i79 := acpi_evaluate_integer($p14, .str.12, $0.ref, $p2);
    call {:si_unique_call 752} {:cexpr "status"} boogie_si_record_i32($i79);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i80 == 1);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i85 := pnp_irq_valid($p0, 0);
    call {:si_unique_call 754} {:cexpr "tmp___2"} boogie_si_record_i32($i85);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $p0);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p8);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} pnp_set_drvdata($p0, $p93);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} vslice_dummy_var_140 := _dev_info.ref.ref.ref.i32.i32.i32($p95, .str.13, $p34, $i98, $i101, $i103);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i105 := add_smi($p8);
    call {:si_unique_call 758} {:cexpr "tmp___3"} boogie_si_record_i32($i105);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb45:
    assume $i106 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb42:
    assume $i86 == 1;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i87 := pnp_irq($p0, 0);
    call {:si_unique_call 760} {:cexpr "tmp___1"} boogie_si_record_i64($i87);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i87);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, std_irq_setup);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i80 == 1;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.38, $p2);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i64.i32($i81);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, acpi_gpe_irq_setup);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb33:
    assume $i58 == 1;
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p56, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i64($i60, $i63);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i64 == 1;
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p56, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i64.i32($i66);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i64.i32($i70);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i67, $i71);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i72);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb30:
    assume $i42 == 1;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(0, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_139 := dev_err.ref.ref($p43, .str.11);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb27:
    assume $i37 == 1;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, mem_setup);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i30 == 1;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, port_setup);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p34 := $p28;
    goto $bb26;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 1);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i17, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb19;

  $bb20:
    assume $i21 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 19);
    goto $bb3;
}



const ipmi_pnp_remove: ref;

axiom ipmi_pnp_remove == $sub.ref(0, 485082);

procedure ipmi_pnp_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.5, $M.20, $M.22, $M.9, $M.11, $M.13, $M.15, $M.26, $M.28, $M.30, $M.32, $CurrAddr, $M.43, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation ipmi_pnp_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p1 := pnp_get_drvdata($p0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} cleanup_one_si($p2);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const pnp_get_drvdata: ref;

axiom pnp_get_drvdata == $sub.ref(0, 486114);

procedure pnp_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pnp_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(0, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pnp_acpi_device: ref;

axiom pnp_acpi_device == $sub.ref(0, 487146);

procedure pnp_acpi_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pnp_acpi_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1104, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(pnpacpi_protocol));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(1256, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;
}



const acpi_evaluate_integer: ref;

axiom acpi_evaluate_integer == $sub.ref(0, 488178);

procedure acpi_evaluate_integer($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_evaluate_integer($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 1} true;
    call {:si_unique_call 764} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 765} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pnp_get_resource: ref;

axiom pnp_get_resource == $sub.ref(0, 489210);

procedure pnp_get_resource($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation pnp_get_resource($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} {:cexpr "pnp_get_resource:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 767} {:cexpr "pnp_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p3 := external_alloc();
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const acpi_gpe_irq_setup: ref;

axiom acpi_gpe_irq_setup == $sub.ref(0, 490242);

procedure acpi_gpe_irq_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation acpi_gpe_irq_setup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i4: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i8 := acpi_install_gpe_handler($0.ref, $i6, 1, ipmi_acpi_gpe, $p7);
    call {:si_unique_call 770} {:cexpr "status"} boogie_si_record_i32($i8);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, acpi_gpe_irq_cleanup);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_142 := _dev_info.ref.ref.i32($p18, .str.17, $i20);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vslice_dummy_var_141 := dev_warn.ref.ref.ref.i32($p11, .str.16, .str.15, $i13);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const pnp_irq_valid: ref;

axiom pnp_irq_valid == $sub.ref(0, 491274);

procedure pnp_irq_valid($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pnp_irq_valid($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} {:cexpr "pnp_irq_valid:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p2 := pnp_get_resource($p0, 1024, $i1);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i3 := pnp_resource_valid($p2);
    call {:si_unique_call 776} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pnp_irq: ref;

axiom pnp_irq == $sub.ref(0, 492306);

procedure pnp_irq($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pnp_irq($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} {:cexpr "pnp_irq:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $p2 := pnp_get_resource($p0, 1024, $i1);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i3 := pnp_resource_valid($p2);
    call {:si_unique_call 780} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const pnp_set_drvdata: ref;

axiom pnp_set_drvdata == $sub.ref(0, 493338);

procedure pnp_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pnp_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1264)), $mul.ref(0, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} dev_set_drvdata($p2, $p1);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    return;
}



const pnp_resource_valid: ref;

axiom pnp_resource_valid == $sub.ref(0, 494370);

procedure pnp_resource_valid($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pnp_resource_valid($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const ipmi_acpi_gpe: ref;

axiom ipmi_acpi_gpe == $sub.ref(0, 495402);

procedure ipmi_acpi_gpe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, assertsPassed, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation ipmi_acpi_gpe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var vslice_dummy_var_143: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} ldv_spin_lock_check();
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(3, 4));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} atomic_inc($p4);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_143 := smi_event_handler($p1, 0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} spin_unlock_irqrestore($p6, $u0);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const acpi_install_gpe_handler: ref;

axiom acpi_install_gpe_handler == $sub.ref(0, 496434);

procedure acpi_install_gpe_handler($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_install_gpe_handler($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 786} {:cexpr "acpi_install_gpe_handler:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 787} {:cexpr "acpi_install_gpe_handler:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 1} true;
    call {:si_unique_call 788} $i5 := __VERIFIER_nondet_uint();
    call {:si_unique_call 789} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i5);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const acpi_gpe_irq_cleanup: ref;

axiom acpi_gpe_irq_cleanup == $sub.ref(0, 497466);

procedure acpi_gpe_irq_cleanup($p0: ref);
  free requires assertsPassed;



implementation acpi_gpe_irq_cleanup($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_144 := acpi_remove_gpe_handler($0.ref, $i5, ipmi_acpi_gpe);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acpi_remove_gpe_handler: ref;

axiom acpi_remove_gpe_handler == $sub.ref(0, 498498);

procedure acpi_remove_gpe_handler($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_remove_gpe_handler($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 791} {:cexpr "acpi_remove_gpe_handler:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 1} true;
    call {:si_unique_call 792} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 793} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dell_poweredge_bt_xaction_handler: ref;

axiom dell_poweredge_bt_xaction_handler == $sub.ref(0, 499530);

procedure dell_poweredge_bt_xaction_handler($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.0, assertsPassed;



implementation dell_poweredge_bt_xaction_handler($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} {:cexpr "dell_poweredge_bt_xaction_handler:arg:unused"} boogie_si_record_i64($i1);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.39, $p10);
    call {:si_unique_call 795} {:cexpr "size"} boogie_si_record_i32($i11);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 7);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.39, $p7);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i15 := $ashr.i32($i14, 2);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 10);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p7, $mul.ref(1, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.39, $p17);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 35);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p7, $mul.ref(7, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.39, $p21);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 58);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb3;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} return_hosed_msg_badsize($p3);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i25 := 32769;
    goto $bb10;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const return_hosed_msg_badsize: ref;

axiom return_hosed_msg_badsize == $sub.ref(0, 500562);

procedure return_hosed_msg_badsize($p0: ref);
  free requires assertsPassed;
  modifies $M.39, $M.0, assertsPassed;



implementation return_hosed_msg_badsize($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $p10: ref;
  var $p12: ref;
  var $i13: i8;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.39, $p4);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 4);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p10, $i8);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.39, $p12);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p15, $i13);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p17, $sub.i8(0, 54));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p18, 3);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} deliver_recv_msg($p0, $p2);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const smi_start_processing: ref;

axiom smi_start_processing == $sub.ref(0, 501594);

procedure smi_start_processing($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48;



implementation smi_start_processing($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i29: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(352, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p2);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} vslice_dummy_var_146 := reg_timer_3($p11, smi_timeout, $i12);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, jiffies);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(480, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(352, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, jiffies);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_147 := ldv_mod_timer_26($p16, $i18);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i22 := $M.40;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, $i22);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 2);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i29 := $i36;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i29, 0);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p2);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p41 := kthread_create.ref.ref.ref.i32(ipmi_thread, $p38, .str.6, $i40);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i43 := IS_ERR($p42);
    call {:si_unique_call 804} {:cexpr "tmp___0"} boogie_si_record_i64($i43);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p41);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i50 := IS_ERR($p49);
    call {:si_unique_call 807} {:cexpr "tmp___2"} boogie_si_record_i64($i50);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i55 := PTR_ERR($p54);
    call {:si_unique_call 809} {:cexpr "tmp___1"} boogie_si_record_i64($i55);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_149 := dev_notice.ref.ref.i64($p57, .str.7, $i55);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $0.ref);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} vslice_dummy_var_148 := wake_up_process($p41);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb9;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb12;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref(force_kipmid, $mul.ref(0, 16)), $mul.ref($i26, 4));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.41, $p27);
    call {:si_unique_call 801} {:cexpr "enable"} boogie_si_record_i32($i28);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 798} vslice_dummy_var_145 := devirtbounce.8($p9, $p2);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const sender: ref;

axiom sender == $sub.ref(0, 502626);

procedure sender($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, assertsPassed, $CurrAddr, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation sender($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p14: ref;
  var $p16: ref;
  var $i17: i8;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p57: ref;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} {:cexpr "sender:arg:priority"} boogie_si_record_i32($i2);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(488, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i5 := atomic_read($p4);
    call {:si_unique_call 813} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(352, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, jiffies);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, 2);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_150 := ldv_mod_timer_24($p23, $i25);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(336, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} ldv_spin_lock_check();
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i2, 0);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} list_add_tail($p46, $p47);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(104, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} spin_unlock_irqrestore($p48, $u0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_spin_lock_check();
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} spin_unlock_irqrestore($p57, $u0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb24;

  $bb25:
    assume $i55 == 1;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} vslice_dummy_var_152 := start_next_msg($p3);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(184, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} list_add_tail($p44, $p45);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(0, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} list_add_tail($p37, $p38);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i39 := smi_event_handler($p3, 0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 819} {:cexpr "result"} boogie_si_record_i32($i39);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 4);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call $i41, $i42 := sender_loop_$bb13($p3, $i41, $i42);
    goto $bb13_last;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} __const_udelay(1073750);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i41 := smi_event_handler($p3, 250);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    call {:si_unique_call 822} {:cexpr "result"} boogie_si_record_i32($i41);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 4);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb15_dummy;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 616)), $mul.ref(592, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vslice_dummy_var_151 := wake_up_process($p32);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 4);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i12);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(1, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i17);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(312, 1)), $mul.ref(2, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $sub.i8(0, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 592)), $mul.ref(308, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 3);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} deliver_recv_msg($p3, $p1);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const request_events: ref;

axiom request_events == $sub.ref(0, 503658);

procedure request_events($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation request_events($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(488, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $i3 := atomic_read($p2);
    call {:si_unique_call 831} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(329, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(332, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} atomic_set($p9, 1);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const set_run_to_completion: ref;

axiom set_run_to_completion == $sub.ref(0, 504690);

procedure set_run_to_completion($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $CurrAddr, assertsPassed, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation set_run_to_completion($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} {:cexpr "set_run_to_completion:arg:i_run_to_completion"} boogie_si_record_i32($i1);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(336, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i5 := smi_event_handler($p2, 0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 835} {:cexpr "result"} boogie_si_record_i32($i5);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 4);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $i7, $i8 := set_run_to_completion_loop_$bb6($p2, $i7, $i8);
    goto $bb6_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} __const_udelay(1073750);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i7 := smi_event_handler($p2, 250);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 838} {:cexpr "result"} boogie_si_record_i32($i7);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 4);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8_dummy;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const set_maintenance_mode: ref;

axiom set_maintenance_mode == $sub.ref(0, 505722);

procedure set_maintenance_mode($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_maintenance_mode($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} {:cexpr "set_maintenance_mode:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(332, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} atomic_set($p4, 0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mod_timer_24: ref;

axiom ldv_mod_timer_24 == $sub.ref(0, 506754);

procedure ldv_mod_timer_24($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation ldv_mod_timer_24($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} {:cexpr "ldv_mod_timer_24:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 843} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const wake_up_process: ref;

axiom wake_up_process == $sub.ref(0, 507786);

procedure wake_up_process($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wake_up_process($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 1} true;
    call {:si_unique_call 845} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 846} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const smi_timeout: ref;

axiom smi_timeout == $sub.ref(0, 508818);

procedure smi_timeout($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, assertsPassed, $CurrAddr, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation smi_timeout($i0: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i28: i64;
  var $i22: i64;
  var $i34: i1;
  var $p35: ref;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} {:cexpr "smi_timeout:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} ldv_spin_lock_check();
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, jiffies);
    call {:si_unique_call 849} {:cexpr "jiffies_now"} boogie_si_record_i64($i2);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(480, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64($i2, $i4);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i6 := $mul.i64($i5, 4000);
    call {:si_unique_call 850} {:cexpr "time_diff"} boogie_si_record_i64($i6);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i8 := smi_event_handler($p1, $i7);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    call {:si_unique_call 852} {:cexpr "smi_result"} boogie_si_record_i32($i8);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} spin_unlock_irqrestore($p9, $u0);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(480, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i2);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i8, 1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(1, 4));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} atomic_inc($p31);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, jiffies);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 2);
    call {:si_unique_call 859} {:cexpr "timeout"} boogie_si_record_i64($i33);
    assume {:verifier.code 0} true;
    $i28 := $i33;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i8, 4);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(352, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_153 := ldv_mod_timer_25($p35, $i22);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} atomic_inc($p25);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, jiffies);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, 1);
    call {:si_unique_call 857} {:cexpr "timeout"} boogie_si_record_i64($i27);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb10;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(492, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, jiffies);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2);
    call {:si_unique_call 854} {:cexpr "timeout"} boogie_si_record_i64($i18);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(1, 4));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} atomic_inc($p21);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i22 := $i18;
    goto $bb6;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const reg_timer_3: ref;

axiom reg_timer_3 == $sub.ref(0, 509850);

procedure reg_timer_3($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation reg_timer_3($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} {:cexpr "reg_timer_3:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(smi_timeout));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} activate_suitable_timer_3($p0, $i2);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mod_timer_26: ref;

axiom ldv_mod_timer_26 == $sub.ref(0, 510882);

procedure ldv_mod_timer_26($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation ldv_mod_timer_26($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} {:cexpr "ldv_mod_timer_26:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 865} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ipmi_thread: ref;

axiom ipmi_thread == $sub.ref(0, 511914);

procedure ipmi_thread($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.43, $M.5, $M.20, $M.22, $CurrAddr, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37;



implementation ipmi_thread($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i15: i32;
  var $i16: i1;
  var vslice_dummy_var_154: i64;
  var vslice_dummy_var_155: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ipmi_si_set_not_busy($p1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p3 := get_current();
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} set_user_nice($p3, 19);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i4 := kthread_should_stop();
    call {:si_unique_call 872} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i15, $i16, vslice_dummy_var_154, vslice_dummy_var_155 := ipmi_thread_loop_$bb4($p1, $p2, $i6, $p7, $i8, $i9, $i10, $i11, $i12, $i15, $i16, vslice_dummy_var_154, vslice_dummy_var_155);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} ldv_spin_lock_check();
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $i6 := smi_event_handler($p2, 0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 875} {:cexpr "smi_result"} boogie_si_record_i32($i6);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} spin_unlock_irqrestore($p7, $u0);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i8 := ipmi_thread_busy_wait($i6, $p2, $p1);
    call {:si_unique_call 878} {:cexpr "busy_wait"} boogie_si_record_i32($i8);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 1);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 4);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i12 == 1);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} vslice_dummy_var_155 := schedule_timeout_interruptible(1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i15 := kthread_should_stop();
    call {:si_unique_call 880} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb18_dummy;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} vslice_dummy_var_154 := schedule_timeout_interruptible(100);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i8, 0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb12:
    assume $i11 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} schedule();
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const kthread_create: ref;

axiom kthread_create == $sub.ref(0, 512946);

procedure kthread_create.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p3 := external_alloc();
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 513978);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i1 := ldv_is_err($p0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 886} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i64($i3);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 515010);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 888} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_notice: ref;

axiom dev_notice == $sub.ref(0, 516042);

procedure dev_notice.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dev_notice.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 889} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 890} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 517074);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 518106);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ipmi_si_set_not_busy: ref;

axiom ipmi_si_set_not_busy == $sub.ref(0, 519138);

procedure ipmi_si_set_not_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.43;



implementation ipmi_si_set_not_busy($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, $p1, $sub.i64(0, 1));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 520170);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $p0 := devirtbounce.22(0, current_task);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const set_user_nice: ref;

axiom set_user_nice == $sub.ref(0, 521202);

procedure set_user_nice($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation set_user_nice($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} {:cexpr "set_user_nice:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    return;
}



const ipmi_thread_busy_wait: ref;

axiom ipmi_thread_busy_wait == $sub.ref(0, 522234);

procedure ipmi_thread_busy_wait($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.43, $M.46, $M.47, $CurrAddr, $M.48;



implementation ipmi_thread_busy_wait($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 894} {:cexpr "ipmi_thread_busy_wait:arg:smi_result"} boogie_si_record_i32($i0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i6 := $M.44;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, $i6);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i0, 1);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i16 := ipmi_si_is_busy($p2);
    call {:si_unique_call 898} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} getnstimeofday($p3);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i20 := timespec_compare($p3, $p2);
    call {:si_unique_call 903} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i20, 0);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 905} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} ipmi_si_set_not_busy($p2);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb15;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} getnstimeofday($p2);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i13);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i19 := $mul.i64($i18, 1000);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} timespec_add_ns($p2, $i19);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} ipmi_si_set_not_busy($p2);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb5;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref(kipmid_max_busy_us, $mul.ref(0, 16)), $mul.ref($i10, 4));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.45, $p11);
    call {:si_unique_call 895} {:cexpr "max_busy_us"} boogie_si_record_i32($i12);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 523266);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout_interruptible: ref;

axiom schedule_timeout_interruptible == $sub.ref(0, 524298);

procedure schedule_timeout_interruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_interruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 907} {:cexpr "schedule_timeout_interruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 908} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 909} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kthread_should_stop: ref;

axiom kthread_should_stop == $sub.ref(0, 525330);

procedure kthread_should_stop() returns ($r: i32);
  free requires assertsPassed;



implementation kthread_should_stop() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 1} true;
    call {:si_unique_call 910} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 911} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ipmi_si_is_busy: ref;

axiom ipmi_si_is_busy == $sub.ref(0, 526362);

procedure ipmi_si_is_busy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ipmi_si_is_busy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.43, $p1);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const getnstimeofday: ref;

axiom getnstimeofday == $sub.ref(0, 527394);

procedure getnstimeofday($p0: ref);
  free requires assertsPassed;



implementation getnstimeofday($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    return;
}



const timespec_add_ns: ref;

axiom timespec_add_ns == $sub.ref(0, 528426);

procedure timespec_add_ns($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.46, $M.47, $M.43, $M.48, $CurrAddr;



implementation timespec_add_ns($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.46 := $store.i64($M.46, $p2, $i1);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.43, $p3);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.46, $p2);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i4, $i5);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i7 := __iter_div_u64_rem($i6, 1000000000, $p2);
    call {:si_unique_call 914} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.47, $p8);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i7);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i9, $i10);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p12, $i11);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.46, $p2);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, $p14, $i13);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    return;
}



const timespec_compare: ref;

axiom timespec_compare == $sub.ref(0, 529458);

procedure timespec_compare($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation timespec_compare($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $i19: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.47, $p2);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.47, $p4);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i6 := $slt.i64($i3, $i5);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.47, $p8);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.47, $p10);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i64($i9, $i11);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.43, $p13);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.43, $p16);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i15, $i18);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;
}



const __iter_div_u64_rem: ref;

axiom __iter_div_u64_rem == $sub.ref(0, 530490);

procedure __iter_div_u64_rem($i0: i64, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.48, $M.46, $CurrAddr;



implementation __iter_div_u64_rem($i0: i64, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $i15: i1;
  var $i8: i32;
  var $i16: i32;
  var $i7: i32;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.48 := $store.i64($M.48, $p3, $i0);
    call {:si_unique_call 916} {:cexpr "__iter_div_u64_rem:arg:divisor"} boogie_si_record_i32($i1);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.48, $p3);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i4, $i5);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.48, $p3);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $M.46 := $store.i64($M.46, $p2, $i17);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i8, $i16 := __iter_div_u64_rem_loop_$bb4($i1, $p3, $i4, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i8, $i16);
    goto $bb4_last;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.48, $p3);
    call {:si_unique_call 917} devirtbounce.23(0, $p3, $i9);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.48, $p3);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i1);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64($i10, $i11);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $M.48 := $store.i64($M.48, $p3, $i12);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i8, 1);
    call {:si_unique_call 918} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.48, $p3);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i15 := $ule.i64($i4, $i14);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5223;
}



const ldv_mod_timer_25: ref;

axiom ldv_mod_timer_25 == $sub.ref(0, 531522);

procedure ldv_mod_timer_25($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation ldv_mod_timer_25($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} {:cexpr "ldv_mod_timer_25:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 921} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} activate_pending_timer_3($p0, $i1, 1);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const read_status: ref;

axiom read_status == $sub.ref(0, 532554);

procedure read_status($p0: ref) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation read_status($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 923} $i7 := devirtbounce($p4, $p6, 1);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    call {:si_unique_call 924} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const check_ibf: ref;

axiom check_ibf == $sub.ref(0, 533586);

procedure check_ibf($p0: ref, $i1: i8, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation check_ibf($p0: ref, $i1: i8, $i2: i64) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} {:cexpr "check_ibf:arg:status"} boogie_si_record_i8($i1);
    call {:si_unique_call 926} {:cexpr "check_ibf:arg:time"} boogie_si_record_i64($i2);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 2);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, 1000000);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64($i7, $i2);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i8);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i12 := $slt.i64($i11, 0);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb5;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} start_error_recovery($p0, .str.120);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, 1000000);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb5;
}



const clear_obf: ref;

axiom clear_obf == $sub.ref(0, 534618);

procedure clear_obf($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation clear_obf($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var vslice_dummy_var_156: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} {:cexpr "clear_obf:arg:status"} boogie_si_record_i8($i1);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} vslice_dummy_var_156 := read_data($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const start_error_recovery: ref;

axiom start_error_recovery == $sub.ref(0, 535650);

procedure start_error_recovery($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation start_error_recovery($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(580, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(580, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(580, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 10);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, jiffies);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, 500);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(600, 1));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, $i15);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 6);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i9 := $M.1;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 10);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} vslice_dummy_var_157 := printk.ref.ref(.str.121, $p1);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const write_cmd: ref;

axiom write_cmd == $sub.ref(0, 536682);

procedure write_cmd($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation write_cmd($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} {:cexpr "write_cmd:arg:data"} boogie_si_record_i8($i1);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 932} devirtbounce.1($p5, $p7, 1, $i9);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    return;
}



const read_data: ref;

axiom read_data == $sub.ref(0, 537714);

procedure read_data($p0: ref) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation read_data($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 933} $i7 := devirtbounce($p4, $p6, 0);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    call {:si_unique_call 934} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const write_next_byte: ref;

axiom write_next_byte == $sub.ref(0, 538746);

procedure write_next_byte($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation write_next_byte($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(288, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(16, 1)), $mul.ref($i3, 1));
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} write_data($p0, $i8);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(288, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(288, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    return;
}



const check_obf: ref;

axiom check_obf == $sub.ref(0, 539778);

procedure check_obf($p0: ref, $i1: i8, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation check_obf($p0: ref, $i1: i8, $i2: i64) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} {:cexpr "check_obf:arg:status"} boogie_si_record_i8($i1);
    call {:si_unique_call 937} {:cexpr "check_obf:arg:time"} boogie_si_record_i64($i2);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, 1000000);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64($i7, $i2);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i8);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i12 := $slt.i64($i11, 0);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb5;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} start_error_recovery($p0, .str.122);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb5;
}



const read_next_byte: ref;

axiom read_next_byte == $sub.ref(0, 540810);

procedure read_next_byte($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation read_next_byte($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var vslice_dummy_var_158: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 271);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i6 := read_data($p0);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(300, 1)), $mul.ref($i9, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i6);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} write_data($p0, 104);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} vslice_dummy_var_158 := read_data($p0);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(576, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const write_data: ref;

axiom write_data == $sub.ref(0, 541842);

procedure write_data($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation write_data($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} {:cexpr "write_data:arg:data"} boogie_si_record_i8($i1);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(8, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 943} devirtbounce.1($p5, $p7, 0, $i9);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    return;
}



const restart_kcs_transaction: ref;

axiom restart_kcs_transaction == $sub.ref(0, 542874);

procedure restart_kcs_transaction($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation restart_kcs_transaction($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(296, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(292, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i2);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(288, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(572, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(0, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 2);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(584, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 1000000);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(592, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, 1000000);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} write_cmd($p0, 97);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 543906);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 945} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 946} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 947} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 948} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p4 := malloc($i0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 950} __VERIFIER_assume($i7);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 544938);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 951} $r := $malloc($i0);
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 545970);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $p1 := calloc(1, $i0);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 954} __VERIFIER_assume($i4);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 547002);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.49;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 956} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.49;
    call {:si_unique_call 957} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.49 := cmdloc_dummy_var_21;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const choose_interrupt_2: ref;

axiom choose_interrupt_2 == $sub.ref(0, 548034);

procedure choose_interrupt_2();
  free requires assertsPassed;
  modifies $M.26, $M.0, $M.17, $M.5, $M.20, $M.22, assertsPassed, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation choose_interrupt_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 958} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 959} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 960} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} ldv_stop();
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i18 := $M.32;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i19 := $M.33;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p20 := $M.37;
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i21 := ldv_irq_2($i18, $i19, $p20);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $M.26 := $i21;
    call {:si_unique_call 964} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i21);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i14 := $M.30;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i15 := $M.31;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p16 := $M.36;
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i17 := ldv_irq_2($i14, $i15, $p16);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $M.26 := $i17;
    call {:si_unique_call 962} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i17);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i10 := $M.28;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i11 := $M.29;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p12 := $M.35;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i13 := ldv_irq_2($i10, $i11, $p12);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $M.26 := $i13;
    call {:si_unique_call 966} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i13);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i6 := $M.26;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i7 := $M.27;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p8 := $M.34;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i9 := ldv_irq_2($i6, $i7, $p8);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $M.26 := $i9;
    call {:si_unique_call 968} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i9);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_391:
    assume !assertsPassed;
    return;
}



const ldv_irq_2: ref;

axiom ldv_irq_2 == $sub.ref(0, 549066);

procedure ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, assertsPassed, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} {:cexpr "ldv_irq_2:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 971} {:cexpr "ldv_irq_2:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 1} true;
    call {:si_unique_call 972} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 973} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 974} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 975} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 976} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 977} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_stop();
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i8 := si_irq_handler($i1, $p2);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 980} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 550098);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const choose_timer_3: ref;

axiom choose_timer_3 == $sub.ref(0, 551130);

procedure choose_timer_3();
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16, $M.0, $M.17, $M.5, $M.20, $M.22, $M.9, $M.11, $M.13, $M.15, assertsPassed, $CurrAddr, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation choose_timer_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 1} true;
    call {:si_unique_call 983} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 984} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 985} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} ldv_stop();
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i18 := $M.16;
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 992} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(2);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i20 := $M.16;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p21 := $M.15;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} ldv_timer_3($i20, $p21);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i14 := $M.14;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 990} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(2);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i16 := $M.14;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p17 := $M.13;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} ldv_timer_3($i16, $p17);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i10 := $M.12;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $M.12 := 2;
    call {:si_unique_call 988} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(2);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i12 := $M.12;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p13 := $M.11;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} ldv_timer_3($i12, $p13);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i6 := $M.10;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 986} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(2);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i8 := $M.10;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p9 := $M.9;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} ldv_timer_3($i8, $p9);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const ldv_timer_3: ref;

axiom ldv_timer_3 == $sub.ref(0, 552162);

procedure ldv_timer_3($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, assertsPassed, $CurrAddr, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation ldv_timer_3($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} {:cexpr "ldv_timer_3:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} smi_timeout($i3);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const ldv_initialize_pnp_driver_9: ref;

axiom ldv_initialize_pnp_driver_9 == $sub.ref(0, 553194);

procedure ldv_initialize_pnp_driver_9();
  free requires assertsPassed;
  modifies $M.51, $M.0, $CurrAddr;



implementation ldv_initialize_pnp_driver_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p0 := ldv_init_zalloc(1264);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $M.51 := $p0;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_3: ref;

axiom timer_init_3 == $sub.ref(0, 554226);

procedure timer_init_3();
  free requires assertsPassed;
  modifies $M.10, $M.12, $M.14, $M.16;



implementation timer_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 1000} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 1001} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 1002} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 1003} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 555258);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.52, $M.0, $M.17, $M.5, $M.20, $M.22, assertsPassed, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1004} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1005} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1006} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} ldv_stop();
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i18 := $M.61;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i19 := $M.62;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p20 := $M.63;
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $M.52 := $i21;
    call {:si_unique_call 1010} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i14 := $M.58;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i15 := $M.59;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p16 := $M.60;
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $M.52 := $i17;
    call {:si_unique_call 1008} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i10 := $M.55;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i11 := $M.56;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p12 := $M.57;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $M.52 := $i13;
    call {:si_unique_call 1012} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i6 := $M.52;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i7 := $M.53;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p8 := $M.54;
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.52 := $i9;
    call {:si_unique_call 1014} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 556290);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, assertsPassed, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1016} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1017} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1018} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1019} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1020} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i0, 0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1021} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1022} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1023} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} ldv_stop();
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 1);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i8 := si_bt_irq_handler($i1, $p2);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 1026} {:cexpr "irq_retval"} boogie_si_record_i32($i8);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_424:
    assume !assertsPassed;
    return;
}



const ldv_pci_driver_8: ref;

axiom ldv_pci_driver_8 == $sub.ref(0, 557322);

procedure ldv_pci_driver_8();
  free requires assertsPassed;
  modifies $M.64, $M.0, $CurrAddr;



implementation ldv_pci_driver_8()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $p0 := ldv_init_zalloc(2760);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $M.64 := $p0;
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 558354);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $M.65, $M.66, $M.10, $M.12, $M.14, $M.16, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.0, $M.17, $M.78, $M.26, $M.79, $M.7, $M.81, $M.82, $M.83, $M.84, $M.52, $M.85, $M.51, $M.30, $M.28, $M.61, $M.58, $M.55, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.9, $M.11, $M.13, $M.15, $M.53, $M.54, $M.56, $M.57, $M.59, $M.60, $M.62, $M.63, $M.64, $M.80, $M.3, $M.2, $M.1, $M.101, $M.102, $M.94, $M.125, $M.124, $M.93, $M.104, $M.103, $M.122, $M.120, $M.119, $M.118, $M.117, $M.116, $M.115, $M.114, $M.92, $M.91, $M.147, $M.90, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.89, $M.88, $M.25, $M.24, $M.45, $M.44, $M.41, $M.40, $M.87, $M.95, $M.86, $M.8, $M.4, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264, $CurrAddr, $M.5, $M.20, $M.22, $M.39, $M.96, $M.97, $M.98, $M.43, assertsPassed, $M.121, $M.46, $M.47, $M.48;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i64;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i1;
  var $i185: i32;
  var $i186: i1;
  var $i188: i32;
  var $i189: i1;
  var $i191: i32;
  var $i192: i1;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $i200: i32;
  var $i201: i1;
  var $i202: i1;
  var $i203: i1;
  var $i204: i32;
  var $i205: i1;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $i222: i32;
  var $i223: i1;
  var vslice_dummy_var_159: ref;
  var vslice_dummy_var_160: ref;
  var vslice_dummy_var_161: ref;
  var vslice_dummy_var_162: ref;
  var vslice_dummy_var_163: ref;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;

  $bb0:
    call {:si_unique_call 1030} $initialize();
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $p6 := ldv_init_zalloc(1);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} $p7 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1040} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p7);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p9 := ldv_init_zalloc(1);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p10 := ldv_init_zalloc(1);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p11 := ldv_init_zalloc(1);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $p12 := ldv_init_zalloc(1);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p13 := ldv_init_zalloc(592);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $p15 := ldv_init_zalloc(1);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p16 := ldv_init_zalloc(24);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p18 := ldv_init_zalloc(16);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p20 := ldv_init_zalloc(32);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p22 := ldv_init_zalloc(1);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $p23 := ldv_init_zalloc(32);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} ldv_initialize();
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_159 := ldv_memset($p25, 0, 4);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vslice_dummy_var_160 := ldv_memset($p27, 0, 4);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_161 := ldv_memset($p29, 0, 4);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} vslice_dummy_var_162 := ldv_memset($p31, 0, 8);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p4);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_163 := ldv_memset($p33, 0, 4);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 1058} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $M.66 := 0;
    call {:si_unique_call 1059} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} timer_init_3();
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $M.67 := 1;
    call {:si_unique_call 1061} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 1062} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 1063} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1064} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 1065} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $M.73 := 0;
    call {:si_unique_call 1067} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.74 := 0;
    call {:si_unique_call 1068} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 1069} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 1070} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 1071} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $p121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $i138, $p139, $i140, $i141, $p142, $i143, $i144, $p145, $i146, $i147, $p148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $i156, $p157, $i158, $i159, $i160, $i161, $i162, $p163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i185, $i186, $i188, $i189, $i191, $i192, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i222, $i223, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p8, $p9, $p10, $p11, $p12, $p14, $p15, $p17, $p19, $p21, $p22, $p24, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $p121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $i138, $p139, $i140, $i141, $p142, $i143, $i144, $p145, $i146, $i147, $p148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $i156, $p157, $i158, $i159, $i160, $i161, $i162, $p163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i185, $i186, $i188, $i189, $i191, $i192, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i222, $i223, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i35, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i35, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i35, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i35, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} ldv_stop();
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb33_dummy;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i222 := $M.77;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb262:
    assume $i223 == 1;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} ldv_main_exported_5();
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    goto $bb264;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i215 := $M.76;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 0);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb250:
    assume $i216 == 1;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1180} $i217 := __VERIFIER_nondet_int();
    call {:si_unique_call 1181} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i217);
    call {:si_unique_call 1182} {:cexpr "tmp___19"} boogie_si_record_i32($i217);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} ldv_stop();
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb253:
    assume $i218 == 1;
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i219 := $M.76;
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 1);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb255:
    assume $i220 == 1;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} vslice_dummy_var_170 := hotmod_handler($p22, $p24);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 1184} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto $bb257;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i198 := $M.75;
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb220:
    assume $i199 == 1;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1158} $i200 := __VERIFIER_nondet_int();
    call {:si_unique_call 1159} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i200);
    call {:si_unique_call 1160} {:cexpr "tmp___18"} boogie_si_record_i32($i200);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $i201 := $slt.i32($i200, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i200, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    assume !($i202 == 1);
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} ldv_stop();
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb225:
    assume $i202 == 1;
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i208 := $M.75;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 1);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb238:
    assume $i209 == 1;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i210 := init_ipmi_si();
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $M.85 := $i210;
    call {:si_unique_call 1165} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i210);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i211 := $M.85;
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 0);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $i213 := $M.85;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i214 := $ne.i32($i213, 0);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb243:
    assume $i214 == 1;
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $M.75 := 2;
    call {:si_unique_call 1178} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} ldv_check_final_state();
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb240:
    assume $i212 == 1;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $M.75 := 3;
    call {:si_unique_call 1166} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1167} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} ldv_initialize_si_sm_handlers_5();
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1169} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} ldv_initialize_pnp_driver_9();
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 1171} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1172} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 1173} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} ldv_initialize_si_sm_handlers_4();
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1175} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1176} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} ldv_initialize_si_sm_handlers_6();
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    goto $bb242;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb223:
    assume $i201 == 1;
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i200, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb227;

  $bb228:
    assume $i203 == 1;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i204 := $M.75;
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 3);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb230:
    assume $i205 == 1;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i206 := $M.74;
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 0);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb232;

  $bb233:
    assume $i207 == 1;
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} cleanup_ipmi_si();
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $M.75 := 2;
    call {:si_unique_call 1162} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    goto $bb235;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i35, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i35, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i196 := $M.73;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb217:
    assume $i197 == 1;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} ldv_main_exported_4();
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    goto $bb219;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i194 := $M.72;
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb214:
    assume $i195 == 1;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} choose_interrupt_1();
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    goto $bb216;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i41 == 1;
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i108 := $M.71;
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb115:
    assume $i109 == 1;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1111} $i110 := __VERIFIER_nondet_int();
    call {:si_unique_call 1112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i110);
    call {:si_unique_call 1113} {:cexpr "tmp___17"} boogie_si_record_i32($i110);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i110, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i110, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i110, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i110, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} ldv_stop();
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb124:
    assume $i114 == 1;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i182 := $M.71;
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 4);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i185 := $M.71;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 3);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $i188 := $M.71;
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 2);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i191 := $M.71;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 5);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb208:
    assume $i192 == 1;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} vslice_dummy_var_169 := ldv_shutdown_8();
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $M.71 := 5;
    call {:si_unique_call 1154} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(5);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb205:
    assume $i189 == 1;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} vslice_dummy_var_168 := ldv_shutdown_8();
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1152} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb202:
    assume $i186 == 1;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} vslice_dummy_var_167 := ldv_shutdown_8();
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.71 := 3;
    call {:si_unique_call 1150} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb199:
    assume $i183 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} vslice_dummy_var_166 := ldv_shutdown_8();
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $M.71 := 4;
    call {:si_unique_call 1148} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(4);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb122:
    assume $i113 == 1;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i172 := $M.71;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 4);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i177 := $M.71;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 3);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb193:
    assume $i178 == 1;
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i179 := ldv_resume_early_8();
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $M.84 := $i179;
    call {:si_unique_call 1145} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i179);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i180 := $M.84;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 0);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb195:
    assume $i181 == 1;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.71 := 5;
    call {:si_unique_call 1146} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(5);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb187:
    assume $i173 == 1;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i174 := ldv_resume_early_8();
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $M.84 := $i174;
    call {:si_unique_call 1142} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i174);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i175 := $M.84;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb189:
    assume $i176 == 1;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $M.71 := 5;
    call {:si_unique_call 1143} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(5);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb120:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i110, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i115 == 1);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i167 := $M.71;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 3);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb181:
    assume $i168 == 1;
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i169 := ldv_suspend_late_8();
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $M.83 := $i169;
    call {:si_unique_call 1139} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i169);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i170 := $M.83;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 0);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb183:
    assume $i171 == 1;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $M.71 := 4;
    call {:si_unique_call 1140} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(4);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb127:
    assume $i115 == 1;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i149 := $M.71;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 4);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i155 := $M.71;
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 3);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i161 := $M.71;
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 5);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb175:
    assume $i162 == 1;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p163 := $M.64;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i164 := ipmi_pci_resume($p163);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.82 := $i164;
    call {:si_unique_call 1136} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i164);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i165 := $M.82;
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb177:
    assume $i166 == 1;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1137} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb169:
    assume $i156 == 1;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p157 := $M.64;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i158 := ipmi_pci_resume($p157);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $M.82 := $i158;
    call {:si_unique_call 1133} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i158);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i159 := $M.82;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 0);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb171:
    assume $i160 == 1;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1134} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb163:
    assume $i150 == 1;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p151 := $M.64;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i152 := ipmi_pci_resume($p151);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $M.82 := $i152;
    call {:si_unique_call 1130} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i152);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i153 := $M.82;
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 0);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb165:
    assume $i154 == 1;
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1131} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb118:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i110, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i110, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i117 == 1);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i137 := $M.71;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 4);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i140 := $M.71;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 3);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i143 := $M.71;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 2);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i146 := $M.71;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 5);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb160:
    assume $i147 == 1;
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p148 := $M.64;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} ipmi_pci_remove($p148);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1128} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    goto $bb162;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb157:
    assume $i144 == 1;
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p145 := $M.64;
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} ipmi_pci_remove($p145);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1126} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    goto $bb159;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb154:
    assume $i141 == 1;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p142 := $M.64;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ipmi_pci_remove($p142);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1124} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb156;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb151:
    assume $i138 == 1;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p139 := $M.64;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ipmi_pci_remove($p139);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1122} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    goto $bb153;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb131:
    assume $i117 == 1;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i127 := $M.71;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 2);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb142:
    assume $i128 == 1;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i129 := $M.80;
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 0);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb144;

  $bb145:
    assume $i130 == 1;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p131 := $M.64;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.49, $p132);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i134 := ipmi_pci_suspend($p131, $i133);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $M.81 := $i134;
    call {:si_unique_call 1119} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i134);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i135 := $M.81;
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 0);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb147:
    assume $i136 == 1;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.71 := 3;
    call {:si_unique_call 1120} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb129:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i110, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb126;

  $bb133:
    assume $i118 == 1;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i119 := $M.71;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 1);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb135:
    assume $i120 == 1;
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p121 := $M.64;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i122 := ipmi_pci_probe($p121, $p21);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.79 := $i122;
    call {:si_unique_call 1115} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i122);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i123 := $M.79;
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb137:
    assume $i124 == 1;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i125 := $M.74;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i125, 1);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.74 := $i126;
    call {:si_unique_call 1117} {:cexpr "ref_cnt"} boogie_si_record_i32($i126);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb3:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i35, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i35, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i35, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i106 := $M.70;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb112:
    assume $i107 == 1;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} choose_interrupt_2();
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i87 := $M.69;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb89:
    assume $i88 == 1;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1099} $i89 := __VERIFIER_nondet_int();
    call {:si_unique_call 1100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i89);
    call {:si_unique_call 1101} {:cexpr "tmp___16"} boogie_si_record_i32($i89);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_stop();
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb94:
    assume $i91 == 1;
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i101 := $M.69;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 2);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb106:
    assume $i102 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p103 := $M.51;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} ipmi_pnp_remove($p103);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1107} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i104 := $M.74;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i104, 1);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $M.74 := $i105;
    call {:si_unique_call 1108} {:cexpr "ref_cnt"} boogie_si_record_i32($i105);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i89, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb96;

  $bb97:
    assume $i92 == 1;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i93 := $M.69;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 1);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb99:
    assume $i94 == 1;
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p95 := $M.51;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i96 := ipmi_pnp_probe($p95, $p19);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $M.78 := $i96;
    call {:si_unique_call 1103} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i96);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i97 := $M.78;
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i98 == 1;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1104} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i99 := $M.74;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 1);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $M.74 := $i100;
    call {:si_unique_call 1105} {:cexpr "ref_cnt"} boogie_si_record_i32($i100);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i79 := $M.68;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb77:
    assume $i80 == 1;
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1093} $i81 := __VERIFIER_nondet_int();
    call {:si_unique_call 1094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i81);
    call {:si_unique_call 1095} {:cexpr "tmp___15"} boogie_si_record_i32($i81);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} ldv_stop();
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb80:
    assume $i82 == 1;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i83 := $M.68;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 1);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb82:
    assume $i84 == 1;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.49, $p3);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} vslice_dummy_var_165 := dell_poweredge_bt_xaction_handler($p17, $i85, $p15);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1097} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i35, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i35, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i47 == 1);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i77 := $M.67;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb74:
    assume $i78 == 1;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} choose_timer_3();
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb76;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i47 == 1;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i51 := $M.66;
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34:
    assume $i52 == 1;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1076} $i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 1077} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i53);
    call {:si_unique_call 1078} {:cexpr "tmp___14"} boogie_si_record_i32($i53);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i53, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i53, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i53, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} ldv_stop();
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb43:
    assume $i57 == 1;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i75 := $M.66;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 1);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb68:
    assume $i76 == 1;
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} poll($p10);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1090} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i56 == 1;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i72 := $M.66;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 1);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb65:
    assume $i73 == 1;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.49, $p1);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} sender($p6, $p14, $i74);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1088} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    goto $bb67;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i55 == 1;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i70 := $M.66;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb62:
    assume $i71 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} request_events($p12);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1086} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb37:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i53, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i59 == 1);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i67 := $M.66;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 1);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb59:
    assume $i68 == 1;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.49, $p0);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} set_run_to_completion($p5, $i69);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1084} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    goto $bb61;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i59 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i64 := $M.66;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb56:
    assume $i65 == 1;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.49, $p2);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} set_maintenance_mode($p11, $i66);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1082} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb46:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb45;

  $bb50:
    assume $i60 == 1;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i61 := $M.66;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i62 == 1;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} vslice_dummy_var_164 := smi_start_processing($p9, $p8);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1080} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i35, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb13;

  $bb28:
    assume $i48 == 1;
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i49 := $M.65;
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i50 == 1;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_main_exported_6();
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb33_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} $i35 := __VERIFIER_nondet_int();
    call {:si_unique_call 1073} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i35);
    call {:si_unique_call 1074} {:cexpr "tmp___13"} boogie_si_record_i32($i35);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 559386);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 560418);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.49, $M.65, $M.0, $CurrAddr, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation ldv_main_exported_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var vslice_dummy_var_171: ref;
  var vslice_dummy_var_172: ref;
  var vslice_dummy_var_173: ref;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $p4 := ldv_init_zalloc(48);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $p6 := ldv_init_zalloc(1);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} vslice_dummy_var_171 := ldv_memset($p7, 0, 4);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} vslice_dummy_var_172 := ldv_memset($p9, 0, 8);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} vslice_dummy_var_173 := ldv_memset($p11, 0, 4);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1197} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1198} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1199} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} ldv_stop();
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i46 := $M.65;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb38:
    assume $i47 == 1;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p48 := $M.86;
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.49, $p2);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} vslice_dummy_var_179 := start_kcs_transaction($p48, $p6, $i49);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1213} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i41 := $M.65;
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb35:
    assume $i42 == 1;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p43 := $M.86;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.49, $p0);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} vslice_dummy_var_178 := get_kcs_result($p43, $p3, $i44);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1211} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i37 := $M.65;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i38 == 1;
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p39 := $M.86;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} vslice_dummy_var_177 := init_kcs_data($p39, $p5);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1209} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i32 := $M.65;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p34 := $M.86;
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.49, $p1);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} vslice_dummy_var_176 := kcs_event($p34, $i35);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1207} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i28 := $M.65;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i29 == 1;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p30 := $M.86;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} vslice_dummy_var_175 := kcs_detect($p30);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1205} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i25 := $M.65;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p27 := $M.86;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} kcs_cleanup($p27);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1203} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i22 := $M.65;
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i23 == 1;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} vslice_dummy_var_174 := kcs_size();
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1201} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const ldv_suspend_late_8: ref;

axiom ldv_suspend_late_8 == $sub.ref(0, 561450);

procedure ldv_suspend_late_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1215} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1216} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_8: ref;

axiom ldv_resume_early_8 == $sub.ref(0, 562482);

procedure ldv_resume_early_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1217} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1218} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_shutdown_8: ref;

axiom ldv_shutdown_8 == $sub.ref(0, 563514);

procedure ldv_shutdown_8() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_shutdown_8() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1219} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1220} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 564546);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.49, $M.73, $M.0, $M.5, $CurrAddr, $M.17, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var vslice_dummy_var_180: ref;
  var vslice_dummy_var_181: ref;
  var vslice_dummy_var_182: ref;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $p4 := ldv_init_zalloc(48);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p6 := ldv_init_zalloc(1);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} vslice_dummy_var_180 := ldv_memset($p7, 0, 8);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} vslice_dummy_var_181 := ldv_memset($p9, 0, 4);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} vslice_dummy_var_182 := ldv_memset($p11, 0, 4);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1230} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1231} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1232} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} ldv_stop();
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i51 := $M.73;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb38:
    assume $i52 == 1;
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p53 := $M.87;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.49, $p1);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} vslice_dummy_var_188 := bt_start_transaction($p54, $p6, $i55);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 1246} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i45 := $M.73;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb35:
    assume $i46 == 1;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p47 := $M.87;
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.49, $p2);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} vslice_dummy_var_187 := bt_get_result($p48, $p3, $i49);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 1244} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i40 := $M.73;
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i41 == 1;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p42 := $M.87;
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} vslice_dummy_var_186 := bt_init_data($p43, $p5);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 1242} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i34 := $M.73;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p36 := $M.87;
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.49, $p0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} vslice_dummy_var_185 := bt_event($p37, $i38);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 1240} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i29 := $M.73;
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p31 := $M.87;
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} vslice_dummy_var_184 := bt_detect($p32);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 1238} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i25 := $M.73;
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p27 := $M.87;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} bt_cleanup($p28);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 1236} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i22 := $M.73;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i23 == 1;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_183 := bt_size();
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 1234} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const cleanup_ipmi_si: ref;

axiom cleanup_ipmi_si == $sub.ref(0, 565578);

procedure cleanup_ipmi_si();
  free requires assertsPassed;
  modifies $M.71, $M.0, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.5, $M.20, $M.22, $M.9, $M.11, $M.13, $M.15, $M.26, $M.28, $M.30, $M.32, $CurrAddr, $M.43, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation cleanup_ipmi_si()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i0 := $M.88;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := $M.89;
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $M.90;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} mutex_lock_nested(smi_infos_lock, 0);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, smi_infos);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} mutex_unlock(smi_infos_lock);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} driver_unregister($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p17, $p18 := $p8, $p13;
    goto $bb14;

  $bb14:
    call $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p17, $p18 := cleanup_ipmi_si_loop_$bb14($p20, $p21, $p22, $p23, $p24, $i25, $i26, $p17, $p18);
    goto $bb14_last;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} cleanup_one_si($p17);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p17, $p18 := $p18, $p23;
    goto $bb16_dummy;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} pnp_unregister_driver(ipmi_pnp_driver);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i3 == 1;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} ldv_pci_unregister_driver_45(ipmi_pci_driver);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6280;
}



const init_ipmi_si: ref;

axiom init_ipmi_si == $sub.ref(0, 566610);

procedure init_ipmi_si() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.88, $M.92, $M.91, $M.89, $M.90, $M.0, $M.104, $M.71, $M.64, $M.121, $M.17, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, $M.43, $CurrAddr, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48;



implementation init_ipmi_si() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p37: ref;
  var $i38: i32;
  var $i64: i32;
  var $i36: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p77: ref;
  var $i78: i32;
  var $i104: i32;
  var $i76: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i2: i32;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i0 := $M.88;
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1254} {:cexpr "initialized"} boogie_si_record_i32(1);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i3 := driver_register($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)));
    call {:si_unique_call 1256} {:cexpr "rv"} boogie_si_record_i32($i3);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.91, si_type_str);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} vslice_dummy_var_190 := printk.ref(.str.41);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} hardcode_find_bmc();
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} mutex_lock_nested(smi_infos_lock, 0);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i20 := list_empty(smi_infos);
    call {:si_unique_call 1263} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} mutex_unlock(smi_infos_lock);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i22 := ldv___pci_register_driver_43(ipmi_pci_driver, __this_module, .str.15);
    call {:si_unique_call 1267} {:cexpr "rv"} boogie_si_record_i32($i22);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i23 == 1);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1269} {:cexpr "pci_registered"} boogie_si_record_i32(1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} vslice_dummy_var_192 := pnp_register_driver(ipmi_pnp_driver);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1271} {:cexpr "pnp_registered"} boogie_si_record_i32(1);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} dmi_find_bmc();
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} spmi_find_bmc();
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} mutex_lock_nested(smi_infos_lock, 0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, smi_infos);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p27, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} llvm.prefetch($p32, 0, 3, 1);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p27, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i36 := 0;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i36, 0);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, smi_infos);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p67, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} llvm.prefetch($p72, 0, 3, 1);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p67, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i76 := $i36;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} mutex_unlock(smi_infos_lock);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i76, 0);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i106 := $M.93;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} mutex_lock_nested(smi_infos_lock, 0);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i110 := $M.94;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i111 == 1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} mutex_unlock(smi_infos_lock);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb82:
    assume $i111 == 1;
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i112 := list_empty(smi_infos);
    call {:si_unique_call 1295} {:cexpr "tmp___3"} boogie_si_record_i32($i112);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i113 == 1);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} mutex_unlock(smi_infos_lock);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb84:
    assume $i113 == 1;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} mutex_unlock(smi_infos_lock);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i114 := $M.89;
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} driver_unregister($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} vslice_dummy_var_193 := printk.ref(.str.43);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 19);
    goto $bb3;

  $bb86:
    assume $i115 == 1;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} ldv_pci_unregister_driver_44(ipmi_pci_driver);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb76:
    assume $i107 == 1;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} mutex_lock_nested(smi_infos_lock, 0);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i108 := list_empty(smi_infos);
    call {:si_unique_call 1289} {:cexpr "tmp___2"} boogie_si_record_i32($i108);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i109 == 1);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} mutex_unlock(smi_infos_lock);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i109 == 1;
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} mutex_unlock(smi_infos_lock);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} default_find_bmc();
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i105 == 1;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb53:
    assume $i75 == 1;
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p77, $i78 := $p68, $i36;
    goto $bb56;

  $bb56:
    call $p79, $i80, $i81, $i82, $p83, $i84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $p93, $p94, $p95, $p96, $p98, $p99, $p100, $p101, $i102, $i103, $p77, $i78, $i104 := init_ipmi_si_loop_$bb56($p79, $i80, $i81, $i82, $p83, $i84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $p93, $p94, $p95, $p96, $p98, $p99, $p100, $p101, $i102, $i103, $p77, $i78, $i104);
    goto $bb56_last;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p77, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i91 := $i78;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p77, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p95, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} llvm.prefetch($p100, 0, 3, 1);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p95, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i104 := $i91;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i76 := $i104;
    goto $bb55;

  $bb70:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $p77, $i78 := $p96, $i91;
    goto $bb70_dummy;

  $bb58:
    assume $i81 == 1;
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i78, 0);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb63;

  $bb63:
    assume !($i82 == 1);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p77, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, $i78);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb60;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i86 := try_smi_init($p77);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    call {:si_unique_call 1283} {:cexpr "tmp___1"} boogie_si_record_i32($i86);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i90 := $i78;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i91 := $i90;
    goto $bb69;

  $bb66:
    assume $i87 == 1;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p77, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    call {:si_unique_call 1284} {:cexpr "type"} boogie_si_record_i32($i89);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i90 := $i89;
    goto $bb68;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb62;

  $bb50:
    assume $i65 == 1;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} mutex_unlock(smi_infos_lock);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb30:
    assume $i35 == 1;
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p37, $i38 := $p28, 0;
    goto $bb33;

  $bb33:
    call $p39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $p53, $p54, $p55, $p56, $p58, $p59, $p60, $p61, $i62, $i63, $p37, $i38, $i64 := init_ipmi_si_loop_$bb33($p39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $p48, $i49, $i50, $i51, $p53, $p54, $p55, $p56, $p58, $p59, $p60, $p61, $i62, $i63, $p37, $i38, $i64);
    goto $bb33_last;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p37, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i51 := $i38;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p55, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} llvm.prefetch($p60, 0, 3, 1);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p55, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i64 := $i51;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i36 := $i64;
    goto $bb32;

  $bb47:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $p37, $i38 := $p56, $i51;
    goto $bb47_dummy;

  $bb35:
    assume $i41 == 1;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i38, 0);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i42 == 1);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p37, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, $i38);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb37;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $i46 := try_smi_init($p37);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    call {:si_unique_call 1277} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i38;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb46;

  $bb43:
    assume $i47 == 1;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p37, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    call {:si_unique_call 1278} {:cexpr "type"} boogie_si_record_i32($i49);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb45;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb39;

  $bb27:
    assume $i23 == 1;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} vslice_dummy_var_191 := printk.ref.i32(.str.42, $i22);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i21 == 1;
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} mutex_unlock(smi_infos_lock);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.91, si_type_str);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i17 := $sext.i8.i32($i16);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i18 == 1;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $M.92 := $store.ref($M.92, si_type, si_type_str);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $p9 := strchr(si_type_str, 44);
    assume $isExternal($p9);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i11 == 1;
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $M.91 := $store.i8($M.91, $p9, 0);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p9, $mul.ref(1, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.91, $p12);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb19;

  $bb17:
    assume $i15 == 1;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $M.92 := $store.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(1, 8)), $p12);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $p117 := strchr($p12, 44);
    assume $isExternal($p117);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb14;

  $bb90:
    assume $i119 == 1;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $M.91 := $store.i8($M.91, $p117, 0);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p117, $mul.ref(1, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.91, $p120);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i122 := $sext.i8.i32($i121);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb19;

  $bb93:
    assume $i123 == 1;
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $M.92 := $store.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(2, 8)), $p120);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p124 := strchr($p120, 44);
    assume $isExternal($p124);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb14;

  $bb96:
    assume $i126 == 1;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.91 := $store.i8($M.91, $p124, 0);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p124, $mul.ref(1, 1));
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.91, $p127);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i129 := $sext.i8.i32($i128);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb19;

  $bb99:
    assume $i130 == 1;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $M.92 := $store.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(3, 8)), $p127);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $p131 := strchr($p127, 44);
    assume $isExternal($p131);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb14;

  $bb102:
    assume $i133 == 1;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.91 := $store.i8($M.91, $p131, 0);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} vslice_dummy_var_189 := printk.ref.i32(.str.40, $i3);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb70_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6430;

  $bb47_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6374;
}



const ldv_initialize_si_sm_handlers_5: ref;

axiom ldv_initialize_si_sm_handlers_5 == $sub.ref(0, 567642);

procedure ldv_initialize_si_sm_handlers_5();
  free requires assertsPassed;
  modifies $M.95, $M.0, $CurrAddr;



implementation ldv_initialize_si_sm_handlers_5()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p0 := ldv_init_zalloc(208);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $M.95 := $p0;
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_si_sm_handlers_4: ref;

axiom ldv_initialize_si_sm_handlers_4 == $sub.ref(0, 568674);

procedure ldv_initialize_si_sm_handlers_4();
  free requires assertsPassed;
  modifies $M.87, $M.0, $CurrAddr;



implementation ldv_initialize_si_sm_handlers_4()
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p0 := ldv_init_zalloc(616);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $M.87 := $p0;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_si_sm_handlers_6: ref;

axiom ldv_initialize_si_sm_handlers_6 == $sub.ref(0, 569706);

procedure ldv_initialize_si_sm_handlers_6();
  free requires assertsPassed;
  modifies $M.86, $M.0, $CurrAddr;



implementation ldv_initialize_si_sm_handlers_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p0 := ldv_init_zalloc(608);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $M.86 := $p0;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    return;
}



const hotmod_handler: ref;

axiom hotmod_handler == $sub.ref(0, 570738);

procedure hotmod_handler($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.96, $M.0, $M.97, $M.98, $M.104, $CurrAddr, $M.17, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, $M.43, assertsPassed, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation hotmod_handler($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i73: i64;
  var $i74: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i93: i1;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p75: ref;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $i127: i32;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $i136: i32;
  var $p138: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p144: ref;
  var $i145: i32;
  var $p147: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p153: ref;
  var $i154: i32;
  var $p156: ref;
  var $i157: i32;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i8;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p193: ref;
  var $i194: i64;
  var $i195: i1;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $i203: i1;
  var $p182: ref;
  var $p183: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $i92: i32;
  var $i14: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $p11 := kstrdup($p0, 208);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i15 := strlen($p11);
    call {:si_unique_call 1319} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    call {:si_unique_call 1320} {:cexpr "len"} boogie_si_record_i32($i16);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, $sub.i32(0, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.96 := $store.i32($M.96, $p10, $i17);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.96, $p10);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i19 := $sge.i32($i18, 0);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.97 := $store.ref($M.97, $p2, $p11);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.97, $p2);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i92 := $i16;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} kfree($p11);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i14 := $i92;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call $p41, $p42, $i43, $i44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $i62, $p63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i73, $i74, $p76, $p77, $i78, $i79, $p80, $p81, $p82, $p83, $i84, $i85, $p86, $p87, $p88, $i89, $i90, $i91, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $p75, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p126, $i127, $p129, $i130, $i131, $p132, $p133, $p135, $i136, $p138, $p140, $i141, $i142, $p144, $i145, $p147, $p149, $i150, $i151, $p153, $i154, $p156, $i157, $p158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $p170, $p171, $p172, $p173, $p175, $p176, $p177, $p178, $p179, $i180, $i181, $p185, $i186, $i187, $i188, $p189, $i190, $i191, $p193, $i194, $i195, $p197, $p198, $p199, $p200, $p201, $i202, $i203, $p182, $p183, $p204, $i205, $i206 := hotmod_handler_loop_$bb18($p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p41, $p42, $i43, $i44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $i62, $p63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i73, $i74, $p76, $p77, $i78, $i79, $p80, $p81, $p82, $p83, $i84, $i85, $p86, $p87, $p88, $i89, $i90, $i91, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $p75, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p126, $i127, $p129, $i130, $i131, $p132, $p133, $p135, $i136, $p138, $p140, $i141, $i142, $p144, $i145, $p147, $p149, $i150, $i151, $p153, $i154, $p156, $i157, $p158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $p170, $p171, $p172, $p173, $p175, $p176, $p177, $p178, $p179, $i180, $i181, $p185, $i186, $i187, $i188, $p189, $i190, $i191, $p193, $i194, $i195, $p197, $p198, $p199, $p200, $p201, $i202, $i203, $p182, $p183, $p204, $i205, $i206);
    goto $bb18_last;

  $bb19:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, $p5, 1);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, $p6, 1);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, $p7, 0);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, $p8, 0);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, $p9, 0);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.97, $p2);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p42 := strchr($p41, 58);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $p46 := $p42;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i47 := parse_str(hotmod_ops, $p10, .str.93, $p2);
    call {:si_unique_call 1323} {:cexpr "rv"} boogie_si_record_i32($i47);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.96, $p10);
    call {:si_unique_call 1324} {:cexpr "op"} boogie_si_record_i32($i49);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i50 := parse_str(hotmod_si, $p10, .str.94, $p2);
    call {:si_unique_call 1326} {:cexpr "rv"} boogie_si_record_i32($i50);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.96, $p10);
    call {:si_unique_call 1327} {:cexpr "si_type___0"} boogie_si_record_i32($i52);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i53 := parse_str(hotmod_as, $p4, .str.95, $p2);
    call {:si_unique_call 1329} {:cexpr "rv"} boogie_si_record_i32($i53);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.97, $p2);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $p56 := strchr($p55, 44);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $p60 := $p56;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.97, $p2);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i62 := simple_strtoul($p61, $p3, 0);
    call {:si_unique_call 1332} {:cexpr "addr"} boogie_si_record_i64($i62);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.99, $p3);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.100, $p63);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i65 := $sext.i8.i32($i64);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb38;

  $bb38:
    assume !($i66 == 1);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.97, $p2);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i69 := $sext.i8.i32($i68);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p60);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i49, 0);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i118 == 1);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} mutex_lock_nested(smi_infos_lock, 0);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, smi_infos);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p172, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p172, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p177, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p172, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p179);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} mutex_unlock(smi_infos_lock);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $M.97 := $store.ref($M.97, $p2, $p46);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.97, $p2);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i206 == 1);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb130_dummy;

  $bb112:
    assume $i181 == 1;
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $p182, $p183 := $p178, $p173;
    goto $bb115;

  $bb115:
    call $p185, $i186, $i187, $i188, $p189, $i190, $i191, $p193, $i194, $i195, $p197, $p198, $p199, $p200, $p201, $i202, $i203, $p182, $p183 := hotmod_handler_loop_$bb115($p4, $i52, $i62, $p185, $i186, $i187, $i188, $p189, $i190, $i191, $p193, $i194, $i195, $p197, $p198, $p199, $p200, $p201, $i202, $i203, $p182, $p183);
    goto $bb115_last;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p183, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.96, $p4);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i186, $i187);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p183, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, $i52);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p183, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i194 := $load.i64($M.0, $p193);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i195 := $eq.i64($i194, $i62);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p182, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p199, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p182, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p201);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i203 == 1);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb127:
    assume $i203 == 1;
    assume {:verifier.code 0} true;
    $p182, $p183 := $p200, $p182;
    goto $bb127_dummy;

  $bb124:
    assume $i195 == 1;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} cleanup_one_si($p183);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    goto $bb126;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb121:
    assume $i191 == 1;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb117:
    assume $i188 == 1;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb88:
    assume $i118 == 1;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $p119 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i122 := $eq.i64($i121, 0);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 1);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $i52);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p126, $i62);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.96, $p4);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, $i127);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.96, $p4);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 1);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i131 == 1);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p133, port_setup);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, $0.ref);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.98, $p5);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, $i136);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 0);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.98, $p6);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p147, $i145);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.0, $p149);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.98, $p7);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i154);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.98, $p8);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, $i157);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.98, $p9);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i8($i163);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(540, 1));
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p165, $i164);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $i166 := add_smi($p120);
    call {:si_unique_call 1351} {:cexpr "tmp___3"} boogie_si_record_i32($i166);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 0);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i167 == 1);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p120);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} kfree($p170);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb105:
    assume $i167 == 1;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $i168 := try_smi_init($p120);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 1353} {:cexpr "tmp___2"} boogie_si_record_i32($i168);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb107:
    assume $i169 == 1;
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} cleanup_one_si($p120);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb109;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb102:
    assume $i161 == 1;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p162, std_irq_setup);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb99:
    assume $i151 == 1;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, 1);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb96:
    assume $i142 == 1;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, 1);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb93:
    assume $i131 == 1;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p120, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p132, mem_setup);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb90:
    assume $i122 == 1;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 12);
    goto $bb55;

  $bb42:
    assume $i74 == 1;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p75 := $p60;
    goto $bb45;

  $bb45:
    call $p76, $p77, $i78, $i79, $p80, $p81, $p82, $p83, $i84, $i85, $p86, $p87, $p88, $i89, $i90, $i91, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $p75 := hotmod_handler_loop_$bb45($p2, $p5, $p6, $p7, $p8, $p9, $p76, $p77, $i78, $i79, $p80, $p81, $p82, $p83, $i84, $i85, $p86, $p87, $p88, $i89, $i90, $i91, $i93, $i94, $i95, $p96, $i97, $i98, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $p75);
    goto $bb45_last;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $M.97 := $store.ref($M.97, $p2, $p75);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.97, $p2);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $p77 := strchr($p76, 44);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $p81 := $p77;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.97, $p2);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $p83 := strchr($p82, 61);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $p87 := $p83;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.97, $p2);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i89 := check_hotmod_int_op($p88, $p87, .str.97, $p5);
    call {:si_unique_call 1337} {:cexpr "rv"} boogie_si_record_i32($i89);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i89, 0);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i91 := $i89;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i90 == 1);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i89, 0);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.97, $p2);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i97 := check_hotmod_int_op($p96, $p87, .str.98, $p6);
    call {:si_unique_call 1340} {:cexpr "rv"} boogie_si_record_i32($i97);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, 0);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i99 := $i97;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i98 == 1);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i97, 0);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.97, $p2);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $i102 := check_hotmod_int_op($p101, $p87, .str.99, $p7);
    call {:si_unique_call 1342} {:cexpr "rv"} boogie_si_record_i32($i102);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i102, 0);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i104 := $i102;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i103 == 1);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i102, 0);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.97, $p2);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i107 := check_hotmod_int_op($p106, $p87, .str.100, $p8);
    call {:si_unique_call 1344} {:cexpr "rv"} boogie_si_record_i32($i107);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i107, 0);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i109 := $i107;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i108 == 1);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i107, 0);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.97, $p2);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i112 := check_hotmod_int_op($p111, $p87, .str.101, $p9);
    call {:si_unique_call 1346} {:cexpr "rv"} boogie_si_record_i32($i112);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i112, 0);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i114 := $i112;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i113 == 1);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i112, 0);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.97, $p2);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_195 := printk.ref.ref(.str.102, $p116);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 22);
    goto $bb55;

  $bb83:
    assume $i115 == 1;
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p81);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i95 == 1);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb59:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $p75 := $p81;
    goto $bb59_dummy;

  $bb81:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i92 := $i114;
    goto $bb55;

  $bb77:
    assume $i110 == 1;
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb75:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i92 := $i109;
    goto $bb55;

  $bb71:
    assume $i105 == 1;
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb69:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i92 := $i104;
    goto $bb55;

  $bb65:
    assume $i100 == 1;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb63:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i92 := $i99;
    goto $bb55;

  $bb56:
    assume $i93 == 1;
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb55;

  $bb50:
    assume $i85 == 1;
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, 0);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p83, $mul.ref(1, 1));
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p87 := $p86;
    goto $bb52;

  $bb47:
    assume $i79 == 1;
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p77, $mul.ref(1, 1));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p81 := $p80;
    goto $bb49;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.97, $p2);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} vslice_dummy_var_194 := printk.ref.ref(.str.96, $p71);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb37;

  $bb33:
    assume $i58 == 1;
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 0);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p56, $mul.ref(1, 1));
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p60 := $p59;
    goto $bb35;

  $bb30:
    assume $i54 == 1;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb27:
    assume $i51 == 1;
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume $i48 == 1;
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p42, $mul.ref(1, 1));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p46 := $p45;
    goto $bb22;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37 := hotmod_handler_loop_$bb8($p10, $p11, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37);
    goto $bb8_last;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p11, $mul.ref($i28, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i32, 1));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 32);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.96, $p10);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p11, $mul.ref($i21, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.96, $p10);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i23, 1);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $M.96 := $store.i32($M.96, $p10, $i24);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.96, $p10);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i26 := $sge.i32($i25, 0);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb10_dummy;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  $bb127_dummy:
    assume false;
    return;

  $bb115_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6876;

  $bb59_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6683;

  $bb130_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.96, $p10);
    goto corral_source_split_6585;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 571770);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.49, $M.77, $M.0, $CurrAddr, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation ldv_main_exported_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var vslice_dummy_var_196: ref;
  var vslice_dummy_var_197: ref;
  var vslice_dummy_var_198: ref;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p5 := ldv_init_zalloc(48);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} vslice_dummy_var_196 := ldv_memset($p7, 0, 4);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} vslice_dummy_var_197 := ldv_memset($p9, 0, 8);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} vslice_dummy_var_198 := ldv_memset($p11, 0, 4);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1367} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1368} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1369} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} ldv_stop();
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i51 := $M.77;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb38:
    assume $i52 == 1;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p53 := $M.95;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.49, $p2);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} vslice_dummy_var_204 := start_smic_transaction($p54, $p4, $i55);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1383} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i45 := $M.77;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb35:
    assume $i46 == 1;
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p47 := $M.95;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.49, $p0);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} vslice_dummy_var_203 := smic_get_result($p48, $p3, $i49);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1381} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i40 := $M.77;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i41 == 1;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $p42 := $M.95;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} vslice_dummy_var_202 := init_smic_data($p43, $p6);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1379} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i34 := $M.77;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $p36 := $M.95;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.49, $p1);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} vslice_dummy_var_201 := smic_event($p37, $i38);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1377} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i29 := $M.77;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p31 := $M.95;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} vslice_dummy_var_200 := smic_detect($p32);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1375} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i25 := $M.77;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p27 := $M.95;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} smic_cleanup($p28);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1373} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i22 := $M.77;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i23 == 1;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} vslice_dummy_var_199 := smic_size();
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1371} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 572802);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    return;
}



const kstrdup: ref;

axiom kstrdup == $sub.ref(0, 573834);

procedure kstrdup($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kstrdup($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} {:cexpr "kstrdup:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p2 := external_alloc();
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 574866);

procedure strlen($p0: ref) returns ($r: i64);



const strchr: ref;

axiom strchr == $sub.ref(0, 575898);

procedure strchr($p0: ref, $i1: i32) returns ($r: ref);



const parse_str: ref;

axiom parse_str == $sub.ref(0, 576930);

procedure parse_str($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.96, $M.97;



implementation parse_str($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i14: i32;
  var $p34: ref;
  var $i9: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.97, $p3);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p5 := strchr($p4, 44);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.101, hotmod_ops);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.97, $p3);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} vslice_dummy_var_206 := printk.ref.ref.ref(.str.104, $p2, $p34);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    call $p15, $i16, $p18, $p19, $i20, $i21, $i22, $i27, $i28, $p30, $p31, $i32, $i33, $i14 := parse_str_loop_$bb8($p0, $p3, $p15, $i16, $p18, $p19, $i20, $i21, $i22, $i27, $i28, $p30, $p31, $i32, $i33, $i14);
    goto $bb8_last;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.97, $p3);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref($i16, 16)), $mul.ref(0, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.101, $p18);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i20 := strcmp($p15, $p19);
    call {:si_unique_call 1390} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i22 := $i14;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i14, 1);
    call {:si_unique_call 1391} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref(hotmod_ops, $mul.ref(0, 48)), $mul.ref($i28, 16)), $mul.ref(0, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.101, $p30);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i27;
    goto $bb13_dummy;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref($i23, 16)), $mul.ref(8, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.102, $p25);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $M.96 := $store.i32($M.96, $p1, $i26);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $M.97 := $store.ref($M.97, $p3, $p10);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} vslice_dummy_var_205 := printk.ref.ref(.str.103, $p2);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7019;
}



const simple_strtoul: ref;

axiom simple_strtoul == $sub.ref(0, 577962);

procedure simple_strtoul($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation simple_strtoul($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} {:cexpr "simple_strtoul:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1394} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1395} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const check_hotmod_int_op: ref;

axiom check_hotmod_int_op == $sub.ref(0, 578994);

procedure check_hotmod_int_op($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.98, $CurrAddr;



implementation check_hotmod_int_op($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i1;
  var $i11: i64;
  var $i12: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i10: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $i5 := strcmp($p0, $p2);
    call {:si_unique_call 1398} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $i11 := simple_strtoul($p1, $p4, 0);
    call {:si_unique_call 1401} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, $p3, $i12);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.99, $p4);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.100, $p13);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p1);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i18 := $sext.i8.i32($i17);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb5;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} vslice_dummy_var_208 := printk.ref.ref(.str.108, $p0);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb8;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} vslice_dummy_var_207 := printk.ref.ref(.str.107, $p0);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb5;
}



const try_smi_init: ref;

axiom try_smi_init == $sub.ref(0, 580026);

procedure try_smi_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.104, $M.17, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, $M.43, $CurrAddr, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48;



implementation try_smi_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i8;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i64;
  var $p171: ref;
  var $p172: ref;
  var $i141: i32;
  var $p175: ref;
  var $i35: i32;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $i198: i64;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $i174: i32;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(ipmi_addr_src_to_str, $mul.ref(0, 72)), $mul.ref($i3, 8));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.24, $p4);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(si_to_str, $mul.ref(0, 24)), $mul.ref($i8, 8));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.25, $p9);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref(addr_space_to_str, $mul.ref(0, 16)), $mul.ref($i14, 8));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.103, $p15);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(540, 1));
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} vslice_dummy_var_209 := printk.ref.ref.ref.ref.i64.i32.i32(.str.59, $p5, $p10, $p16, $i19, $i22, $i24);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i27, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 5);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(492, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p176, 1);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p178);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i180 := $ne.i64($i179, 0);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} synchronize_sched();
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p193);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i195 := $ne.i64($i194, 0);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(304, 1));
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p211);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i213 := $ne.i64($i212, 0);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i220 := $ne.i64($i219, 0);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(536, 1));
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.0, $p224);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i226 := $ne.i32($i225, 0);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i174 := $i35;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $r := $i174;
    return;

  $bb83:
    assume $i226 == 1;
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(528, 1));
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} platform_device_unregister($p228);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(536, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p229, 0);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume $i220 == 1;
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    call {:si_unique_call 1458} devirtbounce.2($p222, $p0);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(272, 1));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p223, $0.ref);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i213 == 1;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(304, 1));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    call {:si_unique_call 1457} devirtbounce.2($p215, $p0);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(304, 1));
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p216, $0.ref);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    goto $bb79;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i195 == 1;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p197);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} kfree($p208);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, $0.ref);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i199 == 1;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    call {:si_unique_call 1455} devirtbounce.3($p203, $p205);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i188 == 1;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    call {:si_unique_call 1453} devirtbounce.2($p190, $p0);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(288, 1));
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p191, $0.ref);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i180 == 1;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} vslice_dummy_var_221 := ipmi_unregister_smi($p182);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p184, $0.ref);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, bt_smi_handlers);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 1404} $i40 := devirtbounce.24($p39);
    call {:si_unique_call 1405} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $p42 := ldv_kmalloc_38($i41, 208);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p42);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(216, 1));
    call {:si_unique_call 1408} $i57 := devirtbounce.25($p53, $p55, $p56);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(296, 1));
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    call {:si_unique_call 1409} $i61 := devirtbounce.8($p60, $p0);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    call {:si_unique_call 1410} {:cexpr "rv"} boogie_si_record_i32($i61);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} ldv_spin_lock_init();
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} ldv_spin_lock_init();
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    call {:si_unique_call 1414} $i70 := devirtbounce.26($p67, $p69);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    call {:si_unique_call 1415} {:cexpr "tmp___1"} boogie_si_record_i32($i70);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $i76 := try_get_dev_id($p0);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    call {:si_unique_call 1418} {:cexpr "rv"} boogie_si_record_i32($i76);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} setup_oem_data_handler($p0);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} setup_xaction_handlers($p0);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(168, 1));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} INIT_LIST_HEAD($p82);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(184, 1));
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} INIT_LIST_HEAD($p83);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $0.ref);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(332, 1));
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} atomic_set($p85, 0);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(336, 1));
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, 0);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} atomic_set($p88, 0);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($p231, $mul.ref(1, 4));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} atomic_set($p232, 0);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p234 := $bitcast.ref.ref($p233);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($p234, $mul.ref(2, 4));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} atomic_set($p235, 0);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($p237, $mul.ref(3, 4));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} atomic_set($p238, 0);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p239);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($p240, $mul.ref(4, 4));
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} atomic_set($p241, 0);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($p243, $mul.ref(5, 4));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} atomic_set($p244, 0);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p245);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($p246, $mul.ref(6, 4));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} atomic_set($p247, 0);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p248);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($p249, $mul.ref(7, 4));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} atomic_set($p250, 0);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($p252, $mul.ref(8, 4));
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} atomic_set($p253, 0);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p255 := $bitcast.ref.ref($p254);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($p255, $mul.ref(9, 4));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} atomic_set($p256, 0);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p258 := $bitcast.ref.ref($p257);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($p258, $mul.ref(10, 4));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} atomic_set($p259, 0);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(492, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 1);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(488, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} atomic_set($p90, 0);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i91 := $M.104;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i91);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i93 := $M.104;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 1);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $M.104 := $i94;
    call {:si_unique_call 1428} {:cexpr "smi_num"} boogie_si_record_i32($i94);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $i95 := try_enable_event_buffer($p0);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    call {:si_unique_call 1430} {:cexpr "rv"} boogie_si_record_i32($i95);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 0);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} start_clear_flags($p0);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p0);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(496, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(540, 1));
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.0, $p132);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i8($i134);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $i136 := ipmi_register_smi(handlers, $p128, $p129, $p131, .str.66, $i135);
    call {:si_unique_call 1438} {:cexpr "rv"} boogie_si_record_i32($i136);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p0);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i145 := ipmi_smi_add_proc_entry($p143, .str.68, type_file_read_proc, $p144);
    call {:si_unique_call 1443} {:cexpr "rv"} boogie_si_record_i32($i145);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p0);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i153 := ipmi_smi_add_proc_entry($p151, .str.70, stat_file_read_proc, $p152);
    call {:si_unique_call 1446} {:cexpr "rv"} boogie_si_record_i32($i153);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p0);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i161 := ipmi_smi_add_proc_entry($p159, .str.71, param_read_proc, $p160);
    call {:si_unique_call 1449} {:cexpr "rv"} boogie_si_record_i32($i161);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i170 := $zext.i32.i64($i169);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref(si_to_str, $mul.ref(0, 24)), $mul.ref($i170, 8));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.25, $p171);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_220 := _dev_info.ref.ref.ref($p167, .str.72, $p172);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i174 := 0;
    goto $bb64;

  $bb61:
    assume $i162 == 1;
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} vslice_dummy_var_219 := dev_err.ref.ref.i32($p164, .str.69, $i161);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i141 := $i161;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(488, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} atomic_inc($p175);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} wait_for_timer_and_thread($p0);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i35 := $i141;
    goto $bb13;

  $bb58:
    assume $i154 == 1;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} vslice_dummy_var_218 := dev_err.ref.ref.i32($p156, .str.69, $i153);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i141 := $i153;
    goto $bb53;

  $bb55:
    assume $i146 == 1;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} vslice_dummy_var_217 := dev_err.ref.ref.i32($p148, .str.69, $i145);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i141 := $i145;
    goto $bb53;

  $bb51:
    assume $i137 == 1;
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_216 := dev_err.ref.ref.i32($p139, .str.67, $i136);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i141 := $i136;
    goto $bb53;

  $bb42:
    assume $i105 == 1;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(0, 1));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $p108 := platform_device_alloc(.str.15, $i107);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(528, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p109, $p108);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(528, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p111);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i112, 0);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(528, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 1064)), $mul.ref(16, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p118, $p117);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(520, 1));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 1024)), $mul.ref(256, 1));
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p121, $add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(528, 1));
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $i124 := platform_device_add($p123);
    call {:si_unique_call 1435} {:cexpr "rv"} boogie_si_record_i32($i124);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(536, 1));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, 1);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i125 == 1;
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} vslice_dummy_var_215 := printk.ref.i32(.str.65, $i124);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i35 := $i124;
    goto $bb13;

  $bb44:
    assume $i113 == 1;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_214 := printk.ref(.str.64);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i35 := $i95;
    goto $bb13;

  $bb39:
    assume $i100 == 1;
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, 4);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i96 == 1;
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(329, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 1);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i77 == 1;
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i35 := $i76;
    goto $bb13;

  $bb28:
    assume $i80 == 1;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} vslice_dummy_var_213 := printk.ref(.str.63);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i71 == 1;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 19);
    goto $bb13;

  $bb22:
    assume $i74 == 1;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_212 := printk.ref(.str.62);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i62 == 1;
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} vslice_dummy_var_211 := printk.ref(.str.61);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i35 := $i61;
    goto $bb13;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} vslice_dummy_var_210 := printk.ref(.str.60);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 12);
    goto $bb13;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, smic_smi_handlers);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i27, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb8;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, kcs_smi_handlers);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_kmalloc_38: ref;

axiom ldv_kmalloc_38 == $sub.ref(0, 581058);

procedure ldv_kmalloc_38($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_kmalloc_38($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} {:cexpr "ldv_kmalloc_38:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1470} {:cexpr "ldv_kmalloc_38:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p2 := ldv_malloc($i0);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_spin_lock_init: ref;

axiom ldv_spin_lock_init == $sub.ref(0, 582090);

procedure ldv_spin_lock_init();
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_spin_lock_init()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i0 := $M.8;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 1472} {:cexpr "ldv_init"} boogie_si_record_i32(1);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const try_get_dev_id: ref;

axiom try_get_dev_id == $sub.ref(0, 583122);

procedure try_get_dev_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.5, $M.17, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation try_get_dev_id($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i18: i32;
  var $i5: i32;
  var vslice_dummy_var_222: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p2 := ldv_kmalloc_38(272, 208);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 24);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 1);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    call {:si_unique_call 1475} vslice_dummy_var_222 := devirtbounce.5($p11, $p13, $p14, 2);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $i16 := wait_for_msg_done($p0);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    call {:si_unique_call 1477} {:cexpr "rv"} boogie_si_record_i32($i16);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 1479} $i25 := devirtbounce.5($p22, $p24, $p2, 272);
    call {:si_unique_call 1480} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    call {:si_unique_call 1481} {:cexpr "resp_len"} boogie_si_record_i64($i26);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(496, 1));
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $i29 := ipmi_demangle_device_id($p2, $i27, $p28);
    call {:si_unique_call 1483} {:cexpr "rv"} boogie_si_record_i32($i29);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i18 := $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} kfree($p2);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i5 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb7;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const setup_oem_data_handler: ref;

axiom setup_oem_data_handler == $sub.ref(0, 584154);

procedure setup_oem_data_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation setup_oem_data_handler($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} setup_dell_poweredge_oem_data_handler($p0);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    return;
}



const setup_xaction_handlers: ref;

axiom setup_xaction_handlers == $sub.ref(0, 585186);

procedure setup_xaction_handlers($p0: ref);
  free requires assertsPassed;



implementation setup_xaction_handlers($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} setup_dell_poweredge_bt_xaction_handler($p0);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 586218);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    return;
}



const try_enable_event_buffer: ref;

axiom try_enable_event_buffer == $sub.ref(0, 587250);

procedure try_enable_event_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.5, $M.17, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation try_enable_event_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i1;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $i73: i1;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i19: i32;
  var $i5: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p1 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p2 := ldv_kmalloc_38(272, 208);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 24);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 47);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    call {:si_unique_call 1488} vslice_dummy_var_223 := devirtbounce.5($p11, $p13, $p14, 2);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i16 := wait_for_msg_done($p0);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    call {:si_unique_call 1490} {:cexpr "rv"} boogie_si_record_i32($i16);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    call {:si_unique_call 1493} $i26 := devirtbounce.5($p23, $p25, $p2, 272);
    call {:si_unique_call 1494} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    call {:si_unique_call 1495} {:cexpr "resp_len"} boogie_si_record_i64($i27);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i28 := $ule.i64($i27, 3);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i28 == 1);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p2);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 28);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 47);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 4);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 24);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 46);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p2, $mul.ref(3, 1));
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, 4);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i52);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p1);
    call {:si_unique_call 1497} vslice_dummy_var_226 := devirtbounce.5($p57, $p59, $p60, 3);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i62 := wait_for_msg_done($p0);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    call {:si_unique_call 1499} {:cexpr "rv"} boogie_si_record_i32($i62);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    call {:si_unique_call 1501} $i71 := devirtbounce.5($p68, $p70, $p2, 272);
    call {:si_unique_call 1502} {:cexpr "tmp___1"} boogie_si_record_i32($i71);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    call {:si_unique_call 1503} {:cexpr "resp_len"} boogie_si_record_i64($i72);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i73 := $ule.i64($i72, 2);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i73 == 1);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p2);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 28);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i76 == 1);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 46);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p2, $mul.ref(2, 1));
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $i62;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i19 := $i86;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} kfree($p2);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i5 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb33:
    assume $i85 == 1;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32(0, 2);
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} vslice_dummy_var_228 := printk.ref(.str.77);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb7;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb26;

  $bb22:
    assume $i63 == 1;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_227 := printk.ref(.str.76);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i19 := $i62;
    goto $bb7;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i19 := $i16;
    goto $bb7;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} vslice_dummy_var_225 := printk.ref(.str.75);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb7;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb10;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb10;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} vslice_dummy_var_224 := printk.ref(.str.74);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i19 := $i16;
    goto $bb7;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const platform_device_alloc: ref;

axiom platform_device_alloc == $sub.ref(0, 588282);

procedure platform_device_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_device_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} {:cexpr "platform_device_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $p2 := external_alloc();
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const platform_device_add: ref;

axiom platform_device_add == $sub.ref(0, 589314);

procedure platform_device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation platform_device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1507} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1508} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ipmi_register_smi: ref;

axiom ipmi_register_smi == $sub.ref(0, 590346);

procedure ipmi_register_smi($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i8) returns ($r: i32);
  free requires assertsPassed;



implementation ipmi_register_smi($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i8) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1509} {:cexpr "ipmi_register_smi:arg:arg5"} boogie_si_record_i8($i5);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1510} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 1511} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const type_file_read_proc: ref;

axiom type_file_read_proc == $sub.ref(0, 591378);

procedure type_file_read_proc($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);



const ipmi_smi_add_proc_entry: ref;

axiom ipmi_smi_add_proc_entry == $sub.ref(0, 592410);

procedure ipmi_smi_add_proc_entry($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ipmi_smi_add_proc_entry($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1512} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1513} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const stat_file_read_proc: ref;

axiom stat_file_read_proc == $sub.ref(0, 593442);

procedure stat_file_read_proc($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);



const param_read_proc: ref;

axiom param_read_proc == $sub.ref(0, 594474);

procedure param_read_proc($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);



const synchronize_sched: ref;

axiom synchronize_sched == $sub.ref(0, 595506);

procedure synchronize_sched();
  free requires assertsPassed;



implementation synchronize_sched()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 596538);

procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.ref.ref.i64.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i64, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32) returns ($r: i32);



const wait_for_msg_done: ref;

axiom wait_for_msg_done == $sub.ref(0, 597570);

procedure wait_for_msg_done($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.17, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation wait_for_msg_done($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i21: i32;
  var $i19: i32;
  var $i29: i1;
  var $i30: i32;
  var vslice_dummy_var_229: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1514} $i7 := devirtbounce.6($p4, $p6, 0);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    call {:si_unique_call 1515} {:cexpr "smi_result"} boogie_si_record_i32($i7);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb1;

  $bb1:
    call $i8, $i9, $i10, $p12, $p13, $p14, $p15, $p16, $p17, $i18, $i20, $p22, $p23, $p24, $p25, $p26, $p27, $i28, $i21, $i19, vslice_dummy_var_229 := wait_for_msg_done_loop_$bb1($p0, $i8, $i9, $i10, $p12, $p13, $p14, $p15, $p16, $p17, $i18, $i20, $p22, $p23, $p24, $p25, $p26, $p27, $i28, $i21, $i19, vslice_dummy_var_229);
    goto $bb1_last;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 2);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i8, 0);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i21 := $i8;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i21, 5);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb14;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    call {:si_unique_call 1519} $i28 := devirtbounce.6($p25, $p27, 0);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    call {:si_unique_call 1520} {:cexpr "smi_result"} boogie_si_record_i32($i28);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $i28;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto corral_source_split_7683_dummy;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} vslice_dummy_var_229 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 1517} $i18 := devirtbounce.6($p15, $p17, 100);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    call {:si_unique_call 1518} {:cexpr "smi_result"} boogie_si_record_i32($i18);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb7;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb2:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb3;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  corral_source_split_7683_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7666;
}



const setup_dell_poweredge_bt_xaction_handler: ref;

axiom setup_dell_poweredge_bt_xaction_handler == $sub.ref(0, 598602);

procedure setup_dell_poweredge_bt_xaction_handler($p0: ref);
  free requires assertsPassed;



implementation setup_dell_poweredge_bt_xaction_handler($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(496, 1)), $mul.ref(8, 1));
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 674);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} vslice_dummy_var_230 := register_xaction_notifier(dell_poweredge_bt_xaction_notifier);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const register_xaction_notifier: ref;

axiom register_xaction_notifier == $sub.ref(0, 599634);

procedure register_xaction_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_xaction_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $i1 := atomic_notifier_chain_register(xaction_notifier_list, $p0);
    call {:si_unique_call 1523} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_notifier_chain_register: ref;

axiom atomic_notifier_chain_register == $sub.ref(0, 600666);

procedure atomic_notifier_chain_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_notifier_chain_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1524} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1525} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const setup_dell_poweredge_oem_data_handler: ref;

axiom setup_dell_poweredge_oem_data_handler == $sub.ref(0, 601698);

procedure setup_dell_poweredge_oem_data_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation setup_dell_poweredge_oem_data_handler($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(496, 1)), $mul.ref(8, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 674);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 32);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb5;

  $bb5:
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(496, 1)), $mul.ref(4, 1));
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 15);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i21, 0);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i22 == 1);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(496, 1)), $mul.ref(4, 1));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 15);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i27 == 1;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(496, 1)), $mul.ref(4, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i31 := $ashr.i32($i30, 4);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i32 := $ule.i32($i31, 4);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb16;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(320, 1));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, oem_data_avail_to_receive_msg_avail);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12;

  $bb3:
    assume $i8 == 1;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(496, 1)), $mul.ref(1, 1));
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 128);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb5;

  $bb6:
    assume $i12 == 1;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(496, 1)), $mul.ref(4, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 81);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb5;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(320, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, oem_data_avail_to_receive_msg_avail);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const oem_data_avail_to_receive_msg_avail: ref;

axiom oem_data_avail_to_receive_msg_avail == $sub.ref(0, 602730);

procedure oem_data_avail_to_receive_msg_avail($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation oem_data_avail_to_receive_msg_avail($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 30);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 1);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i6);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const ipmi_demangle_device_id: ref;

axiom ipmi_demangle_device_id == $sub.ref(0, 603762);

procedure ipmi_demangle_device_id($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ipmi_demangle_device_id($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i8;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i8;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i8;
  var $p39: ref;
  var $i40: i1;
  var $i41: i64;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i64;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i1;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i8;
  var $i84: i8;
  var $p85: ref;
  var $i86: i8;
  var $i87: i8;
  var $i4: i32;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} {:cexpr "ipmi_demangle_device_id:arg:data_len"} boogie_si_record_i32($i1);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i1, 8);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p0);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 28);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i7 == 1);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i1, 3);
    call {:si_unique_call 1527} {:cexpr "data_len"} boogie_si_record_i32($i17);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p16);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    $i20 := $add.i64(3, 1);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p0, $mul.ref($i20, 1));
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    $i24 := $add.i64(3, 2);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p0, $mul.ref($i24, 1));
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(2, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i26);
    $i28 := $add.i64(3, 3);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p0, $mul.ref($i28, 1));
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(3, 1));
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    $i32 := $add.i64(3, 4);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p0, $mul.ref($i32, 1));
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i34);
    $i36 := $add.i64(3, 5);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p0, $mul.ref($i36, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(5, 1));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i38);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i32($i17, 10);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 0);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i71 := $ugt.i32($i17, 14);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i71 == 1);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i87 := $and.i8($i86, $sub.i8(0, 2));
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, $i87);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb17:
    assume $i71 == 1;
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i72 := $ugt.i64(4, 63);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i72 == 1);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    $i79 := $add.i64(3, 11);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p0, $mul.ref($i79, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 1529} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p78, $p80, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i83 := $and.i8($i82, $sub.i8(0, 2));
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i84 := $or.i8($i83, 1);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, $i84);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i72 == 1;
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    $i75 := $add.i64(3, 11);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p0, $mul.ref($i75, 1));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 1528} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p74, $p76, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i40 == 1;
    $i41 := $add.i64(3, 6);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p0, $mul.ref($i41, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    $i45 := $add.i64(3, 7);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p0, $mul.ref($i45, 1));
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $i49 := $shl.i32($i48, 8);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i44, $i49);
    $i51 := $add.i64(3, 8);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p0, $mul.ref($i51, 1));
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32($i54, 16);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i50, $i55);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    $i58 := $add.i64(3, 9);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p0, $mul.ref($i58, 1));
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    $i62 := $add.i64(3, 10);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p0, $mul.ref($i62, 1));
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i66 := $shl.i32($i65, 8);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i61, $i66);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 604794);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const driver_register: ref;

axiom driver_register == $sub.ref(0, 605826);

procedure driver_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1530} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1531} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const hardcode_find_bmc: ref;

axiom hardcode_find_bmc == $sub.ref(0, 606858);

procedure hardcode_find_bmc();
  free requires assertsPassed;
  modifies $M.0, $M.104, $M.17, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, $M.43, $CurrAddr, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48;



implementation hardcode_find_bmc()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $p35: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $i50: i32;
  var $p52: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $i59: i32;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p67: ref;
  var $i68: i32;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i8;
  var $p79: ref;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i116: i64;
  var $i117: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $p123: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i64;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $i135: i32;
  var $p137: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p143: ref;
  var $i144: i32;
  var $p146: ref;
  var $p148: ref;
  var $i149: i32;
  var $i150: i1;
  var $p152: ref;
  var $i153: i32;
  var $p155: ref;
  var $i156: i32;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i162: i32;
  var $i163: i8;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $i172: i64;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $p180: ref;
  var $i181: i64;
  var $i182: i1;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $i200: i1;
  var $i201: i64;
  var $i202: i1;
  var $p204: ref;
  var $p205: ref;
  var $i206: i64;
  var $p208: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $i213: i64;
  var $p215: ref;
  var $p217: ref;
  var $p219: ref;
  var $i220: i32;
  var $p222: ref;
  var $p224: ref;
  var $i225: i32;
  var $i226: i1;
  var $p228: ref;
  var $i229: i32;
  var $p231: ref;
  var $p233: ref;
  var $i234: i32;
  var $i235: i1;
  var $p237: ref;
  var $i238: i32;
  var $p240: ref;
  var $i241: i32;
  var $p242: ref;
  var $p243: ref;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i247: i32;
  var $i248: i8;
  var $p249: ref;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $i256: i1;
  var $i257: i64;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $p263: ref;
  var $p265: ref;
  var $i266: i64;
  var $i267: i1;
  var $p268: ref;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $i285: i1;
  var $i286: i64;
  var $i287: i1;
  var $p289: ref;
  var $p290: ref;
  var $i291: i64;
  var $p293: ref;
  var $p295: ref;
  var $p296: ref;
  var $i297: i32;
  var $i298: i64;
  var $p300: ref;
  var $p302: ref;
  var $p304: ref;
  var $i305: i32;
  var $p307: ref;
  var $p309: ref;
  var $i310: i32;
  var $i311: i1;
  var $p313: ref;
  var $i314: i32;
  var $p316: ref;
  var $p318: ref;
  var $i319: i32;
  var $i320: i1;
  var $p322: ref;
  var $i323: i32;
  var $p325: ref;
  var $i326: i32;
  var $p327: ref;
  var $p328: ref;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $i333: i8;
  var $p334: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i338: i32;
  var $i339: i1;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.114, ports);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $p4 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 2);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_231 := printk.ref(.str.44);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.92, si_type);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i12 == 1);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.92, si_type);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $i15 := strcmp($p14, .str.31);
    call {:si_unique_call 1535} {:cexpr "tmp___2"} boogie_si_record_i32($i15);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.92, si_type);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $i19 := strcmp($p18, .str.32);
    call {:si_unique_call 1537} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i20 == 1);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.92, si_type);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $i23 := strcmp($p22, .str.33);
    call {:si_unique_call 1539} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i24 == 1);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.92, si_type);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} vslice_dummy_var_232 := printk.ref.i32.ref(.str.45, 0, $p26);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p5);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} kfree($p28);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(1, 4)));
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $p89 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 2);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} vslice_dummy_var_234 := printk.ref(.str.44);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(1, 8)));
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i97 == 1);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(1, 8)));
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $i99 := strcmp($p98, .str.31);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i100 == 1);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(1, 8)));
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $i102 := strcmp($p101, .str.32);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i103 == 1);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(1, 8)));
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $i105 := strcmp($p104, .str.33);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i106 == 1);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(1, 8)));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} vslice_dummy_var_235 := printk.ref.i32.ref(.str.45, 1, $p107);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p90);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} kfree($p109);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(2, 4)));
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 0);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $p174 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p174);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i177 := $eq.i64($i176, 0);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, 2);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} vslice_dummy_var_237 := printk.ref(.str.44);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(2, 8)));
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p180);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i182 := $eq.i64($i181, 0);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i182 == 1);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(2, 8)));
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} $i184 := strcmp($p183, .str.31);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 0);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i185 == 1);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(2, 8)));
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $i187 := strcmp($p186, .str.32);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i188 == 1);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(2, 8)));
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $i190 := strcmp($p189, .str.33);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 0);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i191 == 1);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(2, 8)));
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_238 := printk.ref.i32.ref(.str.45, 2, $p192);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p175);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} kfree($p194);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i255 := $load.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(3, 4)));
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 0);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} $p259 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i262 := $eq.i64($i261, 0);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p263, 2);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_240 := printk.ref(.str.44);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(3, 8)));
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i266 := $p2i.ref.i64($p265);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i267 := $eq.i64($i266, 0);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i267 == 1);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(3, 8)));
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $i269 := strcmp($p268, .str.31);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 0);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i270 == 1);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(3, 8)));
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $i272 := strcmp($p271, .str.32);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 0);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i273 == 1);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(3, 8)));
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $i275 := strcmp($p274, .str.33);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 0);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i276 == 1);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $p277 := $load.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(3, 8)));
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} vslice_dummy_var_241 := printk.ref.i32.ref(.str.45, 3, $p277);
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $p279 := $bitcast.ref.ref($p260);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} kfree($p279);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb153:
    assume $i276 == 1;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p280, 2);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(3, 4)));
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i285 := $ne.i32($i284, 0);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i285 == 1);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i286 := $load.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(3, 8)));
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i287 == 1);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_242 := printk.ref.i32(.str.46, 3);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p260);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} kfree($p289);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb162:
    assume $i287 == 1;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p290, mem_setup);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i291 := $load.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(3, 8)));
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p293, $i291);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p295, 1);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p304, $0.ref);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.116, $add.ref($add.ref(regspacings, $mul.ref(0, 16)), $mul.ref(3, 4)));
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p307, $i305);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p309);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 0);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.117, $add.ref($add.ref(regsizes, $mul.ref(0, 16)), $mul.ref(3, 4)));
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p316, $i314);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p318);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 0);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i323 := $load.i32($M.118, $add.ref($add.ref(regshifts, $mul.ref(0, 16)), $mul.ref(3, 4)));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p325, $i323);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i326 := $load.i32($M.119, $add.ref($add.ref(irqs, $mul.ref(0, 16)), $mul.ref(3, 4)));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p327, $i326);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.0, $p328);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i330 := $ne.i32($i329, 0);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.120, $add.ref($add.ref(slave_addrs, $mul.ref(0, 16)), $mul.ref(3, 4)));
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i333 := $trunc.i32.i8($i332);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(540, 1));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p334, $i333);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $i335 := add_smi($p260);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i335, 0);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i336 == 1);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p260);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} kfree($p337);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb175:
    assume $i336 == 1;
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $i338 := try_smi_init($p260);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i339 := $ne.i32($i338, 0);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb178:
    assume $i339 == 1;
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} cleanup_one_si($p260);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    goto $bb180;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb172:
    assume $i330 == 1;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p331, std_irq_setup);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb169:
    assume $i320 == 1;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p322, 1);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb166:
    assume $i311 == 1;
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p313, 1);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb160:
    assume $i285 == 1;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p296, port_setup);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(3, 4)));
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i298 := $zext.i32.i64($i297);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p300, $i298);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p302, 0);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb151:
    assume $i273 == 1;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p281, 1);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb149:
    assume $i270 == 1;
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p282, 0);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb147:
    assume $i267 == 1;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p260, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p283, 0);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i262 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb138:
    assume $i256 == 1;
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i257 := $load.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(3, 8)));
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i258 := $eq.i64($i257, 0);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb140;

  $bb141:
    assume $i258 == 1;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb109:
    assume $i191 == 1;
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, 2);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(2, 4)));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i200 == 1);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i201 := $load.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(2, 8)));
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i202 := $ne.i64($i201, 0);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i202 == 1);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_239 := printk.ref.i32(.str.46, 2);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p175);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} kfree($p204);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb118:
    assume $i202 == 1;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p205, mem_setup);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i206 := $load.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(2, 8)));
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p208, $i206);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p210, 1);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p219, $0.ref);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.116, $add.ref($add.ref(regspacings, $mul.ref(0, 16)), $mul.ref(2, 4)));
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p222, $i220);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.0, $p224);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 0);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.117, $add.ref($add.ref(regsizes, $mul.ref(0, 16)), $mul.ref(2, 4)));
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p231, $i229);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 0);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.118, $add.ref($add.ref(regshifts, $mul.ref(0, 16)), $mul.ref(2, 4)));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p240, $i238);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.119, $add.ref($add.ref(irqs, $mul.ref(0, 16)), $mul.ref(2, 4)));
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p242, $i241);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i244, 0);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.120, $add.ref($add.ref(slave_addrs, $mul.ref(0, 16)), $mul.ref(2, 4)));
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i8($i247);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(540, 1));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p249, $i248);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} $i250 := add_smi($p175);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i251 == 1);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p175);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} kfree($p252);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb131:
    assume $i251 == 1;
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $i253 := try_smi_init($p175);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb134:
    assume $i254 == 1;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} cleanup_one_si($p175);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    goto $bb136;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb128:
    assume $i245 == 1;
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p246, std_irq_setup);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb125:
    assume $i235 == 1;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p237, 1);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i226 == 1;
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p228, 1);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb116:
    assume $i200 == 1;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p211, port_setup);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(2, 4)));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i213 := $zext.i32.i64($i212);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p215, $i213);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, 0);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb107:
    assume $i188 == 1;
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p196, 1);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb105:
    assume $i185 == 1;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p197, 0);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb103:
    assume $i182 == 1;
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p175, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, 0);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i177 == 1;
    goto $bb11;

  $bb94:
    assume $i171 == 1;
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i172 := $load.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(2, 8)));
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i173 := $eq.i64($i172, 0);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb96;

  $bb97:
    assume $i173 == 1;
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb65:
    assume $i106 == 1;
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, 2);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(1, 4)));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i115 == 1);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i116 := $load.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(1, 8)));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i117 == 1);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} vslice_dummy_var_236 := printk.ref.i32(.str.46, 1);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p90);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} kfree($p119);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb74:
    assume $i117 == 1;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, mem_setup);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i121 := $load.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(1, 8)));
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p123, $i121);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, 1);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p134, $0.ref);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.116, $add.ref($add.ref(regspacings, $mul.ref(0, 16)), $mul.ref(1, 4)));
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i135);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 0);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.117, $add.ref($add.ref(regsizes, $mul.ref(0, 16)), $mul.ref(1, 4)));
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, $i144);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 0);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.118, $add.ref($add.ref(regshifts, $mul.ref(0, 16)), $mul.ref(1, 4)));
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p155, $i153);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.119, $add.ref($add.ref(irqs, $mul.ref(0, 16)), $mul.ref(1, 4)));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p157, $i156);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.120, $add.ref($add.ref(slave_addrs, $mul.ref(0, 16)), $mul.ref(1, 4)));
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i8($i162);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(540, 1));
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p164, $i163);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $i165 := add_smi($p90);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i166 == 1);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p90);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} kfree($p167);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb87:
    assume $i166 == 1;
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} $i168 := try_smi_init($p90);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb90:
    assume $i169 == 1;
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} cleanup_one_si($p90);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    goto $bb92;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i160 == 1;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p161, std_irq_setup);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i150 == 1;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p152, 1);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb78:
    assume $i141 == 1;
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, 1);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb72:
    assume $i115 == 1;
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, port_setup);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(1, 4)));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i128 := $zext.i32.i64($i127);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p130, $i128);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, 0);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb63:
    assume $i103 == 1;
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, 1);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb61:
    assume $i100 == 1;
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, 0);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb59:
    assume $i97 == 1;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p90, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 0);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb11;

  $bb50:
    assume $i86 == 1;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(1, 8)));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb52;

  $bb53:
    assume $i88 == 1;
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb24:
    assume $i24 == 1;
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 2);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.114, ports);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i30 == 1);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.115, addrs);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i39 == 1);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} vslice_dummy_var_233 := printk.ref.i32(.str.46, 0);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p5);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} kfree($p47);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb30:
    assume $i39 == 1;
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, mem_setup);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.115, addrs);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i41);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 1);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $0.ref);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.116, regspacings);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i50);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.117, regsizes);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i59);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.118, regshifts);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i68);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.119, irqs);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.120, slave_addrs);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(540, 1));
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, $i78);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $i80 := add_smi($p5);
    call {:si_unique_call 1545} {:cexpr "tmp___4"} boogie_si_record_i32($i80);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i81 == 1);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p5);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} kfree($p84);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb42:
    assume $i81 == 1;
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} $i82 := try_smi_init($p5);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    call {:si_unique_call 1547} {:cexpr "tmp___3"} boogie_si_record_i32($i82);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i83 == 1;
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} cleanup_one_si($p5);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i75 == 1;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, std_irq_setup);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i65 == 1;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 1);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i56 == 1;
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 1);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb27:
    assume $i30 == 1;
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, port_setup);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.114, ports);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i33);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i20 == 1;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 1);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i16 == 1;
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i12 == 1;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb11;

  $bb3:
    assume $i1 == 1;
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.115, addrs);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb5;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv___pci_register_driver_43: ref;

axiom ldv___pci_register_driver_43 == $sub.ref(0, 607890);

procedure ldv___pci_register_driver_43($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.71, $M.64, $M.0, $CurrAddr;



implementation ldv___pci_register_driver_43($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1590} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1591} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} ldv_pci_driver_8();
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pnp_register_driver: ref;

axiom pnp_register_driver == $sub.ref(0, 608922);

procedure pnp_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pnp_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1593} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1594} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dmi_find_bmc: ref;

axiom dmi_find_bmc == $sub.ref(0, 609954);

procedure dmi_find_bmc();
  free requires assertsPassed;
  modifies $M.121, $M.0, $CurrAddr;



implementation dmi_find_bmc()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p4: ref;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $p0 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $p1 := dmi_find_device($sub.i32(0, 1), $0.ref, $0.ref);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb4;

  $bb4:
    call $p5, $p6, $p7, $p8, $i9, $i10, $p11, $i12, $i13, $p4, cmdloc_dummy_var_28, cmdloc_dummy_var_29 := dmi_find_bmc_loop_$bb4($p0, $p5, $p6, $p7, $p8, $i9, $i10, $p11, $i12, $i13, $p4, cmdloc_dummy_var_28, cmdloc_dummy_var_29);
    goto $bb4_last;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.121;
    call {:si_unique_call 1597} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p5, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.121 := cmdloc_dummy_var_29;
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $i9 := decode_dmi($p8, $p0);
    call {:si_unique_call 1599} {:cexpr "rv"} boogie_si_record_i32($i9);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $p11 := dmi_find_device($sub.i32(0, 1), $0.ref, $p4);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p11;
    goto $bb9_dummy;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} try_init_dmi($p0);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8481;
}



const spmi_find_bmc: ref;

axiom spmi_find_bmc == $sub.ref(0, 610986);

procedure spmi_find_bmc();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation spmi_find_bmc()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var vslice_dummy_var_243: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, acpi_disabled);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $M.122;
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $i6 := acpi_get_table(.str.25, 1, $p5);
    call {:si_unique_call 1604} {:cexpr "status"} boogie_si_record_i32($i6);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i7 == 1);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb11;

  $bb11:
    call $i8, $p9, $i11, $i12, $i13, $i14, vslice_dummy_var_243 := spmi_find_bmc_loop_$bb11($p0, $p5, $i8, $p9, $i11, $i12, $i13, $i14, vslice_dummy_var_243);
    goto $bb11_last;

  $bb13:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.123, $p0);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} vslice_dummy_var_243 := try_init_spmi($p9);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i8, 1);
    call {:si_unique_call 1606} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $i13 := acpi_get_table(.str.25, $i12, $p5);
    call {:si_unique_call 1608} {:cexpr "status"} boogie_si_record_i32($i13);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb14_dummy;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb9;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;
}



const default_find_bmc: ref;

axiom default_find_bmc == $sub.ref(0, 612018);

procedure default_find_bmc();
  free requires assertsPassed;
  modifies $M.0, $M.104, $M.17, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, $M.43, $CurrAddr, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48;



implementation default_find_bmc()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var vslice_dummy_var_244: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.124, $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(0, 8)), $mul.ref(4, 1)));
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb4;

  $bb4:
    call $i2, $p3, $p4, $i5, $i6, $p7, $i8, $p10, $i11, $p12, $p13, $i14, $p16, $i17, $i18, $p20, $p22, $p24, $p26, $p28, $p30, $i31, $i32, $i33, $i34, $p35, $i36, $i37, $p38, $p39, $p41, $i42, $i43, $p44, $p45, $p47, $i48, $p50, $i51, $i52, $p54, $i55, $i56, vslice_dummy_var_244 := default_find_bmc_loop_$bb4($i2, $p3, $p4, $i5, $i6, $p7, $i8, $p10, $i11, $p12, $p13, $i14, $p16, $i17, $i18, $p20, $p22, $p24, $p26, $p28, $p30, $i31, $i32, $i33, $i34, $p35, $i36, $i37, $p38, $p39, $p41, $i42, $i43, $p44, $p45, $p47, $i48, $p50, $i51, $i52, $p54, $i55, $i56, vslice_dummy_var_244);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p3 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 8);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i2);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref($i8, 8)), $mul.ref(0, 1));
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.125, $p10);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, port_setup);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i2);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref($i14, 8)), $mul.ref(4, 1));
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.124, $p16);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i18);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 1);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 1);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i31 := add_smi($p4);
    call {:si_unique_call 1611} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p4);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} kfree($p50);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i2, 1);
    call {:si_unique_call 1617} {:cexpr "i"} boogie_si_record_i32($i51);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref($i52, 8)), $mul.ref(4, 1));
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.124, $p54);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i2 := $i51;
    goto $bb18_dummy;

  $bb5:
    assume $i56 == 1;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $i33 := try_smi_init($p4);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    call {:si_unique_call 1613} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} cleanup_one_si($p4);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref(si_to_str, $mul.ref(0, 24)), $mul.ref($i37, 8));
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.25, $p38);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref(addr_space_to_str, $mul.ref(0, 16)), $mul.ref($i43, 8));
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.103, $p44);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} vslice_dummy_var_244 := printk.ref.ref.ref.i64(.str.92, $p39, $p45, $i48);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ldv_pci_unregister_driver_44: ref;

axiom ldv_pci_unregister_driver_44 == $sub.ref(0, 613050);

procedure ldv_pci_unregister_driver_44($p0: ref);
  free requires assertsPassed;
  modifies $M.71;



implementation ldv_pci_unregister_driver_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} pci_unregister_driver($p0);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    return;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 614082);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 615114);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    return;
}



const acpi_get_table: ref;

axiom acpi_get_table == $sub.ref(0, 616146);

procedure acpi_get_table($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_get_table($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1620} {:cexpr "acpi_get_table:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1621} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1622} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const try_init_spmi: ref;

axiom try_init_spmi == $sub.ref(0, 617178);

procedure try_init_spmi($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation try_init_spmi($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $i69: i32;
  var $p71: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $p77: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p97: ref;
  var $i98: i64;
  var $p100: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p107: ref;
  var $i108: i64;
  var $p110: ref;
  var $i111: i32;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $i116: i32;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i9: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(37, 1));
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.126, $p1);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 1);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p10 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 3);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} vslice_dummy_var_247 := printk.ref(.str.55);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(36, 1));
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.127, $p17);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i19, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(36, 1));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.127, $p27);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} vslice_dummy_var_248 := printk.ref.i32(.str.56, $i29);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p11);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} kfree($p31);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 2);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.128, $p32);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 1);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.128, $p42);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 2);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 0);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(1, 1));
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.131, $p54);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i57 == 1);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i69);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(2, 1));
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.132, $p73);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i75);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.133, $p79);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i82 == 1);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.133, $p87);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 1);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i90 == 1);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p11);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} kfree($p94);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} vslice_dummy_var_250 := printk.ref(.str.57);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;

  $bb32:
    assume $i90 == 1;
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p91, port_setup);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, 0);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.134, $p97);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p100, $i98);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 0);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $p105 := (if $i104 == 1 then .str.51 else .str.52);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} vslice_dummy_var_249 := printk.ref.ref.i64.i32.i32.i32(.str.58, $p105, $i108, $i111, $i114, $i116);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $i118 := add_smi($p11);
    call {:si_unique_call 1631} {:cexpr "tmp___0"} boogie_si_record_i32($i118);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb35:
    assume $i119 == 1;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p11);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} kfree($p120);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, mem_setup);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 1);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i57 == 1;
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(1, 1));
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.131, $p59);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i62 := $udiv.i32($i61, 8);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i62);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.130, $p47);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, std_irq_setup);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(41, 1));
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.129, $p37);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, acpi_gpe_irq_setup);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 1);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb15;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} vslice_dummy_var_246 := printk.ref(.str.54);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(37, 1));
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.126, $p5);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} vslice_dummy_var_245 := printk.ref.i32(.str.53, $i7);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const decode_dmi: ref;

axiom decode_dmi == $sub.ref(0, 618210);

procedure decode_dmi($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.121, $M.0, $CurrAddr;



implementation decode_dmi($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $p57: ref;
  var $i49: i32;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    call {:si_unique_call 1636} {:cexpr "len"} boogie_si_record_i8($i5);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $M.121 := $store.i8($M.121, $p8, $i7);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i64(8, 63);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p3, $mul.ref(8, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 1638} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p12, $p13, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i5);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 16);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p2);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i51 := $and.i64($i50, 65534);
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $M.121 := $store.i64($M.121, $p52, $i51);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $M.121 := $store.i8($M.121, $p53, 0);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $M.121 := $store.i8($M.121, $p54, 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p3, $mul.ref(6, 1));
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $M.121 := $store.i8($M.121, $p57, $i56);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p2);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.121 := $store.i8($M.121, $p23, 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p3, $mul.ref(16, 1));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 16);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $i28 := $ashr.i32($i27, 4);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p2);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i31 := $or.i64($i29, $i30);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $M.121 := $store.i64($M.121, $p32, $i31);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p3, $mul.ref(17, 1));
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.121 := $store.i8($M.121, $p35, $i34);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p3, $mul.ref(16, 1));
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i39 := $ashr.i32($i38, 6);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    call {:si_unique_call 1639} {:cexpr "reg_spacing"} boogie_si_record_i8($i40);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i41, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 5);
    goto $bb21;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $M.121 := $store.i8($M.121, $p48, 16);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $M.121 := $store.i8($M.121, $p47, 4);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i41, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb16;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $M.121 := $store.i8($M.121, $p46, 1);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p2);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 65534);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i21);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $M.121 := $store.i8($M.121, $p22, 0);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p3, $mul.ref(8, 1));
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 1637} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p10, $p11, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const try_init_dmi: ref;

axiom try_init_dmi == $sub.ref(0, 619242);

procedure try_init_dmi($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation try_init_dmi($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p36: ref;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $p44: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p72: ref;
  var $i73: i64;
  var $p75: ref;
  var $i76: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $p1 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 5);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} vslice_dummy_var_252 := printk.ref(.str.48);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.121, $p8);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} kfree($p18);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 2);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.121, $p19);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} kfree($p31);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(1, 1));
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.121, $p32);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} vslice_dummy_var_253 := printk.ref.i32(.str.49, $i34);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, mem_setup);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.121, $p36);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i37);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.121, $p40);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i42);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 1);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.121, $p55);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(540, 1));
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i56);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.121, $p58);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p70 := (if $i69 == 1 then .str.51 else .str.52);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.0, $p72);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} vslice_dummy_var_254 := printk.ref.ref.i64.i32.i32.i32(.str.50, $p70, $i73, $i76, $i79, $i81);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} $i83 := add_smi($p2);
    call {:si_unique_call 1648} {:cexpr "tmp___0"} boogie_si_record_i32($i83);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb33:
    assume $i84 == 1;
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p2);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} kfree($p85);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i64 == 1;
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, std_irq_setup);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i48 == 1;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 1);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, port_setup);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 1);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb12;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} vslice_dummy_var_251 := printk.ref(.str.47);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dmi_find_device: ref;

axiom dmi_find_device == $sub.ref(0, 620274);

procedure dmi_find_device($i0: i32, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dmi_find_device($i0: i32, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} {:cexpr "dmi_find_device:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $p3 := external_alloc();
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 621306);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1652} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1653} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_pci_unregister_driver_45: ref;

axiom ldv_pci_unregister_driver_45 == $sub.ref(0, 622338);

procedure ldv_pci_unregister_driver_45($p0: ref);
  free requires assertsPassed;
  modifies $M.71;



implementation ldv_pci_unregister_driver_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} pci_unregister_driver($p0);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    return;
}



const pnp_unregister_driver: ref;

axiom pnp_unregister_driver == $sub.ref(0, 623370);

procedure pnp_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pnp_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 624402);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1656} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 1} true;
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 625434);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 626466);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 627498);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_601:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 628530);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 629562);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 630594);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 631626);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 632658);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 633690);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 634722);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 635754);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 636786);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 637818);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1657} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1658} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1659} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1660} __VERIFIER_assume($i4);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 638850);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 639882);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 640914);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 641946);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1661} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1662} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1663} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1664} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1665} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1666} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1667} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1668} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1669} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1670} __VERIFIER_assume($i7);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1671} __VERIFIER_assume($i11);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 642978);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 644010);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1672} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1673} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1674} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1675} __VERIFIER_assume($i4);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 645042);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 646074);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 647106);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 648138);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 649170);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1676} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1677} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1678} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1679} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1680} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1681} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1682} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1683} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1684} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1685} __VERIFIER_assume($i7);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1686} __VERIFIER_assume($i11);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 650202);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 651234);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 652266);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 653298);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 654330);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 655362);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 656394);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 657426);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 658458);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1687} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1688} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1689} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 659490);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1690} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1691} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1692} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 660522);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1693} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1694} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 661554);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 662586);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1695} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1696} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 663618);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 664650);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 665682);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1697} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1698} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1699} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1700} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $p6 := malloc($i5);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 1702} cmdloc_dummy_var_37 := $memset.i8(cmdloc_dummy_var_36, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 666714);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 667746);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.26, $M.30, $M.28, $M.61, $M.52, $M.58, $M.55, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $M.51, $M.53, $M.54, $M.56, $M.57, $M.59, $M.60, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.0, $M.3, $M.2, $M.1, $M.101, $M.102, $M.94, $M.125, $M.124, $M.93, $M.104, $M.103, $M.122, $M.120, $M.119, $M.118, $M.117, $M.116, $M.115, $M.114, $M.92, $M.91, $M.147, $M.90, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.89, $M.88, $M.25, $M.24, $M.45, $M.44, $M.41, $M.40, $M.87, $M.95, $M.86, $M.8, $M.4, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264;



implementation __SMACK_static_init()
{

  $bb0:
    $M.26 := 0;
    call {:si_unique_call 1703} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1704} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    $M.28 := 0;
    call {:si_unique_call 1705} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1706} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1707} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1708} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1709} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.55 := 0;
    call {:si_unique_call 1710} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1711} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 1712} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    $M.34 := $0.ref;
    $M.29 := 0;
    call {:si_unique_call 1713} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    $M.35 := $0.ref;
    $M.31 := 0;
    call {:si_unique_call 1714} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.33 := 0;
    call {:si_unique_call 1715} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.37 := $0.ref;
    $M.10 := 0;
    call {:si_unique_call 1716} {:cexpr "ldv_timer_3_0"} boogie_si_record_i32(0);
    $M.9 := $0.ref;
    $M.12 := 0;
    call {:si_unique_call 1717} {:cexpr "ldv_timer_3_1"} boogie_si_record_i32(0);
    $M.11 := $0.ref;
    $M.14 := 0;
    call {:si_unique_call 1718} {:cexpr "ldv_timer_3_2"} boogie_si_record_i32(0);
    $M.13 := $0.ref;
    $M.16 := 0;
    call {:si_unique_call 1719} {:cexpr "ldv_timer_3_3"} boogie_si_record_i32(0);
    $M.15 := $0.ref;
    $M.51 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 1720} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.54 := $0.ref;
    $M.56 := 0;
    call {:si_unique_call 1721} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.57 := $0.ref;
    $M.59 := 0;
    call {:si_unique_call 1722} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.60 := $0.ref;
    $M.62 := 0;
    call {:si_unique_call 1723} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.63 := $0.ref;
    $M.64 := $0.ref;
    $M.65 := 0;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.66 := 0;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1728} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1730} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 1732} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 1733} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1736} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1737} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 1738} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 1739} {:cexpr "pci_counter"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1740} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1741} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1742} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1743} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1744} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, kcs_smi_handlers, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kcs_smi_handlers, $mul.ref(0, 64)), $mul.ref(8, 1)), init_kcs_data);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kcs_smi_handlers, $mul.ref(0, 64)), $mul.ref(16, 1)), start_kcs_transaction);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kcs_smi_handlers, $mul.ref(0, 64)), $mul.ref(24, 1)), get_kcs_result);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kcs_smi_handlers, $mul.ref(0, 64)), $mul.ref(32, 1)), kcs_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kcs_smi_handlers, $mul.ref(0, 64)), $mul.ref(40, 1)), kcs_detect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kcs_smi_handlers, $mul.ref(0, 64)), $mul.ref(48, 1)), kcs_cleanup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(kcs_smi_handlers, $mul.ref(0, 64)), $mul.ref(56, 1)), kcs_size);
    $M.3 := 0;
    call {:si_unique_call 1745} {:cexpr "bt_debug"} boogie_si_record_i32(0);
    $M.2 := 1;
    call {:si_unique_call 1746} {:cexpr "smic_debug"} boogie_si_record_i32(1);
    $M.1 := 0;
    call {:si_unique_call 1747} {:cexpr "kcs_debug"} boogie_si_record_i32(0);
    $M.101 := $store.ref($M.101, hotmod_as, .str.52);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(hotmod_as, $mul.ref(0, 48)), $mul.ref(0, 16)), $mul.ref(8, 1)), 1);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(hotmod_as, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.73);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(hotmod_as, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(8, 1)), 0);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(hotmod_as, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(0, 1)), $0.ref);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(hotmod_as, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(8, 1)), 0);
    $M.101 := $store.ref($M.101, hotmod_si, .str.31);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(hotmod_si, $mul.ref(0, 64)), $mul.ref(0, 16)), $mul.ref(8, 1)), 0);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(hotmod_si, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.32);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(hotmod_si, $mul.ref(0, 64)), $mul.ref(1, 16)), $mul.ref(8, 1)), 1);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(hotmod_si, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(0, 1)), .str.33);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(hotmod_si, $mul.ref(0, 64)), $mul.ref(2, 16)), $mul.ref(8, 1)), 2);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(hotmod_si, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(0, 1)), $0.ref);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(hotmod_si, $mul.ref(0, 64)), $mul.ref(3, 16)), $mul.ref(8, 1)), 0);
    $M.101 := $store.ref($M.101, hotmod_ops, .str.105);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(hotmod_ops, $mul.ref(0, 48)), $mul.ref(0, 16)), $mul.ref(8, 1)), 0);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(hotmod_ops, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(0, 1)), .str.106);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(hotmod_ops, $mul.ref(0, 48)), $mul.ref(1, 16)), $mul.ref(8, 1)), 1);
    $M.101 := $store.ref($M.101, $add.ref($add.ref($add.ref(hotmod_ops, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(0, 1)), $0.ref);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(hotmod_ops, $mul.ref(0, 48)), $mul.ref(2, 16)), $mul.ref(8, 1)), 0);
    $M.94 := 1;
    call {:si_unique_call 1748} {:cexpr "unload_when_empty"} boogie_si_record_i32(1);
    $M.125 := $store.i32($M.125, ipmi_defaults, 0);
    $M.124 := $store.i32($M.124, $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(0, 8)), $mul.ref(4, 1)), 3234);
    $M.125 := $store.i32($M.125, $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(1, 8)), $mul.ref(0, 1)), 1);
    $M.124 := $store.i32($M.124, $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(1, 8)), $mul.ref(4, 1)), 3241);
    $M.125 := $store.i32($M.125, $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(2, 8)), $mul.ref(0, 1)), 2);
    $M.124 := $store.i32($M.124, $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(2, 8)), $mul.ref(4, 1)), 228);
    $M.125 := $store.i32($M.125, $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(3, 8)), $mul.ref(0, 1)), 0);
    $M.124 := $store.i32($M.124, $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(3, 8)), $mul.ref(4, 1)), 0);
    $M.93 := 1;
    call {:si_unique_call 1749} {:cexpr "si_trydefaults"} boogie_si_record_i32(1);
    $M.104 := 0;
    call {:si_unique_call 1750} {:cexpr "smi_num"} boogie_si_record_i32(0);
    $M.103 := $store.ref($M.103, addr_space_to_str, .str.73);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(addr_space_to_str, $mul.ref(0, 16)), $mul.ref(1, 8)), .str.52);
    $M.122 := 0;
    call {:si_unique_call 1751} {:cexpr "acpi_failure"} boogie_si_record_i32(0);
    $M.120 := $store.i32($M.120, slave_addrs, 0);
    $M.120 := $store.i32($M.120, $add.ref($add.ref(slave_addrs, $mul.ref(0, 16)), $mul.ref(1, 4)), 0);
    $M.120 := $store.i32($M.120, $add.ref($add.ref(slave_addrs, $mul.ref(0, 16)), $mul.ref(2, 4)), 0);
    $M.120 := $store.i32($M.120, $add.ref($add.ref(slave_addrs, $mul.ref(0, 16)), $mul.ref(3, 4)), 0);
    $M.119 := $store.i32($M.119, irqs, 0);
    $M.119 := $store.i32($M.119, $add.ref($add.ref(irqs, $mul.ref(0, 16)), $mul.ref(1, 4)), 0);
    $M.119 := $store.i32($M.119, $add.ref($add.ref(irqs, $mul.ref(0, 16)), $mul.ref(2, 4)), 0);
    $M.119 := $store.i32($M.119, $add.ref($add.ref(irqs, $mul.ref(0, 16)), $mul.ref(3, 4)), 0);
    $M.118 := $store.i32($M.118, regshifts, 0);
    $M.118 := $store.i32($M.118, $add.ref($add.ref(regshifts, $mul.ref(0, 16)), $mul.ref(1, 4)), 0);
    $M.118 := $store.i32($M.118, $add.ref($add.ref(regshifts, $mul.ref(0, 16)), $mul.ref(2, 4)), 0);
    $M.118 := $store.i32($M.118, $add.ref($add.ref(regshifts, $mul.ref(0, 16)), $mul.ref(3, 4)), 0);
    $M.117 := $store.i32($M.117, regsizes, 0);
    $M.117 := $store.i32($M.117, $add.ref($add.ref(regsizes, $mul.ref(0, 16)), $mul.ref(1, 4)), 0);
    $M.117 := $store.i32($M.117, $add.ref($add.ref(regsizes, $mul.ref(0, 16)), $mul.ref(2, 4)), 0);
    $M.117 := $store.i32($M.117, $add.ref($add.ref(regsizes, $mul.ref(0, 16)), $mul.ref(3, 4)), 0);
    $M.116 := $store.i32($M.116, regspacings, 0);
    $M.116 := $store.i32($M.116, $add.ref($add.ref(regspacings, $mul.ref(0, 16)), $mul.ref(1, 4)), 0);
    $M.116 := $store.i32($M.116, $add.ref($add.ref(regspacings, $mul.ref(0, 16)), $mul.ref(2, 4)), 0);
    $M.116 := $store.i32($M.116, $add.ref($add.ref(regspacings, $mul.ref(0, 16)), $mul.ref(3, 4)), 0);
    $M.115 := $store.i64($M.115, addrs, 0);
    $M.115 := $store.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(1, 8)), 0);
    $M.115 := $store.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(2, 8)), 0);
    $M.115 := $store.i64($M.115, $add.ref($add.ref(addrs, $mul.ref(0, 32)), $mul.ref(3, 8)), 0);
    $M.114 := $store.i32($M.114, ports, 0);
    $M.114 := $store.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(1, 4)), 0);
    $M.114 := $store.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(2, 4)), 0);
    $M.114 := $store.i32($M.114, $add.ref($add.ref(ports, $mul.ref(0, 16)), $mul.ref(3, 4)), 0);
    $M.92 := $store.ref($M.92, si_type, $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(1, 8)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(2, 8)), $0.ref);
    $M.92 := $store.ref($M.92, $add.ref($add.ref(si_type, $mul.ref(0, 32)), $mul.ref(3, 8)), $0.ref);
    $M.91 := $store.i8($M.91, si_type_str, 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(1, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(3, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(4, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(5, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(6, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(7, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(8, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(9, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(10, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(11, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(12, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(13, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(14, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(15, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(17, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(18, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(19, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(20, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(21, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(22, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(23, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(24, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(25, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(26, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(27, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(28, 1)), 0);
    $M.91 := $store.i8($M.91, $add.ref($add.ref(si_type_str, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.ref($M.0, ipmi_driver, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.15);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(8, 1)), platform_bus_type);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ipmi_driver, $mul.ref(0, 152)), $mul.ref(144, 1)), $0.ref);
    $M.147 := $store.i8($M.147, pnp_dev_table, 73);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 80);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 73);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 49);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.147 := $store.i64($M.147, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.147 := $store.i8($M.147, $add.ref($add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.147 := $store.i64($M.147, $add.ref($add.ref($add.ref(pnp_dev_table, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1)), 0);
    $M.90 := 0;
    call {:si_unique_call 1752} {:cexpr "pnp_registered"} boogie_si_record_i32(0);
    $M.169 := $store.i32($M.169, ipmi_pci_devices, 4156);
    $M.170 := $store.i32($M.170, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 4634);
    $M.171 := $store.i32($M.171, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.172 := $store.i32($M.172, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.173 := $store.i32($M.173, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.174 := $store.i32($M.174, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.175 := $store.i64($M.175, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.169 := $store.i32($M.169, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), $sub.i32(0, 1));
    $M.170 := $store.i32($M.170, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), $sub.i32(0, 1));
    $M.171 := $store.i32($M.171, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.172 := $store.i32($M.172, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.173 := $store.i32($M.173, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 788224);
    $M.174 := $store.i32($M.174, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), $sub.i32(0, 256));
    $M.175 := $store.i64($M.175, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.169 := $store.i32($M.169, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.170 := $store.i32($M.170, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.171 := $store.i32($M.171, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.172 := $store.i32($M.172, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.173 := $store.i32($M.173, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.174 := $store.i32($M.174, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.175 := $store.i64($M.175, $add.ref($add.ref($add.ref(ipmi_pci_devices, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.89 := 0;
    call {:si_unique_call 1753} {:cexpr "pci_registered"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1754} {:cexpr "initialized"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, smi_infos, smi_infos);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smi_infos, $mul.ref(0, 16)), $mul.ref(8, 1)), smi_infos);
    $M.25 := $store.ref($M.25, si_to_str, .str.31);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(si_to_str, $mul.ref(0, 24)), $mul.ref(1, 8)), .str.32);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(si_to_str, $mul.ref(0, 24)), $mul.ref(2, 8)), .str.33);
    $M.24 := $store.ref($M.24, ipmi_addr_src_to_str, $0.ref);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(ipmi_addr_src_to_str, $mul.ref(0, 72)), $mul.ref(1, 8)), .str.23);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(ipmi_addr_src_to_str, $mul.ref(0, 72)), $mul.ref(2, 8)), .str.24);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(ipmi_addr_src_to_str, $mul.ref(0, 72)), $mul.ref(3, 8)), .str.25);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(ipmi_addr_src_to_str, $mul.ref(0, 72)), $mul.ref(4, 8)), .str.26);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(ipmi_addr_src_to_str, $mul.ref(0, 72)), $mul.ref(5, 8)), .str.27);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(ipmi_addr_src_to_str, $mul.ref(0, 72)), $mul.ref(6, 8)), .str.28);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(ipmi_addr_src_to_str, $mul.ref(0, 72)), $mul.ref(7, 8)), .str.29);
    $M.24 := $store.ref($M.24, $add.ref($add.ref(ipmi_addr_src_to_str, $mul.ref(0, 72)), $mul.ref(8, 8)), .str.30);
    $M.45 := $store.i32($M.45, kipmid_max_busy_us, 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(kipmid_max_busy_us, $mul.ref(0, 16)), $mul.ref(1, 4)), 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(kipmid_max_busy_us, $mul.ref(0, 16)), $mul.ref(2, 4)), 0);
    $M.45 := $store.i32($M.45, $add.ref($add.ref(kipmid_max_busy_us, $mul.ref(0, 16)), $mul.ref(3, 4)), 0);
    $M.44 := 0;
    call {:si_unique_call 1755} {:cexpr "num_max_busy_us"} boogie_si_record_i32(0);
    $M.41 := $store.i32($M.41, force_kipmid, 0);
    $M.41 := $store.i32($M.41, $add.ref($add.ref(force_kipmid, $mul.ref(0, 16)), $mul.ref(1, 4)), 0);
    $M.41 := $store.i32($M.41, $add.ref($add.ref(force_kipmid, $mul.ref(0, 16)), $mul.ref(2, 4)), 0);
    $M.41 := $store.i32($M.41, $add.ref($add.ref(force_kipmid, $mul.ref(0, 16)), $mul.ref(3, 4)), 0);
    $M.40 := 0;
    call {:si_unique_call 1756} {:cexpr "num_force_kipmid"} boogie_si_record_i32(0);
    $M.87 := $0.ref;
    $M.95 := $0.ref;
    $M.86 := $0.ref;
    $M.8 := 0;
    call {:si_unique_call 1757} {:cexpr "ldv_init"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, bt_smi_handlers, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bt_smi_handlers, $mul.ref(0, 64)), $mul.ref(8, 1)), bt_init_data);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bt_smi_handlers, $mul.ref(0, 64)), $mul.ref(16, 1)), bt_start_transaction);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bt_smi_handlers, $mul.ref(0, 64)), $mul.ref(24, 1)), bt_get_result);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bt_smi_handlers, $mul.ref(0, 64)), $mul.ref(32, 1)), bt_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bt_smi_handlers, $mul.ref(0, 64)), $mul.ref(40, 1)), bt_detect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bt_smi_handlers, $mul.ref(0, 64)), $mul.ref(48, 1)), bt_cleanup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bt_smi_handlers, $mul.ref(0, 64)), $mul.ref(56, 1)), bt_size);
    $M.0 := $store.ref($M.0, smic_smi_handlers, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smic_smi_handlers, $mul.ref(0, 64)), $mul.ref(8, 1)), init_smic_data);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smic_smi_handlers, $mul.ref(0, 64)), $mul.ref(16, 1)), start_smic_transaction);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smic_smi_handlers, $mul.ref(0, 64)), $mul.ref(24, 1)), smic_get_result);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smic_smi_handlers, $mul.ref(0, 64)), $mul.ref(32, 1)), smic_event);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smic_smi_handlers, $mul.ref(0, 64)), $mul.ref(40, 1)), smic_detect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smic_smi_handlers, $mul.ref(0, 64)), $mul.ref(48, 1)), smic_cleanup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(smic_smi_handlers, $mul.ref(0, 64)), $mul.ref(56, 1)), smic_size);
    $M.4 := $store.i8($M.4, .str.148, 91);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.148, $mul.ref(0, 3)), $mul.ref(1, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.148, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.4 := $store.i8($M.4, .str.149, 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.149, $mul.ref(0, 8)), $mul.ref(1, 1)), 95);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.149, $mul.ref(0, 8)), $mul.ref(2, 1)), 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.149, $mul.ref(0, 8)), $mul.ref(3, 1)), 85);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.149, $mul.ref(0, 8)), $mul.ref(4, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.149, $mul.ref(0, 8)), $mul.ref(5, 1)), 89);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.149, $mul.ref(0, 8)), $mul.ref(6, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.149, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.4 := $store.i8($M.4, .str.150, 72);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(1, 1)), 95);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(2, 1)), 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(3, 1)), 85);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(4, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(5, 1)), 89);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(6, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.150, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.4 := $store.i8($M.4, .str.151, 79);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.151, $mul.ref(0, 6)), $mul.ref(1, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.151, $mul.ref(0, 6)), $mul.ref(2, 1)), 77);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.151, $mul.ref(0, 6)), $mul.ref(3, 1)), 48);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.151, $mul.ref(0, 6)), $mul.ref(4, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.151, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.4 := $store.i8($M.4, .str.152, 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.152, $mul.ref(0, 5)), $mul.ref(1, 1)), 77);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.152, $mul.ref(0, 5)), $mul.ref(2, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.152, $mul.ref(0, 5)), $mul.ref(3, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.152, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, .str.153, 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.153, $mul.ref(0, 5)), $mul.ref(1, 1)), 50);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.153, $mul.ref(0, 5)), $mul.ref(2, 1)), 72);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.153, $mul.ref(0, 5)), $mul.ref(3, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.153, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, .str.154, 72);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.154, $mul.ref(0, 5)), $mul.ref(1, 1)), 50);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.154, $mul.ref(0, 5)), $mul.ref(2, 1)), 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.154, $mul.ref(0, 5)), $mul.ref(3, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.154, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, .str.155, 93);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.155, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.4 := $store.i8($M.4, .str.173, 116);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.173, $mul.ref(0, 8)), $mul.ref(1, 1)), 105);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.173, $mul.ref(0, 8)), $mul.ref(2, 1)), 109);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.173, $mul.ref(0, 8)), $mul.ref(3, 1)), 101);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.173, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.173, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.173, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.173, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.4 := $store.i8($M.4, .str.174, 105);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(1, 1)), 110);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(2, 1)), 116);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(5, 1)), 110);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(6, 1)), 97);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(7, 1)), 108);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(8, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(11, 1)), 114);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(12, 1)), 111);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(13, 1)), 114);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.174, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.4 := $store.i8($M.4, .str.156, 73);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.156, $mul.ref(0, 5)), $mul.ref(1, 1)), 68);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.156, $mul.ref(0, 5)), $mul.ref(2, 1)), 76);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.156, $mul.ref(0, 5)), $mul.ref(3, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.156, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.4 := $store.i8($M.4, .str.157, 88);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(1, 1)), 65);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(2, 1)), 67);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(3, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(4, 1)), 73);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(5, 1)), 79);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(6, 1)), 78);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.157, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.4 := $store.i8($M.4, .str.158, 87);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.158, $mul.ref(0, 9)), $mul.ref(1, 1)), 82);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.158, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.158, $mul.ref(0, 9)), $mul.ref(3, 1)), 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.158, $mul.ref(0, 9)), $mul.ref(4, 1)), 89);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.158, $mul.ref(0, 9)), $mul.ref(5, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.158, $mul.ref(0, 9)), $mul.ref(6, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.158, $mul.ref(0, 9)), $mul.ref(7, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.158, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.4 := $store.i8($M.4, .str.159, 87);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(1, 1)), 82);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(2, 1)), 95);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(3, 1)), 67);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(4, 1)), 79);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(5, 1)), 78);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(6, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(7, 1)), 85);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(8, 1)), 77);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(9, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.4 := $store.i8($M.4, .str.160, 82);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.160, $mul.ref(0, 8)), $mul.ref(1, 1)), 68);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.160, $mul.ref(0, 8)), $mul.ref(2, 1)), 95);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.160, $mul.ref(0, 8)), $mul.ref(3, 1)), 87);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.160, $mul.ref(0, 8)), $mul.ref(4, 1)), 65);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.160, $mul.ref(0, 8)), $mul.ref(5, 1)), 73);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.160, $mul.ref(0, 8)), $mul.ref(6, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.160, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.4 := $store.i8($M.4, .str.161, 67);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.161, $mul.ref(0, 10)), $mul.ref(1, 1)), 76);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.161, $mul.ref(0, 10)), $mul.ref(2, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.161, $mul.ref(0, 10)), $mul.ref(3, 1)), 65);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.161, $mul.ref(0, 10)), $mul.ref(4, 1)), 82);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.161, $mul.ref(0, 10)), $mul.ref(5, 1)), 95);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.161, $mul.ref(0, 10)), $mul.ref(6, 1)), 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.161, $mul.ref(0, 10)), $mul.ref(7, 1)), 50);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.161, $mul.ref(0, 10)), $mul.ref(8, 1)), 72);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.161, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.4 := $store.i8($M.4, .str.162, 82);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.162, $mul.ref(0, 9)), $mul.ref(1, 1)), 68);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.162, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.162, $mul.ref(0, 9)), $mul.ref(3, 1)), 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.162, $mul.ref(0, 9)), $mul.ref(4, 1)), 89);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.162, $mul.ref(0, 9)), $mul.ref(5, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.162, $mul.ref(0, 9)), $mul.ref(6, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.162, $mul.ref(0, 9)), $mul.ref(7, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.162, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.4 := $store.i8($M.4, .str.163, 82);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(1, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(2, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(3, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(4, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(5, 1)), 49);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.163, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i8($M.4, .str.164, 82);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.164, $mul.ref(0, 7)), $mul.ref(1, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.164, $mul.ref(0, 7)), $mul.ref(2, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.164, $mul.ref(0, 7)), $mul.ref(3, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.164, $mul.ref(0, 7)), $mul.ref(4, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.164, $mul.ref(0, 7)), $mul.ref(5, 1)), 50);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.164, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i8($M.4, .str.165, 82);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.165, $mul.ref(0, 7)), $mul.ref(1, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.165, $mul.ref(0, 7)), $mul.ref(2, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.165, $mul.ref(0, 7)), $mul.ref(3, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.165, $mul.ref(0, 7)), $mul.ref(4, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.165, $mul.ref(0, 7)), $mul.ref(5, 1)), 51);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.165, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.4 := $store.i8($M.4, .str.166, 82);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.166, $mul.ref(0, 8)), $mul.ref(1, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.166, $mul.ref(0, 8)), $mul.ref(2, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.166, $mul.ref(0, 8)), $mul.ref(3, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.166, $mul.ref(0, 8)), $mul.ref(4, 1)), 65);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.166, $mul.ref(0, 8)), $mul.ref(5, 1)), 82);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.166, $mul.ref(0, 8)), $mul.ref(6, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.166, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.4 := $store.i8($M.4, .str.167, 76);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.167, $mul.ref(0, 10)), $mul.ref(1, 1)), 79);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.167, $mul.ref(0, 10)), $mul.ref(2, 1)), 78);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.167, $mul.ref(0, 10)), $mul.ref(3, 1)), 71);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.167, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.167, $mul.ref(0, 10)), $mul.ref(5, 1)), 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.167, $mul.ref(0, 10)), $mul.ref(6, 1)), 85);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.167, $mul.ref(0, 10)), $mul.ref(7, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.167, $mul.ref(0, 10)), $mul.ref(8, 1)), 89);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.167, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.4 := $store.i8($M.4, .str.168, 67);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.168, $mul.ref(0, 10)), $mul.ref(1, 1)), 65);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.168, $mul.ref(0, 10)), $mul.ref(2, 1)), 80);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.168, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.168, $mul.ref(0, 10)), $mul.ref(4, 1)), 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.168, $mul.ref(0, 10)), $mul.ref(5, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.168, $mul.ref(0, 10)), $mul.ref(6, 1)), 71);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.168, $mul.ref(0, 10)), $mul.ref(7, 1)), 73);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.168, $mul.ref(0, 10)), $mul.ref(8, 1)), 78);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.168, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.4 := $store.i8($M.4, .str.169, 67);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.169, $mul.ref(0, 8)), $mul.ref(1, 1)), 65);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.169, $mul.ref(0, 8)), $mul.ref(2, 1)), 80);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.169, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.169, $mul.ref(0, 8)), $mul.ref(4, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.169, $mul.ref(0, 8)), $mul.ref(5, 1)), 78);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.169, $mul.ref(0, 8)), $mul.ref(6, 1)), 68);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.169, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.4 := $store.i8($M.4, .str.170, 66);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(1, 1)), 65);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(2, 1)), 68);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(3, 1)), 32);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(4, 1)), 83);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(5, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(6, 1)), 65);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(7, 1)), 84);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(8, 1)), 69);
    $M.4 := $store.i8($M.4, $add.ref($add.ref(.str.170, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.249 := $store.i8($M.249, .str.23, 104);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(1, 1)), 111);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(2, 1)), 116);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(3, 1)), 109);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(4, 1)), 111);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.23, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.249 := $store.i8($M.249, .str.24, 104);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.24, $mul.ref(0, 10)), $mul.ref(1, 1)), 97);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.24, $mul.ref(0, 10)), $mul.ref(2, 1)), 114);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.24, $mul.ref(0, 10)), $mul.ref(3, 1)), 100);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.24, $mul.ref(0, 10)), $mul.ref(4, 1)), 99);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.24, $mul.ref(0, 10)), $mul.ref(5, 1)), 111);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.24, $mul.ref(0, 10)), $mul.ref(6, 1)), 100);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.24, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.24, $mul.ref(0, 10)), $mul.ref(8, 1)), 100);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.24, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.249 := $store.i8($M.249, .str.25, 83);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.25, $mul.ref(0, 5)), $mul.ref(1, 1)), 80);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.25, $mul.ref(0, 5)), $mul.ref(2, 1)), 77);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.25, $mul.ref(0, 5)), $mul.ref(3, 1)), 73);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.25, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.249 := $store.i8($M.249, .str.26, 65);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.26, $mul.ref(0, 5)), $mul.ref(1, 1)), 67);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.26, $mul.ref(0, 5)), $mul.ref(2, 1)), 80);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.26, $mul.ref(0, 5)), $mul.ref(3, 1)), 73);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.26, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.249 := $store.i8($M.249, .str.27, 83);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.27, $mul.ref(0, 7)), $mul.ref(1, 1)), 77);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.27, $mul.ref(0, 7)), $mul.ref(2, 1)), 66);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.27, $mul.ref(0, 7)), $mul.ref(3, 1)), 73);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.27, $mul.ref(0, 7)), $mul.ref(4, 1)), 79);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.27, $mul.ref(0, 7)), $mul.ref(5, 1)), 83);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.27, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.249 := $store.i8($M.249, .str.28, 80);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.28, $mul.ref(0, 4)), $mul.ref(1, 1)), 67);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.28, $mul.ref(0, 4)), $mul.ref(2, 1)), 73);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.28, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.249 := $store.i8($M.249, .str.29, 100);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(2, 1)), 118);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(3, 1)), 105);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(4, 1)), 99);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(5, 1)), 101);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(6, 1)), 45);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(7, 1)), 116);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(8, 1)), 114);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.29, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.249 := $store.i8($M.249, .str.30, 100);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(2, 1)), 102);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(3, 1)), 97);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(4, 1)), 117);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(5, 1)), 108);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.30, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.249 := $store.i8($M.249, .str.31, 107);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.31, $mul.ref(0, 4)), $mul.ref(1, 1)), 99);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.31, $mul.ref(0, 4)), $mul.ref(2, 1)), 115);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.31, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.249 := $store.i8($M.249, .str.32, 115);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(1, 1)), 109);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(2, 1)), 105);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(3, 1)), 99);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.249 := $store.i8($M.249, .str.33, 98);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.33, $mul.ref(0, 3)), $mul.ref(1, 1)), 116);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.33, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.249 := $store.i8($M.249, .str.73, 105);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.73, $mul.ref(0, 4)), $mul.ref(1, 1)), 47);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.73, $mul.ref(0, 4)), $mul.ref(2, 1)), 111);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.73, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.249 := $store.i8($M.249, .str.52, 109);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.52, $mul.ref(0, 4)), $mul.ref(1, 1)), 101);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.52, $mul.ref(0, 4)), $mul.ref(2, 1)), 109);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.52, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.249 := $store.i8($M.249, .str.105, 97);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.105, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.105, $mul.ref(0, 4)), $mul.ref(2, 1)), 100);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.105, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.249 := $store.i8($M.249, .str.106, 114);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.106, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.106, $mul.ref(0, 7)), $mul.ref(2, 1)), 109);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.106, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.106, $mul.ref(0, 7)), $mul.ref(4, 1)), 118);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.106, $mul.ref(0, 7)), $mul.ref(5, 1)), 101);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.106, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.93, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.93, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.94, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(11, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.95, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.250 := $store.i8($M.250, .str.97, 114);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.97, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.97, $mul.ref(0, 4)), $mul.ref(2, 1)), 112);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.97, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.250 := $store.i8($M.250, .str.98, 114);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.98, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.98, $mul.ref(0, 4)), $mul.ref(2, 1)), 105);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.98, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.250 := $store.i8($M.250, .str.99, 114);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.99, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.99, $mul.ref(0, 4)), $mul.ref(2, 1)), 104);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.99, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.250 := $store.i8($M.250, .str.100, 105);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.100, $mul.ref(0, 4)), $mul.ref(1, 1)), 114);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.100, $mul.ref(0, 4)), $mul.ref(2, 1)), 113);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.100, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.250 := $store.i8($M.250, .str.101, 105);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.101, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.101, $mul.ref(0, 5)), $mul.ref(2, 1)), 109);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.101, $mul.ref(0, 5)), $mul.ref(3, 1)), 98);
    $M.250 := $store.i8($M.250, $add.ref($add.ref(.str.101, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.251 := $store.i8($M.251, .str.91, 37);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(1, 1)), 115);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(2, 1)), 44);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(3, 1)), 37);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(4, 1)), 115);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(5, 1)), 44);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(6, 1)), 48);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(7, 1)), 120);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(8, 1)), 37);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(9, 1)), 108);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(10, 1)), 120);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(11, 1)), 44);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(12, 1)), 114);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(13, 1)), 115);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(14, 1)), 112);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(15, 1)), 61);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(16, 1)), 37);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(17, 1)), 100);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(18, 1)), 44);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(19, 1)), 114);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(20, 1)), 115);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(21, 1)), 105);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(22, 1)), 61);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(23, 1)), 37);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(24, 1)), 100);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(25, 1)), 44);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(26, 1)), 114);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(27, 1)), 115);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(28, 1)), 104);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(29, 1)), 61);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(30, 1)), 37);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(31, 1)), 100);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(32, 1)), 44);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(33, 1)), 105);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(34, 1)), 114);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(35, 1)), 113);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(36, 1)), 61);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(37, 1)), 37);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(38, 1)), 100);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(39, 1)), 44);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(40, 1)), 105);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(41, 1)), 112);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(42, 1)), 109);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(43, 1)), 98);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(44, 1)), 61);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(45, 1)), 37);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(46, 1)), 100);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(47, 1)), 10);
    $M.251 := $store.i8($M.251, $add.ref($add.ref(.str.91, $mul.ref(0, 49)), $mul.ref(48, 1)), 0);
    $M.252 := $store.i8($M.252, .str.79, 105);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(1, 1)), 110);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(2, 1)), 116);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(3, 1)), 101);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(4, 1)), 114);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(5, 1)), 114);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(6, 1)), 117);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(7, 1)), 112);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(8, 1)), 116);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(9, 1)), 115);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(10, 1)), 95);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(11, 1)), 101);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(12, 1)), 110);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(13, 1)), 97);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(14, 1)), 98);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(15, 1)), 108);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(16, 1)), 101);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(17, 1)), 100);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(18, 1)), 58);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(20, 1)), 32);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(24, 1)), 100);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.252 := $store.i8($M.252, $add.ref($add.ref(.str.79, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.253 := $store.i8($M.253, .str.80, 115);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(1, 1)), 104);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(2, 1)), 111);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(3, 1)), 114);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(4, 1)), 116);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(6, 1)), 116);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(7, 1)), 105);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(8, 1)), 109);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(9, 1)), 101);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(10, 1)), 111);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(11, 1)), 117);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(12, 1)), 116);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(13, 1)), 115);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(14, 1)), 58);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(15, 1)), 32);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(18, 1)), 32);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(20, 1)), 32);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.253 := $store.i8($M.253, $add.ref($add.ref(.str.80, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.254 := $store.i8($M.254, .str.81, 108);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(1, 1)), 111);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(2, 1)), 110);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(3, 1)), 103);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(4, 1)), 95);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(5, 1)), 116);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(6, 1)), 105);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(7, 1)), 109);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(8, 1)), 101);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(9, 1)), 111);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(10, 1)), 117);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(11, 1)), 116);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(12, 1)), 115);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(13, 1)), 58);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(14, 1)), 32);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(15, 1)), 32);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(18, 1)), 32);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(20, 1)), 32);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.254 := $store.i8($M.254, $add.ref($add.ref(.str.81, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.255 := $store.i8($M.255, .str.82, 105);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(1, 1)), 100);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(2, 1)), 108);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(3, 1)), 101);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(4, 1)), 115);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(5, 1)), 58);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(6, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(7, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(8, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(9, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(10, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(11, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(12, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(13, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(14, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(15, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(18, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(20, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.255 := $store.i8($M.255, $add.ref($add.ref(.str.82, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.256 := $store.i8($M.256, .str.83, 105);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(1, 1)), 110);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(2, 1)), 116);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(3, 1)), 101);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(4, 1)), 114);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(5, 1)), 114);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(6, 1)), 117);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(7, 1)), 112);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(8, 1)), 116);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(9, 1)), 115);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(10, 1)), 58);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(11, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(12, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(13, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(14, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(15, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(18, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(20, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.256 := $store.i8($M.256, $add.ref($add.ref(.str.83, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.257 := $store.i8($M.257, .str.84, 97);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(1, 1)), 116);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(2, 1)), 116);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(3, 1)), 101);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(4, 1)), 110);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(5, 1)), 116);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(6, 1)), 105);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(7, 1)), 111);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(8, 1)), 110);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(9, 1)), 115);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(10, 1)), 58);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(11, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(12, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(13, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(14, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(15, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(18, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(20, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.257 := $store.i8($M.257, $add.ref($add.ref(.str.84, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.258 := $store.i8($M.258, .str.85, 102);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(1, 1)), 108);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(2, 1)), 97);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(3, 1)), 103);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(4, 1)), 95);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(5, 1)), 102);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(6, 1)), 101);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(7, 1)), 116);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(8, 1)), 99);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(9, 1)), 104);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(10, 1)), 101);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(11, 1)), 115);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(12, 1)), 58);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(13, 1)), 32);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(14, 1)), 32);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(15, 1)), 32);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(18, 1)), 32);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(20, 1)), 32);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.258 := $store.i8($M.258, $add.ref($add.ref(.str.85, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.259 := $store.i8($M.259, .str.86, 104);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(1, 1)), 111);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(2, 1)), 115);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(3, 1)), 101);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(4, 1)), 100);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(6, 1)), 99);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(7, 1)), 111);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(8, 1)), 117);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(9, 1)), 110);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(10, 1)), 116);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(11, 1)), 58);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(12, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(13, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(14, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(15, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(18, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(20, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.259 := $store.i8($M.259, $add.ref($add.ref(.str.86, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.260 := $store.i8($M.260, .str.87, 99);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(1, 1)), 111);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(2, 1)), 109);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(3, 1)), 112);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(4, 1)), 108);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(5, 1)), 101);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(6, 1)), 116);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(7, 1)), 101);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(8, 1)), 95);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(9, 1)), 116);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(10, 1)), 114);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(11, 1)), 97);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(12, 1)), 110);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(13, 1)), 115);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(14, 1)), 97);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(15, 1)), 99);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(16, 1)), 116);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(17, 1)), 105);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(18, 1)), 111);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(19, 1)), 110);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(20, 1)), 115);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(21, 1)), 58);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.260 := $store.i8($M.260, $add.ref($add.ref(.str.87, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.261 := $store.i8($M.261, .str.88, 101);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(1, 1)), 118);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(2, 1)), 101);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(3, 1)), 110);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(4, 1)), 116);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(5, 1)), 115);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(6, 1)), 58);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(7, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(8, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(9, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(10, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(11, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(12, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(13, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(14, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(15, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(16, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(17, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(18, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(20, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.261 := $store.i8($M.261, $add.ref($add.ref(.str.88, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.262 := $store.i8($M.262, .str.89, 119);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(1, 1)), 97);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(2, 1)), 116);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(3, 1)), 99);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(4, 1)), 104);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(5, 1)), 100);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(6, 1)), 111);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(7, 1)), 103);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(8, 1)), 95);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(9, 1)), 112);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(10, 1)), 114);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(11, 1)), 101);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(12, 1)), 116);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(13, 1)), 105);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(14, 1)), 109);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(15, 1)), 101);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(16, 1)), 111);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(17, 1)), 117);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(18, 1)), 116);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(19, 1)), 115);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(20, 1)), 58);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.262 := $store.i8($M.262, $add.ref($add.ref(.str.89, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.263 := $store.i8($M.263, .str.90, 105);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(1, 1)), 110);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(2, 1)), 99);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(3, 1)), 111);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(4, 1)), 109);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(5, 1)), 105);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(6, 1)), 110);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(7, 1)), 103);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(8, 1)), 95);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(9, 1)), 109);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(10, 1)), 101);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(11, 1)), 115);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(12, 1)), 115);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(13, 1)), 97);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(14, 1)), 103);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(15, 1)), 101);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(16, 1)), 115);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(17, 1)), 58);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(18, 1)), 32);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(19, 1)), 32);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(20, 1)), 32);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(21, 1)), 32);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(22, 1)), 32);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(23, 1)), 37);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(24, 1)), 117);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(25, 1)), 10);
    $M.263 := $store.i8($M.263, $add.ref($add.ref(.str.90, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.264 := $store.i8($M.264, .str.78, 37);
    $M.264 := $store.i8($M.264, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.264 := $store.i8($M.264, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.264 := $store.i8($M.264, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.249 := $store.i8($M.249, .str.51, 105);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.51, $mul.ref(0, 3)), $mul.ref(1, 1)), 111);
    $M.249 := $store.i8($M.249, $add.ref($add.ref(.str.51, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    call {:si_unique_call 1758} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 668778);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i8)
{
  var $p0: ref;
  var $i1: i8;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $i5: i8;
  var $i6: i8;
  var $i7: i8;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(port_inl, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(port_inw, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(port_inb, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(mem_inq, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(intf_mem_inl, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(intf_mem_inw, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(intf_mem_inb, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    call {:si_unique_call 1759} $i1 := intf_mem_inb(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 1760} $i2 := intf_mem_inw(arg, arg1);
    $r := $i2;
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 1761} $i3 := intf_mem_inl(arg, arg1);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    $r := $i3;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    call {:si_unique_call 1762} $i4 := mem_inq(arg, arg1);
    $r := $i4;
    return;

  $bb6:
    assume $i12 == 1;
    call {:si_unique_call 1763} $i5 := port_inb(arg, arg1);
    $r := $i5;
    return;

  $bb7:
    assume $i13 == 1;
    call {:si_unique_call 1764} $i6 := port_inw(arg, arg1);
    $r := $i6;
    return;

  $bb8:
    assume $i14 == 1;
    call {:si_unique_call 1765} $i7 := port_inl(arg, arg1);
    $r := $i7;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 669810);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i8);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i8)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i7 := $eq.ref(port_outl, $p0);
    assume {:branchcond $i7} true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i7 == 1);
    $i6 := $eq.ref(port_outw, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i6 == 1);
    $i5 := $eq.ref(port_outb, $p0);
    assume {:branchcond $i5} true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i5 == 1);
    $i4 := $eq.ref(mem_outq, $p0);
    assume {:branchcond $i4} true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i4 == 1);
    $i3 := $eq.ref(intf_mem_outl, $p0);
    assume {:branchcond $i3} true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i3 == 1);
    $i2 := $eq.ref(intf_mem_outw, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i2 == 1);
    $i1 := $eq.ref(intf_mem_outb, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1766} intf_mem_outb(arg, arg1, arg2);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 1767} intf_mem_outw(arg, arg1, arg2);
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 1768} intf_mem_outl(arg, arg1, arg2);
    return;

  $bb5:
    assume $i4 == 1;
    call {:si_unique_call 1769} mem_outq(arg, arg1, arg2);
    return;

  $bb6:
    assume $i5 == 1;
    call {:si_unique_call 1770} port_outb(arg, arg1, arg2);
    return;

  $bb7:
    assume $i6 == 1;
    call {:si_unique_call 1771} port_outw(arg, arg1, arg2);
    return;

  $bb8:
    assume $i7 == 1;
    call {:si_unique_call 1772} port_outl(arg, arg1, arg2);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 670842);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, assertsPassed, $M.5, $M.20, $M.22, $M.26, $M.28, $M.30, $M.32, $CurrAddr, $M.10, $M.12, $M.14, $M.16, $M.9, $M.11, $M.13, $M.15, $M.43, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(request_events, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i19 == 1);
    $i18 := $eq.ref(acpi_gpe_irq_cleanup, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i18 == 1);
    $i17 := $eq.ref(ipmi_pnp_remove, $p0);
    assume {:branchcond $i17} true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i17 == 1);
    $i16 := $eq.ref(port_cleanup, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i16 == 1);
    $i15 := $eq.ref(mem_cleanup, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i15 == 1);
    $i14 := $eq.ref(std_irq_cleanup, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i14 == 1);
    $i13 := $eq.ref(ipmi_pci_cleanup, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i13 == 1);
    $i12 := $eq.ref(poll, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i12 == 1);
    $i11 := $eq.ref(ipmi_pci_remove, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i11 == 1);
    $i10 := $eq.ref(bt_cleanup, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i10 == 1);
    $i9 := $eq.ref(smic_cleanup, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i9 == 1);
    $i8 := $eq.ref(kcs_cleanup, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1773} kcs_cleanup($p1);
    return;

  $bb3:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1774} smic_cleanup($p2);
    return;

  $bb4:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1775} bt_cleanup($p3);
    return;

  $bb5:
    assume $i11 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1776} ipmi_pci_remove($p4);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1777} poll($p5);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    call {:si_unique_call 1778} ipmi_pci_cleanup(arg);
    return;

  $bb8:
    assume $i14 == 1;
    call {:si_unique_call 1779} std_irq_cleanup(arg);
    return;

  $bb9:
    assume $i15 == 1;
    call {:si_unique_call 1780} mem_cleanup(arg);
    return;

  $bb10:
    assume $i16 == 1;
    call {:si_unique_call 1781} port_cleanup(arg);
    return;

  $bb11:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1782} ipmi_pnp_remove($p6);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i18 == 1;
    call {:si_unique_call 1783} acpi_gpe_irq_cleanup(arg);
    return;

  $bb13:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1784} request_events($p7);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 671874);

procedure devirtbounce.3(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, assertsPassed, $M.5, $M.20, $M.22, $M.26, $M.28, $M.30, $M.32, $CurrAddr, $M.10, $M.12, $M.14, $M.16, $M.9, $M.11, $M.13, $M.15, $M.43, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation devirtbounce.3(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i23 := $eq.ref(request_events, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i23 == 1);
    $i22 := $eq.ref(acpi_gpe_irq_cleanup, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i22 == 1);
    $i21 := $eq.ref(ipmi_pnp_remove, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(port_cleanup, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(mem_cleanup, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(std_irq_cleanup, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(ipmi_pci_cleanup, $p0);
    assume {:branchcond $i17} true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(poll, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(ipmi_pci_remove, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(bt_cleanup, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(smic_cleanup, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(kcs_cleanup, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    call {:si_unique_call 1785} kcs_cleanup(arg);
    return;

  $bb3:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1786} smic_cleanup($p1);
    return;

  $bb4:
    assume $i14 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1787} bt_cleanup($p2);
    return;

  $bb5:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1788} ipmi_pci_remove($p3);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1789} poll($p4);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1790} ipmi_pci_cleanup($p5);
    return;

  $bb8:
    assume $i18 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1791} std_irq_cleanup($p6);
    return;

  $bb9:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1792} mem_cleanup($p7);
    return;

  $bb10:
    assume $i20 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1793} port_cleanup($p8);
    return;

  $bb11:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1794} ipmi_pnp_remove($p9);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i22 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1795} acpi_gpe_irq_cleanup($p10);
    return;

  $bb13:
    assume $i23 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1796} request_events($p11);
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 672906);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 673938);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(bt_get_result, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i16 == 1);
    $i15 := $eq.ref(bt_start_transaction, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i15 == 1);
    $i14 := $eq.ref(smic_get_result, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i14 == 1);
    $i13 := $eq.ref(start_smic_transaction, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i13 == 1);
    $i12 := $eq.ref(get_kcs_result, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(start_kcs_transaction, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    call {:si_unique_call 1797} $i1 := start_kcs_transaction(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i12 == 1;
    call {:si_unique_call 1798} $i2 := get_kcs_result(arg, arg1, arg2);
    $r := $i2;
    return;

  $bb4:
    assume $i13 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1799} $i4 := start_smic_transaction($p3, arg1, arg2);
    $r := $i4;
    return;

  $bb5:
    assume $i14 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1800} $i6 := smic_get_result($p5, arg1, arg2);
    $r := $i6;
    return;

  $bb6:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1801} $i8 := bt_start_transaction($p7, arg1, arg2);
    $r := $i8;
    return;

  $bb7:
    assume $i16 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1802} $i10 := bt_get_result($p9, arg1, arg2);
    $r := $i10;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 674970);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $CurrAddr, $M.17, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(bt_event, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(smic_event, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i7 == 1);
    $i6 := $eq.ref(kcs_event, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 1803} $i1 := kcs_event(arg, arg1);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    $r := $i1;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1804} $i3 := smic_event($p2, arg1);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    $r := $i3;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1805} $i5 := bt_event($p4, arg1);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    $r := $i5;
    return;

  SeqInstr_631:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 676002);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17, assertsPassed, $M.5, $M.20, $M.22, $M.26, $M.28, $M.30, $M.32, $CurrAddr, $M.10, $M.12, $M.14, $M.16, $M.9, $M.11, $M.13, $M.15, $M.43, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(request_events, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(acpi_gpe_irq_cleanup, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(ipmi_pnp_remove, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(port_cleanup, $p0);
    assume true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(mem_cleanup, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(std_irq_cleanup, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(ipmi_pci_cleanup, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(poll, $p0);
    assume {:branchcond $i17} true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(ipmi_pci_remove, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(bt_cleanup, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(smic_cleanup, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(kcs_cleanup, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1806} kcs_cleanup($p1);
    return;

  $bb3:
    assume $i14 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1807} smic_cleanup($p2);
    return;

  $bb4:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1808} bt_cleanup($p3);
    return;

  $bb5:
    assume $i16 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1809} ipmi_pci_remove($p4);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1810} poll($p5);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1811} ipmi_pci_cleanup($p6);
    return;

  $bb8:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1812} std_irq_cleanup($p7);
    return;

  $bb9:
    assume $i20 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1813} mem_cleanup($p8);
    return;

  $bb10:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1814} port_cleanup($p9);
    return;

  $bb11:
    assume $i22 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1815} ipmi_pnp_remove($p10);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i23 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1816} acpi_gpe_irq_cleanup($p11);
    return;

  $bb13:
    assume $i24 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1817} request_events($p12);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 677034);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i28 := $eq.ref(oem_data_avail_to_receive_msg_avail, $p0);
    assume {:branchcond $i28} true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i28 == 1);
    $i27 := $eq.ref(ipmi_thread, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i27 == 1);
    $i26 := $eq.ref(ipmi_acpi_gpe, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i26 == 1);
    $i25 := $eq.ref(acpi_gpe_irq_setup, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i25 == 1);
    $i24 := $eq.ref(std_irq_setup, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i24 == 1);
    $i23 := $eq.ref(mem_setup, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i23 == 1);
    $i22 := $eq.ref(port_setup, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i22 == 1);
    $i21 := $eq.ref(ipmi_pci_resume, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i21 == 1);
    $i20 := $eq.ref(bt_detect, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i20 == 1);
    $i19 := $eq.ref(smic_detect, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i19 == 1);
    $i18 := $eq.ref(kcs_detect, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume false;
    return;

  $bb2:
    assume $i18 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1818} $i2 := kcs_detect($p1);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    $r := $i2;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i19 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1819} $i4 := smic_detect($p3);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    $r := $i4;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i20 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1820} $i6 := bt_detect($p5);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    $r := $i6;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1821} $i8 := ipmi_pci_resume($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i22 == 1;
    call {:si_unique_call 1822} $i9 := port_setup(arg);
    $r := $i9;
    return;

  $bb7:
    assume $i23 == 1;
    call {:si_unique_call 1823} $i10 := mem_setup(arg);
    $r := $i10;
    return;

  $bb8:
    assume $i24 == 1;
    call {:si_unique_call 1824} $i11 := std_irq_setup(arg);
    $r := $i11;
    return;

  $bb9:
    assume $i25 == 1;
    call {:si_unique_call 1825} $i12 := acpi_gpe_irq_setup(arg);
    $r := $i12;
    return;

  $bb10:
    assume $i26 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1826} $i14 := ipmi_acpi_gpe($p13);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    $r := $i14;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i27 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1827} $i16 := ipmi_thread($p15);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    $r := $i16;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i28 == 1;
    call {:si_unique_call 1828} $i17 := oem_data_avail_to_receive_msg_avail(arg);
    $r := $i17;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 678066);

procedure devirtbounce.9(funcPtr: ref, arg: i64, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i64, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 679098);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 680130);

procedure devirtbounce.11(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 681162);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i33 := $eq.ref(oem_data_avail_to_receive_msg_avail, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i33 == 1);
    $i32 := $eq.ref(ipmi_thread, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i32 == 1);
    $i31 := $eq.ref(ipmi_acpi_gpe, $p0);
    assume {:branchcond $i31} true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i31 == 1);
    $i30 := $eq.ref(acpi_gpe_irq_setup, $p0);
    assume {:branchcond $i30} true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i30 == 1);
    $i29 := $eq.ref(std_irq_setup, $p0);
    assume {:branchcond $i29} true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i29 == 1);
    $i28 := $eq.ref(mem_setup, $p0);
    assume {:branchcond $i28} true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i28 == 1);
    $i27 := $eq.ref(port_setup, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i27 == 1);
    $i26 := $eq.ref(ipmi_pci_resume, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i26 == 1);
    $i25 := $eq.ref(bt_detect, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i25 == 1);
    $i24 := $eq.ref(smic_detect, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i24 == 1);
    $i23 := $eq.ref(kcs_detect, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume false;
    return;

  $bb2:
    assume $i23 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1829} $i2 := kcs_detect($p1);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    $r := $i2;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i24 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1830} $i4 := smic_detect($p3);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    $r := $i4;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i25 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1831} $i6 := bt_detect($p5);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    $r := $i6;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1832} $i8 := ipmi_pci_resume($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i27 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1833} $i10 := port_setup($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1834} $i12 := mem_setup($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i29 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1835} $i14 := std_irq_setup($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i30 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1836} $i16 := acpi_gpe_irq_setup($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i31 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1837} $i18 := ipmi_acpi_gpe($p17);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    $r := $i18;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i32 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1838} $i20 := ipmi_thread($p19);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    $r := $i20;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i33 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1839} $i22 := oem_data_avail_to_receive_msg_avail($p21);
    $r := $i22;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 682194);

procedure devirtbounce.13(funcPtr: ref, arg: i8, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: i8, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 683226);

procedure devirtbounce.14(funcPtr: ref, arg: ref) returns ($r: i16);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref) returns ($r: i16)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 684258);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 685290);

procedure devirtbounce.16(funcPtr: ref, arg: i32, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: i32, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 686322);

procedure devirtbounce.17(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 687354);

procedure devirtbounce.18(funcPtr: ref, arg: i16, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: i16, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 688386);

procedure devirtbounce.19(funcPtr: ref, arg: i32) returns ($r: i16);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: i32) returns ($r: i16)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 689418);

procedure devirtbounce.20(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 690450);

procedure devirtbounce.21(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 691482);

procedure devirtbounce.22(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 692514);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: i64);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 693546);

procedure devirtbounce.24(funcPtr: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(bt_size, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(smic_size, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i5 == 1);
    $i4 := $eq.ref(kcs_size, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 1840} $i1 := kcs_size();
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 1841} $i2 := smic_size();
    $r := $i2;
    return;

  $bb4:
    assume $i6 == 1;
    call {:si_unique_call 1842} $i3 := bt_size();
    $r := $i3;
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 694578);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(smi_start_processing, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(ipmi_pnp_probe, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(ipmi_pci_probe, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(bt_init_data, $p0);
    assume {:branchcond $i17} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i17 == 1);
    $i16 := $eq.ref(init_smic_data, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i16 == 1);
    $i15 := $eq.ref(init_kcs_data, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    call {:si_unique_call 1843} $i1 := init_kcs_data(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i16 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1844} $i3 := init_smic_data($p2, arg1);
    $r := $i3;
    return;

  $bb4:
    assume $i17 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1845} $i5 := bt_init_data($p4, arg1);
    $r := $i5;
    return;

  $bb5:
    assume $i18 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1846} $i8 := ipmi_pci_probe($p6, $p7);
    $r := $i8;
    return;

  $bb6:
    assume $i19 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1847} $i11 := ipmi_pnp_probe($p9, $p10);
    $r := $i11;
    return;

  $bb7:
    assume $i20 == 1;
    $p12 := $bitcast.ref.ref(arg);
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1848} $i14 := smi_start_processing($p12, $p13);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    $r := $i14;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const devirtbounce.26: ref;

axiom devirtbounce.26 == $sub.ref(0, 695610);

procedure devirtbounce.26(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation devirtbounce.26(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i32 := $eq.ref(oem_data_avail_to_receive_msg_avail, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i32 == 1);
    $i31 := $eq.ref(ipmi_thread, $p0);
    assume {:branchcond $i31} true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i31 == 1);
    $i30 := $eq.ref(ipmi_acpi_gpe, $p0);
    assume {:branchcond $i30} true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i30 == 1);
    $i29 := $eq.ref(acpi_gpe_irq_setup, $p0);
    assume {:branchcond $i29} true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i29 == 1);
    $i28 := $eq.ref(std_irq_setup, $p0);
    assume {:branchcond $i28} true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i28 == 1);
    $i27 := $eq.ref(mem_setup, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i27 == 1);
    $i26 := $eq.ref(port_setup, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i26 == 1);
    $i25 := $eq.ref(ipmi_pci_resume, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i25 == 1);
    $i24 := $eq.ref(bt_detect, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i24 == 1);
    $i23 := $eq.ref(smic_detect, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i23 == 1);
    $i22 := $eq.ref(kcs_detect, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume false;
    return;

  $bb2:
    assume $i22 == 1;
    call {:si_unique_call 1849} $i1 := kcs_detect(arg);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    $r := $i1;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i23 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1850} $i3 := smic_detect($p2);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    $r := $i3;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i24 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1851} $i5 := bt_detect($p4);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    $r := $i5;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1852} $i7 := ipmi_pci_resume($p6);
    $r := $i7;
    return;

  $bb6:
    assume $i26 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1853} $i9 := port_setup($p8);
    $r := $i9;
    return;

  $bb7:
    assume $i27 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1854} $i11 := mem_setup($p10);
    $r := $i11;
    return;

  $bb8:
    assume $i28 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1855} $i13 := std_irq_setup($p12);
    $r := $i13;
    return;

  $bb9:
    assume $i29 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1856} $i15 := acpi_gpe_irq_setup($p14);
    $r := $i15;
    return;

  $bb10:
    assume $i30 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1857} $i17 := ipmi_acpi_gpe($p16);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    $r := $i17;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i31 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1858} $i19 := ipmi_thread($p18);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    $r := $i19;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i32 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1859} $i21 := oem_data_avail_to_receive_msg_avail($p20);
    $r := $i21;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.26, $M.30, $M.28, $M.61, $M.52, $M.58, $M.55, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $M.51, $M.53, $M.54, $M.56, $M.57, $M.59, $M.60, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.0, $M.3, $M.2, $M.1, $M.101, $M.102, $M.94, $M.125, $M.124, $M.93, $M.104, $M.103, $M.122, $M.120, $M.119, $M.118, $M.117, $M.116, $M.115, $M.114, $M.92, $M.91, $M.147, $M.90, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.89, $M.88, $M.25, $M.24, $M.45, $M.44, $M.41, $M.40, $M.87, $M.95, $M.86, $M.8, $M.4, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1860} __SMACK_static_init();
    call {:si_unique_call 1861} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.49, $M.65, $M.66, $M.10, $M.12, $M.14, $M.16, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.0, $M.17, $M.78, $M.26, $M.79, $M.7, $M.81, $M.82, $M.83, $M.84, $M.52, $M.85, $M.51, $M.30, $M.28, $M.61, $M.58, $M.55, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.9, $M.11, $M.13, $M.15, $M.53, $M.54, $M.56, $M.57, $M.59, $M.60, $M.62, $M.63, $M.64, $M.80, $M.3, $M.2, $M.1, $M.101, $M.102, $M.94, $M.125, $M.124, $M.93, $M.104, $M.103, $M.122, $M.120, $M.119, $M.118, $M.117, $M.116, $M.115, $M.114, $M.92, $M.91, $M.147, $M.90, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.89, $M.88, $M.25, $M.24, $M.45, $M.44, $M.41, $M.40, $M.87, $M.95, $M.86, $M.8, $M.4, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264, $CurrAddr, $M.5, $M.20, $M.22, $M.39, $M.96, $M.97, $M.98, $M.43, $M.121, $M.46, $M.47, $M.48;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation {:SIextraRecBound 2} start_kcs_transaction_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i17: i32, in_vslice_dummy_var_39: i32) returns (out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i17: i32, out_vslice_dummy_var_39: i32)
{

  entry:
    out_$i18, out_$p19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i17, out_vslice_dummy_var_39 := in_$i18, in_$p19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i17, in_vslice_dummy_var_39;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  $bb21:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i23;
    goto $bb21_dummy;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$i24 := $ult.i32(out_$i23, in_$i2);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i17, 1);
    call {:si_unique_call 3} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} out_vslice_dummy_var_39 := printk.ref.i32(.str.110, out_$i21);
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_60;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_59;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p1, $mul.ref(out_$i18, 1));
    goto corral_source_split_58;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i32.i64(out_$i17);
    goto corral_source_split_57;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i18, out_$p19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i17, out_vslice_dummy_var_39 := start_kcs_transaction_loop_$bb19(in_$p1, in_$i2, out_$i18, out_$p19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i17, out_vslice_dummy_var_39);
    return;

  exit:
    return;
}



procedure start_kcs_transaction_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i17: i32, in_vslice_dummy_var_39: i32) returns (out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i17: i32, out_vslice_dummy_var_39: i32);



implementation {:SIextraRecBound 2} start_smic_transaction_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i17: i32, in_vslice_dummy_var_45: i32) returns (out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i17: i32, out_vslice_dummy_var_45: i32)
{

  entry:
    out_$i18, out_$p19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i17, out_vslice_dummy_var_45 := in_$i18, in_$p19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i17, in_vslice_dummy_var_45;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_429;

  $bb21:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i23;
    goto $bb21_dummy;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    out_$i24 := $ult.i32(out_$i23, in_$i2);
    goto corral_source_split_437;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i17, 1);
    call {:si_unique_call 59} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_436;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} out_vslice_dummy_var_45 := printk.ref.i32(.str.110, out_$i21);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p1, $mul.ref(out_$i18, 1));
    goto corral_source_split_432;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i32.i64(out_$i17);
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i18, out_$p19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i17, out_vslice_dummy_var_45 := start_smic_transaction_loop_$bb19(in_$p1, in_$i2, out_$i18, out_$p19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i17, out_vslice_dummy_var_45);
    return;

  exit:
    return;
}



procedure start_smic_transaction_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i18: i64, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i17: i32, in_vslice_dummy_var_45: i32) returns (out_$i18: i64, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i17: i32, out_vslice_dummy_var_45: i32);



implementation smic_get_result_loop_$bb6(in_$p0: ref, in_$p7: ref, in_$i11: i64, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i10: i32, in_vslice_dummy_var_48: i32) returns (out_$i11: i64, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i10: i32, out_vslice_dummy_var_48: i32)
{

  entry:
    out_$i11, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i10, out_vslice_dummy_var_48 := in_$i11, in_$p13, in_$i14, in_$i15, in_$i17, in_$i18, in_$i19, in_$i10, in_vslice_dummy_var_48;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_475;

  $bb8:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i17;
    goto $bb8_dummy;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, out_$i17);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p7);
    goto corral_source_split_483;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i10, 1);
    call {:si_unique_call 66} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_vslice_dummy_var_48 := printk.ref.i32(.str.110, out_$i15);
    goto corral_source_split_481;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_480;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.0, out_$p13);
    goto corral_source_split_479;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(108, 1)), $mul.ref(out_$i11, 1));
    goto corral_source_split_478;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i10);
    goto corral_source_split_477;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i11, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i10, out_vslice_dummy_var_48 := smic_get_result_loop_$bb6(in_$p0, in_$p7, out_$i11, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i10, out_vslice_dummy_var_48);
    return;

  exit:
    return;
}



procedure smic_get_result_loop_$bb6(in_$p0: ref, in_$p7: ref, in_$i11: i64, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i10: i32, in_vslice_dummy_var_48: i32) returns (out_$i11: i64, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i10: i32, out_vslice_dummy_var_48: i32);



implementation {:SIextraRecBound 2} bt_start_transaction_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i20: i64, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i25: i32, in_$i26: i1, in_$i19: i32, in_vslice_dummy_var_61: i32) returns (out_$i20: i64, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i25: i32, out_$i26: i1, out_$i19: i32, out_vslice_dummy_var_61: i32)
{

  entry:
    out_$i20, out_$p21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i19, out_vslice_dummy_var_61 := in_$i20, in_$p21, in_$i22, in_$i23, in_$i25, in_$i26, in_$i19, in_vslice_dummy_var_61;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1075;

  $bb21:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i25;
    goto $bb21_dummy;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i32(out_$i25, in_$i2);
    goto corral_source_split_1083;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i19, 1);
    call {:si_unique_call 174} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} out_vslice_dummy_var_61 := printk.ref.i32(.str.110, out_$i23);
    goto corral_source_split_1081;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.0, out_$p21);
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(in_$p1, $mul.ref(out_$i20, 1));
    goto corral_source_split_1078;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i32.i64(out_$i19);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$p21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i19, out_vslice_dummy_var_61 := bt_start_transaction_loop_$bb19(in_$p1, in_$i2, out_$i20, out_$p21, out_$i22, out_$i23, out_$i25, out_$i26, out_$i19, out_vslice_dummy_var_61);
    return;

  exit:
    return;
}



procedure bt_start_transaction_loop_$bb19(in_$p1: ref, in_$i2: i32, in_$i20: i64, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i25: i32, in_$i26: i1, in_$i19: i32, in_vslice_dummy_var_61: i32) returns (out_$i20: i64, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i25: i32, out_$i26: i1, out_$i19: i32, out_vslice_dummy_var_61: i32);



implementation {:SIextraRecBound 3} bt_get_result_loop_$bb18(in_$p1: ref, in_$i21: i32, in_$i34: i64, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i39: i32, in_$i40: i1, in_$i33: i32, in_vslice_dummy_var_64: i32) returns (out_$i34: i64, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i39: i32, out_$i40: i1, out_$i33: i32, out_vslice_dummy_var_64: i32)
{

  entry:
    out_$i34, out_$p35, out_$i36, out_$i37, out_$i39, out_$i40, out_$i33, out_vslice_dummy_var_64 := in_$i34, in_$p35, in_$i36, in_$i37, in_$i39, in_$i40, in_$i33, in_vslice_dummy_var_64;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1181;

  $bb20:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i39;
    goto $bb20_dummy;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i39, in_$i21);
    goto corral_source_split_1189;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i33, 1);
    call {:si_unique_call 187} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_1188;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} out_vslice_dummy_var_64 := printk.ref.i32(.str.110, out_$i37);
    goto corral_source_split_1187;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    goto corral_source_split_1186;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.0, out_$p35);
    goto corral_source_split_1185;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(in_$p1, $mul.ref(out_$i34, 1));
    goto corral_source_split_1184;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_1183;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i34, out_$p35, out_$i36, out_$i37, out_$i39, out_$i40, out_$i33, out_vslice_dummy_var_64 := bt_get_result_loop_$bb18(in_$p1, in_$i21, out_$i34, out_$p35, out_$i36, out_$i37, out_$i39, out_$i40, out_$i33, out_vslice_dummy_var_64);
    return;

  exit:
    return;
}



procedure bt_get_result_loop_$bb18(in_$p1: ref, in_$i21: i32, in_$i34: i64, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i39: i32, in_$i40: i1, in_$i33: i32, in_vslice_dummy_var_64: i32) returns (out_$i34: i64, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i39: i32, out_$i40: i1, out_$i33: i32, out_vslice_dummy_var_64: i32);



implementation drain_BMC2HOST_loop_$bb11(in_$p0: ref, in_$i62: i32, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i72: i32, in_$i73: i1, in_$i64: i32, in_vslice_dummy_var_83: i8) returns (out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i72: i32, out_$i73: i1, out_$i64: i32, out_vslice_dummy_var_83: i8)
{

  entry:
    out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i72, out_$i73, out_$i64, out_vslice_dummy_var_83 := in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$i72, in_$i73, in_$i64, in_vslice_dummy_var_83;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1851;

  $bb13:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i64 := out_$i72;
    goto $bb13_dummy;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i72, in_$i62);
    goto corral_source_split_1860;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i64, 1);
    call {:si_unique_call 277} {:cexpr "i"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_1859;

  SeqInstr_135:
    goto corral_source_split_1858;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    call {:si_unique_call 276} out_vslice_dummy_var_83 := devirtbounce(out_$p68, out_$p70, 1);
    goto SeqInstr_134;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p66, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_1854;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i72, out_$i73, out_$i64, out_vslice_dummy_var_83 := drain_BMC2HOST_loop_$bb11(in_$p0, in_$i62, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i72, out_$i73, out_$i64, out_vslice_dummy_var_83);
    return;

  exit:
    return;
}



procedure drain_BMC2HOST_loop_$bb11(in_$p0: ref, in_$i62: i32, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i72: i32, in_$i73: i1, in_$i64: i32, in_vslice_dummy_var_83: i8) returns (out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i72: i32, out_$i73: i1, out_$i64: i32, out_vslice_dummy_var_83: i8);
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation write_all_bytes_loop_$bb15(in_$p0: ref, in_$p24: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i27: i32) returns (out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i27: i32)
{

  entry:
    out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i27 := in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i27;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2001;

  $bb17:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i40;
    goto $bb17_dummy;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    out_$i42 := $sgt.i32(out_$i41, out_$i40);
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, in_$p24);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i27, 1);
    call {:si_unique_call 295} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i8(out_$i38);
    call {:si_unique_call 294} devirtbounce.1(out_$p31, out_$p33, 1, out_$i39);
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, out_$p36);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(out_$i34, 1));
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i27);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2004;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i27 := write_all_bytes_loop_$bb15(in_$p0, in_$p24, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i27);
    return;

  exit:
    return;
}



procedure write_all_bytes_loop_$bb15(in_$p0: ref, in_$p24: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i27: i32) returns (out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i27: i32);



implementation write_all_bytes_loop_$bb6(in_$p0: ref, in_$p10: ref, in_$i14: i64, in_$p16: ref, in_$i17: i8, in_$i18: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i13: i32, in_vslice_dummy_var_91: i32) returns (out_$i14: i64, out_$p16: ref, out_$i17: i8, out_$i18: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i13: i32, out_vslice_dummy_var_91: i32)
{

  entry:
    out_$i14, out_$p16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i13, out_vslice_dummy_var_91 := in_$i14, in_$p16, in_$i17, in_$i18, in_$i20, in_$i21, in_$i22, in_$i13, in_vslice_dummy_var_91;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1980;

  $bb8:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i20;
    goto $bb8_dummy;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$i22 := $sgt.i32(out_$i21, out_$i20);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, in_$p10);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i13, 1);
    call {:si_unique_call 292} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} out_vslice_dummy_var_91 := printk.ref.i32(.str.110, out_$i18);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i8.i32(out_$i17);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i8($M.0, out_$p16);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1)), $mul.ref(out_$i14, 1));
    goto corral_source_split_1983;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i14, out_$p16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i13, out_vslice_dummy_var_91 := write_all_bytes_loop_$bb6(in_$p0, in_$p10, out_$i14, out_$p16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i13, out_vslice_dummy_var_91);
    return;

  exit:
    return;
}



procedure write_all_bytes_loop_$bb6(in_$p0: ref, in_$p10: ref, in_$i14: i64, in_$p16: ref, in_$i17: i8, in_$i18: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i13: i32, in_vslice_dummy_var_91: i32) returns (out_$i14: i64, out_$p16: ref, out_$i17: i8, out_$i18: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i13: i32, out_vslice_dummy_var_91: i32);



implementation read_all_bytes_loop_$bb27(in_$p0: ref, in_$i65: i32, in_$i68: i32, in_$i69: i64, in_$p71: ref, in_$i72: i8, in_$i73: i32, in_$i75: i32, in_$i76: i32, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$i67: i8, in_vslice_dummy_var_95: i32) returns (out_$i68: i32, out_$i69: i64, out_$p71: ref, out_$i72: i8, out_$i73: i32, out_$i75: i32, out_$i76: i32, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$i67: i8, out_vslice_dummy_var_95: i32)
{

  entry:
    out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i67, out_vslice_dummy_var_95 := in_$i68, in_$i69, in_$p71, in_$i72, in_$i73, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i67, in_vslice_dummy_var_95;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2109;

  $bb29:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := out_$i77;
    goto $bb29_dummy;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i78, in_$i65);
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_2120;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    out_$i77 := $trunc.i32.i8(out_$i76);
    call {:si_unique_call 303} {:cexpr "i"} boogie_si_record_i8(out_$i77);
    goto corral_source_split_2119;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i75, 1);
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i67);
    goto corral_source_split_2117;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} out_vslice_dummy_var_95 := printk.ref.i32(.str.183, out_$i73);
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i8.i32(out_$i72);
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i8($M.0, out_$p71);
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(out_$i69, 1));
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i68);
    goto corral_source_split_2112;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i67);
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i67, out_vslice_dummy_var_95 := read_all_bytes_loop_$bb27(in_$p0, in_$i65, out_$i68, out_$i69, out_$p71, out_$i72, out_$i73, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i67, out_vslice_dummy_var_95);
    return;

  exit:
    return;
}



procedure read_all_bytes_loop_$bb27(in_$p0: ref, in_$i65: i32, in_$i68: i32, in_$i69: i64, in_$p71: ref, in_$i72: i8, in_$i73: i32, in_$i75: i32, in_$i76: i32, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$i67: i8, in_vslice_dummy_var_95: i32) returns (out_$i68: i32, out_$i69: i64, out_$p71: ref, out_$i72: i8, out_$i73: i32, out_$i75: i32, out_$i76: i32, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$i67: i8, out_vslice_dummy_var_95: i32);



implementation read_all_bytes_loop_$bb14(in_$p0: ref, in_$p29: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i8, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i32: i8) returns (out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i8, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i32: i8)
{

  entry:
    out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i32 := in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i32;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2063;

  $bb16:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := out_$i46;
    goto $bb16_dummy;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$i49 := $sle.i32(out_$i47, out_$i48);
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, in_$p29);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i8(out_$i45);
    call {:si_unique_call 299} {:cexpr "i"} boogie_si_record_i8(out_$i46);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i44, 1);
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i32);
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p43, out_$i39);
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(292, 1)), $mul.ref(out_$i41, 1));
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i32);
    goto corral_source_split_2071;

  SeqInstr_141:
    goto corral_source_split_2070;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    call {:si_unique_call 298} out_$i39 := devirtbounce(out_$p36, out_$p38, 1);
    goto SeqInstr_140;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2066;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i32 := read_all_bytes_loop_$bb14(in_$p0, in_$p29, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i32);
    return;

  exit:
    return;
}



procedure read_all_bytes_loop_$bb14(in_$p0: ref, in_$p29: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i64, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i8, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i32: i8) returns (out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i64, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i8, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i32: i8);
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation cleanup_one_si_loop_$bb24(in_$p0: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_vslice_dummy_var_104: i64) returns (out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_vslice_dummy_var_104: i64)
{

  entry:
    out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_vslice_dummy_var_104 := in_$p32, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_vslice_dummy_var_104;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2390;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto corral_source_split_2397_dummy;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} out_vslice_dummy_var_104 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_2397;

  SeqInstr_168:
    goto corral_source_split_2396;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} poll(out_$p32);
    goto SeqInstr_167;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_2395;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb27;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_2391;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, in_$p31);
    goto corral_source_split_2400;

  $bb28:
    assume !(out_$i37 == 1);
    goto corral_source_split_2399;

  corral_source_split_2397_dummy:
    call {:si_unique_call 1} out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_vslice_dummy_var_104 := cleanup_one_si_loop_$bb24(in_$p0, in_$p31, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_vslice_dummy_var_104);
    return;

  exit:
    return;
}



procedure cleanup_one_si_loop_$bb24(in_$p0: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_vslice_dummy_var_104: i64) returns (out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_vslice_dummy_var_104: i64);
  modifies $M.0, $M.17, assertsPassed, $M.5, $M.20, $M.22, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation cleanup_one_si_loop_$bb13(in_$p0: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_vslice_dummy_var_103: i64) returns (out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_vslice_dummy_var_103: i64)
{

  entry:
    out_$p17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_vslice_dummy_var_103 := in_$p17, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_vslice_dummy_var_103;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2366;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    goto corral_source_split_2373_dummy;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} out_vslice_dummy_var_103 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_2373;

  SeqInstr_162:
    goto corral_source_split_2372;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} poll(out_$p17);
    goto SeqInstr_161;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_2371;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i24 == 1;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb16;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_2367;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, in_$p16);
    goto corral_source_split_2376;

  $bb17:
    assume !(out_$i22 == 1);
    goto corral_source_split_2375;

  corral_source_split_2373_dummy:
    call {:si_unique_call 1} out_$p17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_vslice_dummy_var_103 := cleanup_one_si_loop_$bb13(in_$p0, in_$p16, out_$p17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_vslice_dummy_var_103);
    return;

  exit:
    return;
}



procedure cleanup_one_si_loop_$bb13(in_$p0: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_vslice_dummy_var_103: i64) returns (out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_vslice_dummy_var_103: i64);
  modifies $M.0, $M.17, assertsPassed, $M.5, $M.20, $M.22, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation cleanup_one_si_loop_$bb5(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_vslice_dummy_var_102: i64) returns (out_$p6: ref, out_$p7: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_vslice_dummy_var_102: i64)
{

  entry:
    out_$p6, out_$p7, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_vslice_dummy_var_102 := in_$p6, in_$p7, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_vslice_dummy_var_102;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2345;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    goto corral_source_split_2355_dummy;

  SeqInstr_156:
    goto corral_source_split_2355;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} ldv_spin_lock_check();
    goto SeqInstr_155;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} out_vslice_dummy_var_102 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_2354;

  SeqInstr_153:
    goto corral_source_split_2353;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} poll(out_$p7);
    goto SeqInstr_152;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_2352;

  SeqInstr_150:
    goto corral_source_split_2351;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} spin_unlock_irqrestore(out_$p6, $u0);
    goto SeqInstr_149;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_2350;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i12 == 1;
    goto $bb8;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2346;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, in_$p5);
    goto corral_source_split_2358;

  $bb9:
    assume !(out_$i12 == 1);
    goto corral_source_split_2357;

  corral_source_split_2355_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_vslice_dummy_var_102 := cleanup_one_si_loop_$bb5(in_$p0, in_$p5, out_$p6, out_$p7, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_vslice_dummy_var_102);
    return;

  exit:
    return;
}



procedure cleanup_one_si_loop_$bb5(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_vslice_dummy_var_102: i64) returns (out_$p6: ref, out_$p7: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_vslice_dummy_var_102: i64);
  modifies assertsPassed, $M.0, $M.17, $M.5, $M.20, $M.22, $CurrAddr, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation smi_event_handler_loop_$bb5(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32)
{

  entry:
    out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22 := in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb7_dummy;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    assume true;
    goto $bb7;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 0);
    goto corral_source_split_2721;

  SeqInstr_198:
    call {:si_unique_call 398} {:cexpr "si_sm_result"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_2720;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    call {:si_unique_call 397} out_$i20 := devirtbounce.6(out_$p17, out_$p19, 0);
    goto SeqInstr_197;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_2716;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2715;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22 := smi_event_handler_loop_$bb5(in_$p0, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure smi_event_handler_loop_$bb5(in_$p0: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32);
  modifies $M.0, $M.5, $CurrAddr, $M.17, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation smi_event_handler_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i32, in_$i12: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i13: i32, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i34: i32, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p74: ref, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$i95: i32, in_$p97: ref, in_$p98: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$p123: ref, in_$i87: i32, in_$i83: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i32, out_$i12: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i13: i32, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i34: i32, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p74: ref, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$i95: i32, out_$p97: ref, out_$p98: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$p123: ref, out_$i87: i32, out_$i83: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i13, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i34, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p97, out_$p98, out_$p100, out_$p101, out_$p102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$p123, out_$i87, out_$i83, out_vslice_dummy_var_111, out_vslice_dummy_var_112 := in_$i3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i13, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i34, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$p74, in_$i75, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p84, in_$i85, in_$i86, in_$p88, in_$p89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$i95, in_$p97, in_$p98, in_$p100, in_$p101, in_$p102, in_$p104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p109, in_$p110, in_$p111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$p119, in_$p120, in_$i121, in_$p123, in_$i87, in_$i83, in_vslice_dummy_var_111, in_vslice_dummy_var_112;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2703;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i3 := 0;
    goto $bb24_dummy;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p74, 1);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(in_$p2);
    call {:si_unique_call 410} out_vslice_dummy_var_111 := devirtbounce.5(out_$p69, out_$p71, out_$p72, 2);
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, out_$p65, 49);
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, out_$p64, 24);
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} atomic_inc(out_$p63);
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p62, $mul.ref(4, 4));
    goto corral_source_split_2781;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_2779;

  $bb22:
    assume out_$i60 == 1;
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i34, 6);
    goto corral_source_split_2776;

  $bb19:
    assume out_$i59 == 1;
    goto corral_source_split_2775;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} out_$i58 := ldv__builtin_expect(out_$i57, 1);
    call {:si_unique_call 404} {:cexpr "tmp"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i1.i32(out_$i55);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(8, 1));
    goto corral_source_split_2744;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i51;
    goto $bb12;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i33;
    goto $bb12;

  SeqInstr_204:
    call {:si_unique_call 402} {:cexpr "si_sm_result"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2738;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    call {:si_unique_call 401} out_$i33 := devirtbounce.6(out_$p30, out_$p32, 0);
    goto SeqInstr_203;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2735;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_2734;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2733;

  SeqInstr_201:
    goto corral_source_split_2732;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} handle_transaction_done(in_$p0);
    goto SeqInstr_200;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} atomic_inc(out_$p26);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p25, $mul.ref(7, 4));
    goto corral_source_split_2730;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_2728;

  $bb10:
    assume out_$i23 == 1;
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i13, 3);
    goto corral_source_split_2725;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb4;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i22;
    goto $bb4;

  $bb8:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 0);
    goto corral_source_split_2721;

  SeqInstr_198:
    call {:si_unique_call 398} {:cexpr "si_sm_result"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_2720;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    call {:si_unique_call 397} out_$i20 := devirtbounce.6(out_$p17, out_$p19, 0);
    goto SeqInstr_197;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_2716;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2715;

  $bb5:
    call out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22 := smi_event_handler_loop_$bb5(in_$p0, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    assume false;
    return;

  $bb2:
    assume out_$i12 == 1;
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i11;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_2711;

  SeqInstr_195:
    call {:si_unique_call 396} {:cexpr "si_sm_result"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2710;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i3);
    call {:si_unique_call 395} out_$i11 := devirtbounce.6(out_$p7, out_$p9, out_$i10);
    goto SeqInstr_194;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p5, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2706;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.0, out_$p4);
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2704;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i13;
    goto $bb18;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i50;
    goto $bb18;

  SeqInstr_210:
    call {:si_unique_call 408} {:cexpr "si_sm_result"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_2773;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    call {:si_unique_call 407} out_$i50 := devirtbounce.6(out_$p47, out_$p49, 0);
    goto SeqInstr_209;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_2769;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2768;

  $bb16:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_207:
    goto corral_source_split_2766;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} return_hosed_msg(in_$p0, 255);
    goto SeqInstr_206;

  $bb15:
    assume out_$i43 == 1;
    goto corral_source_split_2765;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_2763;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, 0);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} atomic_inc(out_$p38);
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p37, $mul.ref(6, 4));
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_2754;

  $bb13:
    assume out_$i35 == 1;
    goto corral_source_split_2753;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i13, 5);
    goto corral_source_split_2741;

  $bb11:
    assume !(out_$i23 == 1);
    goto corral_source_split_2740;

  $bb28:
    assume out_$i80 == 1;
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 4);
    goto corral_source_split_2805;

  SeqInstr_213:
    call {:si_unique_call 413} {:cexpr "si_sm_result"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_2804;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} out_$i79 := start_next_msg(in_$p0);
    goto SeqInstr_212;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} atomic_inc(out_$p78);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(out_$p77, $mul.ref(2, 4));
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(544, 1));
    goto corral_source_split_2800;

  $bb26:
    assume out_$i75 == 1;
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i34, 4);
    goto corral_source_split_2797;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb21;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p123, 2);
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(208, 1));
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.0, out_$p120);
    call {:si_unique_call 418} out_vslice_dummy_var_112 := devirtbounce.5(out_$p111, out_$p113, out_$p117, out_$i121);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p119, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_2856;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_2855;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2854;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(out_$p116);
    goto corral_source_split_2853;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p115, $mul.ref(0, 592)), $mul.ref(36, 1));
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_2851;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2850;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, out_$p112);
    goto corral_source_split_2849;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_2847;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p109, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2846;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_2845;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_2844;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p107, 2);
    goto corral_source_split_2843;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p106, $mul.ref(0, 592)), $mul.ref(32, 1));
    goto corral_source_split_2842;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.0, out_$p105);
    goto corral_source_split_2841;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2840;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p104, 53);
    goto corral_source_split_2839;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref(out_$p102, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(1, 1));
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2836;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p100, 24);
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref($add.ref(out_$p98, $mul.ref(0, 592)), $mul.ref(36, 1)), $mul.ref(0, 1));
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.0, out_$p97);
    goto corral_source_split_2833;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2832;

  $bb37:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i81;
    assume true;
    goto $bb37;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i64(out_$i93, 0);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$i93 := $p2i.ref.i64(out_$p92);
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p90, out_$p89);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(200, 1));
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} out_$p89 := ipmi_alloc_smi_msg();
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} atomic_set(out_$p88, 0);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(332, 1));
    goto corral_source_split_2818;

  $bb34:
    assume out_$i86 == 1;
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i81;
    assume true;
    goto $bb34;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i85, 0);
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} out_$i85 := atomic_read(out_$p84);
    call {:si_unique_call 415} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(332, 1));
    goto corral_source_split_2813;

  $bb32:
    assume out_$i82 == 1;
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i81;
    assume true;
    goto $bb32;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 4);
    goto corral_source_split_2810;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2809;

  $bb27:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := out_$i34;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i81 := out_$i79;
    goto $bb31;

  $bb29:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i13, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i34, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p97, out_$p98, out_$p100, out_$p101, out_$p102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$p123, out_$i87, out_$i83, out_vslice_dummy_var_111, out_vslice_dummy_var_112 := smi_event_handler_loop_$bb1(in_$p0, in_$p2, out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i13, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i34, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p74, out_$i75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p97, out_$p98, out_$p100, out_$p101, out_$p102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$p119, out_$p120, out_$i121, out_$p123, out_$i87, out_$i83, out_vslice_dummy_var_111, out_vslice_dummy_var_112);
    return;

  exit:
    return;
}



procedure smi_event_handler_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i32, in_$i12: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i13: i32, in_$i23: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i34: i32, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p74: ref, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$i95: i32, in_$p97: ref, in_$p98: ref, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$p123: ref, in_$i87: i32, in_$i83: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i32, out_$i12: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i13: i32, out_$i23: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i34: i32, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p74: ref, out_$i75: i1, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$i95: i32, out_$p97: ref, out_$p98: ref, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$p123: ref, out_$i87: i32, out_$i83: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32);
  modifies $M.0, $M.17, $M.5, $CurrAddr, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation handle_flags_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i8, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p62: ref, in_$i63: i8, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$i109: i1, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i1) returns (out_$i6: i8, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p62: ref, out_$i63: i8, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$i109: i1, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i1)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i9, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113 := in_$i6, in_$i7, in_$i8, in_$i9, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$i108, in_$i109, in_$p110, in_$p111, in_$i112, in_$i113;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3369;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb7_dummy;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$i8 := $and.i32(out_$i7, 8);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i8.i32(out_$i6);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i8($M.0, in_$p1);
    goto corral_source_split_3376;

  $bb5:
    assume out_$i113 == 1;
    goto corral_source_split_3375;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    out_$i113 := $ne.i32(out_$i112, 0);
    goto corral_source_split_3496;

  SeqInstr_276:
    call {:si_unique_call 502} {:cexpr "tmp"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_3495;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    call {:si_unique_call 501} out_$i112 := devirtbounce.8(out_$p111, in_$p0);
    goto SeqInstr_275;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(320, 1));
    goto corral_source_split_3494;

  $bb25:
    assume out_$i109 == 1;
    goto corral_source_split_3493;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i64(out_$i108, 0);
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i108 := $p2i.ref.i64(out_$p107);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(320, 1));
    goto corral_source_split_3486;

  $bb22:
    assume out_$i105 == 1;
    goto corral_source_split_3485;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i32(out_$i104, 0);
    goto corral_source_split_3448;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$i104 := $and.i32(out_$i103, 224);
    goto corral_source_split_3447;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.0, out_$p101);
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3444;

  $bb17:
    assume !(out_$i66 == 1);
    goto corral_source_split_3443;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_3397;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 2);
    goto corral_source_split_3396;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i8.i32(out_$i63);
    goto corral_source_split_3395;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i8($M.0, out_$p62);
    goto corral_source_split_3394;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(328, 1));
    goto corral_source_split_3393;

  $bb10:
    assume !(out_$i27 == 1);
    goto corral_source_split_3392;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 1);
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, out_$p23);
    goto corral_source_split_3370;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i9, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113 := handle_flags_loop_$bb4(in_$p0, in_$p1, out_$i6, out_$i7, out_$i8, out_$i9, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113);
    return;

  exit:
    return;
}



procedure handle_flags_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i8, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$p23: ref, in_$i24: i8, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$p62: ref, in_$i63: i8, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$i108: i64, in_$i109: i1, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i1) returns (out_$i6: i8, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$p23: ref, out_$i24: i8, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$p62: ref, out_$i63: i8, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$i108: i64, out_$i109: i1, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i1);
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $CurrAddr, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation port_setup_loop_$bb29(in_$p0: ref, in_$i4: i32, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i64, in_$i65: i32, in_$i66: i1, in_$i54: i32) returns (out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i64, out_$i65: i32, out_$i66: i1, out_$i54: i32)
{

  entry:
    out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i54 := in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i54;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  $bb31:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := out_$i65;
    goto $bb31_dummy;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i54, 0);
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$i65 := $sub.i32(out_$i54, 1);
    call {:si_unique_call 555} {:cexpr "idx"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __release_region(ioport_resource, out_$i60, out_$i64);
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i63);
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_3734;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i32.i64(out_$i59);
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i58, in_$i4);
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$i58 := $mul.i32(out_$i57, out_$i54);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_3729;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i54 := port_setup_loop_$bb29(in_$p0, in_$i4, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i54);
    return;

  exit:
    return;
}



procedure port_setup_loop_$bb29(in_$p0: ref, in_$i4: i32, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i64, in_$p62: ref, in_$i63: i32, in_$i64: i64, in_$i65: i32, in_$i66: i1, in_$i54: i32) returns (out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i64, out_$p62: ref, out_$i63: i32, out_$i64: i64, out_$i65: i32, out_$i66: i1, out_$i54: i32);



implementation port_setup_loop_$bb22(in_$p0: ref, in_$i4: i32, in_$p34: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i37: i32) returns (out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i37: i32)
{

  entry:
    out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i67, out_$i68, out_$i69, out_$i37 := in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i67, in_$i68, in_$i69, in_$i37;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3706;

  $bb35:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := out_$i67;
    goto $bb35_dummy;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$i69 := $ult.i32(out_$i67, out_$i68);
    goto corral_source_split_3744;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.0, in_$p34);
    goto corral_source_split_3743;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i37, 1);
    call {:si_unique_call 556} {:cexpr "idx"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3742;

  $bb25:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i37;
    assume true;
    goto $bb25;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i64(out_$i49, 0);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_3717;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_$p48 := __request_region(ioport_resource, out_$i43, out_$i47, .str.15, 0);
    goto corral_source_split_3716;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i46);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_3714;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_3713;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i32.i64(out_$i42);
    goto corral_source_split_3712;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i41, in_$i4);
    goto corral_source_split_3711;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    out_$i41 := $mul.i32(out_$i40, out_$i37);
    goto corral_source_split_3710;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_3709;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i67, out_$i68, out_$i69, out_$i37 := port_setup_loop_$bb22(in_$p0, in_$i4, in_$p34, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i67, out_$i68, out_$i69, out_$i37);
    return;

  exit:
    return;
}



procedure port_setup_loop_$bb22(in_$p0: ref, in_$i4: i32, in_$p34: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i51: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i37: i32) returns (out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i51: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i37: i32);



implementation is_new_interface_loop_$bb4(in_$p0: ref, in_$p13: ref, in_$i14: i32, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p11: ref) returns (out_$p13: ref, out_$i14: i32, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p11: ref)
{

  entry:
    out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p11 := in_$p13, in_$i14, in_$p16, in_$i17, in_$i18, in_$p20, in_$i21, in_$p23, in_$i24, in_$i25, in_$p28, in_$p29, in_$p30, in_$p31, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;

  $bb14:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p31;
    goto $bb14_dummy;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, $p2i.ref.i64(smi_infos));
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p30, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} llvm.prefetch(out_$p35, 0, 3, 1);
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p30, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p30, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3935;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_3934;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i14, out_$i17);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_3927;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i21, out_$i24);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_3948;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.0, out_$p20);
    goto corral_source_split_3947;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_3946;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p11 := is_new_interface_loop_$bb4(in_$p0, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p28, out_$p29, out_$p30, out_$p31, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p11);
    return;

  exit:
    return;
}



procedure is_new_interface_loop_$bb4(in_$p0: ref, in_$p13: ref, in_$i14: i32, in_$p16: ref, in_$i17: i32, in_$i18: i1, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p11: ref) returns (out_$p13: ref, out_$i14: i32, out_$p16: ref, out_$i17: i32, out_$i18: i1, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p11: ref);



implementation port_cleanup_loop_$bb6(in_$p0: ref, in_$i4: i32, in_$p6: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i64, in_$p17: ref, in_$i18: i32, in_$i19: i64, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i9: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i64, out_$p17: ref, out_$i18: i32, out_$i19: i64, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i9: i32)
{

  entry:
    out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i9 := in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i9;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4302;

  $bb8:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i20;
    goto $bb8_dummy;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    out_$i22 := $ult.i32(out_$i20, out_$i21);
    goto corral_source_split_4315;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, in_$p6);
    goto corral_source_split_4314;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i9, 1);
    call {:si_unique_call 690} {:cexpr "idx"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_4313;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} __release_region(ioport_resource, out_$i15, out_$i19);
    goto corral_source_split_4312;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_4311;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_4309;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i14);
    goto corral_source_split_4308;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i13, in_$i4);
    goto corral_source_split_4307;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$i13 := $mul.i32(out_$i12, out_$i9);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_4305;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i9 := port_cleanup_loop_$bb6(in_$p0, in_$i4, in_$p6, out_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i9);
    return;

  exit:
    return;
}



procedure port_cleanup_loop_$bb6(in_$p0: ref, in_$i4: i32, in_$p6: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i64, in_$p17: ref, in_$i18: i32, in_$i19: i64, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i9: i32) returns (out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i64, out_$p17: ref, out_$i18: i32, out_$i19: i64, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i9: i32);



implementation sender_loop_$bb13(in_$p3: ref, in_$i41: i32, in_$i42: i1) returns (out_$i41: i32, out_$i42: i1)
{

  entry:
    out_$i41, out_$i42 := in_$i41, in_$i42;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i42 == 1;
    goto $bb15_dummy;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 4);
    goto corral_source_split_4890;

  SeqInstr_327:
    call {:si_unique_call 822} {:cexpr "result"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4889;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} out_$i41 := smi_event_handler(in_$p3, 250);
    goto SeqInstr_326;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} __const_udelay(1073750);
    goto corral_source_split_4888;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i41, out_$i42 := sender_loop_$bb13(in_$p3, out_$i41, out_$i42);
    return;

  exit:
    return;
}



procedure sender_loop_$bb13(in_$p3: ref, in_$i41: i32, in_$i42: i1) returns (out_$i41: i32, out_$i42: i1);
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $CurrAddr, assertsPassed, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation set_run_to_completion_loop_$bb6(in_$p2: ref, in_$i7: i32, in_$i8: i1) returns (out_$i7: i32, out_$i8: i1)
{

  entry:
    out_$i7, out_$i8 := in_$i7, in_$i8;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i8 == 1;
    goto $bb8_dummy;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 4);
    goto corral_source_split_4954;

  SeqInstr_348:
    call {:si_unique_call 838} {:cexpr "result"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_4953;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} out_$i7 := smi_event_handler(in_$p2, 250);
    goto SeqInstr_347;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} __const_udelay(1073750);
    goto corral_source_split_4952;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8 := set_run_to_completion_loop_$bb6(in_$p2, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure set_run_to_completion_loop_$bb6(in_$p2: ref, in_$i7: i32, in_$i8: i1) returns (out_$i7: i32, out_$i8: i1);
  modifies $M.0, $M.17, $M.5, $M.20, $M.22, $CurrAddr, assertsPassed, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.43, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation ipmi_thread_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i15: i32, in_$i16: i1, in_vslice_dummy_var_154: i64, in_vslice_dummy_var_155: i64) returns (out_$i6: i32, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i15: i32, out_$i16: i1, out_vslice_dummy_var_154: i64, out_vslice_dummy_var_155: i64)
{

  entry:
    out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i15, out_$i16, out_vslice_dummy_var_154, out_vslice_dummy_var_155 := in_$i6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i15, in_$i16, in_vslice_dummy_var_154, in_vslice_dummy_var_155;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i16 == 1;
    goto $bb18_dummy;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 0);
    goto corral_source_split_5063;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} out_$i15 := kthread_should_stop();
    call {:si_unique_call 880} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_5062;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i9 == 1;
    goto corral_source_split_5057;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i6, 0);
    goto corral_source_split_5055;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} out_$i8 := ipmi_thread_busy_wait(out_$i6, in_$p2, in_$p1);
    call {:si_unique_call 878} {:cexpr "busy_wait"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_5054;

  SeqInstr_366:
    goto corral_source_split_5053;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} spin_unlock_irqrestore(out_$p7, $u0);
    goto SeqInstr_365;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p2, $mul.ref(0, 616)), $mul.ref(40, 1));
    goto corral_source_split_5052;

  SeqInstr_363:
    call {:si_unique_call 875} {:cexpr "smi_result"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_5051;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} out_$i6 := smi_event_handler(in_$p2, 0);
    goto SeqInstr_362;

  SeqInstr_360:
    goto corral_source_split_5050;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} ldv_spin_lock_check();
    goto SeqInstr_359;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} schedule();
    goto corral_source_split_5071;

  $bb12:
    assume out_$i11 == 1;
    goto corral_source_split_5070;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i8, 0);
    goto corral_source_split_5066;

  $bb9:
    assume out_$i10 == 1;
    goto corral_source_split_5065;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i6, 1);
    goto corral_source_split_5060;

  $bb7:
    assume !(out_$i9 == 1);
    goto corral_source_split_5059;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} out_vslice_dummy_var_155 := schedule_timeout_interruptible(1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} out_vslice_dummy_var_154 := schedule_timeout_interruptible(100);
    goto corral_source_split_5074;

  $bb15:
    assume out_$i12 == 1;
    goto corral_source_split_5073;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i6, 4);
    goto corral_source_split_5068;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb11;

  $bb16:
    assume !(out_$i12 == 1);
    goto corral_source_split_5076;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i15, out_$i16, out_vslice_dummy_var_154, out_vslice_dummy_var_155 := ipmi_thread_loop_$bb4(in_$p1, in_$p2, out_$i6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i15, out_$i16, out_vslice_dummy_var_154, out_vslice_dummy_var_155);
    return;

  exit:
    return;
}



procedure ipmi_thread_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$p7: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i15: i32, in_$i16: i1, in_vslice_dummy_var_154: i64, in_vslice_dummy_var_155: i64) returns (out_$i6: i32, out_$p7: ref, out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i15: i32, out_$i16: i1, out_vslice_dummy_var_154: i64, out_vslice_dummy_var_155: i64);
  modifies $M.43, $M.46, $M.47, $CurrAddr, $M.48, assertsPassed, $M.0, $M.17, $M.5, $M.20, $M.22, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.26, $M.28, $M.30, $M.32, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37;



implementation __iter_div_u64_rem_loop_$bb4(in_$i1: i32, in_$p3: ref, in_$i4: i64, in_$i9: i64, in_$i10: i64, in_$i11: i64, in_$i12: i64, in_$i13: i32, in_$i14: i64, in_$i15: i1, in_$i8: i32, in_$i16: i32) returns (out_$i9: i64, out_$i10: i64, out_$i11: i64, out_$i12: i64, out_$i13: i32, out_$i14: i64, out_$i15: i1, out_$i8: i32, out_$i16: i32)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i8, out_$i16 := in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i8, in_$i16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5223;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i13;
    goto $bb6_dummy;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i13;
    assume true;
    goto $bb6;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    out_$i15 := $ule.i64(in_$i4, out_$i14);
    goto corral_source_split_5232;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.48, in_$p3);
    goto corral_source_split_5231;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i8, 1);
    call {:si_unique_call 918} {:cexpr "ret"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_5230;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $M.48 := $store.i64($M.48, in_$p3, out_$i12);
    goto corral_source_split_5229;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    out_$i12 := $sub.i64(out_$i10, out_$i11);
    goto corral_source_split_5228;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(in_$i1);
    goto corral_source_split_5227;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i64($M.48, in_$p3);
    goto corral_source_split_5226;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i64($M.48, in_$p3);
    call {:si_unique_call 917} devirtbounce.23(0, in_$p3, out_$i9);
    goto corral_source_split_5225;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i8, out_$i16 := __iter_div_u64_rem_loop_$bb4(in_$i1, in_$p3, in_$i4, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i8, out_$i16);
    return;

  exit:
    return;
}



procedure __iter_div_u64_rem_loop_$bb4(in_$i1: i32, in_$p3: ref, in_$i4: i64, in_$i9: i64, in_$i10: i64, in_$i11: i64, in_$i12: i64, in_$i13: i32, in_$i14: i64, in_$i15: i1, in_$i8: i32, in_$i16: i32) returns (out_$i9: i64, out_$i10: i64, out_$i11: i64, out_$i12: i64, out_$i13: i32, out_$i14: i64, out_$i15: i1, out_$i8: i32, out_$i16: i32);
  modifies $M.48;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i64, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i32, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i1, in_$i185: i32, in_$i186: i1, in_$i188: i32, in_$i189: i1, in_$i191: i32, in_$i192: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$i222: i32, in_$i223: i1, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32) returns (out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i64, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i32, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i1, out_$i185: i32, out_$i186: i1, out_$i188: i32, out_$i189: i1, out_$i191: i32, out_$i192: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$i222: i32, out_$i223: i1, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32)
{

  entry:
    out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i188, out_$i189, out_$i191, out_$i192, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i222, out_$i223, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170 := in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$p131, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$p139, in_$i140, in_$i141, in_$p142, in_$i143, in_$i144, in_$p145, in_$i146, in_$i147, in_$p148, in_$i149, in_$i150, in_$p151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$p157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i185, in_$i186, in_$i188, in_$i189, in_$i191, in_$i192, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i222, in_$i223, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} out_$i35 := __VERIFIER_nondet_int();
    call {:si_unique_call 1073} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i35);
    call {:si_unique_call 1074} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i35);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb33_dummy;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_429:
    goto corral_source_split_5712;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_main_exported_6();
    goto SeqInstr_428;

  $bb30:
    assume out_$i50 == 1;
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_5709;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    out_$i49 := $M.65;
    goto corral_source_split_5708;

  $bb28:
    assume out_$i48 == 1;
    goto corral_source_split_5707;

  $bb24:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i35, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb18:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i35, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb3:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i35, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i35, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb35:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1080} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5742;

  SeqInstr_432:
    goto corral_source_split_5741;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} out_vslice_dummy_var_164 := smi_start_processing(in_$p9, in_$p8);
    goto SeqInstr_431;

  $bb52:
    assume out_$i62 == 1;
    goto corral_source_split_5740;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 1);
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    out_$i61 := $M.66;
    goto corral_source_split_5737;

  $bb50:
    assume out_$i60 == 1;
    goto corral_source_split_5736;

  $bb46:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb37:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := $slt.i32(out_$i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i53, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_5714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1076} out_$i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 1077} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i53);
    call {:si_unique_call 1078} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i53);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb34:
    assume out_$i52 == 1;
    goto corral_source_split_5714;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_5701;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    out_$i51 := $M.66;
    goto corral_source_split_5700;

  $bb26:
    assume out_$i47 == 1;
    goto corral_source_split_5699;

  $bb25:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i35, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb57:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1082} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5747;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} set_maintenance_mode(in_$p11, out_$i66);
    goto corral_source_split_5746;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.49, in_$p2);
    goto corral_source_split_5745;

  $bb56:
    assume out_$i65 == 1;
    goto corral_source_split_5744;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 1);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$i64 := $M.66;
    goto corral_source_split_5729;

  $bb48:
    assume out_$i59 == 1;
    goto corral_source_split_5728;

  $bb47:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i53, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb60:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1084} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5752;

  SeqInstr_435:
    goto corral_source_split_5751;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} set_run_to_completion(in_$p5, out_$i69);
    goto SeqInstr_434;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.49, in_$p0);
    goto corral_source_split_5750;

  $bb59:
    assume out_$i68 == 1;
    goto corral_source_split_5749;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 1);
    goto corral_source_split_5734;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    out_$i67 := $M.66;
    goto corral_source_split_5733;

  $bb49:
    assume !(out_$i59 == 1);
    goto corral_source_split_5732;

  $bb63:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1086} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5756;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} request_events(in_$p12);
    goto corral_source_split_5755;

  $bb62:
    assume out_$i71 == 1;
    goto corral_source_split_5754;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 1);
    goto corral_source_split_5718;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    out_$i70 := $M.66;
    goto corral_source_split_5717;

  $bb39:
    assume out_$i55 == 1;
    goto corral_source_split_5716;

  $bb38:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i53, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb66:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1088} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5761;

  SeqInstr_438:
    goto corral_source_split_5760;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} sender(in_$p6, in_$p14, out_$i74);
    goto SeqInstr_437;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.49, in_$p1);
    goto corral_source_split_5759;

  $bb65:
    assume out_$i73 == 1;
    goto corral_source_split_5758;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 1);
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$i72 := $M.66;
    goto corral_source_split_5721;

  $bb41:
    assume out_$i56 == 1;
    goto corral_source_split_5720;

  $bb40:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i53, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb69:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1090} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_5765;

  SeqInstr_441:
    goto corral_source_split_5764;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} poll(in_$p10);
    goto SeqInstr_440;

  $bb68:
    assume out_$i76 == 1;
    goto corral_source_split_5763;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 1);
    goto corral_source_split_5726;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    out_$i75 := $M.66;
    goto corral_source_split_5725;

  $bb43:
    assume out_$i57 == 1;
    goto corral_source_split_5724;

  $bb42:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i53, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} ldv_stop();
    goto corral_source_split_5767;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb44:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb45;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb45;

  $bb75:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb76;

  SeqInstr_444:
    goto corral_source_split_5770;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} choose_timer_3();
    goto SeqInstr_443;

  $bb74:
    assume out_$i78 == 1;
    goto corral_source_split_5769;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 0);
    goto corral_source_split_5705;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$i77 := $M.67;
    goto corral_source_split_5704;

  $bb27:
    assume !(out_$i47 == 1);
    goto corral_source_split_5703;

  $bb78:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb83:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1097} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_5781;

  SeqInstr_447:
    goto corral_source_split_5780;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} out_vslice_dummy_var_165 := dell_poweredge_bt_xaction_handler(in_$p17, out_$i85, in_$p15);
    goto SeqInstr_446;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i64($M.49, in_$p3);
    goto corral_source_split_5779;

  $bb82:
    assume out_$i84 == 1;
    goto corral_source_split_5778;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 1);
    goto corral_source_split_5776;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    out_$i83 := $M.68;
    goto corral_source_split_5775;

  $bb80:
    assume out_$i82 == 1;
    goto corral_source_split_5774;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_5772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1093} out_$i81 := __VERIFIER_nondet_int();
    call {:si_unique_call 1094} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i81);
    call {:si_unique_call 1095} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i81);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume out_$i80 == 1;
    goto corral_source_split_5772;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_5689;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    out_$i79 := $M.68;
    goto corral_source_split_5688;

  $bb20:
    assume out_$i44 == 1;
    goto corral_source_split_5687;

  $bb19:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i35, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} ldv_stop();
    goto corral_source_split_5783;

  $bb81:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb90:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb100:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb102:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $M.74 := out_$i100;
    call {:si_unique_call 1105} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i32(out_$i99, 1);
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$i99 := $M.74;
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.69 := 2;
    call {:si_unique_call 1104} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_5803;

  $bb101:
    assume out_$i98 == 1;
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 0);
    goto corral_source_split_5800;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    out_$i97 := $M.78;
    goto corral_source_split_5799;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $M.78 := out_$i96;
    call {:si_unique_call 1103} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} out_$i96 := ipmi_pnp_probe(out_$p95, in_$p19);
    goto corral_source_split_5797;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    out_$p95 := $M.51;
    goto corral_source_split_5796;

  $bb99:
    assume out_$i94 == 1;
    goto corral_source_split_5795;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 1);
    goto corral_source_split_5793;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    out_$i93 := $M.69;
    goto corral_source_split_5792;

  $bb97:
    assume out_$i92 == 1;
    goto corral_source_split_5791;

  $bb92:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i89, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb91:
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_5785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1099} out_$i89 := __VERIFIER_nondet_int();
    call {:si_unique_call 1100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i89);
    call {:si_unique_call 1101} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i89);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb89:
    assume out_$i88 == 1;
    goto corral_source_split_5785;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_5693;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    out_$i87 := $M.69;
    goto corral_source_split_5692;

  $bb22:
    assume out_$i45 == 1;
    goto corral_source_split_5691;

  $bb21:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i35, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb107:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $M.74 := out_$i105;
    call {:si_unique_call 1108} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    out_$i105 := $sub.i32(out_$i104, 1);
    goto corral_source_split_5813;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    out_$i104 := $M.74;
    goto corral_source_split_5812;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1107} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_5811;

  SeqInstr_450:
    goto corral_source_split_5810;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} ipmi_pnp_remove(out_$p103);
    goto SeqInstr_449;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$p103 := $M.51;
    goto corral_source_split_5809;

  $bb106:
    assume out_$i102 == 1;
    goto corral_source_split_5808;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 2);
    goto corral_source_split_5789;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    out_$i101 := $M.69;
    goto corral_source_split_5788;

  $bb94:
    assume out_$i91 == 1;
    goto corral_source_split_5787;

  $bb93:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} ldv_stop();
    goto corral_source_split_5816;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb96;

  $bb98:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    goto $bb96;

  $bb113:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_453:
    goto corral_source_split_5819;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} choose_interrupt_2();
    goto SeqInstr_452;

  $bb112:
    assume out_$i107 == 1;
    goto corral_source_split_5818;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_5697;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    out_$i106 := $M.70;
    goto corral_source_split_5696;

  $bb23:
    assume !(out_$i45 == 1);
    goto corral_source_split_5695;

  $bb116:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb136:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb138:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.74 := out_$i126;
    call {:si_unique_call 1117} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_5862;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    out_$i126 := $add.i32(out_$i125, 1);
    goto corral_source_split_5861;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    out_$i125 := $M.74;
    goto corral_source_split_5860;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1116} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_5859;

  $bb137:
    assume out_$i124 == 1;
    goto corral_source_split_5858;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 0);
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$i123 := $M.79;
    goto corral_source_split_5855;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.79 := out_$i122;
    call {:si_unique_call 1115} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} out_$i122 := ipmi_pci_probe(out_$p121, in_$p21);
    goto corral_source_split_5853;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    out_$p121 := $M.64;
    goto corral_source_split_5852;

  $bb135:
    assume out_$i120 == 1;
    goto corral_source_split_5851;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 1);
    goto corral_source_split_5849;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    out_$i119 := $M.71;
    goto corral_source_split_5848;

  $bb133:
    assume out_$i118 == 1;
    goto corral_source_split_5847;

  $bb129:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i110, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb118:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$i116 := $slt.i32(out_$i110, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i110, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_5821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1111} out_$i110 := __VERIFIER_nondet_int();
    call {:si_unique_call 1112} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i110);
    call {:si_unique_call 1113} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i110);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb115:
    assume out_$i109 == 1;
    goto corral_source_split_5821;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i32(out_$i108, 0);
    goto corral_source_split_5677;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i108 := $M.71;
    goto corral_source_split_5676;

  $bb14:
    assume out_$i41 == 1;
    goto corral_source_split_5675;

  $bb5:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i35, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i35, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb148:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.71 := 3;
    call {:si_unique_call 1120} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_5878;

  $bb147:
    assume out_$i136 == 1;
    goto corral_source_split_5877;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 0);
    goto corral_source_split_5875;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    out_$i135 := $M.81;
    goto corral_source_split_5874;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $M.81 := out_$i134;
    call {:si_unique_call 1119} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_5873;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} out_$i134 := ipmi_pci_suspend(out_$p131, out_$i133);
    goto corral_source_split_5872;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.49, out_$p132);
    goto corral_source_split_5871;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5870;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    out_$p131 := $M.64;
    goto corral_source_split_5869;

  $bb145:
    assume out_$i130 == 1;
    goto corral_source_split_5868;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 0);
    goto corral_source_split_5866;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    out_$i129 := $M.80;
    goto corral_source_split_5865;

  $bb142:
    assume out_$i128 == 1;
    goto corral_source_split_5864;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 2);
    goto corral_source_split_5841;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    out_$i127 := $M.71;
    goto corral_source_split_5840;

  $bb131:
    assume out_$i117 == 1;
    goto corral_source_split_5839;

  $bb130:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i110, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb143:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb144;

  $bb146:
    assume {:verifier.code 0} true;
    assume !(out_$i130 == 1);
    goto $bb144;

  $bb161:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1128} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5907;

  SeqInstr_465:
    goto corral_source_split_5906;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} ipmi_pci_remove(out_$p148);
    goto SeqInstr_464;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    out_$p148 := $M.64;
    goto corral_source_split_5905;

  $bb160:
    assume out_$i147 == 1;
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 5);
    goto corral_source_split_5902;

  $bb159:
    assume {:verifier.code 0} true;
    out_$i146 := $M.71;
    goto corral_source_split_5901;

  $bb158:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1126} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5899;

  SeqInstr_462:
    goto corral_source_split_5898;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} ipmi_pci_remove(out_$p145);
    goto SeqInstr_461;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    out_$p145 := $M.64;
    goto corral_source_split_5897;

  $bb157:
    assume out_$i144 == 1;
    goto corral_source_split_5896;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 2);
    goto corral_source_split_5894;

  $bb156:
    assume {:verifier.code 0} true;
    out_$i143 := $M.71;
    goto corral_source_split_5893;

  $bb155:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1124} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5891;

  SeqInstr_459:
    goto corral_source_split_5890;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ipmi_pci_remove(out_$p142);
    goto SeqInstr_458;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    out_$p142 := $M.64;
    goto corral_source_split_5889;

  $bb154:
    assume out_$i141 == 1;
    goto corral_source_split_5888;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 3);
    goto corral_source_split_5886;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i140 := $M.71;
    goto corral_source_split_5885;

  $bb152:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1122} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5883;

  SeqInstr_456:
    goto corral_source_split_5882;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ipmi_pci_remove(out_$p139);
    goto SeqInstr_455;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    out_$p139 := $M.64;
    goto corral_source_split_5881;

  $bb151:
    assume out_$i138 == 1;
    goto corral_source_split_5880;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 4);
    goto corral_source_split_5845;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    out_$i137 := $M.71;
    goto corral_source_split_5844;

  $bb132:
    assume !(out_$i117 == 1);
    goto corral_source_split_5843;

  $bb176:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb178:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1137} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_5943;

  $bb177:
    assume out_$i166 == 1;
    goto corral_source_split_5942;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 0);
    goto corral_source_split_5940;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    out_$i165 := $M.82;
    goto corral_source_split_5939;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.82 := out_$i164;
    call {:si_unique_call 1136} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i164);
    goto corral_source_split_5938;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} out_$i164 := ipmi_pci_resume(out_$p163);
    goto corral_source_split_5937;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    out_$p163 := $M.64;
    goto corral_source_split_5936;

  $bb175:
    assume out_$i162 == 1;
    goto corral_source_split_5935;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 5);
    goto corral_source_split_5933;

  $bb174:
    assume {:verifier.code 0} true;
    out_$i161 := $M.71;
    goto corral_source_split_5932;

  $bb170:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb172:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1134} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_5930;

  $bb171:
    assume out_$i160 == 1;
    goto corral_source_split_5929;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, 0);
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    out_$i159 := $M.82;
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $M.82 := out_$i158;
    call {:si_unique_call 1133} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i158);
    goto corral_source_split_5925;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} out_$i158 := ipmi_pci_resume(out_$p157);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    out_$p157 := $M.64;
    goto corral_source_split_5923;

  $bb169:
    assume out_$i156 == 1;
    goto corral_source_split_5922;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 3);
    goto corral_source_split_5920;

  $bb168:
    assume {:verifier.code 0} true;
    out_$i155 := $M.71;
    goto corral_source_split_5919;

  $bb164:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb166:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1131} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_5917;

  $bb165:
    assume out_$i154 == 1;
    goto corral_source_split_5916;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 0);
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$i153 := $M.82;
    goto corral_source_split_5913;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $M.82 := out_$i152;
    call {:si_unique_call 1130} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_5912;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} out_$i152 := ipmi_pci_resume(out_$p151);
    goto corral_source_split_5911;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    out_$p151 := $M.64;
    goto corral_source_split_5910;

  $bb163:
    assume out_$i150 == 1;
    goto corral_source_split_5909;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 4);
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    out_$i149 := $M.71;
    goto corral_source_split_5832;

  $bb127:
    assume out_$i115 == 1;
    goto corral_source_split_5831;

  $bb120:
    assume out_$i112 == 1;
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i110, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb119:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i110, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb182:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb184:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $M.71 := 4;
    call {:si_unique_call 1140} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(4);
    goto corral_source_split_5952;

  $bb183:
    assume out_$i171 == 1;
    goto corral_source_split_5951;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 0);
    goto corral_source_split_5949;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    out_$i170 := $M.83;
    goto corral_source_split_5948;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $M.83 := out_$i169;
    call {:si_unique_call 1139} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_5947;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} out_$i169 := ldv_suspend_late_8();
    goto corral_source_split_5946;

  $bb181:
    assume out_$i168 == 1;
    goto corral_source_split_5945;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 3);
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    out_$i167 := $M.71;
    goto corral_source_split_5836;

  $bb128:
    assume !(out_$i115 == 1);
    goto corral_source_split_5835;

  $bb194:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb196:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $M.71 := 5;
    call {:si_unique_call 1146} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(5);
    goto corral_source_split_5973;

  $bb195:
    assume out_$i181 == 1;
    goto corral_source_split_5972;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 0);
    goto corral_source_split_5970;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    out_$i180 := $M.84;
    goto corral_source_split_5969;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $M.84 := out_$i179;
    call {:si_unique_call 1145} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i179);
    goto corral_source_split_5968;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} out_$i179 := ldv_resume_early_8();
    goto corral_source_split_5967;

  $bb193:
    assume out_$i178 == 1;
    goto corral_source_split_5966;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 3);
    goto corral_source_split_5964;

  $bb192:
    assume {:verifier.code 0} true;
    out_$i177 := $M.71;
    goto corral_source_split_5963;

  $bb188:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb190:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $M.71 := 5;
    call {:si_unique_call 1143} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(5);
    goto corral_source_split_5961;

  $bb189:
    assume out_$i176 == 1;
    goto corral_source_split_5960;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 0);
    goto corral_source_split_5958;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    out_$i175 := $M.84;
    goto corral_source_split_5957;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $M.84 := out_$i174;
    call {:si_unique_call 1142} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i174);
    goto corral_source_split_5956;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} out_$i174 := ldv_resume_early_8();
    goto corral_source_split_5955;

  $bb187:
    assume out_$i173 == 1;
    goto corral_source_split_5954;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 4);
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    out_$i172 := $M.71;
    goto corral_source_split_5824;

  $bb122:
    assume out_$i113 == 1;
    goto corral_source_split_5823;

  $bb121:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i110, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb209:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $M.71 := 5;
    call {:si_unique_call 1154} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(5);
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} out_vslice_dummy_var_169 := ldv_shutdown_8();
    goto corral_source_split_5997;

  $bb208:
    assume out_$i192 == 1;
    goto corral_source_split_5996;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 5);
    goto corral_source_split_5994;

  $bb207:
    assume {:verifier.code 0} true;
    out_$i191 := $M.71;
    goto corral_source_split_5993;

  $bb206:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1152} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} out_vslice_dummy_var_168 := ldv_shutdown_8();
    goto corral_source_split_5990;

  $bb205:
    assume out_$i189 == 1;
    goto corral_source_split_5989;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 2);
    goto corral_source_split_5987;

  $bb204:
    assume {:verifier.code 0} true;
    out_$i188 := $M.71;
    goto corral_source_split_5986;

  $bb203:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.71 := 3;
    call {:si_unique_call 1150} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(3);
    goto corral_source_split_5984;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} out_vslice_dummy_var_167 := ldv_shutdown_8();
    goto corral_source_split_5983;

  $bb202:
    assume out_$i186 == 1;
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 3);
    goto corral_source_split_5980;

  $bb201:
    assume {:verifier.code 0} true;
    out_$i185 := $M.71;
    goto corral_source_split_5979;

  $bb200:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $M.71 := 4;
    call {:si_unique_call 1148} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(4);
    goto corral_source_split_5977;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} out_vslice_dummy_var_166 := ldv_shutdown_8();
    goto corral_source_split_5976;

  $bb199:
    assume out_$i183 == 1;
    goto corral_source_split_5975;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 4);
    goto corral_source_split_5829;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    out_$i182 := $M.71;
    goto corral_source_split_5828;

  $bb124:
    assume out_$i114 == 1;
    goto corral_source_split_5827;

  $bb123:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i110, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} ldv_stop();
    goto corral_source_split_6000;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb125:
    assume {:verifier.code 0} true;
    assume !(out_$i114 == 1);
    goto $bb126;

  $bb134:
    assume {:verifier.code 0} true;
    assume !(out_$i118 == 1);
    goto $bb126;

  $bb215:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    goto $bb216;

  SeqInstr_468:
    goto corral_source_split_6003;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} choose_interrupt_1();
    goto SeqInstr_467;

  $bb214:
    assume out_$i195 == 1;
    goto corral_source_split_6002;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i195 := $ne.i32(out_$i194, 0);
    goto corral_source_split_5681;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    out_$i194 := $M.72;
    goto corral_source_split_5680;

  $bb16:
    assume out_$i42 == 1;
    goto corral_source_split_5679;

  $bb15:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i35, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb218:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    goto $bb219;

  SeqInstr_471:
    goto corral_source_split_6006;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} ldv_main_exported_4();
    goto SeqInstr_470;

  $bb217:
    assume out_$i197 == 1;
    goto corral_source_split_6005;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    out_$i197 := $ne.i32(out_$i196, 0);
    goto corral_source_split_5685;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    out_$i196 := $M.73;
    goto corral_source_split_5684;

  $bb17:
    assume !(out_$i42 == 1);
    goto corral_source_split_5683;

  $bb221:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb231:
    assume {:verifier.code 0} true;
    assume !(out_$i205 == 1);
    goto $bb232;

  $bb234:
    assume {:verifier.code 0} true;
    assume !(out_$i207 == 1);
    goto $bb232;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 0);
    goto corral_source_split_6020;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    out_$i206 := $M.74;
    goto corral_source_split_6019;

  $bb230:
    assume out_$i205 == 1;
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 3);
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    out_$i204 := $M.75;
    goto corral_source_split_6015;

  $bb228:
    assume out_$i203 == 1;
    goto corral_source_split_6014;

  $bb223:
    assume out_$i201 == 1;
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i200, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb222:
    assume {:verifier.code 0} true;
    out_$i201 := $slt.i32(out_$i200, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_6008:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1158} out_$i200 := __VERIFIER_nondet_int();
    call {:si_unique_call 1159} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i200);
    call {:si_unique_call 1160} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i200);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb220:
    assume out_$i199 == 1;
    goto corral_source_split_6008;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    out_$i199 := $ne.i32(out_$i198, 0);
    goto corral_source_split_5665;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    out_$i198 := $M.75;
    goto corral_source_split_5664;

  $bb7:
    assume out_$i38 == 1;
    goto corral_source_split_5663;

  $bb6:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i35, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb239:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb244:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    out_$i214 := $ne.i32(out_$i213, 0);
    goto corral_source_split_6049;

  $bb242:
    assume {:verifier.code 0} true;
    out_$i213 := $M.85;
    goto corral_source_split_6048;

  $bb241:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} ldv_initialize_si_sm_handlers_6();
    goto corral_source_split_6046;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1176} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6045;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $M.66 := 1;
    call {:si_unique_call 1175} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6044;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} ldv_initialize_si_sm_handlers_4();
    goto corral_source_split_6043;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 1173} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1172} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 1171} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} ldv_initialize_pnp_driver_9();
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 1169} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} ldv_initialize_si_sm_handlers_5();
    goto corral_source_split_6037;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 1167} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $M.75 := 3;
    call {:si_unique_call 1166} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6035;

  $bb240:
    assume out_$i212 == 1;
    goto corral_source_split_6034;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 0);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$i211 := $M.85;
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $M.85 := out_$i210;
    call {:si_unique_call 1165} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i210);
    goto corral_source_split_6030;

  SeqInstr_477:
    goto corral_source_split_6029;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} out_$i210 := init_ipmi_si();
    goto SeqInstr_476;

  $bb238:
    assume out_$i209 == 1;
    goto corral_source_split_6028;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 1);
    goto corral_source_split_6012;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    out_$i208 := $M.75;
    goto corral_source_split_6011;

  $bb225:
    assume out_$i202 == 1;
    goto corral_source_split_6010;

  $bb224:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i32(out_$i200, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} ldv_stop();
    goto corral_source_split_6054;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb226:
    assume {:verifier.code 0} true;
    assume !(out_$i202 == 1);
    goto $bb227;

  $bb229:
    assume {:verifier.code 0} true;
    assume !(out_$i203 == 1);
    goto $bb227;

  $bb251:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb256:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 1184} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6064;

  SeqInstr_480:
    goto corral_source_split_6063;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} out_vslice_dummy_var_170 := hotmod_handler(in_$p22, in_$p24);
    goto SeqInstr_479;

  $bb255:
    assume out_$i220 == 1;
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 1);
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    out_$i219 := $M.76;
    goto corral_source_split_6059;

  $bb253:
    assume out_$i218 == 1;
    goto corral_source_split_6058;

  $bb252:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_6056:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1180} out_$i217 := __VERIFIER_nondet_int();
    call {:si_unique_call 1181} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i217);
    call {:si_unique_call 1182} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i217);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb250:
    assume out_$i216 == 1;
    goto corral_source_split_6056;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    out_$i216 := $ne.i32(out_$i215, 0);
    goto corral_source_split_5669;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    out_$i215 := $M.76;
    goto corral_source_split_5668;

  $bb9:
    assume out_$i39 == 1;
    goto corral_source_split_5667;

  $bb8:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i35, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} ldv_stop();
    goto corral_source_split_6066;

  $bb254:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb263:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    goto $bb264;

  SeqInstr_483:
    goto corral_source_split_6069;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} ldv_main_exported_5();
    goto SeqInstr_482;

  $bb262:
    assume out_$i223 == 1;
    goto corral_source_split_6068;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    out_$i223 := $ne.i32(out_$i222, 0);
    goto corral_source_split_5673;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    out_$i222 := $M.77;
    goto corral_source_split_5672;

  $bb11:
    assume out_$i40 == 1;
    goto corral_source_split_5671;

  $bb10:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i35, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} ldv_stop();
    goto corral_source_split_6071;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb13;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb13;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i188, out_$i189, out_$i191, out_$i192, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i222, out_$i223, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p14, in_$p15, in_$p17, in_$p19, in_$p21, in_$p22, in_$p24, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$i146, out_$i147, out_$p148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i188, out_$i189, out_$i191, out_$i192, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i222, out_$i223, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i32, in_$i62: i1, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i77: i32, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i64, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i32, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i144: i1, in_$p145: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i1, in_$i185: i32, in_$i186: i1, in_$i188: i32, in_$i189: i1, in_$i191: i32, in_$i192: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i1, in_$i202: i1, in_$i203: i1, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i1, in_$i222: i32, in_$i223: i1, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32) returns (out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i32, out_$i62: i1, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i77: i32, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i64, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i32, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i144: i1, out_$p145: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i1, out_$i185: i32, out_$i186: i1, out_$i188: i32, out_$i189: i1, out_$i191: i32, out_$i192: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i1, out_$i202: i1, out_$i203: i1, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i1, out_$i222: i32, out_$i223: i1, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32);
  modifies $M.49, $M.65, $M.0, $CurrAddr, $M.17, $M.5, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.66, $M.68, $M.39, $M.74, $M.69, $M.78, $M.71, $M.79, $M.81, $M.7, $M.82, $M.83, $M.84, $M.52, $M.73, $M.86, $M.87, $M.76, $M.51, $M.95, $M.77, $M.75, $M.85, $M.88, $M.92, $M.91, $M.89, $M.90, $M.104, $M.64, $M.121, $M.8, $M.96, $M.97, $M.98;



implementation cleanup_ipmi_si_loop_$bb14(in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p17: ref, in_$p18: ref) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p17: ref, out_$p18: ref)
{

  entry:
    out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p17, out_$p18 := in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p17, in_$p18;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6280;

  $bb16:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p17, out_$p18 := out_$p18, out_$p23;
    goto $bb16_dummy;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_6288;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p18, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p22, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6286;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_6285;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6283;

  SeqInstr_498:
    goto corral_source_split_6282;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} cleanup_one_si(out_$p17);
    goto SeqInstr_497;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p17, out_$p18 := cleanup_ipmi_si_loop_$bb14(out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p17, out_$p18);
    return;

  exit:
    return;
}



procedure cleanup_ipmi_si_loop_$bb14(in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p17: ref, in_$p18: ref) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p17: ref, out_$p18: ref);
  modifies $M.0, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.5, $M.20, $M.22, $M.9, $M.11, $M.13, $M.15, $M.26, $M.28, $M.30, $M.32, $CurrAddr, $M.43, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation init_ipmi_si_loop_$bb56(in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$p77: ref, in_$i78: i32, in_$i104: i32) returns (out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$p77: ref, out_$i78: i32, out_$i104: i32)
{

  entry:
    out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p93, out_$p94, out_$p95, out_$p96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p77, out_$i78, out_$i104 := in_$p79, in_$i80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$i91, in_$p93, in_$p94, in_$p95, in_$p96, in_$p98, in_$p99, in_$p100, in_$p101, in_$i102, in_$i103, in_$p77, in_$i78, in_$i104;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6430;

  $bb70:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$p77, out_$i78 := out_$p96, out_$i91;
    goto $bb70_dummy;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i91;
    assume true;
    goto $bb70;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i64(out_$i102, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6464;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    out_$i102 := $p2i.ref.i64(out_$p101);
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p95, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_6462;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} llvm.prefetch(out_$p100, 0, 3, 1);
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    out_$p100 := $bitcast.ref.ref(out_$p99);
    goto corral_source_split_6460;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_6459;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref(out_$p95, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6458;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p95, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6457;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p94);
    goto corral_source_split_6456;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_6455;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($add.ref(out_$p77, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6454;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_6453;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i78;
    goto $bb69;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i90;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_6451;

  $bb67:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := out_$i78;
    goto $bb68;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    out_$i90 := out_$i89;
    goto $bb68;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, out_$p88);
    call {:si_unique_call 1284} {:cexpr "type"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_6449;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p77, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_6448;

  $bb66:
    assume out_$i87 == 1;
    goto corral_source_split_6447;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 0);
    goto corral_source_split_6440;

  SeqInstr_507:
    call {:si_unique_call 1283} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_6439;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} out_$i86 := try_smi_init(out_$p77);
    goto SeqInstr_506;

  $bb64:
    assume {:verifier.code 0} true;
    assume out_$i85 == 1;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    assume out_$i82 == 1;
    goto $bb62;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb63;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i78, 0);
    goto corral_source_split_6437;

  $bb58:
    assume out_$i81 == 1;
    goto corral_source_split_6436;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 0);
    goto corral_source_split_6434;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_6433;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p77, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_6432;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, out_$i78);
    goto corral_source_split_6445;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.0, out_$p83);
    goto corral_source_split_6444;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p77, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_6443;

  $bb63:
    assume !(out_$i82 == 1);
    goto corral_source_split_6442;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb60;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(out_$i85 == 1);
    goto $bb60;

  $bb70_dummy:
    call {:si_unique_call 1} out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p93, out_$p94, out_$p95, out_$p96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p77, out_$i78, out_$i104 := init_ipmi_si_loop_$bb56(out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p93, out_$p94, out_$p95, out_$p96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p77, out_$i78, out_$i104);
    return;

  exit:
    return;
}



procedure init_ipmi_si_loop_$bb56(in_$p79: ref, in_$i80: i32, in_$i81: i1, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$p77: ref, in_$i78: i32, in_$i104: i32) returns (out_$p79: ref, out_$i80: i32, out_$i81: i1, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$p77: ref, out_$i78: i32, out_$i104: i32);
  modifies $M.0, $M.104, $M.17, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, $M.43, $CurrAddr, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48;



implementation init_ipmi_si_loop_$bb33(in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p37: ref, in_$i38: i32, in_$i64: i32) returns (out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p37: ref, out_$i38: i32, out_$i64: i32)
{

  entry:
    out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p53, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p37, out_$i38, out_$i64 := in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$p53, in_$p54, in_$p55, in_$p56, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p37, in_$i38, in_$i64;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6374;

  $bb47:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$p37, out_$i38 := out_$p56, out_$i51;
    goto $bb47_dummy;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i51;
    assume true;
    goto $bb47;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i62, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6408;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_6407;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p55, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_6406;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} llvm.prefetch(out_$p60, 0, 3, 1);
    goto corral_source_split_6405;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_6404;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_6403;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(out_$p55, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6402;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p55, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6401;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_6400;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_6399;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p37, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6398;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_6397;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i38;
    goto $bb46;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i50;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_6395;

  $bb44:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i38;
    goto $bb45;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i49;
    goto $bb45;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    call {:si_unique_call 1278} {:cexpr "type"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_6393;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p37, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_6392;

  $bb43:
    assume out_$i47 == 1;
    goto corral_source_split_6391;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_6384;

  SeqInstr_504:
    call {:si_unique_call 1277} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_6383;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} out_$i46 := try_smi_init(out_$p37);
    goto SeqInstr_503;

  $bb41:
    assume {:verifier.code 0} true;
    assume out_$i45 == 1;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    assume out_$i42 == 1;
    goto $bb39;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb40;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i38, 0);
    goto corral_source_split_6381;

  $bb35:
    assume out_$i41 == 1;
    goto corral_source_split_6380;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_6378;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_6377;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p37, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, out_$i38);
    goto corral_source_split_6389;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_6388;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p37, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_6387;

  $bb40:
    assume !(out_$i42 == 1);
    goto corral_source_split_6386;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb37;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb37;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p53, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p37, out_$i38, out_$i64 := init_ipmi_si_loop_$bb33(out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$p53, out_$p54, out_$p55, out_$p56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p37, out_$i38, out_$i64);
    return;

  exit:
    return;
}



procedure init_ipmi_si_loop_$bb33(in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p37: ref, in_$i38: i32, in_$i64: i32) returns (out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p37: ref, out_$i38: i32, out_$i64: i32);
  modifies $M.0, $M.104, $M.17, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, $M.43, $CurrAddr, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48;



implementation hotmod_handler_loop_$bb115(in_$p4: ref, in_$i52: i32, in_$i62: i64, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i1, in_$p193: ref, in_$i194: i64, in_$i195: i1, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i64, in_$i203: i1, in_$p182: ref, in_$p183: ref) returns (out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i1, out_$p193: ref, out_$i194: i64, out_$i195: i1, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i64, out_$i203: i1, out_$p182: ref, out_$p183: ref)
{

  entry:
    out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p193, out_$i194, out_$i195, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p182, out_$p183 := in_$p185, in_$i186, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$p193, in_$i194, in_$i195, in_$p197, in_$p198, in_$p199, in_$p200, in_$p201, in_$i202, in_$i203, in_$p182, in_$p183;
    goto $bb115, exit;

  $bb115:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6876;

  $bb127:
    assume out_$i203 == 1;
    assume {:verifier.code 0} true;
    out_$p182, out_$p183 := out_$p200, out_$p182;
    goto $bb127_dummy;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    out_$i203 := $ne.i64(out_$i202, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6891;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    out_$i202 := $p2i.ref.i64(out_$p201);
    goto corral_source_split_6890;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(out_$p182, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_6889;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref(out_$p199, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    out_$p199 := $bitcast.ref.ref(out_$p198);
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$p198 := $load.ref($M.0, out_$p197);
    goto corral_source_split_6886;

  $bb119:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref($add.ref(out_$p182, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6885;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb117:
    assume out_$i188 == 1;
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i188 := $ne.i32(out_$i186, out_$i187);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i32($M.96, in_$p4);
    goto corral_source_split_6880;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i32($M.0, out_$p185);
    goto corral_source_split_6879;

  $bb116:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref($add.ref(out_$p183, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_6878;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb121:
    assume out_$i191 == 1;
    goto corral_source_split_6897;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$i191 := $ne.i32(out_$i190, in_$i52);
    goto corral_source_split_6895;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i32($M.0, out_$p189);
    goto corral_source_split_6894;

  $bb120:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p183, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_6893;

  $bb118:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb125:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    goto $bb126;

  SeqInstr_519:
    goto corral_source_split_6904;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} cleanup_one_si(out_$p183);
    goto SeqInstr_518;

  $bb124:
    assume out_$i195 == 1;
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i64(out_$i194, in_$i62);
    goto corral_source_split_6901;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i64($M.0, out_$p193);
    goto corral_source_split_6900;

  $bb123:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref($add.ref(out_$p183, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_6899;

  $bb122:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb127_dummy:
    call {:si_unique_call 1} out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p193, out_$i194, out_$i195, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p182, out_$p183 := hotmod_handler_loop_$bb115(in_$p4, in_$i52, in_$i62, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p193, out_$i194, out_$i195, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p182, out_$p183);
    return;

  exit:
    return;
}



procedure hotmod_handler_loop_$bb115(in_$p4: ref, in_$i52: i32, in_$i62: i64, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i1, in_$p193: ref, in_$i194: i64, in_$i195: i1, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i64, in_$i203: i1, in_$p182: ref, in_$p183: ref) returns (out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i1, out_$p193: ref, out_$i194: i64, out_$i195: i1, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i64, out_$i203: i1, out_$p182: ref, out_$p183: ref);
  modifies $M.0, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.5, $M.20, $M.22, $M.9, $M.11, $M.13, $M.15, $M.26, $M.28, $M.30, $M.32, $CurrAddr, $M.43, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48;



implementation hotmod_handler_loop_$bb45(in_$p2: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i93: i1, in_$i94: i64, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$p75: ref) returns (out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i93: i1, out_$i94: i64, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$p75: ref)
{

  entry:
    out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p75 := in_$p76, in_$p77, in_$i78, in_$i79, in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$i85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$p75;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_6683;

  $bb59:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$p75 := out_$p81;
    goto $bb59_dummy;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i64(out_$i94, 0);
    goto corral_source_split_6721;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p81);
    goto corral_source_split_6720;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i93 == 1;
    goto corral_source_split_6718;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i89, 0);
    goto corral_source_split_6713;

  $bb54:
    assume !(out_$i90 == 1);
    goto corral_source_split_6712;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i89;
    assume true;
    goto $bb54;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i89, 0);
    goto corral_source_split_6708;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} out_$i89 := check_hotmod_int_op(out_$p88, out_$p87, .str.97, in_$p5);
    call {:si_unique_call 1337} {:cexpr "rv"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_6707;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6706;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_6705;

  $bb51:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    out_$p87 := out_$p83;
    goto $bb52;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    out_$p87 := out_$p86;
    goto $bb52;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(out_$p83, $mul.ref(1, 1));
    goto corral_source_split_6703;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p83, 0);
    goto corral_source_split_6702;

  $bb50:
    assume out_$i85 == 1;
    goto corral_source_split_6701;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i64(out_$i84, 0);
    goto corral_source_split_6699;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(out_$p83);
    goto corral_source_split_6698;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} out_$p83 := strchr(out_$p82, 61);
    goto corral_source_split_6697;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6696;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_6695;

  $bb48:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$p81 := out_$p77;
    goto $bb49;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$p81 := out_$p80;
    goto $bb49;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref(out_$p77, $mul.ref(1, 1));
    goto corral_source_split_6693;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p77, 0);
    goto corral_source_split_6692;

  $bb47:
    assume out_$i79 == 1;
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_6689;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_6688;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} out_$p77 := strchr(out_$p76, 44);
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6686;

  $bb46:
    assume {:verifier.code 0} true;
    $M.97 := $store.ref($M.97, in_$p2, out_$p75);
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb65:
    assume out_$i100 == 1;
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i97, 0);
    goto corral_source_split_6732;

  $bb64:
    assume !(out_$i98 == 1);
    goto corral_source_split_6731;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    out_$i99 := out_$i97;
    assume true;
    goto $bb64;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i97, 0);
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} out_$i97 := check_hotmod_int_op(out_$p96, out_$p87, .str.98, in_$p6);
    call {:si_unique_call 1340} {:cexpr "rv"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_6726;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6725;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb71:
    assume out_$i105 == 1;
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i32(out_$i102, 0);
    goto corral_source_split_6743;

  $bb70:
    assume !(out_$i103 == 1);
    goto corral_source_split_6742;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i102;
    assume true;
    goto $bb70;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i102, 0);
    goto corral_source_split_6738;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} out_$i102 := check_hotmod_int_op(out_$p101, out_$p87, .str.99, in_$p7);
    call {:si_unique_call 1342} {:cexpr "rv"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_6737;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6736;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb77:
    assume out_$i110 == 1;
    goto corral_source_split_6756;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i107, 0);
    goto corral_source_split_6754;

  $bb76:
    assume !(out_$i108 == 1);
    goto corral_source_split_6753;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i107;
    assume true;
    goto $bb76;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i107, 0);
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} out_$i107 := check_hotmod_int_op(out_$p106, out_$p87, .str.100, in_$p8);
    call {:si_unique_call 1344} {:cexpr "rv"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_6748;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6747;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb83:
    assume out_$i115 == 1;
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i112, 0);
    goto corral_source_split_6765;

  $bb82:
    assume !(out_$i113 == 1);
    goto corral_source_split_6764;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i114 := out_$i112;
    assume true;
    goto $bb82;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i112, 0);
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} out_$i112 := check_hotmod_int_op(out_$p111, out_$p87, .str.101, in_$p9);
    call {:si_unique_call 1346} {:cexpr "rv"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_6759;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6758;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb59_dummy:
    call {:si_unique_call 1} out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p75 := hotmod_handler_loop_$bb45(in_$p2, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p75);
    return;

  exit:
    return;
}



procedure hotmod_handler_loop_$bb45(in_$p2: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i93: i1, in_$i94: i64, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$p75: ref) returns (out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i93: i1, out_$i94: i64, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$p75: ref);
  modifies $M.98, $CurrAddr, $M.0, $M.97;



implementation hotmod_handler_loop_$bb18(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$i73: i64, in_$i74: i1, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i93: i1, in_$i94: i64, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$p75: ref, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p126: ref, in_$i127: i32, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$p135: ref, in_$i136: i32, in_$p138: ref, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$p144: ref, in_$i145: i32, in_$p147: ref, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$p153: ref, in_$i154: i32, in_$p156: ref, in_$i157: i32, in_$p158: ref, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i8, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$i180: i64, in_$i181: i1, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i1, in_$p193: ref, in_$i194: i64, in_$i195: i1, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i64, in_$i203: i1, in_$p182: ref, in_$p183: ref, in_$p204: ref, in_$i205: i64, in_$i206: i1) returns (out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$i73: i64, out_$i74: i1, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i93: i1, out_$i94: i64, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$p75: ref, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p126: ref, out_$i127: i32, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$p135: ref, out_$i136: i32, out_$p138: ref, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$p144: ref, out_$i145: i32, out_$p147: ref, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$p153: ref, out_$i154: i32, out_$p156: ref, out_$i157: i32, out_$p158: ref, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i8, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$i180: i64, out_$i181: i1, out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i1, out_$p193: ref, out_$i194: i64, out_$i195: i1, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i64, out_$i203: i1, out_$p182: ref, out_$p183: ref, out_$p204: ref, out_$i205: i64, out_$i206: i1)
{

  entry:
    out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p75, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p135, out_$i136, out_$p138, out_$p140, out_$i141, out_$i142, out_$p144, out_$i145, out_$p147, out_$p149, out_$i150, out_$i151, out_$p153, out_$i154, out_$p156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$i180, out_$i181, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p193, out_$i194, out_$i195, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p182, out_$p183, out_$p204, out_$i205, out_$i206 := in_$p41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i73, in_$i74, in_$p76, in_$p77, in_$i78, in_$i79, in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$i85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$p75, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$p126, in_$i127, in_$p129, in_$i130, in_$i131, in_$p132, in_$p133, in_$p135, in_$i136, in_$p138, in_$p140, in_$i141, in_$i142, in_$p144, in_$i145, in_$p147, in_$p149, in_$i150, in_$i151, in_$p153, in_$i154, in_$p156, in_$i157, in_$p158, in_$p159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$p170, in_$p171, in_$p172, in_$p173, in_$p175, in_$p176, in_$p177, in_$p178, in_$p179, in_$i180, in_$i181, in_$p185, in_$i186, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$p193, in_$i194, in_$i195, in_$p197, in_$p198, in_$p199, in_$p200, in_$p201, in_$i202, in_$i203, in_$p182, in_$p183, in_$p204, in_$i205, in_$i206;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb130:
    assume {:verifier.code 0} true;
    assume out_$i206 == 1;
    goto $bb130_dummy;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$i206 := $ne.i64(out_$i205, 0);
    goto corral_source_split_6872;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    out_$i205 := $p2i.ref.i64(out_$p204);
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    out_$p204 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6870;

  $bb111:
    assume {:verifier.code 0} true;
    $M.97 := $store.ref($M.97, in_$p2, out_$p46);
    goto corral_source_split_6869;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} mutex_unlock(smi_infos_lock);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} kfree(out_$p170);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb109;

  SeqInstr_516:
    goto corral_source_split_6867;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} cleanup_one_si(out_$p120);
    goto SeqInstr_515;

  $bb107:
    assume out_$i169 == 1;
    goto corral_source_split_6866;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i32(out_$i168, 0);
    goto corral_source_split_6861;

  SeqInstr_513:
    call {:si_unique_call 1353} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i168);
    goto corral_source_split_6860;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} out_$i168 := try_smi_init(out_$p120);
    goto SeqInstr_512;

  $bb105:
    assume out_$i167 == 1;
    goto corral_source_split_6859;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 0);
    goto corral_source_split_6857;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} out_$i166 := add_smi(out_$p120);
    call {:si_unique_call 1351} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_6856;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p165, out_$i164);
    goto corral_source_split_6855;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(540, 1));
    goto corral_source_split_6854;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    out_$i164 := $trunc.i32.i8(out_$i163);
    goto corral_source_split_6853;

  $bb104:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.98, in_$p9);
    goto corral_source_split_6852;

  $bb103:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p162, std_irq_setup);
    goto corral_source_split_6850;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(280, 1));
    goto corral_source_split_6849;

  $bb102:
    assume out_$i161 == 1;
    goto corral_source_split_6848;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    out_$i161 := $ne.i32(out_$i160, 0);
    goto corral_source_split_6846;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.0, out_$p159);
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_6844;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p158, out_$i157);
    goto corral_source_split_6843;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(348, 1));
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i32($M.98, in_$p8);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p156, out_$i154);
    goto corral_source_split_6840;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_6839;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i32($M.98, in_$p7);
    goto corral_source_split_6838;

  $bb100:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p153, 1);
    goto corral_source_split_6836;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_6835;

  $bb99:
    assume out_$i151 == 1;
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 0);
    goto corral_source_split_6832;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.0, out_$p149);
    goto corral_source_split_6831;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_6830;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p147, out_$i145);
    goto corral_source_split_6829;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_6828;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i32($M.98, in_$p6);
    goto corral_source_split_6827;

  $bb97:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p144, 1);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_6824;

  $bb96:
    assume out_$i142 == 1;
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 0);
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.0, out_$p140);
    goto corral_source_split_6820;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_6819;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p138, out_$i136);
    goto corral_source_split_6818;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_6817;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i32($M.98, in_$p5);
    goto corral_source_split_6816;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p135, $0.ref);
    goto corral_source_split_6815;

  $bb95:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p133, port_setup);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p132, mem_setup);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_6808;

  $bb93:
    assume out_$i131 == 1;
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 1);
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.96, in_$p4);
    goto corral_source_split_6804;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p129, out_$i127);
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_6802;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.96, in_$p4);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p126, out_$i62);
    goto corral_source_split_6800;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_6799;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p124, out_$i52);
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p123, 1);
    goto corral_source_split_6796;

  $bb92:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_6795;

  $bb91:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i64(out_$i121, 0);
    goto corral_source_split_6778;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_6777;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$p120 := $bitcast.ref.ref(out_$p119);
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} out_$p119 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_6775;

  $bb88:
    assume out_$i118 == 1;
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i49, 0);
    goto corral_source_split_6772;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb44;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb60:
    assume !(out_$i95 == 1);
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i64(out_$i94, 0);
    goto corral_source_split_6721;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p81);
    goto corral_source_split_6720;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i93 == 1;
    goto corral_source_split_6718;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i89, 0);
    goto corral_source_split_6713;

  $bb54:
    assume !(out_$i90 == 1);
    goto corral_source_split_6712;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i89;
    assume true;
    goto $bb54;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i89, 0);
    goto corral_source_split_6708;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} out_$i89 := check_hotmod_int_op(out_$p88, out_$p87, .str.97, in_$p5);
    call {:si_unique_call 1337} {:cexpr "rv"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_6707;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6706;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_6705;

  $bb51:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    out_$p87 := out_$p83;
    goto $bb52;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    out_$p87 := out_$p86;
    goto $bb52;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(out_$p83, $mul.ref(1, 1));
    goto corral_source_split_6703;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p83, 0);
    goto corral_source_split_6702;

  $bb50:
    assume out_$i85 == 1;
    goto corral_source_split_6701;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i64(out_$i84, 0);
    goto corral_source_split_6699;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(out_$p83);
    goto corral_source_split_6698;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} out_$p83 := strchr(out_$p82, 61);
    goto corral_source_split_6697;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6696;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_6695;

  $bb48:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$p81 := out_$p77;
    goto $bb49;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$p81 := out_$p80;
    goto $bb49;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref(out_$p77, $mul.ref(1, 1));
    goto corral_source_split_6693;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p77, 0);
    goto corral_source_split_6692;

  $bb47:
    assume out_$i79 == 1;
    goto corral_source_split_6691;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_6689;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_6688;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} out_$p77 := strchr(out_$p76, 44);
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6686;

  $bb46:
    assume {:verifier.code 0} true;
    $M.97 := $store.ref($M.97, in_$p2, out_$p75);
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    call out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p75 := hotmod_handler_loop_$bb45(in_$p2, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p75);
    goto $bb45_last;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$p75 := out_$p60;
    goto $bb45;

  $bb59:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$p75 := out_$p81;
    assume false;
    return;

  $bb42:
    assume out_$i74 == 1;
    goto corral_source_split_6681;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_6679;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_6678;

  $bb40:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 0);
    goto corral_source_split_6676;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i8.i32(out_$i68);
    goto corral_source_split_6675;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.0, out_$p67);
    goto corral_source_split_6674;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6673;

  $bb38:
    assume !(out_$i66 == 1);
    goto corral_source_split_6672;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_6667;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i8.i32(out_$i64);
    goto corral_source_split_6666;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.100, out_$p63);
    goto corral_source_split_6665;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.99, in_$p3);
    goto corral_source_split_6664;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} out_$i62 := simple_strtoul(out_$p61, in_$p3, 0);
    call {:si_unique_call 1332} {:cexpr "addr"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_6663;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6662;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6661;

  $bb34:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    out_$p60 := out_$p56;
    goto $bb35;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    out_$p60 := out_$p59;
    goto $bb35;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p56, $mul.ref(1, 1));
    goto corral_source_split_6659;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p56, 0);
    goto corral_source_split_6658;

  $bb33:
    assume out_$i58 == 1;
    goto corral_source_split_6657;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_6655;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} out_$p56 := strchr(out_$p55, 44);
    goto corral_source_split_6653;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6652;

  $bb31:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_6648;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} out_$i53 := parse_str(hotmod_as, in_$p4, .str.95, in_$p2);
    call {:si_unique_call 1329} {:cexpr "rv"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_6647;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.96, in_$p10);
    call {:si_unique_call 1327} {:cexpr "si_type___0"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_6646;

  $bb28:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_6642;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} out_$i50 := parse_str(hotmod_si, in_$p10, .str.94, in_$p2);
    call {:si_unique_call 1326} {:cexpr "rv"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_6641;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.96, in_$p10);
    call {:si_unique_call 1324} {:cexpr "op"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_6640;

  $bb24:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_6636;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} out_$i47 := parse_str(hotmod_ops, in_$p10, .str.93, in_$p2);
    call {:si_unique_call 1323} {:cexpr "rv"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_6635;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6634;

  $bb21:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$p46 := out_$p42;
    goto $bb22;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb22;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p42, $mul.ref(1, 1));
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p42, 0);
    goto corral_source_split_6631;

  $bb20:
    assume out_$i44 == 1;
    goto corral_source_split_6630;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_6628;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_6627;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} out_$p42 := strchr(out_$p41, 58);
    goto corral_source_split_6626;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6625;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, in_$p9, 0);
    goto corral_source_split_6624;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, in_$p8, 0);
    goto corral_source_split_6623;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, in_$p7, 0);
    goto corral_source_split_6622;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, in_$p6, 1);
    goto corral_source_split_6621;

  $bb19:
    assume {:verifier.code 0} true;
    $M.98 := $store.i32($M.98, in_$p5, 1);
    goto corral_source_split_6620;

  $bb65:
    assume out_$i100 == 1;
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i97, 0);
    goto corral_source_split_6732;

  $bb64:
    assume !(out_$i98 == 1);
    goto corral_source_split_6731;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    out_$i99 := out_$i97;
    assume true;
    goto $bb64;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i97, 0);
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} out_$i97 := check_hotmod_int_op(out_$p96, out_$p87, .str.98, in_$p6);
    call {:si_unique_call 1340} {:cexpr "rv"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_6726;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6725;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb71:
    assume out_$i105 == 1;
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i32(out_$i102, 0);
    goto corral_source_split_6743;

  $bb70:
    assume !(out_$i103 == 1);
    goto corral_source_split_6742;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i102;
    assume true;
    goto $bb70;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i102, 0);
    goto corral_source_split_6738;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} out_$i102 := check_hotmod_int_op(out_$p101, out_$p87, .str.99, in_$p7);
    call {:si_unique_call 1342} {:cexpr "rv"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_6737;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6736;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb66:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb77:
    assume out_$i110 == 1;
    goto corral_source_split_6756;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i107, 0);
    goto corral_source_split_6754;

  $bb76:
    assume !(out_$i108 == 1);
    goto corral_source_split_6753;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i107;
    assume true;
    goto $bb76;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i107, 0);
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} out_$i107 := check_hotmod_int_op(out_$p106, out_$p87, .str.100, in_$p8);
    call {:si_unique_call 1344} {:cexpr "rv"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_6748;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6747;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb83:
    assume out_$i115 == 1;
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i112, 0);
    goto corral_source_split_6765;

  $bb82:
    assume !(out_$i113 == 1);
    goto corral_source_split_6764;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i114 := out_$i112;
    assume true;
    goto $bb82;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i112, 0);
    goto corral_source_split_6760;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} out_$i112 := check_hotmod_int_op(out_$p111, out_$p87, .str.101, in_$p9);
    call {:si_unique_call 1346} {:cexpr "rv"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_6759;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.97, in_$p2);
    goto corral_source_split_6758;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(out_$p120, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_6812;

  $bb94:
    assume !(out_$i131 == 1);
    goto corral_source_split_6811;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p120);
    goto corral_source_split_6864;

  $bb106:
    assume !(out_$i167 == 1);
    goto corral_source_split_6863;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb113:
    assume {:verifier.code 0} true;
    assume !(out_$i181 == 1);
    goto $bb114;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb128:
    assume !(out_$i203 == 1);
    goto corral_source_split_6906;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    out_$i203 := $ne.i64(out_$i202, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6891;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    out_$i202 := $p2i.ref.i64(out_$p201);
    goto corral_source_split_6890;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(out_$p182, $mul.ref(0, 616)), $mul.ref(600, 1));
    goto corral_source_split_6889;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref(out_$p199, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    out_$p199 := $bitcast.ref.ref(out_$p198);
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$p198 := $load.ref($M.0, out_$p197);
    goto corral_source_split_6886;

  $bb119:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref($add.ref(out_$p182, $mul.ref(0, 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6885;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb117:
    assume out_$i188 == 1;
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i188 := $ne.i32(out_$i186, out_$i187);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i32($M.96, in_$p4);
    goto corral_source_split_6880;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i32($M.0, out_$p185);
    goto corral_source_split_6879;

  $bb116:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref($add.ref(out_$p183, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_6878;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb115:
    call out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p193, out_$i194, out_$i195, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p182, out_$p183 := hotmod_handler_loop_$bb115(in_$p4, out_$i52, out_$i62, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p193, out_$i194, out_$i195, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p182, out_$p183);
    goto $bb115_last;

  $bb115_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6876;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    out_$p182, out_$p183 := out_$p178, out_$p173;
    goto $bb115;

  $bb127:
    assume out_$i203 == 1;
    assume {:verifier.code 0} true;
    out_$p182, out_$p183 := out_$p200, out_$p182;
    assume false;
    return;

  $bb112:
    assume out_$i181 == 1;
    goto corral_source_split_6874;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$i181 := $ne.i64(out_$i180, $p2i.ref.i64(smi_infos));
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    out_$i180 := $p2i.ref.i64(out_$p179);
    goto corral_source_split_6790;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(out_$p172, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1));
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref(out_$p177, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6788;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    out_$p177 := $bitcast.ref.ref(out_$p176);
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    out_$p176 := $load.ref($M.0, out_$p175);
    goto corral_source_split_6786;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref($add.ref(out_$p172, $mul.ref($sub.ref(0, 600), 616)), $mul.ref(600, 1)), $mul.ref(0, 1));
    goto corral_source_split_6785;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref(out_$p172, $mul.ref($sub.ref(0, 600), 616));
    goto corral_source_split_6784;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    out_$p172 := $bitcast.ref.ref(out_$p171);
    goto corral_source_split_6783;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.0, smi_infos);
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} mutex_lock_nested(smi_infos_lock, 0);
    goto corral_source_split_6781;

  $bb89:
    assume !(out_$i118 == 1);
    goto corral_source_split_6780;

  $bb121:
    assume out_$i191 == 1;
    goto corral_source_split_6897;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$i191 := $ne.i32(out_$i190, out_$i52);
    goto corral_source_split_6895;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i32($M.0, out_$p189);
    goto corral_source_split_6894;

  $bb120:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p183, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_6893;

  $bb118:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb125:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    goto $bb126;

  SeqInstr_519:
    goto corral_source_split_6904;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} cleanup_one_si(out_$p183);
    goto SeqInstr_518;

  $bb124:
    assume out_$i195 == 1;
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i64(out_$i194, out_$i62);
    goto corral_source_split_6901;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i64($M.0, out_$p193);
    goto corral_source_split_6900;

  $bb123:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref($add.ref(out_$p183, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_6899;

  $bb122:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb130_dummy:
    call {:si_unique_call 1} out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p75, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p135, out_$i136, out_$p138, out_$p140, out_$i141, out_$i142, out_$p144, out_$i145, out_$p147, out_$p149, out_$i150, out_$i151, out_$p153, out_$i154, out_$p156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$i180, out_$i181, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p193, out_$i194, out_$i195, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p182, out_$p183, out_$p204, out_$i205, out_$i206 := hotmod_handler_loop_$bb18(in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i73, out_$i74, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$p75, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p126, out_$i127, out_$p129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p135, out_$i136, out_$p138, out_$p140, out_$i141, out_$i142, out_$p144, out_$i145, out_$p147, out_$p149, out_$i150, out_$i151, out_$p153, out_$i154, out_$p156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$i180, out_$i181, out_$p185, out_$i186, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$p193, out_$i194, out_$i195, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$i202, out_$i203, out_$p182, out_$p183, out_$p204, out_$i205, out_$i206);
    return;

  exit:
    return;
}



procedure hotmod_handler_loop_$bb18(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i8, in_$i69: i32, in_$i70: i1, in_$i73: i64, in_$i74: i1, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i93: i1, in_$i94: i64, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$p75: ref, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p126: ref, in_$i127: i32, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$p135: ref, in_$i136: i32, in_$p138: ref, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$p144: ref, in_$i145: i32, in_$p147: ref, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$p153: ref, in_$i154: i32, in_$p156: ref, in_$i157: i32, in_$p158: ref, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i8, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$i180: i64, in_$i181: i1, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i1, in_$p193: ref, in_$i194: i64, in_$i195: i1, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$i202: i64, in_$i203: i1, in_$p182: ref, in_$p183: ref, in_$p204: ref, in_$i205: i64, in_$i206: i1) returns (out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i8, out_$i69: i32, out_$i70: i1, out_$i73: i64, out_$i74: i1, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i93: i1, out_$i94: i64, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$p75: ref, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p126: ref, out_$i127: i32, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$p135: ref, out_$i136: i32, out_$p138: ref, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$p144: ref, out_$i145: i32, out_$p147: ref, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$p153: ref, out_$i154: i32, out_$p156: ref, out_$i157: i32, out_$p158: ref, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i8, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$i180: i64, out_$i181: i1, out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i1, out_$p193: ref, out_$i194: i64, out_$i195: i1, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$i202: i64, out_$i203: i1, out_$p182: ref, out_$p183: ref, out_$p204: ref, out_$i205: i64, out_$i206: i1);
  modifies $M.97, $M.0, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.5, $M.20, $M.22, $M.9, $M.11, $M.13, $M.15, $M.26, $M.28, $M.30, $M.32, $CurrAddr, $M.43, $M.27, $M.34, $M.29, $M.35, $M.31, $M.36, $M.33, $M.37, $M.46, $M.47, $M.48, $M.104, $M.8, $M.98, $M.96;



implementation hotmod_handler_loop_$bb8(in_$p10: ref, in_$p11: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i64, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$i37: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i64, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$i37: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37 := in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.96, in_$p10);
    goto corral_source_split_6585;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    goto $bb10_dummy;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$i26 := $sge.i32(out_$i25, 0);
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.96, in_$p10);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $M.96 := $store.i32($M.96, in_$p10, out_$i24);
    goto corral_source_split_6603;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i23, 1);
    goto corral_source_split_6602;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.96, in_$p10);
    goto corral_source_split_6601;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p22, 0);
    goto corral_source_split_6600;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(in_$p11, $mul.ref(out_$i21, 1));
    goto corral_source_split_6599;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_6598;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.96, in_$p10);
    goto corral_source_split_6597;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume out_$i37 == 1;
    goto corral_source_split_6609;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_6595;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i35, 32);
    goto corral_source_split_6594;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_6593;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref(out_$i32, 1));
    goto corral_source_split_6591;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i31);
    goto corral_source_split_6590;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i8.i32(out_$i30);
    goto corral_source_split_6589;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.0, out_$p29);
    goto corral_source_split_6588;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref(in_$p11, $mul.ref(out_$i28, 1));
    goto corral_source_split_6587;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_6586;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37 := hotmod_handler_loop_$bb8(in_$p10, in_$p11, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure hotmod_handler_loop_$bb8(in_$p10: ref, in_$p11: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$i30: i8, in_$i31: i32, in_$i32: i64, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$i37: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$i30: i8, out_$i31: i32, out_$i32: i64, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$i37: i1);
  modifies $M.96, $M.0;



implementation parse_str_loop_$bb8(in_$p0: ref, in_$p3: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i27: i32, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i14: i32) returns (out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i27: i32, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i14: i32)
{

  entry:
    out_$p15, out_$i16, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$i14 := in_$p15, in_$i16, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i27, in_$i28, in_$p30, in_$p31, in_$i32, in_$i33, in_$i14;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7019;

  $bb13:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i27;
    goto $bb13_dummy;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, 0);
    goto corral_source_split_7042;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.101, out_$p30);
    goto corral_source_split_7040;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(hotmod_ops, $mul.ref(0, 48)), $mul.ref(out_$i28, 16)), $mul.ref(0, 1));
    goto corral_source_split_7039;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_7038;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i14, 1);
    call {:si_unique_call 1391} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_7037;

  $bb11:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 0);
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_$i20 := strcmp(out_$p15, out_$p19);
    call {:si_unique_call 1390} {:cexpr "tmp"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_7026;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.101, out_$p18);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(out_$i16, 16)), $mul.ref(0, 1));
    goto corral_source_split_7024;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i14);
    goto corral_source_split_7022;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.97, in_$p3);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$i14 := parse_str_loop_$bb8(in_$p0, in_$p3, out_$p15, out_$i16, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i27, out_$i28, out_$p30, out_$p31, out_$i32, out_$i33, out_$i14);
    return;

  exit:
    return;
}



procedure parse_str_loop_$bb8(in_$p0: ref, in_$p3: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i27: i32, in_$i28: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i14: i32) returns (out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i27: i32, out_$i28: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i14: i32);



implementation wait_for_msg_done_loop_$bb1(in_$p0: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i20: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i21: i32, in_$i19: i32, in_vslice_dummy_var_229: i64) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i20: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i21: i32, out_$i19: i32, out_vslice_dummy_var_229: i64)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i20, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i21, out_$i19, out_vslice_dummy_var_229 := in_$i8, in_$i9, in_$i10, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i20, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i21, in_$i19, in_vslice_dummy_var_229;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_7666;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i19;
    goto corral_source_split_7683_dummy;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7683;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i28;
    goto $bb7;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i18;
    goto $bb7;

  SeqInstr_567:
    call {:si_unique_call 1518} {:cexpr "smi_result"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_7675;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    call {:si_unique_call 1517} out_$i18 := devirtbounce.6(out_$p15, out_$p17, 100);
    goto SeqInstr_566;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7674;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_7673;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7672;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_7671;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7670;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} out_vslice_dummy_var_229 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_7669;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb3;

  $bb2:
    assume {:verifier.code 0} true;
    assume out_$i9 == 1;
    goto $bb3;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb4;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i8, 1);
    goto corral_source_split_7667;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i8, 2);
    goto corral_source_split_7678;

  $bb4:
    assume !(out_$i9 == 1);
    goto corral_source_split_7677;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_570:
    call {:si_unique_call 1520} {:cexpr "smi_result"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_7691;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    call {:si_unique_call 1519} out_$i28 := devirtbounce.6(out_$p25, out_$p27, 0);
    goto SeqInstr_569;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(16, 1));
    goto corral_source_split_7690;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_7689;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7688;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_7687;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 616)), $mul.ref(24, 1));
    goto corral_source_split_7686;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_7685;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i8;
    assume true;
    goto $bb8;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i8, 0);
    goto corral_source_split_7681;

  $bb6:
    assume !(out_$i10 == 1);
    goto corral_source_split_7680;

  corral_source_split_7683_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i20, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i21, out_$i19, out_vslice_dummy_var_229 := wait_for_msg_done_loop_$bb1(in_$p0, out_$i8, out_$i9, out_$i10, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i20, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i21, out_$i19, out_vslice_dummy_var_229);
    return;

  exit:
    return;
}



procedure wait_for_msg_done_loop_$bb1(in_$p0: ref, in_$i8: i32, in_$i9: i1, in_$i10: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i20: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i21: i32, in_$i19: i32, in_vslice_dummy_var_229: i64) returns (out_$i8: i32, out_$i9: i1, out_$i10: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i20: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i21: i32, out_$i19: i32, out_vslice_dummy_var_229: i64);
  modifies $M.0, $M.5, $CurrAddr, $M.17, $M.20, $M.22, $M.43, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16;



implementation dmi_find_bmc_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p4: ref, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p4: ref, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p4, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29 := in_$p5, in_$p6, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$i12, in_$i13, in_$p4, in_cmdloc_dummy_var_28, in_cmdloc_dummy_var_29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8481;

  $bb9:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p11;
    goto $bb9_dummy;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, 0);
    goto corral_source_split_8496;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_8495;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} out_$p11 := dmi_find_device($sub.i32(0, 1), $0.ref, out_$p4);
    goto corral_source_split_8494;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} try_init_dmi(in_$p0);
    goto corral_source_split_8492;

  $bb6:
    assume out_$i10 == 1;
    goto corral_source_split_8491;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i9, 0);
    goto corral_source_split_8489;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} out_$i9 := decode_dmi(out_$p8, in_$p0);
    call {:si_unique_call 1599} {:cexpr "rv"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_8488;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_8487;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_8486;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8485;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_28 := $M.121;
    call {:si_unique_call 1597} out_cmdloc_dummy_var_29 := $memset.i8(out_cmdloc_dummy_var_28, out_$p5, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.121 := out_cmdloc_dummy_var_29;
    goto corral_source_split_8484;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_8483;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p4, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29 := dmi_find_bmc_loop_$bb4(in_$p0, out_$p5, out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p4, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29);
    return;

  exit:
    return;
}



procedure dmi_find_bmc_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p4: ref, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p4: ref, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8);
  modifies $M.0, $CurrAddr, $M.121;



implementation spmi_find_bmc_loop_$bb11(in_$p0: ref, in_$p5: ref, in_$i8: i32, in_$p9: ref, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_vslice_dummy_var_243: i32) returns (out_$i8: i32, out_$p9: ref, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_vslice_dummy_var_243: i32)
{

  entry:
    out_$i8, out_$p9, out_$i11, out_$i12, out_$i13, out_$i14, out_vslice_dummy_var_243 := in_$i8, in_$p9, in_$i11, in_$i12, in_$i13, in_$i14, in_vslice_dummy_var_243;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := out_$i11;
    goto $bb14_dummy;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_8524;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} out_$i13 := acpi_get_table(.str.25, out_$i12, in_$p5);
    call {:si_unique_call 1608} {:cexpr "status"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_8523;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i11, 1);
    goto corral_source_split_8522;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1606} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_8521;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} out_vslice_dummy_var_243 := try_init_spmi(out_$p9);
    goto corral_source_split_8520;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.123, in_$p0);
    goto corral_source_split_8519;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i8, out_$p9, out_$i11, out_$i12, out_$i13, out_$i14, out_vslice_dummy_var_243 := spmi_find_bmc_loop_$bb11(in_$p0, in_$p5, out_$i8, out_$p9, out_$i11, out_$i12, out_$i13, out_$i14, out_vslice_dummy_var_243);
    return;

  exit:
    return;
}



procedure spmi_find_bmc_loop_$bb11(in_$p0: ref, in_$p5: ref, in_$i8: i32, in_$p9: ref, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_vslice_dummy_var_243: i32) returns (out_$i8: i32, out_$p9: ref, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_vslice_dummy_var_243: i32);
  modifies $M.0, $CurrAddr;



implementation default_find_bmc_loop_$bb4(in_$i2: i32, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$i6: i1, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i64, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$i48: i64, in_$p50: ref, in_$i51: i32, in_$i52: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_vslice_dummy_var_244: i32) returns (out_$i2: i32, out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$i6: i1, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i64, out_$p20: ref, out_$p22: ref, out_$p24: ref, out_$p26: ref, out_$p28: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p47: ref, out_$i48: i64, out_$p50: ref, out_$i51: i32, out_$i52: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_vslice_dummy_var_244: i32)
{

  entry:
    out_$i2, out_$p3, out_$p4, out_$i5, out_$i6, out_$p7, out_$i8, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p22, out_$p24, out_$p26, out_$p28, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p47, out_$i48, out_$p50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_vslice_dummy_var_244 := in_$i2, in_$p3, in_$p4, in_$i5, in_$i6, in_$p7, in_$i8, in_$p10, in_$i11, in_$p12, in_$p13, in_$i14, in_$p16, in_$i17, in_$i18, in_$p20, in_$p22, in_$p24, in_$p26, in_$p28, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p47, in_$i48, in_$p50, in_$i51, in_$i52, in_$p54, in_$i55, in_$i56, in_vslice_dummy_var_244;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb18:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := out_$i51;
    goto $bb18_dummy;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 0);
    goto corral_source_split_8597;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.124, out_$p54);
    goto corral_source_split_8596;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(out_$i52, 8)), $mul.ref(4, 1));
    goto corral_source_split_8595;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i51);
    goto corral_source_split_8594;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i51 := $add.i32(out_$i2, 1);
    call {:si_unique_call 1617} {:cexpr "i"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_8593;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} kfree(out_$p50);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_600:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} out_vslice_dummy_var_244 := printk.ref.ref.ref.i64(.str.92, out_$p39, out_$p45, out_$i48);
    goto corral_source_split_8589;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.0, out_$p47);
    goto corral_source_split_8588;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8587;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.103, out_$p44);
    goto corral_source_split_8586;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(addr_space_to_str, $mul.ref(0, 16)), $mul.ref(out_$i43, 8));
    goto corral_source_split_8585;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    goto corral_source_split_8584;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_8583;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8582;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.25, out_$p38);
    goto corral_source_split_8581;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(si_to_str, $mul.ref(0, 24)), $mul.ref(out_$i37, 8));
    goto corral_source_split_8580;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i32.i64(out_$i36);
    goto corral_source_split_8579;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_8578;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8577;

  $bb14:
    assume out_$i34 == 1;
    goto corral_source_split_8576;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_8571;

  SeqInstr_597:
    call {:si_unique_call 1613} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_8570;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} out_$i33 := try_smi_init(out_$p4);
    goto SeqInstr_596;

  $bb12:
    assume out_$i32 == 1;
    goto corral_source_split_8569;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 0);
    goto corral_source_split_8567;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} out_$i31 := add_smi(out_$p4);
    call {:si_unique_call 1611} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_8566;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p30, 0);
    goto corral_source_split_8565;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(32, 1));
    goto corral_source_split_8564;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p28, 1);
    goto corral_source_split_8563;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(28, 1));
    goto corral_source_split_8562;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p26, 1);
    goto corral_source_split_8561;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(24, 1));
    goto corral_source_split_8560;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p24, $0.ref);
    goto corral_source_split_8559;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(16, 1));
    goto corral_source_split_8558;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p22, 0);
    goto corral_source_split_8557;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(36, 1));
    goto corral_source_split_8556;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p20, out_$i18);
    goto corral_source_split_8555;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(216, 1)), $mul.ref(40, 1));
    goto corral_source_split_8554;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i17);
    goto corral_source_split_8553;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.124, out_$p16);
    goto corral_source_split_8552;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(out_$i14, 8)), $mul.ref(4, 1));
    goto corral_source_split_8551;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i2);
    goto corral_source_split_8550;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p13, port_setup);
    goto corral_source_split_8549;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(264, 1));
    goto corral_source_split_8548;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p12, out_$i11);
    goto corral_source_split_8547;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(32, 1));
    goto corral_source_split_8546;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.125, out_$p10);
    goto corral_source_split_8545;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(ipmi_defaults, $mul.ref(0, 32)), $mul.ref(out_$i8, 8)), $mul.ref(0, 1));
    goto corral_source_split_8544;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i2);
    goto corral_source_split_8543;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p7, 8);
    goto corral_source_split_8542;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p4, $mul.ref(0, 616)), $mul.ref(300, 1));
    goto corral_source_split_8541;

  $bb9:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i64(out_$i5, 0);
    goto corral_source_split_8537;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    out_$i5 := $p2i.ref.i64(out_$p4);
    goto corral_source_split_8536;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    out_$p4 := $bitcast.ref.ref(out_$p3);
    goto corral_source_split_8535;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} out_$p3 := ldv_kzalloc_30(616, 208);
    goto corral_source_split_8534;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} cleanup_one_si(out_$p4);
    goto SeqInstr_599;

  $bb15:
    assume !(out_$i34 == 1);
    goto corral_source_split_8591;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_8574;

  $bb13:
    assume !(out_$i32 == 1);
    goto corral_source_split_8573;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i2, out_$p3, out_$p4, out_$i5, out_$i6, out_$p7, out_$i8, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p22, out_$p24, out_$p26, out_$p28, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p47, out_$i48, out_$p50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_vslice_dummy_var_244 := default_find_bmc_loop_$bb4(out_$i2, out_$p3, out_$p4, out_$i5, out_$i6, out_$p7, out_$i8, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p16, out_$i17, out_$i18, out_$p20, out_$p22, out_$p24, out_$p26, out_$p28, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p47, out_$i48, out_$p50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_vslice_dummy_var_244);
    return;

  exit:
    return;
}



procedure default_find_bmc_loop_$bb4(in_$i2: i32, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$i6: i1, in_$p7: ref, in_$i8: i64, in_$p10: ref, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$i17: i32, in_$i18: i64, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p41: ref, in_$i42: i32, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$i48: i64, in_$p50: ref, in_$i51: i32, in_$i52: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_vslice_dummy_var_244: i32) returns (out_$i2: i32, out_$p3: ref, out_$p4: ref, out_$i5: i64, out_$i6: i1, out_$p7: ref, out_$i8: i64, out_$p10: ref, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$i17: i32, out_$i18: i64, out_$p20: ref, out_$p22: ref, out_$p24: ref, out_$p26: ref, out_$p28: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p41: ref, out_$i42: i32, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p47: ref, out_$i48: i64, out_$p50: ref, out_$i51: i32, out_$i52: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_vslice_dummy_var_244: i32);
  modifies $M.0, $M.104, $M.17, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.5, $M.20, $M.22, $M.43, $CurrAddr, $M.27, $M.34, $M.26, $M.29, $M.35, $M.28, $M.31, $M.36, $M.30, $M.33, $M.37, $M.32, assertsPassed, $M.46, $M.47, $M.48;


