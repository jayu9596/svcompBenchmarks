var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: i32;

var $M.3: i32;

var $M.4: [ref]i8;

var $M.5: i32;

var $M.6: ref;

var $M.7: i32;

var $M.8: ref;

var $M.9: i32;

var $M.10: ref;

var $M.11: i32;

var $M.12: ref;

var $M.13: [ref]i32;

var $M.14: [ref]i32;

var $M.18: i32;

var $M.19: [ref]i64;

var $M.20: [ref]i64;

var $M.21: [ref]i8;

var $M.22: [ref]i8;

var $M.23: [ref]i64;

var $M.24: [ref]i64;

var $M.25: [ref]i64;

var $M.26: [ref]i64;

var $M.27: [ref]i64;

var $M.28: [ref]i64;

var $M.34: [ref]i8;

var $M.35: i32;

var $M.36: [ref]i8;

var $M.37: [ref]i32;

var $M.38: ref;

var $M.39: [ref]i32;

var $M.40: i64;

var $M.41: [ref]i8;

var $M.42: [ref]i8;

var $M.43: [ref]i8;

var $M.44: i8;

var $M.45: i8;

var $M.46: [ref]i8;

var $M.47: [ref]i32;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i8;

var $M.51: i32;

var $M.52: i32;

var $M.53: ref;

var $M.54: i64;

var $M.55: i64;

var $M.56: ref;

var $M.57: [ref]i8;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i8;

var $M.62: [ref]i8;

var $M.63: i64;

var $M.64: [ref]ref;

var $M.65: [ref]i8;

var $M.66: [ref]i32;

var $M.67: [ref]i64;

var $M.68: [ref]i32;

var $M.69: [ref]i32;

var $M.70: ref;

var $M.71: [ref]i16;

var $M.72: [ref]i32;

var $M.73: ref;

var $M.74: ref;

var $M.75: [ref]i64;

var $M.76: [ref]i8;

var $M.77: ref;

var $M.78: ref;

var $M.79: ref;

var $M.80: ref;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: ref;

var $M.99: ref;

var $M.100: ref;

var $M.101: ref;

var $M.102: ref;

var $M.103: ref;

var $M.104: ref;

var $M.105: ref;

var $M.106: ref;

var $M.107: ref;

var $M.108: ref;

var $M.109: ref;

var $M.110: i32;

var $M.111: i32;

var $M.112: i32;

var $M.113: i32;

var $M.114: ref;

var $M.115: i32;

var $M.116: i32;

var $M.117: i32;

var $M.118: i32;

var $M.119: i32;

var $M.120: i32;

var $M.121: i32;

var $M.122: i32;

var $M.123: i32;

var $M.124: i32;

var $M.126: i32;

var $M.127: i32;

var $M.128: i32;

var $M.129: i32;

var $M.130: i32;

var $M.131: i32;

var $M.132: i32;

var $M.133: i32;

var $M.138: [ref]i32;

var $M.139: [ref]i32;

var $M.141: [ref]i8;

var $M.142: [ref]i8;

var $M.143: [ref]i8;

var $M.144: [ref]i8;

var $M.145: [ref]i8;

var $M.174: [ref]i8;

var $M.175: [ref]i8;

var $M.176: [ref]i8;

var $M.177: [ref]i8;

var $M.178: [ref]i8;

var $M.179: [ref]i8;

var $M.180: [ref]i8;

var $M.181: [ref]i8;

var $M.182: [ref]i8;

var $M.183: [ref]i8;

var $M.184: [ref]i8;

var $M.185: [ref]i8;

var $M.186: [ref]i8;

var $M.187: [ref]i8;

var $M.188: [ref]i8;

var $M.189: [ref]i8;

var $M.190: [ref]i8;

var $M.191: [ref]i8;

var $M.192: [ref]i8;

var $M.193: [ref]i8;

var $M.194: [ref]i8;

var $M.195: [ref]i8;

var $M.196: [ref]i8;

var $M.197: [ref]i8;

var $M.198: [ref]i8;

var $M.199: [ref]i8;

var $M.200: [ref]i8;

var $M.208: [ref]i8;

var $M.209: [ref]i8;

var $M.210: [ref]i8;

var $M.211: [ref]i8;

var $M.212: [ref]i8;

var $M.290: [ref]i8;

var $M.291: [ref]i8;

var $M.292: [ref]i8;

var $M.293: [ref]i8;

var $M.294: [ref]i8;

var $M.295: [ref]i8;

var $M.296: [ref]i8;

var $M.297: [ref]i8;

var $M.298: [ref]i8;

var $M.299: [ref]i8;

var $M.300: [ref]i8;

var $M.301: [ref]i8;

var $M.302: [ref]i8;

var $M.303: [ref]i8;

var $M.304: [ref]i8;

var $M.305: [ref]i8;

var $M.306: [ref]i8;

var $M.307: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 824184);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const visorbus_type: ref;

axiom visorbus_type == $sub.ref(0, 2212);

const .str: ref;

axiom .str == $sub.ref(0, 3245);

const {:count 2} visorbus_bus_groups: ref;

axiom visorbus_bus_groups == $sub.ref(0, 4285);

const {:count 25} __kstrtab_visor_periodic_work_stop: ref;

axiom __kstrtab_visor_periodic_work_stop == $sub.ref(0, 5334);

const {:count 26} __kstrtab_visor_periodic_work_start: ref;

axiom __kstrtab_visor_periodic_work_start == $sub.ref(0, 6384);

const {:count 31} __kstrtab_visor_periodic_work_nextperiod: ref;

axiom __kstrtab_visor_periodic_work_nextperiod == $sub.ref(0, 7439);

const {:count 28} __kstrtab_visor_periodic_work_destroy: ref;

axiom __kstrtab_visor_periodic_work_destroy == $sub.ref(0, 8491);

const {:count 27} __kstrtab_visor_periodic_work_create: ref;

axiom __kstrtab_visor_periodic_work_create == $sub.ref(0, 9542);

const visorchipset_fops: ref;

axiom visorchipset_fops == $sub.ref(0, 10790);

const file_cdev: ref;

axiom file_cdev == $sub.ref(0, 12150);

const file_controlvm_channel: ref;

axiom file_controlvm_channel == $sub.ref(0, 13182);

const major_dev: ref;

axiom major_dev == $sub.ref(0, 14210);

const visorchipset_major: ref;

axiom visorchipset_major == $sub.ref(0, 15238);

const controlvm_payload_info: ref;

axiom controlvm_payload_info == $sub.ref(0, 16286);

const {:count 2} unisys_device_ids: ref;

axiom unisys_device_ids == $sub.ref(0, 17358);

const unisys_acpi_driver: ref;

axiom unisys_acpi_driver == $sub.ref(0, 18710);

const g_devicechangestate_packet: ref;

axiom g_devicechangestate_packet == $sub.ref(0, 19814);

const parahotplug_request_list: ref;

axiom parahotplug_request_list == $sub.ref(0, 20854);

const parahotplug_request_list_lock: ref;

axiom parahotplug_request_list_lock == $sub.ref(0, 21950);

const dev_attr_deviceenabled: ref;

axiom dev_attr_deviceenabled == $sub.ref(0, 23022);

const dev_attr_devicedisabled: ref;

axiom dev_attr_devicedisabled == $sub.ref(0, 24094);

const {:count 3} visorchipset_parahotplug_attrs: ref;

axiom visorchipset_parahotplug_attrs == $sub.ref(0, 25142);

const visorchipset_parahotplug_group: ref;

axiom visorchipset_parahotplug_group == $sub.ref(0, 26198);

const dev_attr_chipsetready: ref;

axiom dev_attr_chipsetready == $sub.ref(0, 27270);

const {:count 2} visorchipset_guest_attrs: ref;

axiom visorchipset_guest_attrs == $sub.ref(0, 28310);

const visorchipset_guest_group: ref;

axiom visorchipset_guest_group == $sub.ref(0, 29366);

const dev_attr_remaining_steps: ref;

axiom dev_attr_remaining_steps == $sub.ref(0, 30438);

const dev_attr_textid: ref;

axiom dev_attr_textid == $sub.ref(0, 31510);

const dev_attr_error: ref;

axiom dev_attr_error == $sub.ref(0, 32582);

const dev_attr_boottotool: ref;

axiom dev_attr_boottotool == $sub.ref(0, 33654);

const dev_attr_toolaction: ref;

axiom dev_attr_toolaction == $sub.ref(0, 34726);

const {:count 6} visorchipset_install_attrs: ref;

axiom visorchipset_install_attrs == $sub.ref(0, 35798);

const visorchipset_install_group: ref;

axiom visorchipset_install_group == $sub.ref(0, 36854);

const {:count 4} visorchipset_dev_groups: ref;

axiom visorchipset_dev_groups == $sub.ref(0, 37910);

const visorchipset_platform_device: ref;

axiom visorchipset_platform_device == $sub.ref(0, 40414);

const controlvm_payload_bytes_buffered: ref;

axiom controlvm_payload_bytes_buffered == $sub.ref(0, 41446);

const most_recent_message_jiffies: ref;

axiom most_recent_message_jiffies == $sub.ref(0, 42478);

const controlvm_pending_msg: ref;

axiom controlvm_pending_msg == $sub.ref(0, 43630);

const controlvm_pending_msg_valid: ref;

axiom controlvm_pending_msg_valid == $sub.ref(0, 44655);

const {:count 2} chipset_events: ref;

axiom chipset_events == $sub.ref(0, 45681);

const g_chipset_msg_hdr: ref;

axiom g_chipset_msg_hdr == $sub.ref(0, 46753);

const visorchipset_holdchipsetready: ref;

axiom visorchipset_holdchipsetready == $sub.ref(0, 47781);

const periodic_controlvm_work: ref;

axiom periodic_controlvm_work == $sub.ref(0, 49029);

const periodic_controlvm_workqueue: ref;

axiom periodic_controlvm_workqueue == $sub.ref(0, 50061);

const poll_jiffies: ref;

axiom poll_jiffies == $sub.ref(0, 51093);

const segment_state_running: ref;

axiom segment_state_running == $sub.ref(0, 52118);

const segment_state_standby: ref;

axiom segment_state_standby == $sub.ref(0, 53143);

const controlvm_channel: ref;

axiom controlvm_channel == $sub.ref(0, 54175);

const visorchipset_visorbusregwait: ref;

axiom visorchipset_visorbusregwait == $sub.ref(0, 55203);

const {:count 29} __kstrtab_visorchipset_register_busdev: ref;

axiom __kstrtab_visorchipset_register_busdev == $sub.ref(0, 56256);

const busdev_responders: ref;

axiom busdev_responders == $sub.ref(0, 57328);

const notifier_lock: ref;

axiom notifier_lock == $sub.ref(0, 58448);

const {:count 26} __kstrtab_visorbus_get_device_by_id: ref;

axiom __kstrtab_visorbus_get_device_by_id == $sub.ref(0, 59498);

const {:count 19} __kstrtab_visorchannel_debug: ref;

axiom __kstrtab_visorchannel_debug == $sub.ref(0, 60541);

const {:count 35} __kstrtab_visorchannel_signalqueue_max_slots: ref;

axiom __kstrtab_visorchannel_signalqueue_max_slots == $sub.ref(0, 61600);

const {:count 37} __kstrtab_visorchannel_signalqueue_slots_avail: ref;

axiom __kstrtab_visorchannel_signalqueue_slots_avail == $sub.ref(0, 62661);

const {:count 26} __kstrtab_visorchannel_signalinsert: ref;

axiom __kstrtab_visorchannel_signalinsert == $sub.ref(0, 63711);

const {:count 26} __kstrtab_visorchannel_signalremove: ref;

axiom __kstrtab_visorchannel_signalremove == $sub.ref(0, 64761);

const {:count 24} __kstrtab_visorchannel_get_header: ref;

axiom __kstrtab_visorchannel_get_header == $sub.ref(0, 65809);

const {:count 19} __kstrtab_visorchannel_clear: ref;

axiom __kstrtab_visorchannel_clear == $sub.ref(0, 66852);

const {:count 19} __kstrtab_visorchannel_write: ref;

axiom __kstrtab_visorchannel_write == $sub.ref(0, 67895);

const {:count 18} __kstrtab_visorchannel_read: ref;

axiom __kstrtab_visorchannel_read == $sub.ref(0, 68937);

const {:count 22} __kstrtab_visorchannel_get_uuid: ref;

axiom __kstrtab_visorchannel_get_uuid == $sub.ref(0, 69983);

const {:count 33} __kstrtab_visorchannel_set_clientpartition: ref;

axiom __kstrtab_visorchannel_set_clientpartition == $sub.ref(0, 71040);

const {:count 33} __kstrtab_visorchannel_get_clientpartition: ref;

axiom __kstrtab_visorchannel_get_clientpartition == $sub.ref(0, 72097);

const {:count 20} __kstrtab_visorchannel_zoneid: ref;

axiom __kstrtab_visorchannel_zoneid == $sub.ref(0, 73141);

const {:count 16} __kstrtab_visorchannel_id: ref;

axiom __kstrtab_visorchannel_id == $sub.ref(0, 74181);

const {:count 21} __kstrtab_visorchannel_uuid_id: ref;

axiom __kstrtab_visorchannel_uuid_id == $sub.ref(0, 75226);

const {:count 24} __kstrtab_visorchannel_get_nbytes: ref;

axiom __kstrtab_visorchannel_get_nbytes == $sub.ref(0, 76274);

const {:count 26} __kstrtab_visorchannel_get_physaddr: ref;

axiom __kstrtab_visorchannel_get_physaddr == $sub.ref(0, 77324);

const {:count 21} __kstrtab_visorchannel_destroy: ref;

axiom __kstrtab_visorchannel_destroy == $sub.ref(0, 78369);

const {:count 30} __kstrtab_visorchannel_create_with_lock: ref;

axiom __kstrtab_visorchannel_create_with_lock == $sub.ref(0, 79423);

const {:count 20} __kstrtab_visorchannel_create: ref;

axiom __kstrtab_visorchannel_create == $sub.ref(0, 80467);

const spar_video_guid: ref;

axiom spar_video_guid == $sub.ref(0, 81507);

const spar_vbus_channel_protocol_uuid: ref;

axiom spar_vbus_channel_protocol_uuid == $sub.ref(0, 82547);

const dev_attr_client_bus_info: ref;

axiom dev_attr_client_bus_info == $sub.ref(0, 83619);

const dev_attr_channel_id: ref;

axiom dev_attr_channel_id == $sub.ref(0, 84691);

const dev_attr_channel_bytes: ref;

axiom dev_attr_channel_bytes == $sub.ref(0, 85763);

const dev_attr_channel_addr: ref;

axiom dev_attr_channel_addr == $sub.ref(0, 86835);

const dev_attr_partition_name: ref;

axiom dev_attr_partition_name == $sub.ref(0, 87907);

const dev_attr_partition_guid: ref;

axiom dev_attr_partition_guid == $sub.ref(0, 88979);

const dev_attr_partition_handle: ref;

axiom dev_attr_partition_handle == $sub.ref(0, 90051);

const {:count 8} dev_attrs: ref;

axiom dev_attrs == $sub.ref(0, 91139);

const dev_attr_grp: ref;

axiom dev_attr_grp == $sub.ref(0, 92195);

const {:count 2} visorbus_groups: ref;

axiom visorbus_groups == $sub.ref(0, 93235);

const dev_attr_typename: ref;

axiom dev_attr_typename == $sub.ref(0, 94307);

const dev_attr_zoneguid: ref;

axiom dev_attr_zoneguid == $sub.ref(0, 95379);

const dev_attr_typeguid: ref;

axiom dev_attr_typeguid == $sub.ref(0, 96451);

const dev_attr_clientpartition: ref;

axiom dev_attr_clientpartition == $sub.ref(0, 97523);

const dev_attr_nbytes: ref;

axiom dev_attr_nbytes == $sub.ref(0, 98595);

const dev_attr_physaddr: ref;

axiom dev_attr_physaddr == $sub.ref(0, 99667);

const {:count 6} channel_attrs: ref;

axiom channel_attrs == $sub.ref(0, 100739);

const channel_attr_grp: ref;

axiom channel_attr_grp == $sub.ref(0, 101795);

const {:count 2} visorbus_dev_groups: ref;

axiom visorbus_dev_groups == $sub.ref(0, 102835);

const bus_count: ref;

axiom bus_count == $sub.ref(0, 103867);

const list_all_bus_instances: ref;

axiom list_all_bus_instances == $sub.ref(0, 104907);

const list_all_device_instances: ref;

axiom list_all_device_instances == $sub.ref(0, 105947);

const chipset_notifiers: ref;

axiom chipset_notifiers == $sub.ref(0, 107019);

const {:count 36} __kstrtab_visorbus_disable_channel_interrupts: ref;

axiom __kstrtab_visorbus_disable_channel_interrupts == $sub.ref(0, 108079);

const {:count 35} __kstrtab_visorbus_enable_channel_interrupts: ref;

axiom __kstrtab_visorbus_enable_channel_interrupts == $sub.ref(0, 109138);

const {:count 25} __kstrtab_visorbus_registerdevnode: ref;

axiom __kstrtab_visorbus_registerdevnode == $sub.ref(0, 110187);

const devmajorminor_sysfs_ops: ref;

axiom devmajorminor_sysfs_ops == $sub.ref(0, 111227);

const devmajorminor_kobj_type: ref;

axiom devmajorminor_kobj_type == $sub.ref(0, 112291);

const {:count 23} __kstrtab_visorbus_clear_channel: ref;

axiom __kstrtab_visorbus_clear_channel == $sub.ref(0, 113338);

const {:count 23} __kstrtab_visorbus_write_channel: ref;

axiom __kstrtab_visorbus_write_channel == $sub.ref(0, 114385);

const {:count 22} __kstrtab_visorbus_read_channel: ref;

axiom __kstrtab_visorbus_read_channel == $sub.ref(0, 115431);

const {:count 33} __kstrtab_visorbus_unregister_visor_driver: ref;

axiom __kstrtab_visorbus_unregister_visor_driver == $sub.ref(0, 116488);

const {:count 31} __kstrtab_visorbus_register_visor_driver: ref;

axiom __kstrtab_visorbus_register_visor_driver == $sub.ref(0, 117543);

const visorbus_forcenomatch: ref;

axiom visorbus_forcenomatch == $sub.ref(0, 118571);

const visorbus_forcematch: ref;

axiom visorbus_forcematch == $sub.ref(0, 119599);

const bus_attr_version: ref;

axiom bus_attr_version == $sub.ref(0, 120671);

const {:count 2} visorbus_bus_attrs: ref;

axiom visorbus_bus_attrs == $sub.ref(0, 121711);

const visorbus_bus_group: ref;

axiom visorbus_bus_group == $sub.ref(0, 122767);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 123795);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 124823);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 125851);

const busdev_notifiers: ref;

axiom busdev_notifiers == $sub.ref(0, 126923);

const visorbusregistered: ref;

axiom visorbusregistered == $sub.ref(0, 127951);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 128979);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 130007);

const dev_attr_textid_group0: ref;

axiom dev_attr_textid_group0 == $sub.ref(0, 131039);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 132067);

const dev_attr_error_group1: ref;

axiom dev_attr_error_group1 == $sub.ref(0, 133099);

const busdev_responders_group0: ref;

axiom busdev_responders_group0 == $sub.ref(0, 134131);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 135159);

const dev_attr_remaining_steps_group0: ref;

axiom dev_attr_remaining_steps_group0 == $sub.ref(0, 136191);

const dev_attr_error_group0: ref;

axiom dev_attr_error_group0 == $sub.ref(0, 137223);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 138251);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 139279);

const unisys_acpi_driver_group0: ref;

axiom unisys_acpi_driver_group0 == $sub.ref(0, 140311);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 141343);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 142371);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 143399);

const ldv_work_struct_3_0: ref;

axiom ldv_work_struct_3_0 == $sub.ref(0, 144431);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 145459);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 146487);

const ldv_work_3_1: ref;

axiom ldv_work_3_1 == $sub.ref(0, 147515);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 148543);

const ldv_work_struct_3_2: ref;

axiom ldv_work_struct_3_2 == $sub.ref(0, 149575);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 150607);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 151635);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 152663);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 153695);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 154727);

const ldv_work_struct_3_3: ref;

axiom ldv_work_struct_3_3 == $sub.ref(0, 155759);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 156787);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 157815);

const ldv_work_3_3: ref;

axiom ldv_work_3_3 == $sub.ref(0, 158843);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 159871);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 160903);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 161931);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 162963);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 163995);

const dev_attr_toolaction_group1: ref;

axiom dev_attr_toolaction_group1 == $sub.ref(0, 165027);

const ldv_work_3_0: ref;

axiom ldv_work_3_0 == $sub.ref(0, 166055);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 167083);

const ldv_work_3_2: ref;

axiom ldv_work_3_2 == $sub.ref(0, 168111);

const visorchipset_fops_group1: ref;

axiom visorchipset_fops_group1 == $sub.ref(0, 169143);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 170171);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 171199);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 172227);

const dev_attr_toolaction_group0: ref;

axiom dev_attr_toolaction_group0 == $sub.ref(0, 173259);

const dev_attr_remaining_steps_group1: ref;

axiom dev_attr_remaining_steps_group1 == $sub.ref(0, 174291);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 175319);

const visorchipset_fops_group2: ref;

axiom visorchipset_fops_group2 == $sub.ref(0, 176351);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 177379);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 178411);

const dev_attr_boottotool_group0: ref;

axiom dev_attr_boottotool_group0 == $sub.ref(0, 179443);

const ldv_work_struct_3_1: ref;

axiom ldv_work_struct_3_1 == $sub.ref(0, 180475);

const dev_attr_textid_group1: ref;

axiom dev_attr_textid_group1 == $sub.ref(0, 181507);

const dev_attr_boottotool_group1: ref;

axiom dev_attr_boottotool_group1 == $sub.ref(0, 182539);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 183567);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 184595);

const clientbus_driverinfo: ref;

axiom clientbus_driverinfo == $sub.ref(0, 185875);

const chipset_driverinfo: ref;

axiom chipset_driverinfo == $sub.ref(0, 187155);

const chipset_responders: ref;

axiom chipset_responders == $sub.ref(0, 188227);

const periodic_dev_workqueue: ref;

axiom periodic_dev_workqueue == $sub.ref(0, 189259);

const periodic_test_workqueue: ref;

axiom periodic_test_workqueue == $sub.ref(0, 190291);

const periodic_work: ref;

axiom periodic_work == $sub.ref(0, 191539);

const ldv_state_variable_31: ref;

axiom ldv_state_variable_31 == $sub.ref(0, 192567);

const ldv_state_variable_32: ref;

axiom ldv_state_variable_32 == $sub.ref(0, 193595);

const visorbus_type_group0: ref;

axiom visorbus_type_group0 == $sub.ref(0, 194627);

const ldv_state_variable_18: ref;

axiom ldv_state_variable_18 == $sub.ref(0, 195655);

const devmajorminor_sysfs_ops_group1: ref;

axiom devmajorminor_sysfs_ops_group1 == $sub.ref(0, 196687);

const ldv_state_variable_28: ref;

axiom ldv_state_variable_28 == $sub.ref(0, 197715);

const ldv_state_variable_26: ref;

axiom ldv_state_variable_26 == $sub.ref(0, 198743);

const devmajorminor_sysfs_ops_group0: ref;

axiom devmajorminor_sysfs_ops_group0 == $sub.ref(0, 199775);

const ldv_state_variable_25: ref;

axiom ldv_state_variable_25 == $sub.ref(0, 200803);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 201831);

const ldv_state_variable_23: ref;

axiom ldv_state_variable_23 == $sub.ref(0, 202859);

const ldv_state_variable_24: ref;

axiom ldv_state_variable_24 == $sub.ref(0, 203887);

const ldv_state_variable_27: ref;

axiom ldv_state_variable_27 == $sub.ref(0, 204915);

const ldv_state_variable_19: ref;

axiom ldv_state_variable_19 == $sub.ref(0, 205943);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 206971);

const chipset_notifiers_group0: ref;

axiom chipset_notifiers_group0 == $sub.ref(0, 208003);

const ldv_state_variable_29: ref;

axiom ldv_state_variable_29 == $sub.ref(0, 209031);

const ldv_state_variable_22: ref;

axiom ldv_state_variable_22 == $sub.ref(0, 210059);

const ldv_state_variable_21: ref;

axiom ldv_state_variable_21 == $sub.ref(0, 211087);

const ldv_state_variable_30: ref;

axiom ldv_state_variable_30 == $sub.ref(0, 212115);

const ldv_state_variable_20: ref;

axiom ldv_state_variable_20 == $sub.ref(0, 213143);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 214171);

const __ksymtab_visor_periodic_work_stop: ref;

axiom __ksymtab_visor_periodic_work_stop == $sub.ref(0, 215211);

const __ksymtab_visor_periodic_work_start: ref;

axiom __ksymtab_visor_periodic_work_start == $sub.ref(0, 216251);

const __ksymtab_visor_periodic_work_nextperiod: ref;

axiom __ksymtab_visor_periodic_work_nextperiod == $sub.ref(0, 217291);

const __ksymtab_visor_periodic_work_destroy: ref;

axiom __ksymtab_visor_periodic_work_destroy == $sub.ref(0, 218331);

const __ksymtab_visor_periodic_work_create: ref;

axiom __ksymtab_visor_periodic_work_create == $sub.ref(0, 219371);

const __ksymtab_visorchipset_register_busdev: ref;

axiom __ksymtab_visorchipset_register_busdev == $sub.ref(0, 220411);

const __ksymtab_visorbus_get_device_by_id: ref;

axiom __ksymtab_visorbus_get_device_by_id == $sub.ref(0, 221451);

const __ksymtab_visorchannel_debug: ref;

axiom __ksymtab_visorchannel_debug == $sub.ref(0, 222491);

const __ksymtab_visorchannel_signalqueue_max_slots: ref;

axiom __ksymtab_visorchannel_signalqueue_max_slots == $sub.ref(0, 223531);

const __ksymtab_visorchannel_signalqueue_slots_avail: ref;

axiom __ksymtab_visorchannel_signalqueue_slots_avail == $sub.ref(0, 224571);

const __ksymtab_visorchannel_signalinsert: ref;

axiom __ksymtab_visorchannel_signalinsert == $sub.ref(0, 225611);

const __ksymtab_visorchannel_signalremove: ref;

axiom __ksymtab_visorchannel_signalremove == $sub.ref(0, 226651);

const __ksymtab_visorchannel_get_header: ref;

axiom __ksymtab_visorchannel_get_header == $sub.ref(0, 227691);

const __ksymtab_visorchannel_clear: ref;

axiom __ksymtab_visorchannel_clear == $sub.ref(0, 228731);

const __ksymtab_visorchannel_write: ref;

axiom __ksymtab_visorchannel_write == $sub.ref(0, 229771);

const __ksymtab_visorchannel_read: ref;

axiom __ksymtab_visorchannel_read == $sub.ref(0, 230811);

const __ksymtab_visorchannel_get_uuid: ref;

axiom __ksymtab_visorchannel_get_uuid == $sub.ref(0, 231851);

const __ksymtab_visorchannel_set_clientpartition: ref;

axiom __ksymtab_visorchannel_set_clientpartition == $sub.ref(0, 232891);

const __ksymtab_visorchannel_get_clientpartition: ref;

axiom __ksymtab_visorchannel_get_clientpartition == $sub.ref(0, 233931);

const __ksymtab_visorchannel_zoneid: ref;

axiom __ksymtab_visorchannel_zoneid == $sub.ref(0, 234971);

const __ksymtab_visorchannel_id: ref;

axiom __ksymtab_visorchannel_id == $sub.ref(0, 236011);

const __ksymtab_visorchannel_uuid_id: ref;

axiom __ksymtab_visorchannel_uuid_id == $sub.ref(0, 237051);

const __ksymtab_visorchannel_get_nbytes: ref;

axiom __ksymtab_visorchannel_get_nbytes == $sub.ref(0, 238091);

const __ksymtab_visorchannel_get_physaddr: ref;

axiom __ksymtab_visorchannel_get_physaddr == $sub.ref(0, 239131);

const __ksymtab_visorchannel_destroy: ref;

axiom __ksymtab_visorchannel_destroy == $sub.ref(0, 240171);

const __ksymtab_visorchannel_create_with_lock: ref;

axiom __ksymtab_visorchannel_create_with_lock == $sub.ref(0, 241211);

const __ksymtab_visorchannel_create: ref;

axiom __ksymtab_visorchannel_create == $sub.ref(0, 242251);

const __ksymtab_visorbus_disable_channel_interrupts: ref;

axiom __ksymtab_visorbus_disable_channel_interrupts == $sub.ref(0, 243291);

const __ksymtab_visorbus_enable_channel_interrupts: ref;

axiom __ksymtab_visorbus_enable_channel_interrupts == $sub.ref(0, 244331);

const __ksymtab_visorbus_registerdevnode: ref;

axiom __ksymtab_visorbus_registerdevnode == $sub.ref(0, 245371);

const __ksymtab_visorbus_clear_channel: ref;

axiom __ksymtab_visorbus_clear_channel == $sub.ref(0, 246411);

const __ksymtab_visorbus_write_channel: ref;

axiom __ksymtab_visorbus_write_channel == $sub.ref(0, 247451);

const __ksymtab_visorbus_read_channel: ref;

axiom __ksymtab_visorbus_read_channel == $sub.ref(0, 248491);

const __ksymtab_visorbus_unregister_visor_driver: ref;

axiom __ksymtab_visorbus_unregister_visor_driver == $sub.ref(0, 249531);

const __ksymtab_visorbus_register_visor_driver: ref;

axiom __ksymtab_visorbus_register_visor_driver == $sub.ref(0, 250571);

const {:count 11} .str.33: ref;

axiom .str.33 == $sub.ref(0, 251606);

const {:count 8} .str.2: ref;

axiom .str.2 == $sub.ref(0, 252638);

const {:count 8} .str.32: ref;

axiom .str.32 == $sub.ref(0, 253670);

const {:count 4} .str.34: ref;

axiom .str.34 == $sub.ref(0, 254698);

const {:count 226} .str.31: ref;

axiom .str.31 == $sub.ref(0, 255948);

const {:count 12} .str.38: ref;

axiom .str.38 == $sub.ref(0, 256984);

const {:count 3} .str.4: ref;

axiom .str.4 == $sub.ref(0, 258011);

const {:count 14} .str.39: ref;

axiom .str.39 == $sub.ref(0, 259049);

const {:count 11} .str.41: ref;

axiom .str.41 == $sub.ref(0, 260084);

const {:count 14} .str.42: ref;

axiom .str.42 == $sub.ref(0, 261122);

const {:count 9} .str.40: ref;

axiom .str.40 == $sub.ref(0, 262155);

const {:count 11} .str.43: ref;

axiom .str.43 == $sub.ref(0, 263190);

const {:count 7} .str.36: ref;

axiom .str.36 == $sub.ref(0, 264221);

const {:count 14} .str.35: ref;

axiom .str.35 == $sub.ref(0, 265259);

const {:count 21} .str.29: ref;

axiom .str.29 == $sub.ref(0, 266304);

const {:count 22} .str.30: ref;

axiom .str.30 == $sub.ref(0, 267350);

const {:count 32} .str.72: ref;

axiom .str.72 == $sub.ref(0, 268406);

const {:count 32} .str.73: ref;

axiom .str.73 == $sub.ref(0, 269462);

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 13} .str.74: ref;

axiom .str.74 == $sub.ref(0, 270499);

const {:count 5} .str.6: ref;

axiom .str.6 == $sub.ref(0, 271528);

const {:count 48} .str.7: ref;

axiom .str.7 == $sub.ref(0, 272600);

const {:count 31} .str.8: ref;

axiom .str.8 == $sub.ref(0, 273655);

const {:count 73} .str.9: ref;

axiom .str.9 == $sub.ref(0, 274752);

const {:count 24} .str.10: ref;

axiom .str.10 == $sub.ref(0, 275800);

const {:count 24} .str.11: ref;

axiom .str.11 == $sub.ref(0, 276848);

const {:count 31} .str.12: ref;

axiom .str.12 == $sub.ref(0, 277903);

const {:count 23} .str.13: ref;

axiom .str.13 == $sub.ref(0, 278950);

const {:count 23} .str.14: ref;

axiom .str.14 == $sub.ref(0, 279997);

const {:count 23} .str.15: ref;

axiom .str.15 == $sub.ref(0, 281044);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 282091);

const {:count 23} .str.17: ref;

axiom .str.17 == $sub.ref(0, 283138);

const {:count 24} .str.18: ref;

axiom .str.18 == $sub.ref(0, 284186);

const {:count 32} .str.19: ref;

axiom .str.19 == $sub.ref(0, 285242);

const {:count 32} .str.20: ref;

axiom .str.20 == $sub.ref(0, 286298);

const {:count 32} .str.21: ref;

axiom .str.21 == $sub.ref(0, 287354);

const {:count 23} .str.22: ref;

axiom .str.22 == $sub.ref(0, 288401);

const {:count 24} .str.23: ref;

axiom .str.23 == $sub.ref(0, 289449);

const {:count 70} .str.24: ref;

axiom .str.24 == $sub.ref(0, 290543);

const {:count 52} .str.25: ref;

axiom .str.25 == $sub.ref(0, 291619);

const {:count 18} .str.75: ref;

axiom .str.75 == $sub.ref(0, 292661);

const {:count 29} .str.76: ref;

axiom .str.76 == $sub.ref(0, 293714);

const {:count 29} .str.77: ref;

axiom .str.77 == $sub.ref(0, 294767);

const {:count 30} .str.78: ref;

axiom .str.78 == $sub.ref(0, 295821);

const {:count 29} .str.79: ref;

axiom .str.79 == $sub.ref(0, 296874);

const {:count 29} .str.80: ref;

axiom .str.80 == $sub.ref(0, 297927);

const {:count 29} .str.81: ref;

axiom .str.81 == $sub.ref(0, 298980);

const {:count 35} .str.82: ref;

axiom .str.82 == $sub.ref(0, 300039);

const {:count 30} .str.83: ref;

axiom .str.83 == $sub.ref(0, 301093);

const {:count 30} .str.84: ref;

axiom .str.84 == $sub.ref(0, 302147);

const {:count 30} .str.85: ref;

axiom .str.85 == $sub.ref(0, 303201);

const {:count 29} .str.86: ref;

axiom .str.86 == $sub.ref(0, 304254);

const {:count 29} .str.87: ref;

axiom .str.87 == $sub.ref(0, 305307);

const {:count 8} .str.26: ref;

axiom .str.26 == $sub.ref(0, 306339);

const {:count 13} .str.27: ref;

axiom .str.27 == $sub.ref(0, 307376);

const {:count 10} .str.28: ref;

axiom .str.28 == $sub.ref(0, 308410);

const {:count 13} .str.46: ref;

axiom .str.46 == $sub.ref(0, 309447);

const {:count 12} .str.47: ref;

axiom .str.47 == $sub.ref(0, 310483);

const {:count 16} .str.48: ref;

axiom .str.48 == $sub.ref(0, 311523);

const pv_cpu_ops: ref;

axiom pv_cpu_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 34} .str.37: ref;

axiom .str.37 == $sub.ref(0, 312581);

const {:count 11} .str.56: ref;

axiom .str.56 == $sub.ref(0, 313616);

const {:count 5} .str.64: ref;

axiom .str.64 == $sub.ref(0, 314645);

const {:count 76} .str.65: ref;

axiom .str.65 == $sub.ref(0, 315745);

const {:count 86} .str.66: ref;

axiom .str.66 == $sub.ref(0, 316855);

const {:count 89} .str.67: ref;

axiom .str.67 == $sub.ref(0, 317968);

const {:count 93} .str.68: ref;

axiom .str.68 == $sub.ref(0, 319085);

const {:count 8} .str.49: ref;

axiom .str.49 == $sub.ref(0, 320117);

const {:count 9} .str.50: ref;

axiom .str.50 == $sub.ref(0, 321150);

const {:count 7} .str.45: ref;

axiom .str.45 == $sub.ref(0, 322181);

const {:count 7} .str.51: ref;

axiom .str.51 == $sub.ref(0, 323212);

const {:count 7} .str.71: ref;

axiom .str.71 == $sub.ref(0, 324243);

const {:count 16} .str.52: ref;

axiom .str.52 == $sub.ref(0, 325283);

const {:count 9} .str.53: ref;

axiom .str.53 == $sub.ref(0, 326316);

const {:count 9} .str.54: ref;

axiom .str.54 == $sub.ref(0, 327349);

const {:count 9} .str.55: ref;

axiom .str.55 == $sub.ref(0, 328382);

const {:count 17} .str.57: ref;

axiom .str.57 == $sub.ref(0, 329423);

const {:count 15} .str.58: ref;

axiom .str.58 == $sub.ref(0, 330462);

const {:count 8} .str.44: ref;

axiom .str.44 == $sub.ref(0, 331494);

const {:count 15} .str.59: ref;

axiom .str.59 == $sub.ref(0, 332533);

const {:count 13} .str.60: ref;

axiom .str.60 == $sub.ref(0, 333570);

const {:count 14} .str.61: ref;

axiom .str.61 == $sub.ref(0, 334608);

const {:count 11} .str.62: ref;

axiom .str.62 == $sub.ref(0, 335643);

const {:count 16} .str.63: ref;

axiom .str.63 == $sub.ref(0, 336683);

const .str.69: ref;

axiom .str.69 == $sub.ref(0, 337708);

const {:count 65} .str.70: ref;

axiom .str.70 == $sub.ref(0, 338797);

const {:count 21} .str.88: ref;

axiom .str.88 == $sub.ref(0, 339842);

const {:count 8} .str.96: ref;

axiom .str.96 == $sub.ref(0, 340874);

const {:count 11} .str.97: ref;

axiom .str.97 == $sub.ref(0, 341909);

const {:count 4} .str.109: ref;

axiom .str.109 == $sub.ref(0, 342937);

const {:count 11} .str.98: ref;

axiom .str.98 == $sub.ref(0, 343972);

const {:count 6} .str.99: ref;

axiom .str.99 == $sub.ref(0, 345002);

const {:count 4} .str.111: ref;

axiom .str.111 == $sub.ref(0, 346030);

const {:count 7} .str.100: ref;

axiom .str.100 == $sub.ref(0, 347061);

const {:count 16} .str.101: ref;

axiom .str.101 == $sub.ref(0, 348101);

const {:count 5} .str.110: ref;

axiom .str.110 == $sub.ref(0, 349130);

const {:count 6} .str.102: ref;

axiom .str.102 == $sub.ref(0, 350160);

const {:count 13} .str.103: ref;

axiom .str.103 == $sub.ref(0, 351197);

const {:count 5} .str.113: ref;

axiom .str.113 == $sub.ref(0, 352226);

const {:count 21} .str.114: ref;

axiom .str.114 == $sub.ref(0, 353271);

const {:count 15} .str.115: ref;

axiom .str.115 == $sub.ref(0, 354310);

const {:count 12} .str.104: ref;

axiom .str.104 == $sub.ref(0, 355346);

const {:count 15} .str.105: ref;

axiom .str.105 == $sub.ref(0, 356385);

const {:count 14} .str.106: ref;

axiom .str.106 == $sub.ref(0, 357423);

const {:count 30} .str.107: ref;

axiom .str.107 == $sub.ref(0, 358477);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 19} .str.108: ref;

axiom .str.108 == $sub.ref(0, 359520);

const {:count 19} .str.89: ref;

axiom .str.89 == $sub.ref(0, 360563);

const {:count 23} .str.90: ref;

axiom .str.90 == $sub.ref(0, 361610);

const {:count 26} .str.91: ref;

axiom .str.91 == $sub.ref(0, 362660);

const {:count 24} .str.92: ref;

axiom .str.92 == $sub.ref(0, 363708);

const {:count 27} .str.93: ref;

axiom .str.93 == $sub.ref(0, 364759);

const {:count 29} .str.94: ref;

axiom .str.94 == $sub.ref(0, 365812);

const high_memory: ref;

axiom high_memory == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 10} .str.116: ref;

axiom .str.116 == $sub.ref(0, 366846);

const {:count 36} .str.117: ref;

axiom .str.117 == $sub.ref(0, 367906);

const {:count 37} .str.118: ref;

axiom .str.118 == $sub.ref(0, 368967);

const {:count 29} .str.119: ref;

axiom .str.119 == $sub.ref(0, 370020);

const {:count 23} .str.120: ref;

axiom .str.120 == $sub.ref(0, 371067);

const {:count 10} .str.1: ref;

axiom .str.1 == $sub.ref(0, 372101);

const {:count 19} .str.3: ref;

axiom .str.3 == $sub.ref(0, 373144);

const {:count 13} .str.5: ref;

axiom .str.5 == $sub.ref(0, 374181);

const elfcorehdr_addr: ref;

axiom elfcorehdr_addr == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 33} .str.121: ref;

axiom .str.121 == $sub.ref(0, 375238);

const {:count 37} .str.112: ref;

axiom .str.112 == $sub.ref(0, 376299);

const boot_cpu_data: ref;

axiom boot_cpu_data == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 377331);

const {:count 3} .str.1.228: ref;

axiom .str.1.228 == $sub.ref(0, 378358);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 379396);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 380424);

const visorbus_match: ref;

axiom visorbus_match == $sub.ref(0, 381456);

procedure visorbus_match($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.0, $M.23, $M.24, $M.25, $M.26, $CurrAddr;



implementation visorbus_match($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i29: i32;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i64;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $i22: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p11 := visorchannel_get_uuid($p10);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i15 := $extractvalue($p11, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p14, $i15);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i17 := $extractvalue($p11, 1);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p16, $i17);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p4);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 4} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p18, $p19, 16, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i20 := $M.2;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i23 := $M.3;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb11;

  $bb11:
    call $p30, $p31, $i32, $p34, $p35, $p36, $i37, $p38, $i39, $p40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i49, $i29, $p51, $p53, $p55, $p57, $p59, $p61, $p63, $p65, $p67, $p69, $p71, $p73, $p75, $p77, $p79, $p81, $p82, $p83, $i84, $p86, $p87, $p88, $i89, $p90, $i91, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $p99, $p100, $i101, $p103, $p104, $i105, $i106 := visorbus_match_loop_$bb11($p2, $p3, $p7, $p30, $p31, $i32, $p34, $p35, $p36, $i37, $p38, $i39, $p40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i49, $i29, $p51, $p53, $p55, $p57, $p59, $p61, $p63, $p65, $p67, $p69, $p71, $p73, $p75, $p77, $p79, $p81, $p82, $p83, $i84, $p86, $p87, $p88, $i89, $p90, $i91, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $p99, $p100, $i101, $p103, $p104, $i105, $i106);
    goto $bb11_last;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p51, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p53, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p55, 0);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p57, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p59, 0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p61, 0);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p63, 0);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p65, 0);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p67, 0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p69, 0);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p71, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p73, 0);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p75, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p77, 0);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p79, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p81, 0);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i29);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p83, $mul.ref($i84, 24)), $mul.ref(0, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p87, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.0, $p90);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p3);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.4, $p93);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p92, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.4, $p95);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i97 := uuid_le_cmp($i89, $i91, $i94, $i96);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i97);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i98 == 1);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i29);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p100, $mul.ref($i101, 24)), $mul.ref(16, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i29);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref($i32, 24)), $mul.ref(0, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p2);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.1, $p41);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.1, $p43);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i45 := uuid_le_cmp($i37, $i39, $i42, $i44);
    call {:si_unique_call 8} {:cexpr "tmp"} boogie_si_record_i32($i45);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i47 := $i29;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i29, 1);
    call {:si_unique_call 10} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i29 := $i49;
    goto corral_source_split_111_dummy;

  $bb13:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    call {:si_unique_call 9} {:cexpr "rc"} boogie_si_record_i32($i48);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i22 := $i48;
    goto $bb3;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb17;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb3;

  corral_source_split_111_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;
}



const visorbus_uevent: ref;

axiom visorbus_uevent == $sub.ref(0, 382488);

procedure visorbus_uevent($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation visorbus_uevent($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i2 := add_uevent_var.ref.ref.ref($p1, .str.33, .str.2);
    call {:si_unique_call 12} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 383520);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const add_uevent_var: ref;

axiom add_uevent_var == $sub.ref(0, 384552);

procedure add_uevent_var.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation add_uevent_var.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 13} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 14} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const visorbus_register_visor_driver: ref;

axiom visorbus_register_visor_driver == $sub.ref(0, 385584);

procedure visorbus_register_visor_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation visorbus_register_visor_driver($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1)), $mul.ref(0, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1)), $mul.ref(8, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, visorbus_type);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1)), $mul.ref(56, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, visordriver_probe_device);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1)), $mul.ref(64, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, visordriver_remove_device);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(40, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1)), $mul.ref(16, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p12);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i16 := driver_register($p15);
    call {:si_unique_call 16} {:cexpr "rc"} boogie_si_record_i32($i16);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i19 := register_driver_attributes($p0);
    call {:si_unique_call 18} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb3;
}



const visordriver_probe_device: ref;

axiom visordriver_probe_device == $sub.ref(0, 386616);

procedure visordriver_probe_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.42, $M.23, $M.24, $M.25, $M.26, $M.52, $M.53, $M.54, $M.55, $M.61, $M.13, $M.14, $M.19, $M.20, $M.67, $M.68, $M.69, $M.70, $M.57, $M.39, $M.37, $M.38, $M.35, $M.36, $M.56, $M.40, $M.5, $M.7, $M.9, $M.11, $M.18, $M.48, $M.62, $M.6, $M.8, $M.10, $M.12, $M.65, $CurrAddr, assertsPassed, $M.58, $M.1, $M.4, $M.63, $M.73, $M.74, $M.75, $M.64, $M.66;



implementation visordriver_probe_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i16: i32;
  var $i22: i1;
  var $p23: ref;
  var vslice_dummy_var_120: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(496, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 32), 2064));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1864, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} down($p7);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1480, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    call {:si_unique_call 20} devirtbounce(0);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(32, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} vslice_dummy_var_120 := get_device($p9);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(56, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(56, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 23} $i19 := devirtbounce.1($p18, $p6);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 24} {:cexpr "rc"} boogie_si_record_i32($i19);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} fix_vbus_dev_info($p6);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1864, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} up($p21);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i16, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(32, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} put_device($p23);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i16 := $i19;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1864, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} up($p15);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 1);
    goto $bb3;
}



const visordriver_remove_device: ref;

axiom visordriver_remove_device == $sub.ref(0, 387648);

procedure visordriver_remove_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.61, $M.54, $M.55, $M.13, $M.14, $M.19, $M.20, $M.40, $M.18, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.65, $M.1, $M.4, $CurrAddr, $M.63, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation visordriver_remove_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 2064));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(496, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 96), 264));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1864, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} down($p7);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1480, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 1);
    call {:si_unique_call 29} devirtbounce(0);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p6);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1864, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} up($p17);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} dev_stop_periodic_work($p2);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} devmajorminor_remove_all_files($p2);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(32, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} put_device($p18);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(64, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(64, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 30} devirtbounce.2($p16, $p2);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const driver_register: ref;

axiom driver_register == $sub.ref(0, 388680);

procedure driver_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 1} true;
    call {:si_unique_call 35} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 36} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const register_driver_attributes: ref;

axiom register_driver_attributes == $sub.ref(0, 389712);

procedure register_driver_attributes($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation register_driver_attributes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p14: ref;
  var $p19: ref;
  var $p24: ref;
  var $p29: ref;
  var $p34: ref;
  var $p39: ref;
  var $p44: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p1 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, .str.32);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, 292);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 0);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, DRIVER_ATTR_version);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $0.ref);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(216, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p1);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 38} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p53, $p54, 48, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(216, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i57 := driver_create_file($p55, $p56);
    call {:si_unique_call 40} {:cexpr "rc"} boogie_si_record_i32($i57);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $r := $i57;
    return;
}



const DRIVER_ATTR_version: ref;

axiom DRIVER_ATTR_version == $sub.ref(0, 390744);

procedure DRIVER_ATTR_version($p0: ref, $p1: ref) returns ($r: i64);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 391776);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const driver_create_file: ref;

axiom driver_create_file == $sub.ref(0, 392808);

procedure driver_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 41} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 42} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 393840);

procedure snprintf.ref.i64.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: ref) returns ($r: i32);



const down: ref;

axiom down == $sub.ref(0, 394872);

procedure down($p0: ref);
  free requires assertsPassed;



implementation down($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    return;
}



const up: ref;

axiom up == $sub.ref(0, 395904);

procedure up($p0: ref);
  free requires assertsPassed;



implementation up($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    return;
}



const dev_stop_periodic_work: ref;

axiom dev_stop_periodic_work == $sub.ref(0, 396936);

procedure dev_stop_periodic_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.11;



implementation dev_stop_periodic_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1472, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i3 := visor_periodic_work_stop($p2);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 44} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} put_device($p6);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const devmajorminor_remove_all_files: ref;

axiom devmajorminor_remove_all_files == $sub.ref(0, 397968);

procedure devmajorminor_remove_all_files($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devmajorminor_remove_all_files($p0: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 0 == 1;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb4;

  $bb4:
    call $i2, $i3, $i1 := devmajorminor_remove_all_files_loop_$bb4($p0, $i2, $i3, $i1);
    goto $bb4_last;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} devmajorminor_remove_file($p0, $i1);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    call {:si_unique_call 47} {:cexpr "i"} boogie_si_record_i32($i2);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i2;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_291;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 399000);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    return;
}



const devmajorminor_remove_file: ref;

axiom devmajorminor_remove_file == $sub.ref(0, 400032);

procedure devmajorminor_remove_file($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devmajorminor_remove_file($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i17: i64;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} {:cexpr "devmajorminor_remove_file:arg:slot"} boogie_si_record_i32($i1);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i3 := $sge.i32($i1, 0);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1784, 1)), $mul.ref($i4, 16)), $mul.ref(8, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1488, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} sysfs_remove_file($p12, $p13);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_121 := kobject_uevent($p15, 5);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i1);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1784, 1)), $mul.ref($i17, 16)), $mul.ref(8, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p9);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} kfree($p21);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const sysfs_remove_file: ref;

axiom sysfs_remove_file == $sub.ref(0, 401064);

procedure sysfs_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} sysfs_remove_file_ns($p0, $p1, $0.ref);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    return;
}



const kobject_uevent: ref;

axiom kobject_uevent == $sub.ref(0, 402096);

procedure kobject_uevent($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kobject_uevent($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 53} {:cexpr "kobject_uevent:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 54} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 55} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 403128);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} free_($p0);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 404160);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 57} $free($p0);
    return;
}



const sysfs_remove_file_ns: ref;

axiom sysfs_remove_file_ns == $sub.ref(0, 405192);

procedure sysfs_remove_file_ns($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation sysfs_remove_file_ns($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    return;
}



const visor_periodic_work_stop: ref;

axiom visor_periodic_work_stop == $sub.ref(0, 406224);

procedure visor_periodic_work_stop($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.11;



implementation visor_periodic_work_stop($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $i9: i1;
  var $i5: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i1;
  var $p44: ref;
  var $i45: i1;
  var vslice_dummy_var_122: i64;
  var vslice_dummy_var_123: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} _raw_write_lock($p1);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i5);
    call {:si_unique_call 59} {:cexpr "stopped_something"} boogie_si_record_i8($i10);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} _raw_write_unlock($p44);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i10);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $r := $i45;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p14, $p15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p33, $p34, $i35, $i36, $p37, $i38, $p40, $p41, $i42, $i43, vslice_dummy_var_122, vslice_dummy_var_123 := visor_periodic_work_stop_loop_$bb7($p0, $p11, $p14, $p15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p33, $p34, $i35, $i36, $p37, $i38, $p40, $p41, $i42, $i43, vslice_dummy_var_122, vslice_dummy_var_123);
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(313, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 1);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i16 := ldv_cancel_delayed_work_159($p15);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 61} {:cexpr "tmp___0"} boogie_si_record_i8($i17);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(313, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p11);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i42);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb18_dummy;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} _raw_write_unlock($p37);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i38 := msecs_to_jiffies(10);
    call {:si_unique_call 69} {:cexpr "tmp___1"} boogie_si_record_i64($i38);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} vslice_dummy_var_123 := schedule_timeout_interruptible($i38);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} _raw_write_lock($p40);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i22 := $xor.i1($i21, 1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 62} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i23);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 64} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i23, 0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_122 := ldv__builtin_expect($i31, 0);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} warn_slowpath_null(.str.31, 180);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(313, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i9 := $xor.i1($i8, 1);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const _raw_write_lock: ref;

axiom _raw_write_lock == $sub.ref(0, 407256);

procedure _raw_write_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_write_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cancel_delayed_work_159: ref;

axiom ldv_cancel_delayed_work_159 == $sub.ref(0, 408288);

procedure ldv_cancel_delayed_work_159($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_cancel_delayed_work_159($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i1 := cancel_delayed_work($p0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 74} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 75} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} disable_work_2($p5);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 409320);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 78} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 410352);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    return;
}



const _raw_write_unlock: ref;

axiom _raw_write_unlock == $sub.ref(0, 411384);

procedure _raw_write_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_write_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 412416);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 82} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_timeout_interruptible: ref;

axiom schedule_timeout_interruptible == $sub.ref(0, 413448);

procedure schedule_timeout_interruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_interruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 83} {:cexpr "schedule_timeout_interruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 84} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 85} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 414480);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cancel_delayed_work: ref;

axiom cancel_delayed_work == $sub.ref(0, 415512);

procedure cancel_delayed_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 89} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 90} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_2: ref;

axiom disable_work_2 == $sub.ref(0, 416544);

procedure disable_work_2($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation disable_work_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.7;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i11 := $M.7;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.9;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i19 := $M.9;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.11;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i27 := $M.11;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.12;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 94} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.10;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 93} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.8;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 92} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.6;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 91} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const get_device: ref;

axiom get_device == $sub.ref(0, 417576);

procedure get_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p1 := external_alloc();
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fix_vbus_dev_info: ref;

axiom fix_vbus_dev_info == $sub.ref(0, 418608);

procedure fix_vbus_dev_info($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.0, $CurrAddr;



implementation fix_vbus_dev_info($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p46: ref;
  var $p47: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $i30: i32;
  var $p48: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p1 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1964, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 97} {:cexpr "bus_no"} boogie_si_record_i32($i3);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1968, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 98} {:cexpr "dev_no"} boogie_si_record_i32($i5);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2032, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p16 := visorbus_get_device_by_id($i3, $sub.i32(0, 1), $0.ref);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p48 := $0.ref;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(0, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(8, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(16, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} bus_device_info_init($p1, $p48, $p58, $p60, $p62);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p16, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} vslice_dummy_var_124 := write_vbus_dev_info($p64, $p13, $p1, $i5);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p16, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_125 := write_vbus_chp_info($p67, $p13, chipset_driverinfo);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p16, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} vslice_dummy_var_126 := write_vbus_bus_info($p70, $p13, clientbus_driverinfo);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb14;

  $bb14:
    call $p31, $p32, $i33, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $i49, $p50, $i51, $p53, $p54, $i55, $i56, $i30 := fix_vbus_dev_info_loop_$bb14($p0, $p22, $p24, $p31, $p32, $i33, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $i49, $p50, $i51, $p53, $p54, $i55, $i56, $i30);
    goto $bb14_last;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i30);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref($i33, 24)), $mul.ref(0, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(8, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i39 := memcmp($p36, $p38, 16);
    call {:si_unique_call 101} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i41 := $i30;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i30, 1);
    call {:si_unique_call 106} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p24);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i49);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p50, $mul.ref($i51, 24)), $mul.ref(16, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i56 == 1);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i49;
    goto $bb20_dummy;

  $bb16:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i41);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref($i44, 24)), $mul.ref(16, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p48 := $p47;
    goto $bb18;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_544;
}



const visorbus_get_device_by_id: ref;

axiom visorbus_get_device_by_id == $sub.ref(0, 419640);

procedure visorbus_get_device_by_id($i0: i32, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.13, $M.14, $CurrAddr;



implementation visorbus_get_device_by_id($i0: i32, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 108} {:cexpr "visorbus_get_device_by_id:arg:bus_no"} boogie_si_record_i32($i0);
    call {:si_unique_call 109} {:cexpr "visorbus_get_device_by_id:arg:dev_no"} boogie_si_record_i32($i1);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p4, $i0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p5, $i1);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p11 := bus_find_device(visorbus_type, $p9, $p10, match_visorbus_dev_by_id);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p11);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($sub.ref(0, 32), 2064));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p16 := $p15;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 420672);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const bus_device_info_init: ref;

axiom bus_device_info_init == $sub.ref(0, 421704);

procedure bus_device_info_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bus_device_info_init($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 111} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p5, 0, 256, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p10 := .str.38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_127 := snprintf.ref.i64.ref.ref($p7, 16, .str.4, $p10);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p2);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p16 := .str.39;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_128 := snprintf.ref.i64.ref.ref($p13, 16, .str.4, $p16);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(32, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p3);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p22 := .str.41;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p4);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p25 := .str.42;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} vslice_dummy_var_129 := snprintf.ref.i64.ref.ref.ref.ref($p19, 96, .str.40, $p22, $p25, .str.43);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p25 := $p4;
    goto $bb12;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p22 := $p3;
    goto $bb9;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p16 := $p2;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p10 := $p1;
    goto $bb3;
}



const write_vbus_dev_info: ref;

axiom write_vbus_dev_info == $sub.ref(0, 422736);

procedure write_vbus_dev_info($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation write_vbus_dev_info($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} {:cexpr "write_vbus_dev_info:arg:devix"} boogie_si_record_i32($i3);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(4, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, $i3);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i5, $i8);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 128);
    call {:si_unique_call 116} {:cexpr "off"} boogie_si_record_i32($i10);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(20, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i10);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i17 := visorchannel_write($p0, $i15, $p16, 256);
    call {:si_unique_call 118} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 1);
    goto $bb3;
}



const write_vbus_chp_info: ref;

axiom write_vbus_chp_info == $sub.ref(0, 423768);

procedure write_vbus_chp_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation write_vbus_chp_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(12, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 128);
    call {:si_unique_call 119} {:cexpr "off"} boogie_si_record_i32($i5);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(12, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i5);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i12 := visorchannel_write($p0, $i10, $p11, 256);
    call {:si_unique_call 121} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;
}



const write_vbus_bus_info: ref;

axiom write_vbus_bus_info == $sub.ref(0, 424800);

procedure write_vbus_bus_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation write_vbus_bus_info($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 128);
    call {:si_unique_call 122} {:cexpr "off"} boogie_si_record_i32($i5);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i5);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i12 := visorchannel_write($p0, $i10, $p11, 256);
    call {:si_unique_call 124} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;
}



const visorchannel_write: ref;

axiom visorchannel_write == $sub.ref(0, 425832);

procedure visorchannel_write($p0: ref, $i1: i64, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation visorchannel_write($p0: ref, $i1: i64, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i8: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} {:cexpr "visorchannel_write:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 126} {:cexpr "visorchannel_write:arg:nbytes"} boogie_si_record_i64($i3);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i1, $i3);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(8, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i4, $i6);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $ult.i64($i1, 128);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref($i1, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} memcpy_toio($p18, $p2, $i3);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(128, $i1);
    call {:si_unique_call 127} {:cexpr "_min1"} boogie_si_record_i64($i10);
    call {:si_unique_call 128} {:cexpr "visorchannel_write:arg:_min2"} boogie_si_record_i64($i3);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i11 := $ult.i64($i10, $i3);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($i1, 128));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 129} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p15, $p2, $i12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb3;
}



const memcpy_toio: ref;

axiom memcpy_toio == $sub.ref(0, 426864);

procedure memcpy_toio($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation memcpy_toio($p0: ref, $p1: ref, $i2: i64)
{
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} {:cexpr "memcpy_toio:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 132} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p0, $p1, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 427896);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const match_visorbus_dev_by_id: ref;

axiom match_visorbus_dev_by_id == $sub.ref(0, 428928);

procedure match_visorbus_dev_by_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation match_visorbus_dev_by_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 133} {:cexpr "bus_no"} boogie_si_record_i32($i6);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 134} {:cexpr "dev_no"} boogie_si_record_i32($i8);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1964, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i6);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1968, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $i8);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i15 := 1;
    goto $bb6;
}



const bus_find_device: ref;

axiom bus_find_device == $sub.ref(0, 429960);

procedure bus_find_device($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation bus_find_device($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p4 := external_alloc();
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 430992);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 137} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const visorbus_unregister_visor_driver: ref;

axiom visorbus_unregister_visor_driver == $sub.ref(0, 432024);

procedure visorbus_unregister_visor_driver($p0: ref);
  free requires assertsPassed;



implementation visorbus_unregister_visor_driver($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} unregister_driver_attributes($p0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} driver_unregister($p1);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    return;
}



const unregister_driver_attributes: ref;

axiom unregister_driver_attributes == $sub.ref(0, 433056);

procedure unregister_driver_attributes($p0: ref);
  free requires assertsPassed;



implementation unregister_driver_attributes($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(96, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(216, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} driver_remove_file($p1, $p2);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    return;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 434088);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    return;
}



const driver_remove_file: ref;

axiom driver_remove_file == $sub.ref(0, 435120);

procedure driver_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation driver_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    return;
}



const visorbus_read_channel: ref;

axiom visorbus_read_channel == $sub.ref(0, 436152);

procedure visorbus_read_channel($p0: ref, $i1: i64, $p2: ref, $i3: i64) returns ($r: i32);



const visorchannel_read: ref;

axiom visorchannel_read == $sub.ref(0, 437184);

procedure visorchannel_read($p0: ref, $i1: i64, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation visorchannel_read($p0: ref, $i1: i64, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} {:cexpr "visorchannel_read:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 142} {:cexpr "visorchannel_read:arg:nbytes"} boogie_si_record_i64($i3);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i1, $i3);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(8, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i4, $i6);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($i1, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} memcpy_fromio($p2, $p11, $i3);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb3;
}



const memcpy_fromio: ref;

axiom memcpy_fromio == $sub.ref(0, 438216);

procedure memcpy_fromio($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation memcpy_fromio($p0: ref, $p1: ref, $i2: i64)
{
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} {:cexpr "memcpy_fromio:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 145} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p0, $p1, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    return;
}



const visorbus_write_channel: ref;

axiom visorbus_write_channel == $sub.ref(0, 439248);

procedure visorbus_write_channel($p0: ref, $i1: i64, $p2: ref, $i3: i64) returns ($r: i32);



const visorbus_clear_channel: ref;

axiom visorbus_clear_channel == $sub.ref(0, 440280);

procedure visorbus_clear_channel($p0: ref, $i1: i64, $i2: i8, $i3: i64) returns ($r: i32);



const visorchannel_clear: ref;

axiom visorchannel_clear == $sub.ref(0, 441312);

procedure visorchannel_clear($p0: ref, $i1: i64, $i2: i8, $i3: i64) returns ($r: i32);



const ldv___get_free_pages_70: ref;

axiom ldv___get_free_pages_70 == $sub.ref(0, 442344);

procedure ldv___get_free_pages_70($i0: i32, $i1: i32) returns ($r: i64);



const free_pages: ref;

axiom free_pages == $sub.ref(0, 443376);

procedure free_pages($i0: i64, $i1: i32);



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 444408);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i1 := $M.18;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 445440);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 148} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 149} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 446472);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 150} __VERIFIER_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const visorbus_registerdevnode: ref;

axiom visorbus_registerdevnode == $sub.ref(0, 447504);

procedure visorbus_registerdevnode($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);



const devmajorminor_create_file: ref;

axiom devmajorminor_create_file == $sub.ref(0, 448536);

procedure devmajorminor_create_file($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);



const register_devmajorminor_attributes: ref;

axiom register_devmajorminor_attributes == $sub.ref(0, 449568);

procedure register_devmajorminor_attributes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_devmajorminor_attributes($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i6: i32;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1488, 1)), $mul.ref(24, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1488, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i10 := kobject_init_and_add.ref.ref.ref.ref($p7, devmajorminor_kobj_type, $p9, .str.35);
    call {:si_unique_call 152} {:cexpr "x"} boogie_si_record_i32($i10);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1488, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_130 := kobject_uevent($p12, 0);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 450600);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 155} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} ldv_check_alloc_flags($i1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p2 := ldv_undef_ptr();
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const DEVMAJORMINOR_ATTR: ref;

axiom DEVMAJORMINOR_ATTR == $sub.ref(0, 451632);

procedure DEVMAJORMINOR_ATTR($p0: ref, $i1: i32, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation DEVMAJORMINOR_ATTR($p0: ref, $i1: i32, $p2: ref) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i1;
  var $i6: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} {:cexpr "DEVMAJORMINOR_ATTR:arg:slot"} boogie_si_record_i32($i1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 0);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i1, 0);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1784, 1)), $mul.ref($i6, 16)), $mul.ref(0, 1));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i1);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1784, 1)), $mul.ref($i11, 16)), $mul.ref(4, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i16 := snprintf.ref.i64.ref.i32.i32($p2, 4096, .str.36, $i10, $i15);
    call {:si_unique_call 160} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i5 := $i17;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const sysfs_create_file: ref;

axiom sysfs_create_file == $sub.ref(0, 452664);

procedure sysfs_create_file($p0: ref, $p1: ref) returns ($r: i32);



const sysfs_create_file_ns: ref;

axiom sysfs_create_file_ns == $sub.ref(0, 453696);

procedure sysfs_create_file_ns($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const kobject_init_and_add: ref;

axiom kobject_init_and_add == $sub.ref(0, 454728);

procedure kobject_init_and_add.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kobject_init_and_add.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const visorbus_enable_channel_interrupts: ref;

axiom visorbus_enable_channel_interrupts == $sub.ref(0, 455760);

procedure visorbus_enable_channel_interrupts($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation visorbus_enable_channel_interrupts($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} dev_start_periodic_work($p0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    return;
}



const dev_start_periodic_work: ref;

axiom dev_start_periodic_work == $sub.ref(0, 456792);

procedure dev_start_periodic_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation dev_start_periodic_work($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var vslice_dummy_var_131: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1480, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} vslice_dummy_var_131 := get_device($p4);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1472, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i8 := visor_periodic_work_start($p7);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 166} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} put_device($p13);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const visor_periodic_work_start: ref;

axiom visor_periodic_work_start == $sub.ref(0, 457824);

procedure visor_periodic_work_start($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation visor_periodic_work_start($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $p25: ref;
  var $p28: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i8: i8;
  var $p50: ref;
  var $i51: i1;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} _raw_write_lock($p4);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(313, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} __init_work($p13, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, 137438953408);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 174} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p18, $p19, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} lockdep_init_map($p22, .str.29, $p1, 0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} INIT_LIST_HEAD($p25);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, periodic_work_func);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1)), $mul.ref(80, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} init_timer_key($p30, 2097152, .str.30, $p3);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, delayed_work_timer_fn);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i35);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(328, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(320, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i44 := queue_delayed_work___0($p40, $p41, $i43);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 179} {:cexpr "tmp"} boogie_si_record_i8($i45);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 1);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} _raw_write_unlock($p50);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i8);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb8:
    assume $i48 == 1;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 458856);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 459888);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 460920);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    return;
}



const periodic_work_func: ref;

axiom periodic_work_func == $sub.ref(0, 461952);

procedure periodic_work_func($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.61, $M.54, $M.55, $M.13, $M.14, $M.19, $M.20, $M.40, $M.18, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.65, $M.1, $M.4, $CurrAddr, $M.63, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation periodic_work_func($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 72), 344)), $mul.ref(296, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 72), 344)), $mul.ref(304, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 182} devirtbounce.3($p4, $p6);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 462984);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 464016);

procedure delayed_work_timer_fn($i0: i64);



const queue_delayed_work___0: ref;

axiom queue_delayed_work___0 == $sub.ref(0, 465048);

procedure queue_delayed_work___0($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation queue_delayed_work___0($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} {:cexpr "queue_delayed_work___0:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i3 := ldv_queue_delayed_work_on_147(8192, $p0, $p1, $i2);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_147: ref;

axiom ldv_queue_delayed_work_on_147 == $sub.ref(0, 466080);

procedure ldv_queue_delayed_work_on_147($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation ldv_queue_delayed_work_on_147($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} {:cexpr "ldv_queue_delayed_work_on_147:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 188} {:cexpr "ldv_queue_delayed_work_on_147:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 190} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 191} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} activate_work_2($p8, 2);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 467112);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 193} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 194} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 1} true;
    call {:si_unique_call 195} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 196} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const activate_work_2: ref;

axiom activate_work_2 == $sub.ref(0, 468144);

procedure activate_work_2($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation activate_work_2($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} {:cexpr "activate_work_2:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.7;
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.9;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.11;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $M.11 := $i1;
    call {:si_unique_call 201} {:cexpr "ldv_work_2_3"} boogie_si_record_i32($i1);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.9 := $i1;
    call {:si_unique_call 200} {:cexpr "ldv_work_2_2"} boogie_si_record_i32($i1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $M.7 := $i1;
    call {:si_unique_call 199} {:cexpr "ldv_work_2_1"} boogie_si_record_i32($i1);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.5 := $i1;
    call {:si_unique_call 198} {:cexpr "ldv_work_2_0"} boogie_si_record_i32($i1);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const visorbus_disable_channel_interrupts: ref;

axiom visorbus_disable_channel_interrupts == $sub.ref(0, 469176);

procedure visorbus_disable_channel_interrupts($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.11;



implementation visorbus_disable_channel_interrupts($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} dev_stop_periodic_work($p0);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    return;
}



const visorchannel_create: ref;

axiom visorchannel_create == $sub.ref(0, 470208);

procedure visorchannel_create($i0: i64, $i1: i64, $i2: i32, $i3: i64, $i4: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.0, $M.22, $CurrAddr, $M.23, $M.24, $M.25, $M.26, assertsPassed;



implementation visorchannel_create($i0: i64, $i1: i64, $i2: i32, $i3: i64, $i4: i64) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p7, $i3);
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p8, $i4);
    call {:si_unique_call 204} {:cexpr "visorchannel_create:arg:physaddr"} boogie_si_record_i64($i0);
    call {:si_unique_call 205} {:cexpr "visorchannel_create:arg:channel_bytes"} boogie_si_record_i64($i1);
    call {:si_unique_call 206} {:cexpr "visorchannel_create:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p5);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.19, $p10);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.20, $p12);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p14 := visorchannel_create_guts($i0, $i1, $i2, 0, $i11, $i13, 0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const visorchannel_create_guts: ref;

axiom visorchannel_create_guts == $sub.ref(0, 471240);

procedure visorchannel_create_guts($i0: i64, $i1: i64, $i2: i32, $i3: i64, $i4: i64, $i5: i64, $i6: i1) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $M.26, $CurrAddr, assertsPassed;



implementation visorchannel_create_guts($i0: i64, $i1: i64, $i2: i32, $i3: i64, $i4: i64, $i5: i64, $i6: i1) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $p39: ref;
  var $i40: i8;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $i109: i64;
  var $i110: i32;
  var $i111: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i8;
  var $i120: i1;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $i132: i8;
  var $p133: ref;
  var $i134: i8;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $i142: i64;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $i154: i64;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p16: ref;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var vslice_dummy_var_132: ref;
  var vslice_dummy_var_133: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p10 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p7);
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i4);
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i5);
    call {:si_unique_call 212} {:cexpr "visorchannel_create_guts:arg:physaddr"} boogie_si_record_i64($i0);
    call {:si_unique_call 213} {:cexpr "visorchannel_create_guts:arg:channel_bytes"} boogie_si_record_i64($i1);
    call {:si_unique_call 214} {:cexpr "visorchannel_create_guts:arg:gfp"} boogie_si_record_i32($i2);
    call {:si_unique_call 215} {:cexpr "visorchannel_create_guts:arg:off"} boogie_si_record_i64($i3);
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i6);
    call {:si_unique_call 216} {:cexpr "visorchannel_create_guts:arg:needs_lock"} boogie_si_record_i1($i6);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i0, 0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p17 := kmalloc(880, $i2);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i14);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(184, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i21);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i23);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(192, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} vslice_dummy_var_132 := spinlock_check($p24);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(192, 1)), $mul.ref(0, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} __raw_spin_lock_init($p28, .str.72, $p8);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(264, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} vslice_dummy_var_133 := spinlock_check($p29);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} __raw_spin_lock_init($p33, .str.73, $p9);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $p34 := __request_region(iomem_resource, $i0, 128, .str.74, 0);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i36);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i38);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p7);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.21, spar_video_guid);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.21, $add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(8, 1)));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i49 := uuid_le_cmp($i44, $i46, $i47, $i48);
    call {:si_unique_call 225} {:cexpr "tmp___1"} boogie_si_record_i32($i49);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p51 := ioremap_cache($i0, 128);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p51);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i0);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(8, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p58, 128);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(32, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i61 := visorchannel_read($p18, 0, $p60, 128);
    call {:si_unique_call 229} {:cexpr "err"} boogie_si_record_i32($i61);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i1, 0);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i67 := $i1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p69, 0);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p71, 0);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p73, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p75, 0);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p77, 0);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p79, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p81, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p83, 0);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p85, 0);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p87, 0);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p89, 0);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p91, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p93, 0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p95, 0);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p97, 0);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p99, 0);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p7);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p100, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.0, $p103);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p10);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.22, $p106);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.22, $p108);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i110 := uuid_le_cmp($i102, $i104, $i107, $i109);
    call {:si_unique_call 232} {:cexpr "tmp___2"} boogie_si_record_i32($i110);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} iounmap($p117);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i8.i1($i119);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, $0.ref);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i127 := $load.i64($M.0, $p126);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p128 := __request_region(iomem_resource, $i127, $i67, .str.74, 0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i129, 0);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i132 := $zext.i1.i8($i130);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, $i132);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.0, $p133);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i8.i1($i134);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i135 == 1);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p7);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i138 := $load.i64($M.0, $p137);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p136, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.0, $p139);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i141 := $load.i64($M.21, spar_video_guid);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i142 := $load.i64($M.21, $add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(8, 1)));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i143 := uuid_le_cmp($i138, $i140, $i141, $i142);
    call {:si_unique_call 238} {:cexpr "tmp___4"} boogie_si_record_i32($i143);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.0, $p145);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $p147 := ioremap_cache($i146, $i67);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p148, $p147);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p150);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i152 := $eq.i64($i151, 0);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(8, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p155, $i67);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(176, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p156, $i67);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(160, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p7);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 241} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p158, $p159, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p16 := $p17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  $bb36:
    assume $i152 == 1;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.0, $p153);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} __release_region(iomem_resource, $i154, $i67);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} visorchannel_destroy($p18);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb3;

  $bb32:
    assume $i144 == 1;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb30:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb27:
    assume $i120 == 1;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.0, $p121);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(8, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i124 := $load.i64($M.0, $p123);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} __release_region(iomem_resource, $i122, $i124);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i111 == 1;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(32, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p7);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p113);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 233} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p114, $p115, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(16, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    call {:si_unique_call 230} {:cexpr "channel_bytes"} boogie_si_record_i64($i66);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb23;

  $bb18:
    assume $i62 == 1;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb15:
    assume $i56 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} __release_region(iomem_resource, $i0, 128);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume $i50 == 1;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb9:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 472272);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 473304);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 474336);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 243} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 244} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p5 := external_alloc();
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const uuid_le_cmp: ref;

axiom uuid_le_cmp == $sub.ref(0, 475368);

procedure uuid_le_cmp($i0: i64, $i1: i64, $i2: i64, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $M.24, $M.25, $M.26, $CurrAddr;



implementation uuid_le_cmp($i0: i64, $i1: i64, $i2: i64, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.23 := $store.i64($M.23, $p7, $i0);
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p8, $i1);
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p5);
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p10, $i2);
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, $p11, $i3);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p5);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i14 := memcmp($p12, $p13, 16);
    call {:si_unique_call 249} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const ioremap_cache: ref;

axiom ioremap_cache == $sub.ref(0, 476400);

procedure ioremap_cache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_cache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "ioremap_cache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 251} {:cexpr "ioremap_cache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p2 := external_alloc();
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 477432);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 254} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 478464);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    return;
}



const visorchannel_destroy: ref;

axiom visorchannel_destroy == $sub.ref(0, 479496);

procedure visorchannel_destroy($p0: ref);
  free requires assertsPassed;



implementation visorchannel_destroy($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} kfree($p16);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(16, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} iounmap($p8);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(24, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(8, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} __release_region(iomem_resource, $i13, $i15);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const visorchannel_create_with_lock: ref;

axiom visorchannel_create_with_lock == $sub.ref(0, 480528);

procedure visorchannel_create_with_lock($i0: i64, $i1: i64, $i2: i32, $i3: i64, $i4: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.0, $M.22, $M.23, $M.24, $M.25, $M.26, $CurrAddr, assertsPassed;



implementation visorchannel_create_with_lock($i0: i64, $i1: i64, $i2: i32, $i3: i64, $i4: i64) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p7, $i3);
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    $M.28 := $store.i64($M.28, $p8, $i4);
    call {:si_unique_call 259} {:cexpr "visorchannel_create_with_lock:arg:physaddr"} boogie_si_record_i64($i0);
    call {:si_unique_call 260} {:cexpr "visorchannel_create_with_lock:arg:channel_bytes"} boogie_si_record_i64($i1);
    call {:si_unique_call 261} {:cexpr "visorchannel_create_with_lock:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p5);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.27, $p10);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.28, $p12);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p14 := visorchannel_create_guts($i0, $i1, $i2, 0, $i11, $i13, 1);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const visorchannel_get_physaddr: ref;

axiom visorchannel_get_physaddr == $sub.ref(0, 481560);

procedure visorchannel_get_physaddr($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation visorchannel_get_physaddr($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const visorchannel_get_nbytes: ref;

axiom visorchannel_get_nbytes == $sub.ref(0, 482592);

procedure visorchannel_get_nbytes($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation visorchannel_get_nbytes($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(176, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const visorchannel_uuid_id: ref;

axiom visorchannel_uuid_id == $sub.ref(0, 483624);

procedure visorchannel_uuid_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation visorchannel_uuid_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var vslice_dummy_var_134: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_134 := sprintf.ref.ref.ref($p1, .str.6, $p0);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 484656);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const visorchannel_id: ref;

axiom visorchannel_id == $sub.ref(0, 485688);

procedure visorchannel_id($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation visorchannel_id($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(160, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p3 := visorchannel_uuid_id($p2, $p1);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const visorchannel_zoneid: ref;

axiom visorchannel_zoneid == $sub.ref(0, 486720);

procedure visorchannel_zoneid($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation visorchannel_zoneid($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(80, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p4 := visorchannel_uuid_id($p3, $p1);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const visorchannel_get_clientpartition: ref;

axiom visorchannel_get_clientpartition == $sub.ref(0, 487752);

procedure visorchannel_get_clientpartition($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation visorchannel_get_clientpartition($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(48, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const visorchannel_set_clientpartition: ref;

axiom visorchannel_set_clientpartition == $sub.ref(0, 488784);

procedure visorchannel_set_clientpartition($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation visorchannel_set_clientpartition($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} {:cexpr "visorchannel_set_clientpartition:arg:partition_handle"} boogie_si_record_i64($i1);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(48, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const visorchannel_get_uuid: ref;

axiom visorchannel_get_uuid == $sub.ref(0, 489816);

procedure visorchannel_get_uuid($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation visorchannel_get_uuid($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(160, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 268} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p3, $p4, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1331;

  corral_source_split_1331:
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume $extractvalue($p9, 1) == $extractvalue($u0, 1);
    assume $extractvalue($p9, 0) == $i8;
    goto corral_source_split_1334;

  corral_source_split_1334:
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume $extractvalue($p12, 0) == $extractvalue($p9, 0);
    assume $extractvalue($p12, 1) == $i11;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;
}



const visorchannel_get_header: ref;

axiom visorchannel_get_header == $sub.ref(0, 490848);

procedure visorchannel_get_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation visorchannel_get_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const visorchannel_signalremove: ref;

axiom visorchannel_signalremove == $sub.ref(0, 491880);

procedure visorchannel_signalremove($p0: ref, $i1: i32, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation visorchannel_signalremove($p0: ref, $i1: i32, $p2: ref) returns ($r: i1)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $p9: ref;
  var $i11: i1;
  var $i12: i8;
  var $i10: i8;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} {:cexpr "visorchannel_signalremove:arg:queue"} boogie_si_record_i32($i1);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(184, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i11 := signalremove_inner($p0, $i1, $p2);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 275} {:cexpr "rc"} boogie_si_record_i8($i12);
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i10);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} spin_lock($p6);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i7 := signalremove_inner($p0, $i1, $p2);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 272} {:cexpr "rc"} boogie_si_record_i8($i8);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(264, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} spin_unlock($p9);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 492912);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} ldv_spin_lock();
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} ldv_spin_lock_47($p0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    return;
}



const signalremove_inner: ref;

axiom signalremove_inner == $sub.ref(0, 493944);

procedure signalremove_inner($p0: ref, $i1: i32, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation signalremove_inner($p0: ref, $i1: i32, $p2: ref) returns ($r: i1)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p3 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    call {:si_unique_call 279} {:cexpr "signalremove_inner:arg:queue"} boogie_si_record_i32($i1);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i4 := sig_read_header($p0, $i1, $p3);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 281} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(60, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, $i13);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(52, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i20 := $urem.i32($i17, $i19);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i24 := sig_read_data($p0, $i1, $p3, $i23, $p2);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 283} {:cexpr "tmp___1"} boogie_si_record_i8($i25);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, 1);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i31);
    call {:si_unique_call 284} devirtbounce(0);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i1);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i37 := $mul.i64($i36, 128);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i35, $i37);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 72);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $i42 := visorchannel_write($p0, $i39, $p41, 4);
    call {:si_unique_call 286} {:cexpr "tmp___3"} boogie_si_record_i32($i42);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i1);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i48 := $mul.i64($i47, 128);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i46, $i48);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i49, 64);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i53 := visorchannel_write($p0, $i50, $p52, 8);
    call {:si_unique_call 288} {:cexpr "tmp___4"} boogie_si_record_i32($i53);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 494976);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.18;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} ldv_spin_unlock();
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} ldv_spin_unlock_51($p0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 496008);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 291} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_51: ref;

axiom ldv_spin_unlock_51 == $sub.ref(0, 497040);

procedure ldv_spin_unlock_51($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_51($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} _raw_spin_unlock($p2);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 498072);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    return;
}



const sig_read_header: ref;

axiom sig_read_header == $sub.ref(0, 499104);

procedure sig_read_header($p0: ref, $i1: i32, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation sig_read_header($p0: ref, $i1: i32, $p2: ref) returns ($r: i1)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} {:cexpr "sig_read_header:arg:queue"} boogie_si_record_i32($i1);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i5, 127);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i1);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i12 := $mul.i64($i11, 128);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i10, $i12);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i15 := visorchannel_read($p0, $i13, $p14, 128);
    call {:si_unique_call 295} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const sig_read_data: ref;

axiom sig_read_data == $sub.ref(0, 500136);

procedure sig_read_data($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation sig_read_data($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i1)
{
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} {:cexpr "sig_read_data:arg:queue"} boogie_si_record_i32($i1);
    call {:si_unique_call 297} {:cexpr "sig_read_data:arg:slot"} boogie_si_record_i32($i3);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i1, 128);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i8, $i9);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i10, $i13);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, $i3);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i14, $i17);
    call {:si_unique_call 298} {:cexpr "signal_data_offset"} boogie_si_record_i32($i18);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i23 := visorchannel_read($p0, $i19, $p4, $i22);
    call {:si_unique_call 300} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 501168);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.18;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 301} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_47: ref;

axiom ldv_spin_lock_47 == $sub.ref(0, 502200);

procedure ldv_spin_lock_47($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_47($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} _raw_spin_lock($p2);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 503232);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    return;
}



const visorchannel_signalinsert: ref;

axiom visorchannel_signalinsert == $sub.ref(0, 504264);

procedure visorchannel_signalinsert($p0: ref, $i1: i32, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18, $M.0, $CurrAddr;



implementation visorchannel_signalinsert($p0: ref, $i1: i32, $p2: ref) returns ($r: i1)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $p9: ref;
  var $i11: i1;
  var $i12: i8;
  var $i10: i8;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} {:cexpr "visorchannel_signalinsert:arg:queue"} boogie_si_record_i32($i1);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(184, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i11 := signalinsert_inner($p0, $i1, $p2);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 309} {:cexpr "rc"} boogie_si_record_i8($i12);
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i10);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(192, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} spin_lock($p6);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i7 := signalinsert_inner($p0, $i1, $p2);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 306} {:cexpr "rc"} boogie_si_record_i8($i8);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(192, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} spin_unlock($p9);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const signalinsert_inner: ref;

axiom signalinsert_inner == $sub.ref(0, 505296);

procedure signalinsert_inner($p0: ref, $i1: i32, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation signalinsert_inner($p0: ref, $i1: i32, $p2: ref) returns ($r: i1)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i9: i1;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p3 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    call {:si_unique_call 311} {:cexpr "signalinsert_inner:arg:queue"} boogie_si_record_i32($i1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i4 := sig_read_header($p0, $i1, $p3);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 313} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(60, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(52, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i15 := $urem.i32($i12, $i14);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(60, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(60, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, $i20);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(60, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i38 := sig_write_data($p0, $i1, $p3, $i37, $p2);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 316} {:cexpr "tmp___1"} boogie_si_record_i8($i39);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i45);
    call {:si_unique_call 317} devirtbounce(0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i1);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i51 := $mul.i64($i50, 128);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i49, $i51);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 60);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(60, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i56 := visorchannel_write($p0, $i53, $p55, 4);
    call {:si_unique_call 319} {:cexpr "tmp___3"} boogie_si_record_i32($i56);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i1);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i62 := $mul.i64($i61, 128);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i60, $i62);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i64 := $add.i64($i63, 32);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i67 := visorchannel_write($p0, $i64, $p66, 8);
    call {:si_unique_call 321} {:cexpr "tmp___4"} boogie_si_record_i32($i67);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb20:
    assume $i68 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb13;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i24);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i30 := $mul.i64($i29, 128);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i28, $i30);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 40);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_135 := visorchannel_write($p0, $i32, $p34, 8);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const sig_write_data: ref;

axiom sig_write_data == $sub.ref(0, 506328);

procedure sig_write_data($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation sig_write_data($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i1)
{
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} {:cexpr "sig_write_data:arg:queue"} boogie_si_record_i32($i1);
    call {:si_unique_call 323} {:cexpr "sig_write_data:arg:slot"} boogie_si_record_i32($i3);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(32, 1)), $mul.ref(64, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i1, 128);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i8, $i9);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i10, $i13);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, $i3);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i14, $i17);
    call {:si_unique_call 324} {:cexpr "signal_data_offset"} boogie_si_record_i32($i18);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i23 := visorchannel_write($p0, $i19, $p4, $i22);
    call {:si_unique_call 326} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;
}



const visorchannel_signalqueue_slots_avail: ref;

axiom visorchannel_signalqueue_slots_avail == $sub.ref(0, 507360);

procedure visorchannel_signalqueue_slots_avail($p0: ref, $i1: i32) returns ($r: i32);



const visorchannel_signalqueue_max_slots: ref;

axiom visorchannel_signalqueue_max_slots == $sub.ref(0, 508392);

procedure visorchannel_signalqueue_max_slots($p0: ref, $i1: i32) returns ($r: i32);



const visorchannel_debug: ref;

axiom visorchannel_debug == $sub.ref(0, 509424);

procedure visorchannel_debug($p0: ref, $i1: i32, $p2: ref, $i3: i32);



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 510456);

procedure seq_printf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



procedure seq_printf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure seq_printf.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64) returns ($r: i32);



procedure seq_printf.ref.ref.i32.i64.i32($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32) returns ($r: i32);



procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure seq_printf.ref.ref.i64.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i64) returns ($r: i32);



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 511488);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);



const sigqueue_debug: ref;

axiom sigqueue_debug == $sub.ref(0, 512520);

procedure sigqueue_debug($p0: ref, $i1: i32, $p2: ref);



const visorchipset_register_busdev: ref;

axiom visorchipset_register_busdev == $sub.ref(0, 513552);

procedure visorchipset_register_busdev($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.0;



implementation visorchipset_register_busdev($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} down(notifier_lock);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.34;
    cmdloc_dummy_var_32 := $M.34;
    call {:si_unique_call 330} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, busdev_notifiers, $p5, 48, $zext.i32.i64(8), 0 == 1);
    $M.34 := cmdloc_dummy_var_33;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 331} {:cexpr "visorbusregistered"} boogie_si_record_i32(1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p2);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} up(notifier_lock);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} bus_device_info_init($p2, .str.26, .str.27, .str.2, $0.ref);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.36;
    cmdloc_dummy_var_35 := $M.36;
    call {:si_unique_call 332} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p8, busdev_responders, 48, $zext.i32.i64(8), 0 == 1);
    $M.36 := cmdloc_dummy_var_36;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.34;
    call {:si_unique_call 328} cmdloc_dummy_var_30 := $memset.i8(cmdloc_dummy_var_29, busdev_notifiers, 0, 48, $zext.i32.i64(8), 0 == 1);
    $M.34 := cmdloc_dummy_var_30;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 329} {:cexpr "visorbusregistered"} boogie_si_record_i32(0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const visor_periodic_work_create: ref;

axiom visor_periodic_work_create == $sub.ref(0, 514584);

procedure visor_periodic_work_create($i0: i64, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation visor_periodic_work_create($i0: i64, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 336} {:cexpr "visor_periodic_work_create:arg:jiffy_interval"} boogie_si_record_i64($i0);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p6 := kmalloc(344, 4304);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} __rwlock_init($p11, .str.28, $p5);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 344)), $mul.ref(320, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 344)), $mul.ref(328, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p1);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 344)), $mul.ref(296, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p2);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 344)), $mul.ref(304, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p3);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 344)), $mul.ref(336, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p4);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p10 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const __rwlock_init: ref;

axiom __rwlock_init == $sub.ref(0, 515616);

procedure __rwlock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __rwlock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    return;
}



const visor_periodic_work_destroy: ref;

axiom visor_periodic_work_destroy == $sub.ref(0, 516648);

procedure visor_periodic_work_destroy($p0: ref);
  free requires assertsPassed;



implementation visor_periodic_work_destroy($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} kfree($p1);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    return;
}



const visor_periodic_work_nextperiod: ref;

axiom visor_periodic_work_nextperiod == $sub.ref(0, 517680);

procedure visor_periodic_work_nextperiod($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation visor_periodic_work_nextperiod($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i7: i8;
  var $p19: ref;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} _raw_write_lock($p1);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(313, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(328, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(72, 1));
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(320, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i13 := queue_delayed_work___0($p9, $p10, $i12);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 342} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} _raw_write_unlock($p19);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i7);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 344)), $mul.ref(313, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const version_show: ref;

axiom version_show == $sub.ref(0, 518712);

procedure version_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation version_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $i2: i32;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} $i2 := snprintf.ref.i64.ref.ref($p1, 4096, .str.34, .str.2);
    call {:si_unique_call 345} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const devmajorminor_attr_show: ref;

axiom devmajorminor_attr_show == $sub.ref(0, 519744);

procedure devmajorminor_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devmajorminor_attr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 1480), 2064));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 346} $i14 := devirtbounce.4($p11, $p5, $i13, $p2);
    call {:si_unique_call 347} {:cexpr "ret"} boogie_si_record_i64($i14);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const devmajorminor_attr_store: ref;

axiom devmajorminor_attr_store == $sub.ref(0, 520776);

procedure devmajorminor_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devmajorminor_attr_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "devmajorminor_attr_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 1480), 2064));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 349} $i15 := devirtbounce.5($p12, $p6, $i14, $p2, $i3);
    call {:si_unique_call 350} {:cexpr "ret"} boogie_si_record_i64($i15);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const chipset_bus_create: ref;

axiom chipset_bus_create == $sub.ref(0, 521808);

procedure chipset_bus_create($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.40, $M.39, $M.37, $CurrAddr, assertsPassed, $M.42, $M.23, $M.24, $M.25, $M.26, $M.18, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.52, $M.53, $M.54, $M.55, $M.61, $M.13, $M.14, $M.19, $M.20, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.5, $M.7, $M.9, $M.11, $M.48, $M.62, $M.6, $M.8, $M.10, $M.12, $M.65, $M.58, $M.1, $M.4, $M.63, $M.73, $M.74, $M.75, $M.64, $M.66;



implementation chipset_bus_create($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $i14: i64;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var vslice_dummy_var_136: i64;
  var vslice_dummy_var_137: i64;
  var vslice_dummy_var_138: i64;
  var vslice_dummy_var_139: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1964, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 351} {:cexpr "bus_no"} boogie_si_record_i32($i2);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i4 := $or.i64($i3, $sub.i64(0, 5476283774293508096));
    call {:si_unique_call 352} {:cexpr "post_code_temp"} boogie_si_record_i64($i4);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_136 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i4);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i6 := create_bus_instance($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 355} {:cexpr "rc"} boogie_si_record_i32($i6);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i2);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i8 := $or.i64($i7, $sub.i64(0, 5476248581331484672));
    call {:si_unique_call 356} {:cexpr "post_code_temp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_137 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i8);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i2);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i15 := $or.i64($i14, $sub.i64(0, 5476160590336491520));
    call {:si_unique_call 360} {:cexpr "post_code_temp___2"} boogie_si_record_i64($i15);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} vslice_dummy_var_139 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i15);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.36, chipset_responders);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.36, chipset_responders);
    call {:si_unique_call 362} devirtbounce.6($p20, $p0, $i6);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i2);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i12 := $or.i64($i11, $sub.i64(0, 5476266156337659904));
    call {:si_unique_call 358} {:cexpr "post_code_temp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} vslice_dummy_var_138 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i12);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const chipset_bus_destroy: ref;

axiom chipset_bus_destroy == $sub.ref(0, 522840);

procedure chipset_bus_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.40, $M.0, $M.18, $CurrAddr;



implementation chipset_bus_destroy($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} remove_bus_instance($p0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(8, 1)));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(8, 1)));
    call {:si_unique_call 364} devirtbounce.6($p4, $p0, 0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const chipset_device_create: ref;

axiom chipset_device_create == $sub.ref(0, 523872);

procedure chipset_device_create($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.39, $M.37, $CurrAddr, assertsPassed, $M.18;



implementation chipset_device_create($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var vslice_dummy_var_140: i64;
  var vslice_dummy_var_141: i64;
  var vslice_dummy_var_142: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1964, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 365} {:cexpr "bus_no"} boogie_si_record_i32($i2);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1968, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 366} {:cexpr "dev_no"} boogie_si_record_i32($i4);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i6 := $shl.i64($i5, 16);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 4294967295);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i2);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 65535);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i10 := $or.i64($i7, $i9);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i11 := $or.i64($i10, $sub.i64(0, 5473521667940548608));
    call {:si_unique_call 367} {:cexpr "post_code_temp"} boogie_si_record_i64($i11);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vslice_dummy_var_140 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i11);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i13 := create_visor_device($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 370} {:cexpr "rc"} boogie_si_record_i32($i13);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(16, 1)));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i13, 0);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i4);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i28 := $shl.i64($i27, 16);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 4294967295);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i2);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 65535);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i32 := $or.i64($i29, $i31);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i33 := $or.i64($i32, $sub.i64(0, 5473486436323819520));
    call {:si_unique_call 374} {:cexpr "post_code_temp___1"} boogie_si_record_i64($i33);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_142 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i33);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i4);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i20 := $shl.i64($i19, 16);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 4294967295);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i2);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 65535);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i24 := $or.i64($i21, $i23);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, $sub.i64(0, 5473504041394765824));
    call {:si_unique_call 372} {:cexpr "post_code_temp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} vslice_dummy_var_141 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i25);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(16, 1)));
    call {:si_unique_call 371} devirtbounce.6($p17, $p0, $i13);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const chipset_device_destroy: ref;

axiom chipset_device_destroy == $sub.ref(0, 524904);

procedure chipset_device_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation chipset_device_destroy($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} remove_visor_device($p0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(24, 1)));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(24, 1)));
    call {:si_unique_call 377} devirtbounce.6($p4, $p0, 0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const chipset_device_pause: ref;

axiom chipset_device_pause == $sub.ref(0, 525936);

procedure chipset_device_pause($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.14, $M.1, $M.4, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.75, $M.18;



implementation chipset_device_pause($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} initiate_chipset_device_pause_resume($p0, 1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    return;
}



const chipset_device_resume: ref;

axiom chipset_device_resume == $sub.ref(0, 526968);

procedure chipset_device_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.14, $M.1, $M.4, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.75, $M.18;



implementation chipset_device_resume($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} initiate_chipset_device_pause_resume($p0, 0);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    return;
}



const initiate_chipset_device_pause_resume: ref;

axiom initiate_chipset_device_pause_resume == $sub.ref(0, 528000);

procedure initiate_chipset_device_pause_resume($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.14, $M.1, $M.4, $CurrAddr, $M.23, $M.24, $M.25, $M.26, $M.75, $M.18;



implementation initiate_chipset_device_pause_resume($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p6: ref;
  var $p5: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i32: i32;
  var $i41: i1;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i9: i32;
  var $i45: i1;
  var $i46: i64;
  var $i47: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 380} {:cexpr "initiate_chipset_device_pause_resume:arg:is_pause"} boogie_si_record_i1($i1);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(40, 1)));
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 96), 264));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1960, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i19 == 1);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1961, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i2);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} fix_vbus_dev_info($p0);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(88, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1961, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 1);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(88, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 384} $i40 := devirtbounce.7($p39, $p0, resume_state_change_complete);
    call {:si_unique_call 385} {:cexpr "x"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    $i32 := $i40;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i32, 0);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i9, 0);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p5);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i47 == 1;
    call {:si_unique_call 386} devirtbounce.6($p5, $p0, $i9);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i41 == 1;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i2);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i42 == 1);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1961, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb6;

  $bb28:
    assume $i42 == 1;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1960, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb6;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(80, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1960, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 1);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(80, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    call {:si_unique_call 382} $i31 := devirtbounce.7($p30, $p0, pause_state_change_complete);
    call {:si_unique_call 383} {:cexpr "x"} boogie_si_record_i32($i31);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb22;

  $bb19:
    assume $i27 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb12;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb6;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(32, 1)));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p5 := $p4;
    goto $bb3;
}



const pause_state_change_complete: ref;

axiom pause_state_change_complete == $sub.ref(0, 529032);

procedure pause_state_change_complete($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation pause_state_change_complete($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "pause_state_change_complete:arg:status"} boogie_si_record_i32($i1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1960, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1960, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(32, 1)));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(32, 1)));
    call {:si_unique_call 388} devirtbounce.6($p9, $p0, $i1);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const resume_state_change_complete: ref;

axiom resume_state_change_complete == $sub.ref(0, 530064);

procedure resume_state_change_complete($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation resume_state_change_complete($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} {:cexpr "resume_state_change_complete:arg:status"} boogie_si_record_i32($i1);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1961, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1961, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(40, 1)));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(40, 1)));
    call {:si_unique_call 390} devirtbounce.6($p9, $p0, $i1);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const remove_visor_device: ref;

axiom remove_visor_device == $sub.ref(0, 531096);

procedure remove_visor_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation remove_visor_device($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1456, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} list_del($p1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} unregister_devmajorminor_attributes($p0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} put_device($p2);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} device_unregister($p3);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 532128);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    return;
}



const unregister_devmajorminor_attributes: ref;

axiom unregister_devmajorminor_attributes == $sub.ref(0, 533160);

procedure unregister_devmajorminor_attributes($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation unregister_devmajorminor_attributes($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1488, 1)), $mul.ref(24, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} devmajorminor_remove_all_files($p0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1488, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} kobject_del($p6);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1488, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} kobject_put($p7);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1488, 1)), $mul.ref(24, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_unregister: ref;

axiom device_unregister == $sub.ref(0, 534192);

procedure device_unregister($p0: ref);
  free requires assertsPassed;



implementation device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    return;
}



const kobject_del: ref;

axiom kobject_del == $sub.ref(0, 535224);

procedure kobject_del($p0: ref);
  free requires assertsPassed;



implementation kobject_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    return;
}



const kobject_put: ref;

axiom kobject_put == $sub.ref(0, 536256);

procedure kobject_put($p0: ref);
  free requires assertsPassed;



implementation kobject_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    return;
}



const __unisys_extended_vmcall_gnuc: ref;

axiom __unisys_extended_vmcall_gnuc == $sub.ref(0, 537288);

procedure __unisys_extended_vmcall_gnuc($i0: i64, $i1: i64, $i2: i64, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, $M.37, $CurrAddr;



implementation __unisys_extended_vmcall_gnuc($i0: i64, $i1: i64, $i2: i64, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 402} {:cexpr "__unisys_extended_vmcall_gnuc:arg:tuple"} boogie_si_record_i64($i0);
    call {:si_unique_call 403} {:cexpr "__unisys_extended_vmcall_gnuc:arg:reg_ebx"} boogie_si_record_i64($i1);
    call {:si_unique_call 404} {:cexpr "__unisys_extended_vmcall_gnuc:arg:reg_ecx"} boogie_si_record_i64($i2);
    call {:si_unique_call 405} {:cexpr "__unisys_extended_vmcall_gnuc:arg:reg_edx"} boogie_si_record_i64($i3);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} cpuid(1, $p4, $p5, $p6, $p7);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.37, $p6);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i9 := $sge.i32($i8, 0);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 407} $i11 := devirtbounce.8(0, $i0, $i1, $i2, $i3);
    call {:si_unique_call 408} {:cexpr "result"} boogie_si_record_i64($i11);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64(0, 1);
    goto $bb3;
}



const create_visor_device: ref;

axiom create_visor_device == $sub.ref(0, 538320);

procedure create_visor_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.39, $M.37, $CurrAddr, assertsPassed;



implementation create_visor_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i64;
  var $i43: i64;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $i48: i64;
  var $p50: ref;
  var $p52: ref;
  var $i36: i32;
  var $p53: ref;
  var $i51: i32;
  var vslice_dummy_var_143: i64;
  var vslice_dummy_var_144: ref;
  var vslice_dummy_var_145: i64;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i64;
  var vslice_dummy_var_148: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1964, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 409} {:cexpr "chipset_bus_no"} boogie_si_record_i32($i2);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1968, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 410} {:cexpr "chipset_dev_no"} boogie_si_record_i32($i4);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i6 := $shl.i64($i5, 16);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 4294967295);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i2);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 65535);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i10 := $or.i64($i7, $i9);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i11 := $or.i64($i10, $sub.i64(0, 5473523192653938688));
    call {:si_unique_call 411} {:cexpr "post_code_temp"} boogie_si_record_i64($i11);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_143 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i11);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1864, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} sema_init($p13, 1);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(488, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, visorbus_type);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(1392, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, visorbus_dev_groups);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} device_initialize($p18);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(1400, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, visorbus_release_device);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_144 := get_device($p21);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $p24 := dev_name($p23);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p25 := $M.38;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p0);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $p27 := visor_periodic_work_create(10, $p25, dev_periodic_work, $p26, $p24);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1472, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p27);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1472, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_146 := dev_set_name.ref.ref.i32.i32($p37, .str.46, $i2, $i4);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i40 := device_add($p39);
    call {:si_unique_call 423} {:cexpr "rc"} boogie_si_record_i32($i40);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $i45 := register_devmajorminor_attributes($p0);
    call {:si_unique_call 427} {:cexpr "rc"} boogie_si_record_i32($i45);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1456, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} list_add_tail($p50, list_all_device_instances);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i4);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i48 := $or.i64($i47, $sub.i64(0, 5473435004090449920));
    call {:si_unique_call 428} {:cexpr "post_code_temp___2"} boogie_si_record_i64($i48);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_148 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i48);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} device_unregister($p52);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i36 := $i45;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} put_device($p53);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i51 := $i36;
    goto $bb12;

  $bb5:
    assume $i41 == 1;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i2);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i43 := $or.i64($i42, $sub.i64(0, 5473452626341265408));
    call {:si_unique_call 424} {:cexpr "post_code_temp___1"} boogie_si_record_i64($i43);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_147 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i43);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i36 := $i40;
    goto $bb3;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i4);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i34 := $or.i64($i33, $sub.i64(0, 5473505531748417536));
    call {:si_unique_call 418} {:cexpr "post_code_temp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_145 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i34);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const sema_init: ref;

axiom sema_init == $sub.ref(0, 539352);

procedure sema_init($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation sema_init($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p16: ref;
  var $p20: ref;
  var $p24: ref;
  var $p27: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p3 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    call {:si_unique_call 434} {:cexpr "sema_init:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $sub.i32(0, 559067475));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $sub.i32(0, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $i2p.i64.ref($sub.i64(0, 1)));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, .str.47);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 0);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i1);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p38);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p3);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 435} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p41, $p42, 96, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} lockdep_init_map($p44, .str.48, $p2, 0);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    return;
}



const device_initialize: ref;

axiom device_initialize == $sub.ref(0, 540384);

procedure device_initialize($p0: ref);
  free requires assertsPassed;



implementation device_initialize($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    return;
}



const visorbus_release_device: ref;

axiom visorbus_release_device == $sub.ref(0, 541416);

procedure visorbus_release_device($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation visorbus_release_device($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 32), 2064));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1472, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} kfree($p17);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} visorchannel_destroy($p15);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1472, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} visor_periodic_work_destroy($p8);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1472, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 542448);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p9 := kobject_name($p8);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dev_periodic_work: ref;

axiom dev_periodic_work == $sub.ref(0, 543480);

procedure dev_periodic_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.61, $M.54, $M.55, $M.13, $M.14, $M.19, $M.20, $M.40, $M.18, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.65, $M.1, $M.4, $CurrAddr, $M.63, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation dev_periodic_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(496, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 2064)), $mul.ref(1864, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} down($p7);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(72, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2064)), $mul.ref(1864, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} up($p14);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 2064)), $mul.ref(1472, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i17 := visor_periodic_work_nextperiod($p16);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 445} {:cexpr "tmp"} boogie_si_record_i8($i18);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} put_device($p22);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(72, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 442} devirtbounce.2($p13, $p1);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 544512);

procedure dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 447} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 448} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_set_name.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 1} true;
    call {:si_unique_call 449} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 450} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const device_add: ref;

axiom device_add == $sub.ref(0, 545544);

procedure device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 451} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 452} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 546576);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} __list_add($p0, $p3, $p1);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 547608);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    return;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 548640);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const cpuid: ref;

axiom cpuid == $sub.ref(0, 549672);

procedure cpuid($i0: i32, $p1: ref, $p2: ref, $p3: ref, $p4: ref);
  free requires assertsPassed;
  modifies $M.39, $M.37;



implementation cpuid($i0: i32, $p1: ref, $p2: ref, $p3: ref, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "cpuid:arg:op"} boogie_si_record_i32($i0);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.39 := $store.i32($M.39, $p1, $i0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $M.37 := $store.i32($M.37, $p3, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} __cpuid($p1, $p2, $p3, $p4);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    return;
}



const __cpuid: ref;

axiom __cpuid == $sub.ref(0, 550704);

procedure __cpuid($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation __cpuid($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var vslice_dummy_var_149: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 312)), $mul.ref(216, 1)));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 457} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p2);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p3);
    call {:si_unique_call 459} vslice_dummy_var_149 := devirtbounce.10(0, 31, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 312)), $mul.ref(216, 1)), 511, $i11, $i12, $i13, $i14);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 458} devirtbounce.9(0, .str.37, 32, 12);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call __cpuid_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const remove_bus_instance: ref;

axiom remove_bus_instance == $sub.ref(0, 551736);

procedure remove_bus_instance($p0: ref);
  free requires assertsPassed;
  modifies $M.40, $M.0;



implementation remove_bus_instance($p0: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i1 := $M.40;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64($i1, 1);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $M.40 := $i2;
    call {:si_unique_call 460} {:cexpr "bus_count"} boogie_si_record_i64($i2);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2032, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} kfree($p11);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1456, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} list_del($p12);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} device_unregister($p13);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} visorchannel_destroy($p8);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const create_bus_instance: ref;

axiom create_bus_instance == $sub.ref(0, 552768);

procedure create_bus_instance($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.40, $M.39, $M.37, $CurrAddr, assertsPassed, $M.42, $M.23, $M.24, $M.25, $M.26, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.52, $M.53, $M.54, $M.55, $M.61, $M.13, $M.14, $M.19, $M.20, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.5, $M.7, $M.9, $M.11, $M.18, $M.48, $M.62, $M.6, $M.8, $M.10, $M.12, $M.65, $M.58, $M.1, $M.4, $M.63, $M.73, $M.74, $M.75, $M.64, $M.66;



implementation create_bus_instance($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i41: i32;
  var vslice_dummy_var_150: i64;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i64;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1964, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 465} {:cexpr "id"} boogie_si_record_i32($i2);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} vslice_dummy_var_150 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $sub.i64(0, 5476284216675139584));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $p4 := kmalloc(128, 208);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_151 := dev_set_name.ref.ref.i32($p8, .str.56, $i2);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(488, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, visorbus_type);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(1392, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, visorbus_groups);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(1400, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, visorbus_release_busdevice);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i17 := device_register($p16);
    call {:si_unique_call 470} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i25 := get_vbus_header_info($p24, $p5);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 475} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i26 := $sge.i32($i25, 0);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p5);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} kfree($p35);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i36 := $M.40;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 1);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $M.40 := $i37;
    call {:si_unique_call 479} {:cexpr "bus_count"} boogie_si_record_i64($i37);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1456, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} list_add_tail($p38, list_all_bus_instances);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p0);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} dev_set_drvdata($p39, $p40);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2032, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p4);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} vslice_dummy_var_153 := write_vbus_chp_info($p30, $p5, chipset_driverinfo);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_154 := write_vbus_bus_info($p33, $p5, clientbus_driverinfo);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i2);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4294967295);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i21 := $or.i64($i20, $sub.i64(0, 5473504586855612416));
    call {:si_unique_call 471} {:cexpr "post_code_temp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} vslice_dummy_var_152 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i21);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p5);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} kfree($p42);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 1);
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const visorbus_release_busdevice: ref;

axiom visorbus_release_busdevice == $sub.ref(0, 553800);

procedure visorbus_release_busdevice($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation visorbus_release_busdevice($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} dev_set_drvdata($p0, $0.ref);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} kfree($p3);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    return;
}



const device_register: ref;

axiom device_register == $sub.ref(0, 554832);

procedure device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 485} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 486} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_vbus_header_info: ref;

axiom get_vbus_header_info == $sub.ref(0, 555864);

procedure get_vbus_header_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.23, $M.24, $M.25, $M.26, $CurrAddr, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.52, $M.53, $M.54, $M.55, $M.61, $M.13, $M.14, $M.19, $M.20, $M.67, $M.68, $M.69, $M.70, $M.57, $M.39, $M.37, $M.38, $M.35, $M.36, $M.56, $M.40, $M.5, $M.7, $M.9, $M.11, $M.18, $M.48, $M.62, $M.6, $M.8, $M.10, $M.12, $M.65, assertsPassed, $M.58, $M.1, $M.4, $M.63, $M.73, $M.74, $M.75, $M.64, $M.66;



implementation get_vbus_header_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p2 := visorchannel_get_header($p0);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.41, spar_vbus_channel_protocol_uuid);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.41, $add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(8, 1)));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i5 := spar_check_channel_client($p2, $i3, $i4, .str.64, 768, 1, 1280197445);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 489} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i9 := visorchannel_read($p0, 128, $p8, 128);
    call {:si_unique_call 491} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i13 := $ule.i32($i12, 127);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(4, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i16 := $ule.i32($i15, 255);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 556896);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    return;
}



const spar_check_channel_client: ref;

axiom spar_check_channel_client == $sub.ref(0, 557928);

procedure spar_check_channel_client($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i64, $i5: i32, $i6: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.23, $M.24, $M.25, $M.26, $CurrAddr, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.52, $M.53, $M.54, $M.55, $M.61, $M.13, $M.14, $M.19, $M.20, $M.67, $M.68, $M.69, $M.70, $M.57, $M.39, $M.37, $M.38, $M.35, $M.36, $M.56, $M.40, $M.5, $M.7, $M.9, $M.11, $M.18, $M.48, $M.62, $M.6, $M.8, $M.10, $M.12, $M.65, assertsPassed, $M.58, $M.1, $M.4, $M.63, $M.73, $M.74, $M.75, $M.64, $M.66;



implementation spar_check_channel_client($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i64, $i5: i32, $i6: i64) returns ($r: i32)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i32;
  var $i72: i1;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $i90: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $i74: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $p9 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p7);
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i2);
    call {:si_unique_call 495} {:cexpr "spar_check_channel_client:arg:expected_min_bytes"} boogie_si_record_i64($i4);
    call {:si_unique_call 496} {:cexpr "spar_check_channel_client:arg:expected_version"} boogie_si_record_i32($i5);
    call {:si_unique_call 497} {:cexpr "spar_check_channel_client:arg:expected_signature"} boogie_si_record_i64($i6);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p14, 0);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p16, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p18, 0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p20, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p22, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p24, 0);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p26, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p28, 0);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p30, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p32, 0);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p34, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p36, 0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p38, 0);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p40, 0);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p42, 0);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p44, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p7);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p9);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.42, $p51);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p50, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.42, $p53);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i55 := uuid_le_cmp($i47, $i49, $i52, $i54);
    call {:si_unique_call 499} {:cexpr "tmp___0"} boogie_si_record_i32($i55);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i4, 0);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i5, 0);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i6, 0);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $r := $i74;
    return;

  $bb20:
    assume $i92 == 1;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i96 := readq($p95);
    call {:si_unique_call 512} {:cexpr "tmp___3"} boogie_si_record_i64($i96);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, $i6);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i97 == 1;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_158 := printk.ref.ref.ref.i64.i64(.str.68, $p3, $p7, $i6, $i96);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb5;

  $bb14:
    assume $i82 == 1;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i86 := readl($p85);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 508} {:cexpr "tmp___2"} boogie_si_record_i32($i86);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i86);
    call {:si_unique_call 509} {:cexpr "ver"} boogie_si_record_i64($i87);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i5);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, $i87);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i89 == 1;
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i90 := $zext.i32.i64($i5);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_157 := printk.ref.ref.ref.i64.i64(.str.67, $p3, $p7, $i90, $i87);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb5;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i75 == 1;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i79 := readq($p78);
    call {:si_unique_call 505} {:cexpr "tmp___1"} boogie_si_record_i64($i79);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i80 := $ult.i64($i79, $i4);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i80 == 1;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vslice_dummy_var_156 := printk.ref.ref.ref.i64.i64(.str.66, $p3, $p7, $i4, $i79);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb5;

  $bb1:
    assume $i56 == 1;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p8);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} memcpy_fromio($p57, $p60, 16);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p8);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p61, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p7);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p67);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p66, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i71 := uuid_le_cmp($i63, $i65, $i68, $i70);
    call {:si_unique_call 502} {:cexpr "tmp"} boogie_si_record_i32($i71);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i72 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_155 := printk.ref.ref.ref.ref.ref(.str.65, $p3, $p7, $p7, $p8);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb5;
}



const printk: ref;

axiom printk == $sub.ref(0, 558960);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 1} true;
    call {:si_unique_call 514} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 515} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64, p.4: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 516} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 517} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 1} true;
    call {:si_unique_call 518} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 519} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const readq: ref;

axiom readq == $sub.ref(0, 559992);

procedure readq($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation readq($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 520} $i2 := devirtbounce.11(0, $p1);
    call {:si_unique_call 521} {:cexpr "ret"} boogie_si_record_i64($i2);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 561024);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.42, $M.23, $M.24, $M.25, $M.26, $M.52, $M.53, $M.54, $M.55, $M.61, $M.13, $M.14, $M.19, $M.20, $M.67, $M.68, $M.69, $M.70, $M.57, $M.39, $M.37, $M.38, $M.35, $M.36, $M.56, $M.40, $M.5, $M.7, $M.9, $M.11, $M.18, $M.48, $M.62, $M.6, $M.8, $M.10, $M.12, $M.65, $CurrAddr, assertsPassed, $M.58, $M.1, $M.4, $M.63, $M.73, $M.74, $M.75, $M.64, $M.66;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 522} $i2 := devirtbounce.12(0, $p1);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 523} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 562056);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const physaddr_show: ref;

axiom physaddr_show == $sub.ref(0, 563088);

procedure physaddr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation physaddr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i12 := visorchannel_get_physaddr($p11);
    call {:si_unique_call 525} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i13 := snprintf.ref.i64.ref.i64($p2, 4096, .str.45, $i12);
    call {:si_unique_call 527} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const nbytes_show: ref;

axiom nbytes_show == $sub.ref(0, 564120);

procedure nbytes_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation nbytes_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i12 := visorchannel_get_nbytes($p11);
    call {:si_unique_call 529} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i13 := snprintf.ref.i64.ref.i64($p2, 4096, .str.71, $i12);
    call {:si_unique_call 531} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const clientpartition_show: ref;

axiom clientpartition_show == $sub.ref(0, 565152);

procedure clientpartition_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation clientpartition_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i12 := visorchannel_get_clientpartition($p11);
    call {:si_unique_call 533} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i13 := snprintf.ref.i64.ref.i64($p2, 4096, .str.45, $i12);
    call {:si_unique_call 535} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const typeguid_show: ref;

axiom typeguid_show == $sub.ref(0, 566184);

procedure typeguid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation typeguid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $p3 := $alloc($mul.ref(99, $zext.i32.i64(1)));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p14 := visorchannel_id($p12, $p13);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i15 := snprintf.ref.i64.ref.ref($p2, 4096, .str.34, $p14);
    call {:si_unique_call 539} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const zoneguid_show: ref;

axiom zoneguid_show == $sub.ref(0, 567216);

procedure zoneguid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation zoneguid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p3 := $alloc($mul.ref(99, $zext.i32.i64(1)));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p14 := visorchannel_zoneid($p12, $p13);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i15 := snprintf.ref.i64.ref.ref($p2, 4096, .str.34, $p14);
    call {:si_unique_call 543} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const typename_show: ref;

axiom typename_show == $sub.ref(0, 568248);

procedure typename_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.0, $M.23, $M.24, $M.25, $M.26, $M.75, $CurrAddr;



implementation typename_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(488, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(496, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p6);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p8);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 544} $i20 := devirtbounce.13($p19, $p0, $p8);
    call {:si_unique_call 545} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p8);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i20);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, $sub.i64(0, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p25, $mul.ref($i27, 24)), $mul.ref(16, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i31 := snprintf.ref.i64.ref.ref($p2, 4096, .str.34, $p30);
    call {:si_unique_call 547} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i17 := $i32;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;
}



const partition_handle_show: ref;

axiom partition_handle_show == $sub.ref(0, 569280);

procedure partition_handle_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation partition_handle_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i7 := visorchannel_get_clientpartition($p6);
    call {:si_unique_call 549} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i8 := snprintf.ref.i64.ref.i64($p2, 4096, .str.45, $i7);
    call {:si_unique_call 551} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const partition_guid_show: ref;

axiom partition_guid_show == $sub.ref(0, 570312);

procedure partition_guid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation partition_guid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(2048, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i6 := snprintf.ref.i64.ref.ref($p2, 4096, .str.44, $p5);
    call {:si_unique_call 553} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const partition_name_show: ref;

axiom partition_name_show == $sub.ref(0, 571344);

procedure partition_name_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation partition_name_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(2008, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i7 := snprintf.ref.i64.ref.ref($p2, 4096, .str.34, $p6);
    call {:si_unique_call 555} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const channel_addr_show: ref;

axiom channel_addr_show == $sub.ref(0, 572376);

procedure channel_addr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation channel_addr_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i7 := visorchannel_get_physaddr($p6);
    call {:si_unique_call 557} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i8 := snprintf.ref.i64.ref.i64($p2, 4096, .str.45, $i7);
    call {:si_unique_call 559} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const channel_bytes_show: ref;

axiom channel_bytes_show == $sub.ref(0, 573408);

procedure channel_bytes_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation channel_bytes_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $i7 := visorchannel_get_nbytes($p6);
    call {:si_unique_call 561} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i8 := snprintf.ref.i64.ref.i64($p2, 4096, .str.45, $i7);
    call {:si_unique_call 563} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const channel_id_show: ref;

axiom channel_id_show == $sub.ref(0, 574440);

procedure channel_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation channel_id_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var vslice_dummy_var_159: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_159 := visorchannel_id($p10, $p2);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i12 := strlen($p2);
    call {:si_unique_call 566} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 567} {:cexpr "len"} boogie_si_record_i32($i13);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    call {:si_unique_call 568} {:cexpr "len"} boogie_si_record_i32($i14);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i13);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref($i15, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 10);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i17 := $i14;
    goto $bb3;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 575472);

procedure strlen($p0: ref) returns ($r: i64);



const client_bus_info_show: ref;

axiom client_bus_info_show == $sub.ref(0, 576504);

procedure client_bus_info_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.43;



implementation client_bus_info_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i64;
  var $i60: i32;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i32;
  var $i49: i32;
  var $i64: i32;
  var $i45: i32;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p3 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(0, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i65 := 4096;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i67 := $sub.i64(4096, $i66);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $r := $i67;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(2008, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $p16 := .str.69;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64(4096);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(1968, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i20 := snprintf.ref.i64.ref.ref.i32($p2, $i17, .str.70, $p16, $i19);
    call {:si_unique_call 571} {:cexpr "x"} boogie_si_record_i32($i20);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p2, $mul.ref($i21, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(4096, $i20);
    call {:si_unique_call 572} {:cexpr "remain"} boogie_si_record_i32($i23);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i25 := visorchannel_read($p7, 256, $p24, 256);
    call {:si_unique_call 574} {:cexpr "x"} boogie_si_record_i32($i25);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i26 := $sge.i32($i25, 0);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i32, $p33 := $i23, $p22;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p3);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i35 := visorchannel_read($p7, 512, $p34, 256);
    call {:si_unique_call 579} {:cexpr "x"} boogie_si_record_i32($i35);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i36 := $sge.i32($i35, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i41, $p42 := $i32, $p33;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i43 := visorchannel_get_nbytes($p7);
    call {:si_unique_call 584} {:cexpr "tmp"} boogie_si_record_i64($i43);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i44 := $ule.i64(1024, $i43);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i45 := $i41;
    assume {:branchcond $i44} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i65 := $i45;
    goto $bb23;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p46, $i47, $i48, $i49 := $p42, 768, $i41, 0;
    goto $bb15;

  $bb15:
    call $p50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $p46, $i47, $i48, $i49, $i64 := client_bus_info_show_loop_$bb15($p3, $p7, $p50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $p46, $i47, $i48, $i49, $i64);
    goto $bb15_last;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p3);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i51 := visorchannel_read($p7, $i47, $p50, 256);
    call {:si_unique_call 586} {:cexpr "x"} boogie_si_record_i32($i51);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i52 := $sge.i32($i51, 0);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i57, $p58 := $i48, $p46;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i59 := $add.i64($i47, 256);
    call {:si_unique_call 590} {:cexpr "off"} boogie_si_record_i64($i59);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i49, 1);
    call {:si_unique_call 591} {:cexpr "i"} boogie_si_record_i32($i60);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i61 := visorchannel_get_nbytes($p7);
    call {:si_unique_call 593} {:cexpr "tmp"} boogie_si_record_i64($i61);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i59, 256);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i63 := $ule.i64($i62, $i61);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i64 := $i57;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i45 := $i64;
    goto $bb14;

  $bb20:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $p46, $i47, $i48, $i49 := $p58, $i59, $i57, $i60;
    goto $bb20_dummy;

  $bb17:
    assume $i52 == 1;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i53 := vbuschannel_devinfo_to_string($p3, $p46, $i48, $i49);
    call {:si_unique_call 588} {:cexpr "x"} boogie_si_record_i32($i53);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p46, $mul.ref($i54, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i48, $i53);
    call {:si_unique_call 589} {:cexpr "remain"} boogie_si_record_i32($i56);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i57, $p58 := $i56, $p55;
    goto $bb19;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i37 := vbuschannel_devinfo_to_string($p3, $p33, $i32, $sub.i32(0, 1));
    call {:si_unique_call 581} {:cexpr "x"} boogie_si_record_i32($i37);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p33, $mul.ref($i38, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i32, $i37);
    call {:si_unique_call 582} {:cexpr "remain"} boogie_si_record_i32($i40);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i41, $p42 := $i40, $p39;
    goto $bb11;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i27 := vbuschannel_devinfo_to_string($p3, $p22, $i23, $sub.i32(0, 1));
    call {:si_unique_call 576} {:cexpr "x"} boogie_si_record_i32($i27);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    $i29 := $add.i64($i21, $i28);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p2, $mul.ref($i29, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i23, $i27);
    call {:si_unique_call 577} {:cexpr "remain"} boogie_si_record_i32($i31);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i32, $p33 := $i31, $p30;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 32), 2064)), $mul.ref(2008, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p16 := $p15;
    goto $bb5;

  $bb20_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;
}



const vbuschannel_devinfo_to_string: ref;

axiom vbuschannel_devinfo_to_string == $sub.ref(0, 577536);

procedure vbuschannel_devinfo_to_string($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.43, $CurrAddr;



implementation vbuschannel_devinfo_to_string($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i1;
  var $i10: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i33: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i40: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i47: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i68: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i75: i32;
  var $i76: i1;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i80: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i103: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i32;
  var $i110: i32;
  var $i111: i1;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $i115: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i64;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $i131: i32;
  var $i130: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} {:cexpr "vbuschannel_devinfo_to_string:arg:remain"} boogie_si_record_i32($i2);
    call {:si_unique_call 595} {:cexpr "vbuschannel_devinfo_to_string:arg:devix"} boogie_si_record_i32($i3);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(0, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i6 := vbuschannel_sanitize_buffer($0.ref, 0, $p5, 16);
    call {:si_unique_call 597} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i6, 0);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $sge.i32($i3, 0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i33 := $sle.i32($i2, 0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 32);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i38 := $add.i32(0, 1);
    call {:si_unique_call 611} {:cexpr "chars"} boogie_si_record_i32($i38);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i2, 1);
    call {:si_unique_call 612} {:cexpr "remain"} boogie_si_record_i32($i39);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i34, $p35, $i36 := $i39, $p37, $i38;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i34, 0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 32);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p35, $mul.ref(1, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i36, 1);
    call {:si_unique_call 613} {:cexpr "chars"} boogie_si_record_i32($i45);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i34, 1);
    call {:si_unique_call 614} {:cexpr "remain"} boogie_si_record_i32($i46);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i41, $p42, $i43 := $i46, $p44, $i45;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i47 := $sle.i32($i41, 0);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 32);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p42, $mul.ref(1, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i43, 1);
    call {:si_unique_call 615} {:cexpr "chars"} boogie_si_record_i32($i52);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i41, 1);
    call {:si_unique_call 616} {:cexpr "remain"} boogie_si_record_i32($i53);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i48, $p49, $i50 := $i53, $p51, $i52;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i30, $p31, $i32 := $i48, $p49, $i50;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i54 := vbuschannel_sanitize_buffer($p31, $i30, $p5, 16);
    call {:si_unique_call 607} {:cexpr "x"} boogie_si_record_i32($i54);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i54);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p31, $mul.ref($i55, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i30, $i54);
    call {:si_unique_call 608} {:cexpr "remain"} boogie_si_record_i32($i57);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i32, $i54);
    call {:si_unique_call 609} {:cexpr "chars"} boogie_si_record_i32($i58);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(15, $i54);
    call {:si_unique_call 610} {:cexpr "pad"} boogie_si_record_i32($i59);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32(0, $i59);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i61, $p62, $i63 := $i57, $p56, $i58;
    assume {:branchcond $i60} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i80 := $sle.i32($i61, 0);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 32);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p62, $mul.ref(1, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i63, 1);
    call {:si_unique_call 625} {:cexpr "chars"} boogie_si_record_i32($i85);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i61, 1);
    call {:si_unique_call 626} {:cexpr "remain"} boogie_si_record_i32($i86);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i81, $p82, $i83 := $i86, $p84, $i85;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(16, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i89 := vbuschannel_sanitize_buffer($p82, $i81, $p88, 16);
    call {:si_unique_call 621} {:cexpr "x"} boogie_si_record_i32($i89);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i89);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p82, $mul.ref($i90, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i81, $i89);
    call {:si_unique_call 622} {:cexpr "remain"} boogie_si_record_i32($i92);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i83, $i89);
    call {:si_unique_call 623} {:cexpr "chars"} boogie_si_record_i32($i93);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32(15, $i89);
    call {:si_unique_call 624} {:cexpr "pad"} boogie_si_record_i32($i94);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32(0, $i94);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i96, $p97, $i98 := $i92, $p91, $i93;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i115 := $sle.i32($i96, 0);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 32);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p97, $mul.ref(1, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i98, 1);
    call {:si_unique_call 634} {:cexpr "chars"} boogie_si_record_i32($i120);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i121 := $sub.i32($i96, 1);
    call {:si_unique_call 635} {:cexpr "remain"} boogie_si_record_i32($i121);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i116, $p117, $i118 := $i121, $p119, $i120;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 256)), $mul.ref(32, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i124 := vbuschannel_sanitize_buffer($p117, $i116, $p123, 96);
    call {:si_unique_call 631} {:cexpr "x"} boogie_si_record_i32($i124);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i124);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p117, $mul.ref($i125, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i127 := $sub.i32($i116, $i124);
    call {:si_unique_call 632} {:cexpr "remain"} boogie_si_record_i32($i127);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i118, $i124);
    call {:si_unique_call 633} {:cexpr "chars"} boogie_si_record_i32($i128);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i129 := $sle.i32($i127, 0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, 10);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i128, 1);
    call {:si_unique_call 636} {:cexpr "chars"} boogie_si_record_i32($i131);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i130 := $i131;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i8 := $i130;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb60:
    assume $i129 == 1;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i130 := $i128;
    goto $bb62;

  $bb56:
    assume $i115 == 1;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i116, $p117, $i118 := $i96, $p97, $i98;
    goto $bb58;

  $bb44:
    assume $i95 == 1;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i99, $p100, $i101, $i102 := $i93, $p91, $i92, 0;
    goto $bb47;

  $bb47:
    call $i103, $p107, $i108, $i109, $i104, $p105, $i106, $i110, $i111, $i99, $p100, $i101, $i102, $i112, $p113, $i114 := vbuschannel_devinfo_to_string_loop_$bb47($i94, $i103, $p107, $i108, $i109, $i104, $p105, $i106, $i110, $i111, $i99, $p100, $i101, $i102, $i112, $p113, $i114);
    goto $bb47_last;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i103 := $sle.i32($i101, 0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 32);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p100, $mul.ref(1, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i99, 1);
    call {:si_unique_call 628} {:cexpr "chars"} boogie_si_record_i32($i108);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i109 := $sub.i32($i101, 1);
    call {:si_unique_call 629} {:cexpr "remain"} boogie_si_record_i32($i109);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i104, $p105, $i106 := $i109, $p107, $i108;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i102, 1);
    call {:si_unique_call 627} {:cexpr "i"} boogie_si_record_i32($i110);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i110, $i94);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i112, $p113, $i114 := $i104, $p105, $i106;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i96, $p97, $i98 := $i112, $p113, $i114;
    goto $bb46;

  $bb53:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $i99, $p100, $i101, $i102 := $i106, $p105, $i104, $i110;
    goto $bb53_dummy;

  $bb49:
    assume $i103 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i104, $p105, $i106 := $i101, $p100, $i99;
    goto $bb51;

  $bb40:
    assume $i80 == 1;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i81, $p82, $i83 := $i61, $p62, $i63;
    goto $bb42;

  $bb28:
    assume $i60 == 1;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i64, $p65, $i66, $i67 := $i58, $p56, $i57, 0;
    goto $bb31;

  $bb31:
    call $i68, $p72, $i73, $i74, $i69, $p70, $i71, $i75, $i76, $i64, $p65, $i66, $i67, $i77, $p78, $i79 := vbuschannel_devinfo_to_string_loop_$bb31($i59, $i68, $p72, $i73, $i74, $i69, $p70, $i71, $i75, $i76, $i64, $p65, $i66, $i67, $i77, $p78, $i79);
    goto $bb31_last;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i68 := $sle.i32($i66, 0);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, 32);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p65, $mul.ref(1, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i64, 1);
    call {:si_unique_call 618} {:cexpr "chars"} boogie_si_record_i32($i73);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32($i66, 1);
    call {:si_unique_call 619} {:cexpr "remain"} boogie_si_record_i32($i74);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i69, $p70, $i71 := $i74, $p72, $i73;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i67, 1);
    call {:si_unique_call 617} {:cexpr "i"} boogie_si_record_i32($i75);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i75, $i59);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i77, $p78, $i79 := $i69, $p70, $i71;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i61, $p62, $i63 := $i77, $p78, $i79;
    goto $bb30;

  $bb37:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i64, $p65, $i66, $i67 := $i71, $p70, $i69, $i75;
    goto $bb37_dummy;

  $bb33:
    assume $i68 == 1;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i69, $p70, $i71 := $i66, $p65, $i64;
    goto $bb35;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i48, $p49, $i50 := $i41, $p42, $i43;
    goto $bb26;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i41, $p42, $i43 := $i34, $p35, $i36;
    goto $bb22;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i34, $p35, $i36 := $i2, $p1, 0;
    goto $bb18;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i10 := $sle.i32($i2, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 91);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i15 := $add.i32(0, 1);
    call {:si_unique_call 602} {:cexpr "chars"} boogie_si_record_i32($i15);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i2, 1);
    call {:si_unique_call 603} {:cexpr "remain"} boogie_si_record_i32($i16);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i11, $p12, $i13 := $i16, $p14, $i15;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i17 := vbuschannel_itoa($p12, $i11, $i3);
    call {:si_unique_call 599} {:cexpr "x"} boogie_si_record_i32($i17);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p12, $mul.ref($i18, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i11, $i17);
    call {:si_unique_call 600} {:cexpr "remain"} boogie_si_record_i32($i20);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i13, $i17);
    call {:si_unique_call 601} {:cexpr "chars"} boogie_si_record_i32($i21);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i20, 0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 93);
    $i26 := $add.i64($i18, 1);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p12, $mul.ref($i26, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i21, 1);
    call {:si_unique_call 604} {:cexpr "chars"} boogie_si_record_i32($i28);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i20, 1);
    call {:si_unique_call 605} {:cexpr "remain"} boogie_si_record_i32($i29);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i23, $p24, $i25 := $i29, $p27, $i28;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i30, $p31, $i32 := $i23, $p24, $i25;
    goto $bb15;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i23, $p24, $i25 := $i20, $p19, $i21;
    goto $bb13;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i11, $p12, $i13 := $i2, $p1, 0;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb53_dummy:
    assume false;
    return;

  $bb47_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  $bb37_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;
}



const vbuschannel_sanitize_buffer: ref;

axiom vbuschannel_sanitize_buffer == $sub.ref(0, 578568);

procedure vbuschannel_sanitize_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vbuschannel_sanitize_buffer($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i53: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} {:cexpr "vbuschannel_sanitize_buffer:arg:remain"} boogie_si_record_i32($i1);
    call {:si_unique_call 638} {:cexpr "vbuschannel_sanitize_buffer:arg:srcmax"} boogie_si_record_i32($i3);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p6, $i7, $p8, $i9, $i10, $i11 := $p0, $i1, $p2, $i3, 0, 0;
    goto $bb4;

  $bb4:
    call $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i26, $i27, $i28, $i29, $i23, $i24, $p25, $i30, $i31, $i32, $p33, $i34, $i35, $p36, $i37, $i38, $i42, $i43, $i44, $i45, $i39, $i40, $p41, $i46, $i47, $i48, $p49, $p50, $i51, $i52, $p6, $i7, $p8, $i9, $i10, $i11, $i53 := vbuschannel_sanitize_buffer_loop_$bb4($i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $p20, $i21, $i22, $i26, $i27, $i28, $i29, $i23, $i24, $p25, $i30, $i31, $i32, $p33, $i34, $i35, $p36, $i37, $i38, $i42, $i43, $i44, $i45, $i39, $i40, $p41, $i46, $i47, $i48, $p49, $p50, $i51, $i52, $p6, $i7, $p8, $i9, $i10, $i11, $i53);
    goto $bb4_last;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p8);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 31);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48, $p49 := 1, $i10, $i7, $p6;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p8, $mul.ref(1, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i9, 1);
    call {:si_unique_call 645} {:cexpr "srcmax"} boogie_si_record_i32($i51);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i52 := $sgt.i32($i51, 0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i53 := $i47;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i5 := $i53;
    goto $bb3;

  $bb27:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $p6, $i7, $p8, $i9, $i10, $i11 := $p49, $i48, $p50, $i51, $i47, $i46;
    goto $bb27_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p8);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i16 := $sext.i8.i32($i15);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 127);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i11, 0);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i30, $i31, $i32, $p33 := $i11, $i10, $i7, $p6;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i32, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p33);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i31;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i39, $i40, $p41 := $i45, $i32, $p33;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48, $p49 := $i30, $i39, $i40, $p41;
    goto $bb26;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i31, 1);
    call {:si_unique_call 644} {:cexpr "chars"} boogie_si_record_i32($i44);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb25;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p8);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i35);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p33, $mul.ref(1, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i32, 1);
    call {:si_unique_call 642} {:cexpr "remain"} boogie_si_record_i32($i37);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i31, 1);
    call {:si_unique_call 643} {:cexpr "chars"} boogie_si_record_i32($i38);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i39, $i40, $p41 := $i38, $i37, $p36;
    goto $bb22;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i7, 0);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p6);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i10;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i23, $i24, $p25 := $i29, $i7, $p6;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i30, $i31, $i32, $p33 := 0, $i23, $i24, $p25;
    goto $bb19;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i10, 1);
    call {:si_unique_call 641} {:cexpr "chars"} boogie_si_record_i32($i28);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb18;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 32);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p6, $mul.ref(1, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i7, 1);
    call {:si_unique_call 639} {:cexpr "remain"} boogie_si_record_i32($i21);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i10, 1);
    call {:si_unique_call 640} {:cexpr "chars"} boogie_si_record_i32($i22);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i23, $i24, $p25 := $i22, $i21, $p20;
    goto $bb15;

  $bb27_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2952;
}



const vbuschannel_itoa: ref;

axiom vbuschannel_itoa == $sub.ref(0, 579600);

procedure vbuschannel_itoa($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.43, $CurrAddr;



implementation vbuschannel_itoa($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i7: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i9: i32;
  var $i10: i32;
  var $i22: i32;
  var $i8: i32;
  var $i23: i1;
  var $i24: i1;
  var $i27: i32;
  var $p28: ref;
  var $i29: i1;
  var $p25: ref;
  var $i26: i32;
  var $i30: i1;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i8;
  var $p37: ref;
  var $i38: i1;
  var $p31: ref;
  var $i32: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 647} {:cexpr "vbuschannel_itoa:arg:remain"} boogie_si_record_i32($i1);
    call {:si_unique_call 648} {:cexpr "vbuschannel_itoa:arg:num"} boogie_si_record_i32($i2);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 0);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i2, 0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, $i8);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i8, 0);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb30:
    assume $i30 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p31, $i32 := $p0, $i8;
    goto $bb33;

  $bb33:
    call $i33, $i34, $p35, $i36, $p37, $i38, $p31, $i32 := vbuschannel_itoa_loop_$bb33($p3, $i33, $i34, $p35, $i36, $p37, $i38, $p31, $i32);
    goto $bb33_last;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, 1);
    call {:si_unique_call 652} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i34, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.43, $p35);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i36);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p31, $mul.ref(1, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i33, 0);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i38 == 1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb35:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $p31, $i32 := $p37, $i33;
    goto $bb35_dummy;

  $bb19:
    assume $i23 == 1;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32(0, $i1);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb5;

  $bb21:
    assume $i24 == 1;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p25, $i26 := $p0, 0;
    goto $bb24;

  $bb24:
    call $i27, $p28, $i29, $p25, $i26 := vbuschannel_itoa_loop_$bb24($i1, $i27, $p28, $i29, $p25, $i26);
    goto $bb24_last;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 63);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    call {:si_unique_call 651} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p25, $mul.ref(1, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i1);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i29 == 1);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $p25, $i26 := $p28, $i27;
    goto $bb26_dummy;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i2, 0;
    goto $bb11;

  $bb11:
    call $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i9, $i10, $i22 := vbuschannel_itoa_loop_$bb11($p3, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i9, $i10, $i22);
    goto $bb11_last;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 31);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i10, 1);
    call {:si_unique_call 649} {:cexpr "digits"} boogie_si_record_i32($i12);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i13 := $srem.i32($i9, 10);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 48);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i10);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i18, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p19, $i17);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i20 := $sdiv.i32($i9, 10);
    call {:si_unique_call 650} {:cexpr "num"} boogie_si_record_i32($i20);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i32($i20, 0);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i22 := $i12;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i8 := $i22;
    goto $bb10;

  $bb16:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i9, $i10 := $i20, $i12;
    goto $bb16_dummy;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb5;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i1, 0);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, 48);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb5;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb5;

  $bb35_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3066;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3053;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3026;
}



const bus_create_response: ref;

axiom bus_create_response == $sub.ref(0, 580632);

procedure bus_create_response($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation bus_create_response($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} {:cexpr "bus_create_response:arg:response"} boogie_si_record_i32($i1);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} bus_responder(257, $p9, $i1);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} kfree($p12);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1972, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, $sub.i8(0, 2));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i7 := $or.i8($i6, 1);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $i7);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bus_destroy_response: ref;

axiom bus_destroy_response == $sub.ref(0, 581664);

procedure bus_destroy_response($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation bus_destroy_response($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} {:cexpr "bus_destroy_response:arg:response"} boogie_si_record_i32($i1);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} bus_responder(258, $p3, $i1);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} kfree($p6);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    return;
}



const device_create_response: ref;

axiom device_create_response == $sub.ref(0, 582696);

procedure device_create_response($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation device_create_response($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} {:cexpr "device_create_response:arg:response"} boogie_si_record_i32($i1);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} device_responder(513, $p9, $i1);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} kfree($p12);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(1972, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, $sub.i8(0, 2));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i7 := $or.i8($i6, 1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $i7);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_destroy_response: ref;

axiom device_destroy_response == $sub.ref(0, 583728);

procedure device_destroy_response($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation device_destroy_response($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} {:cexpr "device_destroy_response:arg:response"} boogie_si_record_i32($i1);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} device_responder(514, $p3, $i1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} kfree($p6);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    return;
}



const visorchipset_device_pause_response: ref;

axiom visorchipset_device_pause_response == $sub.ref(0, 584760);

procedure visorchipset_device_pause_response($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation visorchipset_device_pause_response($p0: ref, $i1: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} {:cexpr "visorchipset_device_pause_response:arg:response"} boogie_si_record_i32($i1);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i2 := $M.44;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} device_changestate_responder(516, $p0, $i1, $i2);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} kfree($p5);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    return;
}



const device_resume_response: ref;

axiom device_resume_response == $sub.ref(0, 585792);

procedure device_resume_response($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation device_resume_response($p0: ref, $i1: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} {:cexpr "device_resume_response:arg:response"} boogie_si_record_i32($i1);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i2 := $M.45;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} device_changestate_responder(516, $p0, $i1, $i2);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} kfree($p5);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    return;
}



const device_changestate_responder: ref;

axiom device_changestate_responder == $sub.ref(0, 586824);

procedure device_changestate_responder($i0: i32, $p1: ref, $i2: i32, $i3: i8);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation device_changestate_responder($i0: i32, $p1: ref, $i2: i32, $i3: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p5 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 1)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i3);
    call {:si_unique_call 673} {:cexpr "device_changestate_responder:arg:cmd_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 674} {:cexpr "device_changestate_responder:arg:response"} boogie_si_record_i32($i2);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 2064)), $mul.ref(1964, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 675} {:cexpr "bus_no"} boogie_si_record_i32($i8);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 2064)), $mul.ref(1968, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 676} {:cexpr "dev_no"} boogie_si_record_i32($i10);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, $i0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} controlvm_init_response($p5, $p21, $i2);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i8);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i10);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p4);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 678} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p34, $p35, 1, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p5);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i38 := visorchannel_signalinsert($p36, 0, $p37);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 680} {:cexpr "tmp"} boogie_si_record_i8($i39);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb10;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const controlvm_init_response: ref;

axiom controlvm_init_response == $sub.ref(0, 587856);

procedure controlvm_init_response($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation controlvm_init_response($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $i20: i32;
  var $p22: ref;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} {:cexpr "controlvm_init_response:arg:response"} boogie_si_record_i32($i2);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 682} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p3, 0, 128, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 683} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p5, $p6, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(44, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i2, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 2));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i19 := $or.i8($i18, 1);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i19);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, $i2);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i20);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_responder: ref;

axiom device_responder == $sub.ref(0, 588888);

procedure device_responder($i0: i32, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation device_responder($i0: i32, $p1: ref, $i2: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} {:cexpr "device_responder:arg:cmd_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 685} {:cexpr "device_responder:arg:response"} boogie_si_record_i32($i2);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, $i0);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} controlvm_respond($p1, $i2);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const controlvm_respond: ref;

axiom controlvm_respond == $sub.ref(0, 589920);

procedure controlvm_respond($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation controlvm_respond($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p2 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    call {:si_unique_call 688} {:cexpr "controlvm_respond:arg:response"} boogie_si_record_i32($i1);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} controlvm_init_response($p2, $p0, $i1);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(16, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i10 := visorchannel_signalinsert($p8, 0, $p9);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 691} {:cexpr "tmp"} boogie_si_record_i8($i11);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const bus_responder: ref;

axiom bus_responder == $sub.ref(0, 590952);

procedure bus_responder($i0: i32, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation bus_responder($i0: i32, $p1: ref, $i2: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} {:cexpr "bus_responder:arg:cmd_id"} boogie_si_record_i32($i0);
    call {:si_unique_call 693} {:cexpr "bus_responder:arg:response"} boogie_si_record_i32($i2);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, $i0);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} controlvm_respond($p1, $i2);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const visorchipset_dev_release: ref;

axiom visorchipset_dev_release == $sub.ref(0, 591984);

procedure visorchipset_dev_release($p0: ref);
  free requires assertsPassed;



implementation visorchipset_dev_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    return;
}



const toolaction_show: ref;

axiom toolaction_show == $sub.ref(0, 593016);

procedure toolaction_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation toolaction_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_160 := visorchannel_read($p4, 3030, $p3, 1);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p3);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i8 := scnprintf.ref.i64.ref.i32($p2, 4096, .str.109, $i7);
    call {:si_unique_call 698} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const toolaction_store: ref;

axiom toolaction_store == $sub.ref(0, 594048);

procedure toolaction_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation toolaction_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 700} {:cexpr "toolaction_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i5 := kstrtou8($p2, 10, $p4);
    call {:si_unique_call 702} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i9 := visorchannel_write($p8, 3030, $p4, 1);
    call {:si_unique_call 704} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 22);
    goto $bb3;
}



const kstrtou8: ref;

axiom kstrtou8 == $sub.ref(0, 595080);

procedure kstrtou8($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtou8($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 705} {:cexpr "kstrtou8:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 1} true;
    call {:si_unique_call 706} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 707} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scnprintf: ref;

axiom scnprintf == $sub.ref(0, 596112);

procedure scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 708} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 709} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 710} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const boottotool_show: ref;

axiom boottotool_show == $sub.ref(0, 597144);

procedure boottotool_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation boottotool_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i8;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} vslice_dummy_var_161 := visorchannel_read($p4, 3032, $p5, 8);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i8($i8, 3);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i9, 1);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i12 := scnprintf.ref.i64.ref.i32($p2, 4096, .str.109, $i11);
    call {:si_unique_call 714} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const boottotool_store: ref;

axiom boottotool_store == $sub.ref(0, 598176);

procedure boottotool_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation boottotool_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 717} {:cexpr "boottotool_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i6 := kstrtoint($p2, 10, $p4);
    call {:si_unique_call 719} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.47, $p4);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p5);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i13 := $and.i8($i10, 1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i14 := $shl.i8($i13, 3);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i12, $sub.i8(0, 9));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i16 := $or.i8($i15, $i14);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i16);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p5);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i19 := visorchannel_write($p17, 3032, $p18, 8);
    call {:si_unique_call 721} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i19);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i8 := $i21;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, 22);
    goto $bb3;
}



const kstrtoint: ref;

axiom kstrtoint == $sub.ref(0, 599208);

procedure kstrtoint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 722} {:cexpr "kstrtoint:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const error_show: ref;

axiom error_show == $sub.ref(0, 600240);

procedure error_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation error_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} vslice_dummy_var_162 := visorchannel_read($p4, 3020, $p5, 4);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p3);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i8 := scnprintf.ref.i64.ref.i32($p2, 4096, .str.111, $i7);
    call {:si_unique_call 728} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const error_store: ref;

axiom error_store == $sub.ref(0, 601272);

procedure error_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation error_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 730} {:cexpr "error_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i5 := kstrtou32($p2, 10, $p4);
    call {:si_unique_call 732} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i10 := visorchannel_write($p8, 3020, $p9, 4);
    call {:si_unique_call 734} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 22);
    goto $bb3;
}



const kstrtou32: ref;

axiom kstrtou32 == $sub.ref(0, 602304);

procedure kstrtou32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtou32($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} {:cexpr "kstrtou32:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i3 := kstrtouint($p0, $i1, $p2);
    call {:si_unique_call 737} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kstrtouint: ref;

axiom kstrtouint == $sub.ref(0, 603336);

procedure kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 738} {:cexpr "kstrtouint:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 739} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 740} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const textid_show: ref;

axiom textid_show == $sub.ref(0, 604368);

procedure textid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation textid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} vslice_dummy_var_163 := visorchannel_read($p4, 3024, $p5, 4);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p3);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i8 := scnprintf.ref.i64.ref.i32($p2, 4096, .str.111, $i7);
    call {:si_unique_call 744} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const textid_store: ref;

axiom textid_store == $sub.ref(0, 605400);

procedure textid_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation textid_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 746} {:cexpr "textid_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i5 := kstrtou32($p2, 10, $p4);
    call {:si_unique_call 748} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i10 := visorchannel_write($p8, 3024, $p9, 4);
    call {:si_unique_call 750} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 22);
    goto $bb3;
}



const remaining_steps_show: ref;

axiom remaining_steps_show == $sub.ref(0, 606432);

procedure remaining_steps_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation remaining_steps_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} vslice_dummy_var_164 := visorchannel_read($p4, 3028, $p5, 2);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p3);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i9 := scnprintf.ref.i64.ref.i32($p2, 4096, .str.110, $i8);
    call {:si_unique_call 754} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const remaining_steps_store: ref;

axiom remaining_steps_store == $sub.ref(0, 607464);

procedure remaining_steps_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation remaining_steps_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 756} {:cexpr "remaining_steps_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i5 := kstrtou16($p2, 10, $p4);
    call {:si_unique_call 758} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i10 := visorchannel_write($p8, 3028, $p9, 2);
    call {:si_unique_call 760} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 22);
    goto $bb3;
}



const kstrtou16: ref;

axiom kstrtou16 == $sub.ref(0, 608496);

procedure kstrtou16($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtou16($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 761} {:cexpr "kstrtou16:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 762} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 763} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const chipsetready_store: ref;

axiom chipsetready_store == $sub.ref(0, 609528);

procedure chipsetready_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.48, $CurrAddr;



implementation chipsetready_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p4 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 765} {:cexpr "chipsetready_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i6 := sscanf.ref.ref.ref($p2, .str.113, $p5);
    call {:si_unique_call 767} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 1);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i10 := strcmp($p9, .str.114);
    call {:si_unique_call 769} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i13 := strcmp($p12, .str.115);
    call {:si_unique_call 771} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $add.ref($add.ref(chipset_events, $mul.ref(0, 2)), $mul.ref(1, 1)), 1);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, chipset_events, 1);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, 22);
    goto $bb3;
}



const sscanf: ref;

axiom sscanf == $sub.ref(0, 610560);

procedure sscanf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const strcmp: ref;

axiom strcmp == $sub.ref(0, 611592);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const devicedisabled_store: ref;

axiom devicedisabled_store == $sub.ref(0, 612624);

procedure devicedisabled_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.18;



implementation devicedisabled_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i7: i64;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 773} {:cexpr "devicedisabled_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i5 := kstrtouint($p2, 10, $p4);
    call {:si_unique_call 775} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p4);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_165 := parahotplug_request_complete($i8, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i7 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 22);
    goto $bb3;
}



const parahotplug_request_complete: ref;

axiom parahotplug_request_complete == $sub.ref(0, 613656);

procedure parahotplug_request_complete($i0: i32, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation parahotplug_request_complete($i0: i32, $i1: i16) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i8;
  var $i25: i8;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i8;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p7: ref;
  var $p8: ref;
  var $i41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} {:cexpr "parahotplug_request_complete:arg:id"} boogie_si_record_i32($i0);
    call {:si_unique_call 778} {:cexpr "parahotplug_request_complete:arg:active"} boogie_si_record_i16($i1);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} spin_lock(parahotplug_request_list_lock);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, parahotplug_request_list);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, $p2i.ref.i64(parahotplug_request_list));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} spin_unlock(parahotplug_request_list_lock);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p7, $p8 := $p4, $p2;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p13, $p14, $p42, $p43, $i44, $i45, $p7, $p8 := parahotplug_request_complete_loop_$bb4($i0, $p9, $p10, $i11, $i12, $p13, $p14, $p42, $p43, $i44, $i45, $p7, $p8);
    goto $bb4_last;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $i0);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p13, $p14 := $p8, $p8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p7);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, $p2i.ref.i64(parahotplug_request_list));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $p7, $p8 := $p43, $p7;
    goto $bb13_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} list_del($p13);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} spin_unlock(parahotplug_request_list_lock);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i16.i8($i1);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i15, 1);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i24 := $shl.i8($i23, 1);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i25 := $and.i8($i22, $sub.i8(0, 3));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i26 := $or.i8($i25, $i24);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i26);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p14);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(48, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} parahotplug_request_destroy($p14);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb11;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 12)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} controlvm_respond_physdev_changestate($p33, 0, $i40);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3485;
}



const controlvm_respond_physdev_changestate: ref;

axiom controlvm_respond_physdev_changestate == $sub.ref(0, 614688);

procedure controlvm_respond_physdev_changestate($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation controlvm_respond_physdev_changestate($p0: ref, $i1: i32, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p4 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 1)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i2);
    call {:si_unique_call 787} {:cexpr "controlvm_respond_physdev_changestate:arg:response"} boogie_si_record_i32($i1);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} controlvm_init_response($p4, $p0, $i1);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 789} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p10, $p11, 1, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 12)), $mul.ref(9, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 2));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i19 := $or.i8($i18, 1);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i19);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p4);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i22 := visorchannel_signalinsert($p20, 0, $p21);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 791} {:cexpr "tmp"} boogie_si_record_i8($i23);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;
}



const parahotplug_request_destroy: ref;

axiom parahotplug_request_destroy == $sub.ref(0, 615720);

procedure parahotplug_request_destroy($p0: ref);
  free requires assertsPassed;



implementation parahotplug_request_destroy($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} kfree($p1);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    return;
}



const deviceenabled_store: ref;

axiom deviceenabled_store == $sub.ref(0, 616752);

procedure deviceenabled_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation deviceenabled_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i7: i64;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 794} {:cexpr "deviceenabled_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i5 := kstrtouint($p2, 10, $p4);
    call {:si_unique_call 796} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p4);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_166 := parahotplug_request_complete($i8, 1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i7 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 22);
    goto $bb3;
}



const visorchipset_init: ref;

axiom visorchipset_init == $sub.ref(0, 617784);

procedure visorchipset_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $M.34, $M.46, $M.27, $M.28, $M.0, $M.22, $M.50, $M.42, $M.23, $M.24, $M.25, $M.26, $M.52, $M.53, $M.54, $M.55, $M.67, $M.68, $M.69, $M.70, $M.57, $M.39, $M.37, $M.38, $M.35, $M.36, $CurrAddr, assertsPassed, $M.58, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.61, $M.13, $M.14, $M.19, $M.20, $M.56, $M.40, $M.73, $M.74, $M.18, $M.48, $M.62, $M.65, $M.1, $M.4, $M.63, $M.75, $M.64, $M.66;



implementation visorchipset_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $i112: i64;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $i116: i8;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i126: i32;
  var $i100: i32;
  var $i127: i1;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i44: i32;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var vslice_dummy_var_167: i64;
  var vslice_dummy_var_168: i64;
  var vslice_dummy_var_169: i64;
  var vslice_dummy_var_170: i64;
  var vslice_dummy_var_171: i64;
  var vslice_dummy_var_172: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p11, 16);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p13, 45);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p15, 60);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p17, 43);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p19, $sub.i8(0, 11));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p21, 126);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p23, $sub.i8(0, 40));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p25, 74);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p27, $sub.i8(0, 71));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p29, 102);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p31, 52);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p33, 72);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p35, $sub.i8(0, 73));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p37, 56);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p39, 107);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p41, 61);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i42 := controlvm_get_channel_address();
    call {:si_unique_call 808} {:cexpr "addr"} boogie_si_record_i64($i42);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.34;
    call {:si_unique_call 809} cmdloc_dummy_var_52 := $memset.i8(cmdloc_dummy_var_51, busdev_notifiers, 0, 48, $zext.i32.i64(8), 0 == 1);
    $M.34 := cmdloc_dummy_var_52;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.46;
    call {:si_unique_call 810} cmdloc_dummy_var_54 := $memset.i8(cmdloc_dummy_var_53, controlvm_payload_info, 0, 24, $zext.i32.i64(8), 0 == 1);
    $M.46 := cmdloc_dummy_var_54;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64(36616);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p1);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.49, $p47);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.49, $p49);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p51 := visorchannel_create_with_lock($i42, $i45, 208, $i48, $i50);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, controlvm_channel, $p51);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p53, 16);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p55, 45);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p57, 60);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p59, 43);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p61, $sub.i8(0, 11));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p63, 126);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p65, $sub.i8(0, 40));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p67, 74);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p69, $sub.i8(0, 71));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p71, 102);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p73, 52);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p75, 72);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p77, $sub.i8(0, 73));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p79, 56);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p81, 107);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $M.50 := $store.i8($M.50, $p83, 61);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $p85 := visorchannel_get_header($p84);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p2);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.50, $p87);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p86, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.50, $p89);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i91 := spar_check_channel_client($p85, $i88, $i90, .str.116, 36616, 1, 1280197445);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 814} {:cexpr "tmp___0"} boogie_si_record_i32($i91);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i92 == 1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} visorchannel_destroy($p93);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, controlvm_channel, $0.ref);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb5:
    assume $i92 == 1;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} initialize_controlvm_payload();
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i94 := $M.51;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i95 := $shl.i32($i94, 20);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $M.52 := $i95;
    call {:si_unique_call 817} {:cexpr "major_dev"} boogie_si_record_i32($i95);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i96 := $M.52;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i97 := visorchipset_file_init($i96, controlvm_channel);
    call {:si_unique_call 819} {:cexpr "rc"} boogie_si_record_i32($i97);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, 0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 821} cmdloc_dummy_var_56 := $memset.i8(cmdloc_dummy_var_55, g_chipset_msg_hdr, 0, 48, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i101 := is_kdump_kernel();
    call {:si_unique_call 823} {:cexpr "tmp___1"} boogie_si_record_i32($i101);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i102 == 1);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} __init_work(periodic_controlvm_work, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p105, 137438953408);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p7);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.0;
    cmdloc_dummy_var_61 := $M.0;
    call {:si_unique_call 830} cmdloc_dummy_var_62 := $memcpy.i8(cmdloc_dummy_var_60, cmdloc_dummy_var_61, periodic_controlvm_work, $p106, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_62;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} lockdep_init_map($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), .str.117, $p6, 0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} INIT_LIST_HEAD($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(8, 1)));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(24, 1)), controlvm_periodic_work);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} init_timer_key($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), 2097152, .str.118, $p8);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(24, 1)), delayed_work_timer_fn);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(32, 1)), $p2i.ref.i64(periodic_controlvm_work));
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p107 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.4, 131082, 1, $p9, .str.119, .str.120);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $M.53 := $p107;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p108 := $M.53;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i109, 0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.0, jiffies);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.54 := $i112;
    call {:si_unique_call 836} {:cexpr "most_recent_message_jiffies"} boogie_si_record_i64($i112);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 837} {:cexpr "poll_jiffies"} boogie_si_record_i64(1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p113 := $M.53;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i114 := $M.55;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i115 := queue_delayed_work($p113, periodic_controlvm_work, $i114);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i8($i115);
    call {:si_unique_call 839} {:cexpr "tmp___3"} boogie_si_record_i8($i116);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i8.i1($i116);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i118 := $zext.i1.i32($i117);
    call {:si_unique_call 840} {:cexpr "rc"} boogie_si_record_i32($i118);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i118, 0);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i121 := $M.52;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1256, 1)), $i121);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i122 := platform_device_register(visorchipset_platform_device);
    call {:si_unique_call 843} {:cexpr "tmp___4"} boogie_si_record_i32($i122);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i122, 0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} vslice_dummy_var_171 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $sub.i64(0, 6412904777344090112));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i126 := visorbus_init();
    call {:si_unique_call 847} {:cexpr "rc"} boogie_si_record_i32($i126);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i100 := $i126;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i100, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i44 := $i100;
    goto $bb3;

  $bb24:
    assume $i127 == 1;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i100);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i129 := $and.i64($i128, 4294967295);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i130 := $or.i64($i129, $sub.i64(0, 6412887159388241920));
    call {:si_unique_call 848} {:cexpr "post_code_temp___4"} boogie_si_record_i64($i130);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_172 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i130);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i123 == 1;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} vslice_dummy_var_170 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6410178005687074816));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32(0, 1);
    goto $bb10;

  $bb18:
    assume $i119 == 1;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_169 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6410054886154567680));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i100 := $i118;
    goto $bb10;

  $bb15:
    assume $i110 == 1;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_168 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6410301219708862464));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32(0, 12);
    goto $bb10;

  $bb12:
    assume $i102 == 1;
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} __init_work(periodic_controlvm_work, 0);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p103, 137438953408);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p4);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.0;
    cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 825} cmdloc_dummy_var_59 := $memcpy.i8(cmdloc_dummy_var_57, cmdloc_dummy_var_58, periodic_controlvm_work, $p104, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_59;
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} lockdep_init_map($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), .str.117, $p3, 0);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} INIT_LIST_HEAD($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(8, 1)));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(24, 1)), setup_crash_devices_work_queue);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} init_timer_key($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), 2097152, .str.118, $p5);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(24, 1)), delayed_work_timer_fn);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(32, 1)), $p2i.ref.i64(periodic_controlvm_work));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i98 == 1;
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_167 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6412887348366802944));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i100 := $i97;
    goto $bb10;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i43 == 1;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 19);
    goto $bb3;
}



const visorchipset_exit: ref;

axiom visorchipset_exit == $sub.ref(0, 618816);

procedure visorchipset_exit($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.0, $M.39, $M.37, $M.34, $M.35, $M.36, $M.38, $M.56, $M.40, $M.5, $M.7, $M.9, $M.11, $M.46, $M.57, $CurrAddr, $M.58, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.1, $M.4, $M.42, $M.75, $M.49, $M.27, $M.28, $M.50, $M.52, $M.67, $M.68, $M.69, $M.70, $M.73, $M.74;



implementation visorchipset_exit($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var vslice_dummy_var_173: i64;
  var vslice_dummy_var_174: i1;
  var vslice_dummy_var_175: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} vslice_dummy_var_173 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $sub.i64(0, 6410089928792735744));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} visorbus_exit();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} vslice_dummy_var_174 := ldv_cancel_delayed_work_119(periodic_controlvm_work);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p3 := $M.53;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} ldv_flush_workqueue_120($p3);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p4 := $M.53;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} ldv_destroy_workqueue_121($p4);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.53 := $0.ref;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} destroy_controlvm_payload_info(controlvm_payload_info);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 856} cmdloc_dummy_var_64 := $memset.i8(cmdloc_dummy_var_63, g_chipset_msg_hdr, 0, 48, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} visorchannel_destroy($p5);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1256, 1)));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} visorchipset_file_cleanup($i6);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} platform_device_unregister(visorchipset_platform_device);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_175 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $sub.i64(0, 6410089860073259008));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const visorbus_exit: ref;

axiom visorbus_exit == $sub.ref(0, 619848);

procedure visorbus_exit();
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.0, $M.38, $M.56, $M.40, $M.5, $M.7, $M.9, $M.11, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.1, $M.4, $M.42, $M.75, $M.49, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.58, $M.73, $M.74;



implementation visorbus_exit()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_176: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} visorchipset_register_busdev($0.ref, $0.ref, $0.ref);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} remove_all_visor_devices();
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p0 := $M.38;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} ldv_flush_workqueue_28($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p1 := $M.38;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} ldv_destroy_workqueue_29($p1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $M.38 := $0.ref;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p2 := $M.56;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, list_all_bus_instances);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p8);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $p2i.ref.i64(list_all_bus_instances));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} remove_bus_type();
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p13, $p14 := $p8, $p10;
    goto $bb7;

  $bb7:
    call $p15, $p16, $p17, $p18, $i19, $i20, $p13, $p14 := visorbus_exit_loop_$bb7($p15, $p16, $p17, $p18, $i19, $i20, $p13, $p14);
    goto $bb7_last;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p13);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 1448), 2064));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} remove_bus_instance($p16);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p14);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(list_all_bus_instances));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p13, $p14 := $p14, $p18;
    goto $bb9_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_176 := ldv_cancel_delayed_work_30(periodic_work);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p6 := $M.56;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} ldv_flush_workqueue_31($p6);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p7 := $M.56;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_destroy_workqueue_32($p7);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $M.56 := $0.ref;
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3805;
}



const ldv_cancel_delayed_work_119: ref;

axiom ldv_cancel_delayed_work_119 == $sub.ref(0, 620880);

procedure ldv_cancel_delayed_work_119($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_cancel_delayed_work_119($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i1 := cancel_delayed_work($p0);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 871} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 872} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} disable_work_2($p5);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_flush_workqueue_120: ref;

axiom ldv_flush_workqueue_120 == $sub.ref(0, 621912);

procedure ldv_flush_workqueue_120($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation ldv_flush_workqueue_120($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} flush_workqueue($p0);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} call_and_disable_all_2(2);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_121: ref;

axiom ldv_destroy_workqueue_121 == $sub.ref(0, 622944);

procedure ldv_destroy_workqueue_121($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation ldv_destroy_workqueue_121($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} destroy_workqueue($p0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} call_and_disable_all_2(2);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const destroy_controlvm_payload_info: ref;

axiom destroy_controlvm_payload_info == $sub.ref(0, 623976);

procedure destroy_controlvm_payload_info($p0: ref);
  free requires assertsPassed;
  modifies $M.46;



implementation destroy_controlvm_payload_info($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.46, $p1);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.46;
    call {:si_unique_call 879} cmdloc_dummy_var_66 := $memset.i8(cmdloc_dummy_var_65, $p8, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.46 := cmdloc_dummy_var_66;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.46, $p5);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} iounmap($p6);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p7, $0.ref);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const visorchipset_file_cleanup: ref;

axiom visorchipset_file_cleanup == $sub.ref(0, 625008);

procedure visorchipset_file_cleanup($i0: i32);
  free requires assertsPassed;
  modifies $M.57, $M.58;



implementation visorchipset_file_cleanup($i0: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} {:cexpr "visorchipset_file_cleanup:arg:major_dev___0"} boogie_si_record_i32($i0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.57, $add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(304, 1)));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.57 := $store.ref($M.57, $add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(304, 1)), $0.ref);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} unregister_chrdev_region($i0, 1);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_cdev_del_118(file_cdev);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 626040);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cdev_del_118: ref;

axiom ldv_cdev_del_118 == $sub.ref(0, 627072);

procedure ldv_cdev_del_118($p0: ref);
  free requires assertsPassed;
  modifies $M.58;



implementation ldv_cdev_del_118($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} cdev_del($p0);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 884} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    return;
}



const unregister_chrdev_region: ref;

axiom unregister_chrdev_region == $sub.ref(0, 628104);

procedure unregister_chrdev_region($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation unregister_chrdev_region($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} {:cexpr "unregister_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 886} {:cexpr "unregister_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    return;
}



const cdev_del: ref;

axiom cdev_del == $sub.ref(0, 629136);

procedure cdev_del($p0: ref);
  free requires assertsPassed;



implementation cdev_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 630168);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_2: ref;

axiom call_and_disable_all_2 == $sub.ref(0, 631200);

procedure call_and_disable_all_2($i0: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation call_and_disable_all_2($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} {:cexpr "call_and_disable_all_2:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.7;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.9;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.11;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p12 := $M.12;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} call_and_disable_work_2($p12);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p9 := $M.10;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} call_and_disable_work_2($p9);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p6 := $M.8;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} call_and_disable_work_2($p6);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p3 := $M.6;
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} call_and_disable_work_2($p3);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const call_and_disable_work_2: ref;

axiom call_and_disable_work_2 == $sub.ref(0, 632232);

procedure call_and_disable_work_2($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation call_and_disable_work_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i1 := $M.5;
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.7;
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i11 := $M.7;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.9;
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i19 := $M.9;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.11;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i27 := $M.11;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p30 := $M.12;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} controlvm_periodic_work($p0);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 899} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p22 := $M.10;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} controlvm_periodic_work($p0);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 897} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p14 := $M.8;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} controlvm_periodic_work($p0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p6 := $M.6;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} controlvm_periodic_work($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 893} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const controlvm_periodic_work: ref;

axiom controlvm_periodic_work == $sub.ref(0, 633264);

procedure controlvm_periodic_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation controlvm_periodic_work($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $i29: i1;
  var $i30: i8;
  var $i28: i8;
  var $i31: i8;
  var $i32: i1;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $i41: i1;
  var $i42: i8;
  var $p45: ref;
  var $i43: i8;
  var $i44: i8;
  var $i46: i1;
  var $i33: i8;
  var $i34: i8;
  var $i47: i1;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i64;
  var $i54: i1;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var vslice_dummy_var_177: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i2 := $M.59;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($u1, 1);
    call {:si_unique_call 901} {:cexpr "poll_count"} boogie_si_record_i64($i6);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i6, 249);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i48 := $M.54;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, jiffies);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i50 := $sub.i64($i48, $i49);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 2500);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i52 := $slt.i64($i51, 0);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i52 == 1);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i55 := $M.55;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 1);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p57 := $M.53;
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i58 := $M.55;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} vslice_dummy_var_177 := queue_delayed_work($p57, periodic_controlvm_work, $i58);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    return;

  $bb53:
    assume $i56 == 1;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 927} {:cexpr "poll_jiffies"} boogie_si_record_i64(1);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb47:
    assume $i52 == 1;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i53 := $M.55;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 100);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i54 == 1;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.55 := 100;
    call {:si_unique_call 925} {:cexpr "poll_jiffies"} boogie_si_record_i64(100);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.60;
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i17 := visorchannel_signalremove($p15, 1, $p16);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 908} {:cexpr "tmp___0"} boogie_si_record_i8($i18);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1(0);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i24 == 1);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i25 := $M.61;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i29 := read_controlvm_event($p1);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 914} {:cexpr "got_command"} boogie_si_record_i8($i30);
    assume {:verifier.code 0} true;
    $i28 := $i30;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i31 := $i28;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} parahotplug_process_list();
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i31, 0;
    goto $bb37;

  $bb37:
    call $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $p45, $i43, $i44, $i46, $i33, $i34, $i47, cmdloc_dummy_var_72, cmdloc_dummy_var_73, cmdloc_dummy_var_74 := controlvm_periodic_work_loop_$bb37($p1, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $p45, $i43, $i44, $i46, $i33, $i34, $i47, cmdloc_dummy_var_72, cmdloc_dummy_var_73, cmdloc_dummy_var_74);
    goto $bb37_last;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i34);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i47 == 1);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, jiffies);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.54 := $i35;
    call {:si_unique_call 915} {:cexpr "most_recent_message_jiffies"} boogie_si_record_i64($i35);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i37 := visorchannel_get_physaddr($p36);
    call {:si_unique_call 917} {:cexpr "tmp___1"} boogie_si_record_i64($i37);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i38 := handle_command($p1, $i37);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 919} {:cexpr "tmp___2"} boogie_si_record_i8($i39);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i40 == 1);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p1);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.0;
    cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 922} cmdloc_dummy_var_74 := $memcpy.i8(cmdloc_dummy_var_72, cmdloc_dummy_var_73, controlvm_pending_msg, $p45, 128, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_74;
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 923} {:cexpr "controlvm_pending_msg_valid"} boogie_si_record_i8(1);
    assume {:verifier.code 0} true;
    $i43, $i44 := 1, $i33;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i44);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i46 == 1);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb42:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i33, $i34 := $i44, $i43;
    goto $bb42_dummy;

  $bb39:
    assume $i40 == 1;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i41 := read_controlvm_event($p1);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i8($i41);
    call {:si_unique_call 921} {:cexpr "got_command"} boogie_si_record_i8($i42);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i43, $i44 := $i34, $i42;
    goto $bb41;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i47 == 1;
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume $i26 == 1;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.0;
    cmdloc_dummy_var_70 := $M.0;
    call {:si_unique_call 911} cmdloc_dummy_var_71 := $memcpy.i8(cmdloc_dummy_var_69, cmdloc_dummy_var_70, $p27, controlvm_pending_msg, 128, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_71;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.61 := 0;
    call {:si_unique_call 912} {:cexpr "controlvm_pending_msg_valid"} boogie_si_record_i8(0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb32;

  $bb28:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb33;

  $bb20:
    assume $i19 == 1;
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call $p20, $i21, $i22, $i23 := controlvm_periodic_work_loop_$bb23($p16, $p20, $i21, $i22, $i23);
    goto $bb23_last;

  $bb24:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i21 := visorchannel_signalremove($p20, 1, $p16);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 910} {:cexpr "tmp___0"} boogie_si_record_i8($i22);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i23 == 1);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb25_dummy;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, g_chipset_msg_hdr);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb13;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i12 := check_chipset_events();
    call {:si_unique_call 903} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i14 == 1;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} controlvm_respond(g_chipset_msg_hdr, 0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} clear_chipset_events();
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.0;
    call {:si_unique_call 906} cmdloc_dummy_var_68 := $memset.i8(cmdloc_dummy_var_67, g_chipset_msg_hdr, 0, 48, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_68;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i4 := $M.35;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb42_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4045;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto $bb24;
}



const check_chipset_events: ref;

axiom check_chipset_events == $sub.ref(0, 634296);

procedure check_chipset_events() returns ($r: i8);
  free requires assertsPassed;



implementation check_chipset_events() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i32;
  var $i3: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i0 := $load.i8($M.48, chipset_events);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    call {:si_unique_call 928} {:cexpr "send_msg"} boogie_si_record_i8($i3);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.48, $add.ref($add.ref(chipset_events, $mul.ref(0, 2)), $mul.ref(1, 1)));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i3);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i6, $i7);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i8);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const clear_chipset_events: ref;

axiom clear_chipset_events == $sub.ref(0, 635328);

procedure clear_chipset_events();
  free requires assertsPassed;
  modifies $M.48;



implementation clear_chipset_events()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, chipset_events, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.48 := $store.i8($M.48, $add.ref($add.ref(chipset_events, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const read_controlvm_event: ref;

axiom read_controlvm_event == $sub.ref(0, 636360);

procedure read_controlvm_event($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation read_controlvm_event($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i3 := visorchannel_signalremove($p1, 2, $p2);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 930} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(16, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb5;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;
}



const handle_command: ref;

axiom handle_command == $sub.ref(0, 637392);

procedure handle_command($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.62, $M.0, $M.63, $M.18, $M.13, $M.14, $M.19, $M.20, $CurrAddr, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.61, $M.54, $M.55, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.48, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation handle_command($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i12: i1;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var vslice_dummy_var_178: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p2 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 933} {:cexpr "handle_command:arg:channel_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(16, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 934} {:cexpr "local_addr"} boogie_si_record_i8($i10);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, $i1);
    call {:si_unique_call 935} {:cexpr "parm_addr"} boogie_si_record_i64($i16);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(44, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 936} {:cexpr "parm_bytes"} boogie_si_record_i32($i19);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i16, 0);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $0.ref;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i10);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} controlvm_init_response($p2, $p30, 0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 515);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, 770);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i39, 772);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i39, 773);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i39, 773);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(16, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p28);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb68:
    assume $i79 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} parser_done($p28);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb65:
    assume $i76 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} controlvm_respond($p77, $sub.i32(0, 4));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb32:
    assume $i44 == 1;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} chipset_selftest($p70);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb30:
    assume $i43 == 1;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} chipset_ready($p69);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb28:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i39, 770);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb34;

  $bb35:
    assume $i45 == 1;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} chipset_notready($p71);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb26:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i39, 516);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i39, 769);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i47 == 1);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} chipset_init($p0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb39:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i39, 516);
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb34;

  $bb41:
    assume $i48 == 1;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p4);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(12, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i60 == 1);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} my_device_changestate($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.0;
    cmdloc_dummy_var_76 := $M.0;
    call {:si_unique_call 951} cmdloc_dummy_var_77 := $memcpy.i8(cmdloc_dummy_var_75, cmdloc_dummy_var_76, g_devicechangestate_packet, $p62, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_77;
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i60 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} parahotplug_process_message($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i46 == 1;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p0);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(16, 1));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb61:
    assume $i67 == 1;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} controlvm_respond($p68, 0);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb24:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i39, 260);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i39, 513);
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i39, 514);
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i51 == 1);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} my_device_destroy($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i51 == 1;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} my_device_create($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i39, 260);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb34;

  $bb49:
    assume $i52 == 1;
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} bus_configure($p0, $p28);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i39, 258);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i39, 258);
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb34;

  $bb53:
    assume $i54 == 1;
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} bus_destroy($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i39, 257);
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb34;

  $bb55:
    assume $i55 == 1;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} bus_create($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} vslice_dummy_var_178 := visorchannel_signalinsert($p34, 3, $p35);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i19, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $M.62 := $store.i8($M.62, $p3, 0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i10);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p23 := parser_init_byte_stream($i16, $i19, $i22, $p3);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p28 := $p23;
    goto $bb16;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.62, $p3);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb3;
}



const parahotplug_process_list: ref;

axiom parahotplug_process_list == $sub.ref(0, 638424);

procedure parahotplug_process_list();
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation parahotplug_process_list()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} spin_lock(parahotplug_request_list_lock);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, parahotplug_request_list);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, $p2i.ref.i64(parahotplug_request_list));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} spin_unlock(parahotplug_request_list_lock);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p5, $p6 := $p0, $p2;
    goto $bb4;

  $bb4:
    call $p7, $i8, $p9, $i10, $i11, $i12, $p13, $p14, $i15, $i16, $i17, $p19, $p22, $p23, $p25, $i26, $p27, $p28, $i29, $i30, $p5, $p6 := parahotplug_process_list_loop_$bb4($p7, $i8, $p9, $i10, $i11, $i12, $p13, $p14, $i15, $i16, $i17, $p19, $p22, $p23, $p25, $i26, $p27, $p28, $i29, $i30, $p5, $p6);
    goto $bb4_last;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, jiffies);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i8, $i10);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i12 := $slt.i64($i11, 0);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} list_del($p5);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p7);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(48, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} parahotplug_request_destroy($p7);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p6);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $p2i.ref.i64(parahotplug_request_list));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p5, $p6 := $p6, $p28;
    goto $bb13_dummy;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 12)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} controlvm_respond_physdev_changestate($p19, 1400, $i26);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4264;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 639456);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i3 := ldv_queue_delayed_work_on_91(8192, $p0, $p1, $i2);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 962} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_91: ref;

axiom ldv_queue_delayed_work_on_91 == $sub.ref(0, 640488);

procedure ldv_queue_delayed_work_on_91($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11;



implementation ldv_queue_delayed_work_on_91($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} {:cexpr "ldv_queue_delayed_work_on_91:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 964} {:cexpr "ldv_queue_delayed_work_on_91:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 966} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 967} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} activate_work_2($p8, 2);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const parser_init_byte_stream: ref;

axiom parser_init_byte_stream == $sub.ref(0, 641520);

procedure parser_init_byte_stream($i0: i64, $i1: i32, $i2: i1, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.62, $M.0, $M.63, assertsPassed;



implementation parser_init_byte_stream($i0: i64, $i1: i32, $i2: i1, $p3: ref) returns ($r: ref)
{
  var $i4: i8;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i1;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p15: ref;
  var $p16: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} {:cexpr "parser_init_byte_stream:arg:addr"} boogie_si_record_i64($i0);
    call {:si_unique_call 970} {:cexpr "parser_init_byte_stream:arg:bytes"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 971} {:cexpr "parser_init_byte_stream:arg:local"} boogie_si_record_i1($i2);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i1, 40);
    call {:si_unique_call 972} {:cexpr "allocbytes"} boogie_si_record_i32($i5);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p3);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i5, 1);
    call {:si_unique_call 973} {:cexpr "allocbytes"} boogie_si_record_i32($i8);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i10 := $M.63;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i9, $i10);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i64($i11, 131072);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i8);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $p18 := kmalloc($i17, 4304);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i8);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i24);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i1);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i26);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, 0);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i4);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i1);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $p42 := __request_region(iomem_resource, $i0, $i41, .str.27, 0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $p46 := ioremap_cache($i0, $i45);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i1);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} memcpy_fromio($p51, $p46, $i52);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i1);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} __release_region(iomem_resource, $i0, $i53);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 1);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p18, $p18;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p15);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i56 == 1);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p16);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb32:
    assume $i62 == 1;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} parser_done($p16);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i56 == 1;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i59 := $M.63;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i58, $i59);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $M.63 := $i60;
    call {:si_unique_call 983} {:cexpr "controlvm_payload_bytes_buffered"} boogie_si_record_i64($i60);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i48 == 1;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i1);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} __release_region(iomem_resource, $i0, $i49);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p15, $p16 := $0.ref, $p18;
    goto $bb9;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p15, $p16 := $0.ref, $p18;
    goto $bb9;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, high_memory);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref($sub.ref(0, 1), 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i34 := virt_to_phys($p33);
    call {:si_unique_call 976} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i35 := $ult.i64($i34, $i0);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i0, $sub.i64(0, 131941395333120));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p37 := $i2p.i64.ref($i36);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_78 := $M.0;
    cmdloc_dummy_var_79 := $M.0;
    call {:si_unique_call 978} cmdloc_dummy_var_80 := $memcpy.i8(cmdloc_dummy_var_78, cmdloc_dummy_var_79, $p39, $p37, $i40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_80;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i35 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p15, $p16 := $0.ref, $p18;
    goto $bb9;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p3);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p15, $p16 := $0.ref, $p18;
    goto $bb9;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.62 := $store.i8($M.62, $p3, 1);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p3);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15, $p16 := $0.ref, $0.ref;
    goto $bb9;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.62 := $store.i8($M.62, $p3, 1);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.62 := $store.i8($M.62, $p3, 0);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const chipset_init: ref;

axiom chipset_init == $sub.ref(0, 642552);

procedure chipset_init($p0: ref);
  free requires assertsPassed;
  modifies $M.39, $M.37, $M.0, $CurrAddr, $M.18;



implementation chipset_init($p0: ref)
{
  var $i2: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i3: i32;
  var $i4: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var vslice_dummy_var_179: i64;
  var vslice_dummy_var_180: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} vslice_dummy_var_179 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $sub.i64(0, 6412928996664672256));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32(1, 0);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} vslice_dummy_var_180 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $sub.i64(0, 6412876194336735232));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2);
    call {:si_unique_call 987} {:cexpr "features"} boogie_si_record_i32($i11);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 1);
    call {:si_unique_call 988} {:cexpr "features"} boogie_si_record_i32($i12);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i3, $i4 := $i12, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(16, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} controlvm_respond_chipset_init($p18, $i4, $i3);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i3, $i4 := 0, $sub.i32(0, 1);
    goto $bb3;
}



const bus_create: ref;

axiom bus_create == $sub.ref(0, 643584);

procedure bus_create($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.0, $M.19, $M.20, $M.39, $M.37, $M.22, $CurrAddr, $M.61, $M.54, $M.55, $M.18, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.40, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.65, $M.1, $M.4, $M.63, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation bus_create($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i17: i32;
  var $p18: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var vslice_dummy_var_181: i64;
  var vslice_dummy_var_182: i64;
  var vslice_dummy_var_183: i64;
  var vslice_dummy_var_184: i64;
  var vslice_dummy_var_185: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 990} {:cexpr "bus_no"} boogie_si_record_i32($i5);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p6 := visorbus_get_device_by_id($i5, $sub.i32(0, 1), $0.ref);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $p19 := kmalloc(2056, 208);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p20, $mul.ref(0, 2064)), $mul.ref(1456, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} INIT_LIST_HEAD($p26);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 2064)), $mul.ref(1964, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i5);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p20, $mul.ref(0, 2064)), $mul.ref(1968, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i5);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i30 := $or.i64($i29, $sub.i64(0, 6413033123851796480));
    call {:si_unique_call 999} {:cexpr "post_code_temp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} vslice_dummy_var_183 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i30);
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $p48 := visorchannel_create($i35, $i39, 208, $i45, $i47);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p20, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p48);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i5);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i57 := $or.i64($i56, $sub.i64(0, 6412997866465263616));
    call {:si_unique_call 1005} {:cexpr "post_code_temp___3"} boogie_si_record_i64($i57);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_185 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i57);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i17, $p18 := 0, $p19;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(16, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} bus_epilog($p18, 257, $p59, $i17, $i64);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i50 == 1;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i5);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i52 := $or.i64($i51, $sub.i64(0, 6413015493011046400));
    call {:si_unique_call 1002} {:cexpr "post_code_temp___2"} boogie_si_record_i64($i52);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} vslice_dummy_var_184 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i52);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p20);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} kfree($p54);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i32(0, 3), $0.ref;
    goto $bb6;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i5);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i24 := $or.i64($i23, $sub.i64(0, 6413015570320457728));
    call {:si_unique_call 996} {:cexpr "post_code_temp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_182 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i24);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i32(0, 3), $p19;
    goto $bb6;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p6);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(1964, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i5);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i15 := $or.i64($i14, $sub.i64(0, 6413015600385228800));
    call {:si_unique_call 992} {:cexpr "post_code_temp"} boogie_si_record_i64($i15);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_181 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i15);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i17, $p18 := $sub.i32(0, 1), $p6;
    goto $bb6;
}



const bus_destroy: ref;

axiom bus_destroy == $sub.ref(0, 644616);

procedure bus_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.0, $CurrAddr, $M.61, $M.54, $M.55, $M.19, $M.20, $M.18, assertsPassed, $M.40, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.65, $M.1, $M.4, $M.63, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation bus_destroy($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i9: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1007} {:cexpr "bus_no"} boogie_si_record_i32($i5);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p6 := visorbus_get_device_by_id($i5, $sub.i32(0, 1), $0.ref);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p6);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(1964, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i9 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(16, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} bus_epilog($p6, 258, $p16, $i9, $i21);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 500);
    goto $bb3;
}



const bus_configure: ref;

axiom bus_configure == $sub.ref(0, 645648);

procedure bus_configure($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.0, $M.39, $M.37, $CurrAddr, $M.61, $M.54, $M.55, $M.19, $M.20, $M.18, assertsPassed, $M.40, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.22, $M.65, $M.1, $M.4, $M.63, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation bus_configure($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i34: i32;
  var $i26: i32;
  var $i17: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var vslice_dummy_var_186: i64;
  var vslice_dummy_var_187: i64;
  var vslice_dummy_var_188: i64;
  var vslice_dummy_var_189: i64;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 1011} {:cexpr "bus_no"} boogie_si_record_i32($i7);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i9 := $or.i64($i8, $sub.i64(0, 6412980111070461952));
    call {:si_unique_call 1012} {:cexpr "post_code_temp"} boogie_si_record_i64($i9);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_186 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i9);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $p11 := visorbus_get_device_by_id($i7, $sub.i32(0, 1), $0.ref);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p11);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(1964, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p11, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p11, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} vslice_dummy_var_190 := visorchannel_set_clientpartition($p36, $i40);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p11, $mul.ref(0, 2064)), $mul.ref(2048, 1));
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $p43 := parser_id_get($p1);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i47 := $extractvalue($p43, 0);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i47);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i49 := $extractvalue($p43, 1);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i49);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p42);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p2);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_81 := $M.0;
    cmdloc_dummy_var_82 := $M.0;
    call {:si_unique_call 1024} cmdloc_dummy_var_83 := $memcpy.i8(cmdloc_dummy_var_81, cmdloc_dummy_var_82, $p50, $p51, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_83;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} parser_param_start($p1, 3);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p52 := parser_string_get($p1);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p11, $mul.ref(0, 2064)), $mul.ref(2008, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $p52);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i7);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i55 := $or.i64($i54, $sub.i64(0, 6412944827914125312));
    call {:si_unique_call 1027} {:cexpr "post_code_temp___3"} boogie_si_record_i64($i55);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} vslice_dummy_var_191 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i55);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i26 := $i34;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(16, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} bus_epilog($p11, 260, $p57, $i17, $i62);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i7);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i32 := $or.i64($i31, $sub.i64(0, 6412962463049842688));
    call {:si_unique_call 1020} {:cexpr "post_code_temp___2"} boogie_si_record_i64($i32);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} vslice_dummy_var_189 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i32);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 5);
    goto $bb9;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i7);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i24 := $or.i64($i23, $sub.i64(0, 6412962480229711872));
    call {:si_unique_call 1018} {:cexpr "post_code_temp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_188 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i24);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 500);
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i7);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i15 := $or.i64($i14, $sub.i64(0, 6412962497409581056));
    call {:si_unique_call 1015} {:cexpr "post_code_temp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_187 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i15);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 500);
    goto $bb3;
}



const my_device_create: ref;

axiom my_device_create == $sub.ref(0, 646680);

procedure my_device_create($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.0, $M.19, $M.20, $M.39, $M.37, $M.65, $M.22, $CurrAddr, $M.61, $M.54, $M.55, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.40, $M.18, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.1, $M.4, $M.63, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation my_device_create($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $i108: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $p21: ref;
  var $i22: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i1;
  var $i132: i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var vslice_dummy_var_192: i64;
  var vslice_dummy_var_193: i64;
  var vslice_dummy_var_194: i64;
  var vslice_dummy_var_195: i64;
  var vslice_dummy_var_196: i64;
  var vslice_dummy_var_197: i64;
  var vslice_dummy_var_198: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1029} {:cexpr "bus_no"} boogie_si_record_i32($i5);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 1030} {:cexpr "dev_no"} boogie_si_record_i32($i9);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $p10 := visorbus_get_device_by_id($i5, $sub.i32(0, 1), $0.ref);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p10);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(1964, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $p36 := visorbus_get_device_by_id($i5, $i9, $0.ref);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $p52 := kmalloc(2056, 208);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p53, $mul.ref(0, 2064)), $mul.ref(1964, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i5);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p53, $mul.ref(0, 2064)), $mul.ref(1968, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i9);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p53, $mul.ref(0, 2064)), $mul.ref(1989, 1));
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p66);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p69);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_84 := $M.0;
    cmdloc_dummy_var_85 := $M.0;
    call {:si_unique_call 1043} cmdloc_dummy_var_86 := $memcpy.i8(cmdloc_dummy_var_84, cmdloc_dummy_var_85, $p70, $p71, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_86;
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p10, $mul.ref(0, 2064)), $mul.ref(32, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 2064)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p72);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i9);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i76 := $shl.i64($i75, 16);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 4294967295);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i78 := $zext.i32.i64($i5);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 65535);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i80 := $or.i64($i77, $i79);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i81 := $or.i64($i80, $sub.i64(0, 6410270575117205504));
    call {:si_unique_call 1044} {:cexpr "post_code_temp___3"} boogie_si_record_i64($i81);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_196 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i81);
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.0, $p95);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p94, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.0, $p97);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $p99 := visorchannel_create($i86, $i90, 208, $i96, $i98);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i100, 0);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p53, $mul.ref(0, 2064)), $mul.ref(0, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p111, $p99);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p53, $mul.ref(0, 2064)), $mul.ref(8, 1));
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p112);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p115);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_87 := $M.0;
    cmdloc_dummy_var_88 := $M.0;
    call {:si_unique_call 1050} cmdloc_dummy_var_89 := $memcpy.i8(cmdloc_dummy_var_87, cmdloc_dummy_var_88, $p116, $p117, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_89;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i118 := $zext.i32.i64($i9);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i119 := $shl.i64($i118, 16);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i120 := $and.i64($i119, 4294967295);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i121 := $zext.i32.i64($i5);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i122 := $and.i64($i121, 65535);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i123 := $or.i64($i120, $i122);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i124 := $or.i64($i123, $sub.i64(0, 6410217721249660928));
    call {:si_unique_call 1051} {:cexpr "post_code_temp___5"} boogie_si_record_i64($i124);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} vslice_dummy_var_198 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i124);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p21, $i22 := $p52, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p0);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p127, $mul.ref(16, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.0, $p128);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i132 := $M.45;
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} device_epilog($p21, $i132, 513, $p126, $i22, $i131, 1);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i101 == 1;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i102 := $zext.i32.i64($i9);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i103 := $shl.i64($i102, 16);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i104 := $and.i64($i103, 4294967295);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i105 := $zext.i32.i64($i5);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i106 := $and.i64($i105, 65535);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i107 := $or.i64($i104, $i106);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i108 := $or.i64($i107, $sub.i64(0, 6410252944276455424));
    call {:si_unique_call 1047} {:cexpr "post_code_temp___4"} boogie_si_record_i64($i108);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} vslice_dummy_var_197 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i108);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p53);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} kfree($p110);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p21, $i22 := $0.ref, $sub.i32(0, 3);
    goto $bb3;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i9);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i57 := $shl.i64($i56, 16);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 4294967295);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i5);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 65535);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i61 := $or.i64($i58, $i60);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i62 := $or.i64($i61, $sub.i64(0, 6410253038765735936));
    call {:si_unique_call 1041} {:cexpr "post_code_temp___2"} boogie_si_record_i64($i62);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} vslice_dummy_var_195 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i62);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p21, $i22 := $p52, $sub.i32(0, 3);
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p36);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(1964, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb10;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i9);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i45 := $shl.i64($i44, 16);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 4294967295);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i5);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 65535);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i49 := $or.i64($i46, $i48);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i50 := $or.i64($i49, $sub.i64(0, 6410253073125474304));
    call {:si_unique_call 1038} {:cexpr "post_code_temp___1"} boogie_si_record_i64($i50);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_194 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i50);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p21, $i22 := $p36, $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i9);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i29 := $shl.i64($i28, 16);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 4294967295);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i5);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 65535);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i33 := $or.i64($i30, $i32);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i34 := $or.i64($i33, $sub.i64(0, 6410253107485212672));
    call {:si_unique_call 1035} {:cexpr "post_code_temp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} vslice_dummy_var_193 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i34);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p21, $i22 := $0.ref, $sub.i32(0, 500);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i9);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i14 := $shl.i64($i13, 16);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 4294967295);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i5);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 65535);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i18 := $or.i64($i15, $i17);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i18, $sub.i64(0, 6410253137549983744));
    call {:si_unique_call 1032} {:cexpr "post_code_temp"} boogie_si_record_i64($i19);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_192 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i19);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p21, $i22 := $0.ref, $sub.i32(0, 500);
    goto $bb3;
}



const parahotplug_process_message: ref;

axiom parahotplug_process_message == $sub.ref(0, 647712);

procedure parahotplug_process_message($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.64, $M.18, $M.66, $CurrAddr, assertsPassed;



implementation parahotplug_process_message($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p1 := parahotplug_request_create($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(56, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} spin_lock(parahotplug_request_list_lock);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} list_add_tail($p16, parahotplug_request_list);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} spin_unlock(parahotplug_request_list_lock);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} parahotplug_request_kickoff($p1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} parahotplug_request_kickoff($p1);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 12)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} controlvm_respond_physdev_changestate($p9, 0, $i15);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} parahotplug_request_destroy($p1);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const my_device_changestate: ref;

axiom my_device_changestate == $sub.ref(0, 648744);

procedure my_device_changestate($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.14, $M.39, $M.37, $M.65, $CurrAddr, $M.61, $M.54, $M.55, $M.19, $M.20, assertsPassed, $M.40, $M.18, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.22, $M.1, $M.4, $M.63, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation my_device_changestate($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i41: i32;
  var $i27: i32;
  var $i42: i1;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var vslice_dummy_var_199: i64;
  var vslice_dummy_var_200: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 1062} {:cexpr "bus_no"} boogie_si_record_i32($i6);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    call {:si_unique_call 1063} {:cexpr "dev_no"} boogie_si_record_i32($i10);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p13);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_90 := $M.0;
    cmdloc_dummy_var_91 := $M.0;
    call {:si_unique_call 1064} cmdloc_dummy_var_92 := $memcpy.i8(cmdloc_dummy_var_90, cmdloc_dummy_var_91, $p14, $p15, 1, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_92;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $p16 := visorbus_get_device_by_id($i6, $i10, $0.ref);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p16);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(1964, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i27 := $i41;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i42 := $sge.i32($i27, 0);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p16);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb9;

  $bb10:
    assume $i44 == 1;
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p0);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(16, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} device_epilog($p16, $i52, 516, $p45, $i27, $i50, 1);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i10);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i34 := $shl.i64($i33, 16);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 4294967295);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i6);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 65535);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i38 := $or.i64($i35, $i37);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i39 := $or.i64($i38, $sub.i64(0, 6410147249426268160));
    call {:si_unique_call 1068} {:cexpr "post_code_temp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_200 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i39);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 501);
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i10);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i20 := $shl.i64($i19, 16);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 4294967295);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i6);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 65535);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i24 := $or.i64($i21, $i23);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, $sub.i64(0, 6410147266606137344));
    call {:si_unique_call 1066} {:cexpr "post_code_temp"} boogie_si_record_i64($i25);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_199 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i25);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 501);
    goto $bb3;
}



const my_device_destroy: ref;

axiom my_device_destroy == $sub.ref(0, 649776);

procedure my_device_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.13, $M.14, $M.65, $M.0, $CurrAddr, $M.61, $M.54, $M.55, $M.19, $M.20, assertsPassed, $M.40, $M.18, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.1, $M.4, $M.63, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation my_device_destroy($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i13: i32;
  var $i20: i1;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 1071} {:cexpr "bus_no"} boogie_si_record_i32($i5);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 1072} {:cexpr "dev_no"} boogie_si_record_i32($i9);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p10 := visorbus_get_device_by_id($i5, $i9, $0.ref);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p10);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(1964, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i20 := $sge.i32($i13, 0);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p10);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb9;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p0);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(16, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i29 := $M.45;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} device_epilog($p10, $i29, 514, $p23, $i13, $i28, 1);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 501);
    goto $bb3;
}



const chipset_ready: ref;

axiom chipset_ready == $sub.ref(0, 650808);

procedure chipset_ready($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation chipset_ready($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i1 := visorchipset_chipset_ready();
    call {:si_unique_call 1076} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(16, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(16, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i17 := $M.60;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_93 := $M.0;
    cmdloc_dummy_var_94 := $M.0;
    call {:si_unique_call 1079} cmdloc_dummy_var_95 := $memcpy.i8(cmdloc_dummy_var_93, cmdloc_dummy_var_94, g_chipset_msg_hdr, $p19, 48, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_95;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i10 := $M.60;
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} controlvm_respond($p0, $i4);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i1);
    call {:si_unique_call 1077} {:cexpr "rc"} boogie_si_record_i32($i3);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;
}



const chipset_selftest: ref;

axiom chipset_selftest == $sub.ref(0, 651840);

procedure chipset_selftest($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.64, $M.18, $CurrAddr;



implementation chipset_selftest($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i1 := visorchipset_chipset_selftest();
    call {:si_unique_call 1081} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(16, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} controlvm_respond($p0, $i4);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i1);
    call {:si_unique_call 1082} {:cexpr "rc"} boogie_si_record_i32($i3);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;
}



const chipset_notready: ref;

axiom chipset_notready == $sub.ref(0, 652872);

procedure chipset_notready($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation chipset_notready($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i1 := visorchipset_chipset_notready();
    call {:si_unique_call 1085} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(16, 1));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} controlvm_respond($p0, $i4);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i1);
    call {:si_unique_call 1086} {:cexpr "rc"} boogie_si_record_i32($i3);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;
}



const parser_done: ref;

axiom parser_done == $sub.ref(0, 653904);

procedure parser_done($p0: ref);
  free requires assertsPassed;
  modifies $M.63;



implementation parser_done($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $M.63;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64($i3, $i5);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $M.63 := $i6;
    call {:si_unique_call 1088} {:cexpr "controlvm_payload_bytes_buffered"} boogie_si_record_i64($i6);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} kfree($p7);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const visorchipset_chipset_notready: ref;

axiom visorchipset_chipset_notready == $sub.ref(0, 654936);

procedure visorchipset_chipset_notready() returns ($r: i32);
  free requires assertsPassed;



implementation visorchipset_chipset_notready() returns ($r: i32)
{
  var vslice_dummy_var_201: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} vslice_dummy_var_201 := kobject_uevent($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), 5);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const visorchipset_chipset_selftest: ref;

axiom visorchipset_chipset_selftest == $sub.ref(0, 655968);

procedure visorchipset_chipset_selftest() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.64, $CurrAddr;



implementation visorchipset_chipset_selftest() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $p0 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $M.64 := $store.ref($M.64, $p3, $p0);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $M.64 := $store.ref($M.64, $p4, $0.ref);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} vslice_dummy_var_202 := sprintf.ref.ref.i32($p5, .str.108, 1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_203 := kobject_uevent_env($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), 2, $p7);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const kobject_uevent_env: ref;

axiom kobject_uevent_env == $sub.ref(0, 657000);

procedure kobject_uevent_env($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kobject_uevent_env($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1095} {:cexpr "kobject_uevent_env:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1096} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1097} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const visorchipset_chipset_ready: ref;

axiom visorchipset_chipset_ready == $sub.ref(0, 658032);

procedure visorchipset_chipset_ready() returns ($r: i32);
  free requires assertsPassed;



implementation visorchipset_chipset_ready() returns ($r: i32)
{
  var vslice_dummy_var_204: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_204 := kobject_uevent($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), 4);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const device_epilog: ref;

axiom device_epilog == $sub.ref(0, 659064);

procedure device_epilog($p0: ref, $i1: i8, $i2: i32, $p3: ref, $i4: i32, $i5: i1, $i6: i1);
  free requires assertsPassed;
  modifies $M.65, $M.0, $M.61, $M.54, $M.55, $M.13, $M.14, $M.19, $M.20, $CurrAddr, assertsPassed, $M.40, $M.18, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.1, $M.4, $M.63, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation device_epilog($p0: ref, $i1: i8, $i2: i32, $p3: ref, $i4: i32, $i5: i1, $i6: i1)
{
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i64;
  var $i11: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var $i50: i8;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i8;
  var $i57: i32;
  var $i58: i8;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $p70: ref;
  var $i71: i8;
  var $i72: i8;
  var $i73: i8;
  var $i74: i32;
  var $i75: i8;
  var $i76: i8;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i8;
  var $i83: i32;
  var $i84: i8;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i8;
  var $i69: i8;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i43: i8;
  var $i103: i8;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $i104: i1;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $p7 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.65 := $store.i8($M.65, $p8, $i1);
    call {:si_unique_call 1100} {:cexpr "device_epilog:arg:cmd"} boogie_si_record_i32($i2);
    call {:si_unique_call 1101} {:cexpr "device_epilog:arg:response"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i5);
    call {:si_unique_call 1102} {:cexpr "device_epilog:arg:need_response"} boogie_si_record_i1($i5);
    call {:si_unique_call 1103} {:cexpr "device_epilog:arg:for_visorbus"} boogie_si_record_i1($i6);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i9);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $p29 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} down(notifier_lock);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i30 := $sge.i32($i4, 0);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i103 := 0;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i12, $i13, $p14 := $i4, $i103, $p29;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i8.i1($i13);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i104 == 1);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} device_responder($i2, $p14, $i12);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} up(notifier_lock);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    return;

  $bb55:
    assume $i104 == 1;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb14:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i2, 514);
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i2, 516);
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i2, 516);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i103 := $i43;
    goto $bb54;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p7);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.65, $p44);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i46 := $lshr.i8($i45, 2);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i46, 1);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i49 := $M.45;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i50 := $lshr.i8($i49, 2);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i51 := $and.i8($i50, 1);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i48, $i52);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p7);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.65, $p70);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i72 := $lshr.i8($i71, 2);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i73 := $and.i8($i72, 1);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i75 := $M.44;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i76 := $lshr.i8($i75, 2);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i77 := $and.i8($i76, 1);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i74, $i78);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i69 := $i95;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i43 := $i69;
    goto $bb31;

  $bb41:
    assume $i79 == 1;
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p7);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.65, $p80);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i82 := $lshr.i8($i81, 7);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i84 := $M.44;
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i85 := $lshr.i8($i84, 7);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i83, $i86);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb43;

  $bb44:
    assume $i87 == 1;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.34, $p88);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i94 := 0;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb49;

  $bb46:
    assume $i91 == 1;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.34, $p92);
    call {:si_unique_call 1109} devirtbounce.2($p93, $p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i94 := 1;
    goto $bb48;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i53 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p7);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.65, $p54);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i56 := $lshr.i8($i55, 7);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i58 := $M.45;
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i59 := $lshr.i8($i58, 7);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i57, $i60);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb34;

  $bb35:
    assume $i61 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.34, $p62);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb40;

  $bb37:
    assume $i65 == 1;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.34, $p66);
    call {:si_unique_call 1108} devirtbounce.2($p67, $p0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i68 := 1;
    goto $bb39;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i2, 514);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb23;

  $bb24:
    assume $i34 == 1;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.34, $p96);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i102 := 0;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i43 := $i102;
    goto $bb31;

  $bb50:
    assume $i99 == 1;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.34, $p100);
    call {:si_unique_call 1110} devirtbounce.2($p101, $p0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i102 := 1;
    goto $bb52;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i2, 513);
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb23;

  $bb26:
    assume $i35 == 1;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.34, $p36);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb31;

  $bb28:
    assume $i39 == 1;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.34, $p40);
    call {:si_unique_call 1107} devirtbounce.2($p41, $p0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb30;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $p22 := kmalloc(48, 208);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p23);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_96 := $M.0;
    cmdloc_dummy_var_97 := $M.0;
    call {:si_unique_call 1105} cmdloc_dummy_var_98 := $memcpy.i8(cmdloc_dummy_var_96, cmdloc_dummy_var_97, $p26, $p27, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_98;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p22);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p29 := $p22;
    goto $bb13;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i12, $i13, $p14 := $sub.i32(0, 3), 0, $p22;
    goto $bb3;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i12, $i13, $p14 := $sub.i32(0, 5), 0, $p20;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i12, $i13, $p14 := $i4, 0, $p3;
    goto $bb3;
}



const parahotplug_request_create: ref;

axiom parahotplug_request_create == $sub.ref(0, 660096);

procedure parahotplug_request_create($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.66, assertsPassed, $CurrAddr;



implementation parahotplug_request_create($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p5: ref;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $p1 := kmalloc(160, 4304);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i6 := parahotplug_next_id();
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i8 := parahotplug_next_expiration();
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i8);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(32, 1));
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_99 := $M.0;
    cmdloc_dummy_var_100 := $M.0;
    call {:si_unique_call 1116} cmdloc_dummy_var_101 := $memcpy.i8(cmdloc_dummy_var_99, cmdloc_dummy_var_100, $p11, $p12, 128, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_101;
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const parahotplug_request_kickoff: ref;

axiom parahotplug_request_kickoff == $sub.ref(0, 661128);

procedure parahotplug_request_kickoff($p0: ref);
  free requires assertsPassed;
  modifies $M.64, $CurrAddr;



implementation parahotplug_request_kickoff($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i8;
  var $i36: i8;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p59: ref;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $p7 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(0, 8));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $M.64 := $store.ref($M.64, $p11, $p1);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(1, 8));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $M.64 := $store.ref($M.64, $p13, $p2);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(2, 8));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $M.64 := $store.ref($M.64, $p15, $p3);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(3, 8));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $M.64 := $store.ref($M.64, $p17, $p4);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(4, 8));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $M.64 := $store.ref($M.64, $p19, $p5);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(5, 8));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $M.64 := $store.ref($M.64, $p21, $p6);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 56)), $mul.ref(6, 8));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.64 := $store.ref($M.64, $p22, $0.ref);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} vslice_dummy_var_205 := sprintf.ref.ref($p23, .str.89);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} vslice_dummy_var_206 := sprintf.ref.ref.i32($p25, .str.90, $i27);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i35 := $lshr.i8($i34, 1);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i36 := $and.i8($i35, 1);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} vslice_dummy_var_207 := sprintf.ref.ref.i32($p29, .str.91, $i37);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p4);
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} vslice_dummy_var_208 := sprintf.ref.ref.i32($p39, .str.92, $i43);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p5);
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i50 := $lshr.i32($i49, 3);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} vslice_dummy_var_209 := sprintf.ref.ref.i32($p45, .str.93, $i50);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p6);
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 7);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} vslice_dummy_var_210 := sprintf.ref.ref.i32($p52, .str.94, $i57);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p7);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} vslice_dummy_var_211 := kobject_uevent_env($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), 2, $p59);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    return;
}



const parahotplug_next_id: ref;

axiom parahotplug_next_id == $sub.ref(0, 662160);

procedure parahotplug_next_id() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.66, $CurrAddr;



implementation parahotplug_next_id() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $M.66 := $store.i32($M.66, $p1, 0);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i2 := atomic_add_return(1, $p0);
    call {:si_unique_call 1133} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const parahotplug_next_expiration: ref;

axiom parahotplug_next_expiration == $sub.ref(0, 663192);

procedure parahotplug_next_expiration() returns ($r: i64);
  free requires assertsPassed;



implementation parahotplug_next_expiration() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i0 := msecs_to_jiffies(2000);
    call {:si_unique_call 1135} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i0, $i1);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 664224);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 1137} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1138} $i3 := devirtbounce.14(0, $p2, $i0, $p2);
    call {:si_unique_call 1139} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const parser_id_get: ref;

axiom parser_id_get == $sub.ref(0, 665256);

procedure parser_id_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation parser_id_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p1);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p41);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_105 := $M.0;
    cmdloc_dummy_var_106 := $M.0;
    call {:si_unique_call 1143} cmdloc_dummy_var_107 := $memcpy.i8(cmdloc_dummy_var_105, cmdloc_dummy_var_106, $p42, $p43, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_107;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5292;

  corral_source_split_5292:
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume $extractvalue($p48, 1) == $extractvalue($u0, 1);
    assume $extractvalue($p48, 0) == $i47;
    goto corral_source_split_5295;

  corral_source_split_5295:
    $p49 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume $extractvalue($p51, 0) == $extractvalue($p48, 0);
    assume $extractvalue($p51, 1) == $i50;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $r := $p51;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 0);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 0);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 0);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p1);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p2);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_102 := $M.0;
    cmdloc_dummy_var_103 := $M.0;
    call {:si_unique_call 1142} cmdloc_dummy_var_104 := $memcpy.i8(cmdloc_dummy_var_102, cmdloc_dummy_var_103, $p37, $p38, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_104;
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const parser_param_start: ref;

axiom parser_param_start == $sub.ref(0, 666288);

procedure parser_param_start($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation parser_param_start($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} {:cexpr "parser_param_start:arg:which_string"} boogie_si_record_i32($i1);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i8 == 1;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p45, $mul.ref($i48, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p49);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p54, $i53);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p34, $mul.ref($i37, 1));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p38);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i42);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p23, $mul.ref($i26, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p27);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(28, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i31);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb12;

  $bb15:
    assume $i10 == 1;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p12, $mul.ref($i15, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i20);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const parser_string_get: ref;

axiom parser_string_get == $sub.ref(0, 667320);

procedure parser_string_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation parser_string_get($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i20: i32;
  var $i21: i64;
  var $i22: i1;
  var $i12: i32;
  var $i19: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p3: ref;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    call {:si_unique_call 1145} {:cexpr "nscan"} boogie_si_record_i64($i7);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p5);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $ult.i64(0, $i7);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i19, 0);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i19;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $p28 := kmalloc($i27, 4304);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i25, 0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i25);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p28, $mul.ref($i33, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p3 := $p28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb29:
    assume $i31 == 1;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i25);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_108 := $M.0;
    cmdloc_dummy_var_109 := $M.0;
    call {:si_unique_call 1149} cmdloc_dummy_var_110 := $memcpy.i8(cmdloc_dummy_var_108, cmdloc_dummy_var_109, $p28, $p5, $i32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_110;
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i23 == 1;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i7);
    call {:si_unique_call 1147} {:cexpr "value_length"} boogie_si_record_i32($i24);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb25;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb14;

  $bb14:
    call $i13, $p14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i12 := parser_string_get_loop_$bb14($p5, $i7, $i13, $p14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i12);
    goto $bb14_last;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p5, $mul.ref($i13, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i18 := $i12;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i12, 1);
    call {:si_unique_call 1146} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i22 := $ult.i64($i21, $i7);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i22 == 1);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb20_dummy;

  $bb16:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb18;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5400;
}



const bus_epilog: ref;

axiom bus_epilog == $sub.ref(0, 668352);

procedure bus_epilog($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i1);
  free requires assertsPassed;
  modifies $M.0, $M.61, $M.54, $M.55, $M.13, $M.14, $M.19, $M.20, $M.18, assertsPassed, $M.40, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.65, $CurrAddr, $M.1, $M.4, $M.63, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation bus_epilog($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i1)
{
  var $i5: i8;
  var $i6: i64;
  var $i7: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i35: i8;
  var $i41: i8;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $i42: i1;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} {:cexpr "bus_epilog:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1151} {:cexpr "bus_epilog:arg:response"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1152} {:cexpr "bus_epilog:arg:need_response"} boogie_si_record_i1($i4);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i5);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} down(notifier_lock);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i3, 0);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i8, $i9, $p10 := $i3, $i41, $p25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i9);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i42 == 1);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} bus_responder($i1, $p10, $i8);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} up(notifier_lock);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i42 == 1;
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb14:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i1, 258);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i1, 258);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i41 := $i35;
    goto $bb32;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.34, $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(8, 1)));
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i35 := $i40;
    goto $bb27;

  $bb28:
    assume $i38 == 1;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.34, $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(8, 1)));
    call {:si_unique_call 1157} devirtbounce.2($p39, $p0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb30;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i1, 257);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb21;

  $bb22:
    assume $i29 == 1;
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.34, busdev_notifiers);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb27;

  $bb24:
    assume $i32 == 1;
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.34, busdev_notifiers);
    call {:si_unique_call 1156} devirtbounce.2($p33, $p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i34 := 1;
    goto $bb26;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p18 := kmalloc(48, 208);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p19);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_111 := $M.0;
    cmdloc_dummy_var_112 := $M.0;
    call {:si_unique_call 1154} cmdloc_dummy_var_113 := $memcpy.i8(cmdloc_dummy_var_111, cmdloc_dummy_var_112, $p22, $p23, 48, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_113;
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p18);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p25 := $p18;
    goto $bb13;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i8, $i9, $p10 := $sub.i32(0, 3), 0, $p18;
    goto $bb3;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2064)), $mul.ref(2024, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i8, $i9, $p10 := $sub.i32(0, 5), 0, $p16;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i8, $i9, $p10 := $i3, 0, $p2;
    goto $bb3;
}



const controlvm_respond_chipset_init: ref;

axiom controlvm_respond_chipset_init == $sub.ref(0, 669384);

procedure controlvm_respond_chipset_init($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation controlvm_respond_chipset_init($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $p3 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    call {:si_unique_call 1161} {:cexpr "controlvm_respond_chipset_init:arg:response"} boogie_si_record_i32($i1);
    call {:si_unique_call 1162} {:cexpr "controlvm_respond_chipset_init:arg:features"} boogie_si_record_i32($i2);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} controlvm_init_response($p3, $p0, $i1);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i2);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i10 := visorchannel_signalinsert($p8, 0, $p9);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 1165} {:cexpr "tmp"} boogie_si_record_i8($i11);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;
}



const virt_to_phys: ref;

axiom virt_to_phys == $sub.ref(0, 670416);

procedure virt_to_phys($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation virt_to_phys($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i2 := __phys_addr($i1);
    call {:si_unique_call 1167} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 671448);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1168} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1169} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1170} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 672480);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    return;
}



const remove_all_visor_devices: ref;

axiom remove_all_visor_devices == $sub.ref(0, 673512);

procedure remove_all_visor_devices();
  free requires assertsPassed;
  modifies $M.0;



implementation remove_all_visor_devices()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, list_all_device_instances);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, $p2i.ref.i64(list_all_device_instances));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p5, $p6 := $p0, $p2;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $p10, $i11, $i12, $p5, $p6 := remove_all_visor_devices_loop_$bb4($p7, $p8, $p9, $p10, $i11, $i12, $p5, $p6);
    goto $bb4_last;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 1448), 2064));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} remove_visor_device($p8);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p6);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $p2i.ref.i64(list_all_device_instances));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $p5, $p6 := $p6, $p10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5546;
}



const ldv_flush_workqueue_28: ref;

axiom ldv_flush_workqueue_28 == $sub.ref(0, 674544);

procedure ldv_flush_workqueue_28($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation ldv_flush_workqueue_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} flush_workqueue($p0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} call_and_disable_all_2(2);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_29: ref;

axiom ldv_destroy_workqueue_29 == $sub.ref(0, 675576);

procedure ldv_destroy_workqueue_29($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation ldv_destroy_workqueue_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} destroy_workqueue($p0);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} call_and_disable_all_2(2);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const ldv_cancel_delayed_work_30: ref;

axiom ldv_cancel_delayed_work_30 == $sub.ref(0, 676608);

procedure ldv_cancel_delayed_work_30($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_cancel_delayed_work_30($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $i1 := cancel_delayed_work($p0);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1177} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1178} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} disable_work_2($p5);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_flush_workqueue_31: ref;

axiom ldv_flush_workqueue_31 == $sub.ref(0, 677640);

procedure ldv_flush_workqueue_31($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation ldv_flush_workqueue_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} flush_workqueue($p0);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} call_and_disable_all_2(2);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_32: ref;

axiom ldv_destroy_workqueue_32 == $sub.ref(0, 678672);

procedure ldv_destroy_workqueue_32($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.0, $M.61, $M.54, $M.55, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation ldv_destroy_workqueue_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} destroy_workqueue($p0);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} call_and_disable_all_2(2);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const remove_bus_type: ref;

axiom remove_bus_type == $sub.ref(0, 679704);

procedure remove_bus_type();
  free requires assertsPassed;



implementation remove_bus_type()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} bus_unregister(visorbus_type);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    return;
}



const bus_unregister: ref;

axiom bus_unregister == $sub.ref(0, 680736);

procedure bus_unregister($p0: ref);
  free requires assertsPassed;



implementation bus_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    return;
}



const controlvm_get_channel_address: ref;

axiom controlvm_get_channel_address == $sub.ref(0, 681768);

procedure controlvm_get_channel_address() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.67, $M.68, $CurrAddr, $M.39, $M.37;



implementation controlvm_get_channel_address() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $M.67 := $store.i64($M.67, $p0, 0);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $M.68 := $store.i32($M.68, $p1, 0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i2 := issue_vmcall_io_controlvm_addr($p0, $p1);
    call {:si_unique_call 1188} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.67, $p0);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const initialize_controlvm_payload: ref;

axiom initialize_controlvm_payload == $sub.ref(0, 682800);

procedure initialize_controlvm_payload();
  free requires assertsPassed;
  modifies $M.0, $M.39, $M.37, $M.46, $CurrAddr;



implementation initialize_controlvm_payload()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i64;
  var $i15: i32;
  var vslice_dummy_var_212: i64;
  var vslice_dummy_var_213: i64;
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $i3 := visorchannel_get_physaddr($p2);
    call {:si_unique_call 1192} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p0, 0);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i6 := visorchannel_read($p4, 200, $p5, 8);
    call {:si_unique_call 1194} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i11 := visorchannel_read($p9, 216, $p10, 4);
    call {:si_unique_call 1197} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p0);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p1);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} vslice_dummy_var_214 := initialize_controlvm_payload_info($i3, $i14, $i15, controlvm_payload_info);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} vslice_dummy_var_213 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6410287548827959296));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} vslice_dummy_var_212 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6410287583187697664));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const visorchipset_file_init: ref;

axiom visorchipset_file_init == $sub.ref(0, 683832);

procedure visorchipset_file_init($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.69, $M.70, $M.57, $M.58, $CurrAddr, $M.73, $M.74, $M.0;



implementation visorchipset_file_init($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p2, $i0);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $M.70 := $p1;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} ldv_cdev_init_117(file_cdev, visorchipset_fops);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $M.57 := $store.ref($M.57, $add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(296, 1)), __this_module);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.69, $p2);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i3, 20);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.69, $p2);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i10 := register_chrdev_region($i9, 1, .str.27);
    call {:si_unique_call 1205} {:cexpr "rc"} boogie_si_record_i32($i10);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.69, $p2);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, $sub.i32(0, 1048576));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $i14 := cdev_add(file_cdev, $i13, 1);
    call {:si_unique_call 1207} {:cexpr "rc"} boogie_si_record_i32($i14);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.69, $p2);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} unregister_chrdev_region($i16, 1);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i8 := $i14;
    goto $bb5;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb5;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i6 := alloc_chrdev_region($p2, 0, 1, .str.27);
    call {:si_unique_call 1203} {:cexpr "rc"} boogie_si_record_i32($i6);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb5;
}



const is_kdump_kernel: ref;

axiom is_kdump_kernel == $sub.ref(0, 684864);

procedure is_kdump_kernel() returns ($r: i32);
  free requires assertsPassed;



implementation is_kdump_kernel() returns ($r: i32)
{
  var $i0: i64;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i0 := $load.i64($M.0, elfcorehdr_addr);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i1 := $ne.i64($i0, $sub.i64(0, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const setup_crash_devices_work_queue: ref;

axiom setup_crash_devices_work_queue == $sub.ref(0, 685896);

procedure setup_crash_devices_work_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.55, $M.0, $M.13, $M.14, $M.19, $M.20, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.65, $CurrAddr, $M.18, $M.61, $M.54, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.40, $M.48, $M.62, $M.1, $M.4, $M.63, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation setup_crash_devices_work_queue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $i29: i16;
  var $i30: i64;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p68: ref;
  var $i69: i64;
  var vslice_dummy_var_215: i1;
  var vslice_dummy_var_216: i64;
  var vslice_dummy_var_217: i64;
  var vslice_dummy_var_218: i64;
  var vslice_dummy_var_219: i64;
  var vslice_dummy_var_220: i64;
  var vslice_dummy_var_221: i64;
  var vslice_dummy_var_222: i64;
  var vslice_dummy_var_223: i64;
  var vslice_dummy_var_224: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $p1 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $p2 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $p3 := $alloc($mul.ref(128, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $p5 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i6 := $M.59;
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} vslice_dummy_var_216 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $sub.i64(0, 6409475988987576320));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 769);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 23);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} chipset_init($p3);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p5);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i23 := visorchannel_read($p21, 3014, $p22, 2);
    call {:si_unique_call 1219} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.71, $p5);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 2);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p4);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} $i35 := visorchannel_read($p33, 3016, $p34, 4);
    call {:si_unique_call 1224} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.72, $p4);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p1);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i42 := visorchannel_read($p38, $i40, $p41, 128);
    call {:si_unique_call 1227} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.72, $p4);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, 128);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p2);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i50 := visorchannel_read($p45, $i48, $p49, 128);
    call {:si_unique_call 1230} {:cexpr "tmp___2"} boogie_si_record_i32($i50);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_222 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6409370169583337472));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} bus_create($p1);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i65 == 1);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} vslice_dummy_var_223 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6409352538742587392));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb27:
    assume $i65 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} my_device_create($p2);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} vslice_dummy_var_224 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $sub.i64(0, 6409458078973952000));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} vslice_dummy_var_221 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6409387800424087552));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb18:
    assume $i43 == 1;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} vslice_dummy_var_220 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6409405439854772224));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} vslice_dummy_var_219 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6409335114060267520));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.71, $p5);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i64($i29);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i31 := $or.i64($i30, $sub.i64(0, 6409317564823896064));
    call {:si_unique_call 1221} {:cexpr "post_code_temp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} vslice_dummy_var_218 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i31);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} vslice_dummy_var_217 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 6409335187074711552));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i8 := $M.35;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $M.55 := 100;
    call {:si_unique_call 1214} {:cexpr "poll_jiffies"} boogie_si_record_i64(100);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p68 := $M.53;
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i69 := $M.55;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} vslice_dummy_var_215 := queue_delayed_work($p68, periodic_controlvm_work, $i69);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 686928);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1238} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $p5 := external_alloc();
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const platform_device_register: ref;

axiom platform_device_register == $sub.ref(0, 687960);

procedure platform_device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation platform_device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1240} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1241} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const visorbus_init: ref;

axiom visorbus_init == $sub.ref(0, 688992);

procedure visorbus_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.38, $M.34, $M.35, $M.36, $M.39, $M.37, $CurrAddr;



implementation visorbus_init() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i8: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var vslice_dummy_var_225: i64;
  var vslice_dummy_var_226: i64;
  var vslice_dummy_var_227: i64;
  var vslice_dummy_var_228: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i1 := $sext.i32.i64(0);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 4294967295);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i3 := $or.i64($i2, $sub.i64(0, 5473362685431119872));
    call {:si_unique_call 1243} {:cexpr "post_code_temp"} boogie_si_record_i64($i3);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} vslice_dummy_var_225 := __unisys_extended_vmcall_gnuc(1803, 4, 4611686018427387904, $i3);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} bus_device_info_init(clientbus_driverinfo, .str.1, .str, .str.2, $0.ref);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i5 := create_bus_type();
    call {:si_unique_call 1247} {:cexpr "rc"} boogie_si_record_i32($i5);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p9 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.4, 131082, 1, $p0, .str.3, .str.5);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $M.38 := $p9;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p10 := $M.38;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} visorchipset_register_busdev(chipset_notifiers, chipset_responders, chipset_driverinfo);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i8);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 4294967295);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i17 := $or.i64($i16, $sub.i64(0, 5476142121977118720));
    call {:si_unique_call 1252} {:cexpr "post_code_temp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} vslice_dummy_var_228 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $i17);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} vslice_dummy_var_227 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 5476107010619473920));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} vslice_dummy_var_226 := __unisys_extended_vmcall_gnuc(1803, 3, 4611686018427387904, $sub.i64(0, 5476282958249721856));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb3;
}



const create_bus_type: ref;

axiom create_bus_type == $sub.ref(0, 690024);

procedure create_bus_type() returns ($r: i32);
  free requires assertsPassed;



implementation create_bus_type() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i0 := bus_register(visorbus_type);
    call {:si_unique_call 1255} {:cexpr "rc"} boogie_si_record_i32($i0);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const bus_register: ref;

axiom bus_register == $sub.ref(0, 691056);

procedure bus_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bus_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1256} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1257} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_cdev_init_117: ref;

axiom ldv_cdev_init_117 == $sub.ref(0, 692088);

procedure ldv_cdev_init_117($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.58, $M.73, $M.74, $M.0, $CurrAddr;



implementation ldv_cdev_init_117($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} cdev_init($p0, $p1);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1259} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} ldv_file_operations_5();
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    return;
}



const alloc_chrdev_region: ref;

axiom alloc_chrdev_region == $sub.ref(0, 693120);

procedure alloc_chrdev_region($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation alloc_chrdev_region($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1261} {:cexpr "alloc_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1262} {:cexpr "alloc_chrdev_region:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1263} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1264} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const register_chrdev_region: ref;

axiom register_chrdev_region == $sub.ref(0, 694152);

procedure register_chrdev_region($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_chrdev_region($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1265} {:cexpr "register_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1266} {:cexpr "register_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1267} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1268} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cdev_add: ref;

axiom cdev_add == $sub.ref(0, 695184);

procedure cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1269} {:cexpr "cdev_add:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1270} {:cexpr "cdev_add:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1271} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1272} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cdev_init: ref;

axiom cdev_init == $sub.ref(0, 696216);

procedure cdev_init($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cdev_init($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_5: ref;

axiom ldv_file_operations_5 == $sub.ref(0, 697248);

procedure ldv_file_operations_5();
  free requires assertsPassed;
  modifies $M.73, $M.74, $M.0, $CurrAddr;



implementation ldv_file_operations_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.73 := $p0;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $M.74 := $p2;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 698280);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p1 := calloc(1, $i0);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1277} __VERIFIER_assume($i4);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const initialize_controlvm_payload_info: ref;

axiom initialize_controlvm_payload_info == $sub.ref(0, 699312);

procedure initialize_controlvm_payload_info($i0: i64, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46;



implementation initialize_controlvm_payload_info($i0: i64, $i1: i64, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p6: ref;
  var $i7: i32;
  var $i19: i1;
  var $i20: i64;
  var $i21: i1;
  var cmdloc_dummy_var_114: [ref]i8;
  var cmdloc_dummy_var_115: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} {:cexpr "initialize_controlvm_payload_info:arg:phys_addr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1279} {:cexpr "initialize_controlvm_payload_info:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 1280} {:cexpr "initialize_controlvm_payload_info:arg:bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_114 := $M.46;
    call {:si_unique_call 1281} cmdloc_dummy_var_115 := $memset.i8(cmdloc_dummy_var_114, $p8, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.46 := cmdloc_dummy_var_115;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i1, 0);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 0);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i0, $i1);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i2);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $p13 := ioremap_cache($i11, $i12);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $M.46 := $store.i64($M.46, $p16, $i1);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p17, $i2);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p18, $p13);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p6, $i7 := $p13, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i7, 0);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p6);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i21 == 1;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} iounmap($p6);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p6, $i7 := $p13, $sub.i32(0, 2);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p6, $i7 := $0.ref, $sub.i32(0, 400);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p6, $i7 := $0.ref, $sub.i32(0, 400);
    goto $bb3;
}



const issue_vmcall_io_controlvm_addr: ref;

axiom issue_vmcall_io_controlvm_addr == $sub.ref(0, 700344);

procedure issue_vmcall_io_controlvm_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.67, $M.68, $M.39, $M.37, $CurrAddr;



implementation issue_vmcall_io_controlvm_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $i4 := virt_to_phys($p3);
    call {:si_unique_call 1286} {:cexpr "physaddr"} boogie_si_record_i64($i4);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 4294967295);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i64($i4, 32);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $i7 := __unisys_vmcall_gnuc(1281, $i5, $i6);
    call {:si_unique_call 1288} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    call {:si_unique_call 1289} {:cexpr "result"} boogie_si_record_i32($i8);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $M.67 := $store.i64($M.67, $p0, $i11);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $M.68 := $store.i32($M.68, $p1, $i13);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __unisys_vmcall_gnuc: ref;

axiom __unisys_vmcall_gnuc == $sub.ref(0, 701376);

procedure __unisys_vmcall_gnuc($i0: i64, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, $M.37, $CurrAddr;



implementation __unisys_vmcall_gnuc($i0: i64, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1294} {:cexpr "__unisys_vmcall_gnuc:arg:tuple"} boogie_si_record_i64($i0);
    call {:si_unique_call 1295} {:cexpr "__unisys_vmcall_gnuc:arg:reg_ebx"} boogie_si_record_i64($i1);
    call {:si_unique_call 1296} {:cexpr "__unisys_vmcall_gnuc:arg:reg_ecx"} boogie_si_record_i64($i2);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} cpuid(1, $p3, $p4, $p5, $p6);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.37, $p5);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i8 := $sge.i32($i7, 0);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1298} $i10 := devirtbounce.15(0, $i0, $i1, $i2);
    call {:si_unique_call 1299} {:cexpr "result"} boogie_si_record_i64($i10);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 1);
    goto $bb3;
}



const visorchipset_ioctl: ref;

axiom visorchipset_ioctl == $sub.ref(0, 702408);

procedure visorchipset_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.39, $M.37, $CurrAddr;



implementation visorchipset_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1302} {:cexpr "visorchipset_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1303} {:cexpr "visorchipset_ioctl:arg:arg"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 2562);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 2562);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i2);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i16 := copy_from_user($p14, $p15, 8);
    call {:si_unique_call 1305} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p3);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $i19 := issue_vmcall_update_physical_time($i18);
    call {:si_unique_call 1310} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb11;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb11;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 1800);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $i8 := issue_vmcall_query_guest_virtual_time_offset();
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i8);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i2);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i11 := copy_to_user($p9, $p10, 8);
    call {:si_unique_call 1308} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb11;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 14);
    goto $bb11;
}



const visorchipset_mmap: ref;

axiom visorchipset_mmap == $sub.ref(0, 703440);

procedure visorchipset_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.75, $CurrAddr;



implementation visorchipset_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i37: i1;
  var $i8: i32;
  var vslice_dummy_var_229: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i5 := $shl.i64($i4, 12);
    call {:si_unique_call 1312} {:cexpr "offset"} boogie_si_record_i64($i5);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, 0);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 4095);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 6);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i12 := $or.i64($i11, 16384);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i12);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p14 := $M.70;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.46, $p14);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $M.70;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.46, $p18);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} vslice_dummy_var_229 := visorchannel_read($p19, 176, $p20, 8);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p2);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p2);
    call {:si_unique_call 1314} {:cexpr "physaddr"} boogie_si_record_i64($i24);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i64($i24, 12);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64($i29, $i31);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i36 := remap_pfn_range($p1, $i26, $i27, $i32, $i35);
    call {:si_unique_call 1316} {:cexpr "tmp"} boogie_si_record_i32($i36);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 11);
    goto $bb3;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 6);
    goto $bb3;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 6);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 6);
    goto $bb3;
}



const visorchipset_open: ref;

axiom visorchipset_open == $sub.ref(0, 704472);

procedure visorchipset_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation visorchipset_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i2 := iminor($p0);
    call {:si_unique_call 1318} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const visorchipset_release: ref;

axiom visorchipset_release == $sub.ref(0, 705504);

procedure visorchipset_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation visorchipset_release($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 706536);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(76, 1));
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const remap_pfn_range: ref;

axiom remap_pfn_range == $sub.ref(0, 707568);

procedure remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.75, $CurrAddr;



implementation remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.75 := $store.i64($M.75, $p6, $i4);
    call {:si_unique_call 1320} {:cexpr "remap_pfn_range:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1321} {:cexpr "remap_pfn_range:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1322} {:cexpr "remap_pfn_range:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1323} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 1324} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const issue_vmcall_query_guest_virtual_time_offset: ref;

axiom issue_vmcall_query_guest_virtual_time_offset == $sub.ref(0, 708600);

procedure issue_vmcall_query_guest_virtual_time_offset() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.39, $M.37, $CurrAddr;



implementation issue_vmcall_query_guest_virtual_time_offset() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i0 := $and.i64(0, 4294967295);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i1 := $lshr.i64(0, 32);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i2 := __unisys_vmcall_gnuc(1800, $i0, $i1);
    call {:si_unique_call 1326} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 709632);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1329} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1330} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} __might_fault(.str.121, 732);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1333} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 1335} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 710664);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1339} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1340} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} __might_fault(.str.121, 697);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1343} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 1345} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const issue_vmcall_update_physical_time: ref;

axiom issue_vmcall_update_physical_time == $sub.ref(0, 711696);

procedure issue_vmcall_update_physical_time($i0: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.37, $CurrAddr;



implementation issue_vmcall_update_physical_time($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} {:cexpr "issue_vmcall_update_physical_time:arg:adjustment"} boogie_si_record_i64($i0);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 4294967295);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i64($i0, 32);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $i3 := __unisys_vmcall_gnuc(2562, $i1, $i2);
    call {:si_unique_call 1349} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    call {:si_unique_call 1350} {:cexpr "result"} boogie_si_record_i32($i4);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 712728);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 713760);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 714792);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1352} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1353} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1354} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 715824);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 716856);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1355} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1356} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1357} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 717888);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 718920);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1358} $r := $malloc($i0);
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 719952);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.76;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1360} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_116 := $M.76;
    call {:si_unique_call 1361} cmdloc_dummy_var_117 := $memset.i8(cmdloc_dummy_var_116, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.76 := cmdloc_dummy_var_117;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_visorchipset_busdev_notifiers_30: ref;

axiom ldv_initialize_visorchipset_busdev_notifiers_30 == $sub.ref(0, 720984);

procedure ldv_initialize_visorchipset_busdev_notifiers_30();
  free requires assertsPassed;
  modifies $M.77, $M.0, $CurrAddr;



implementation ldv_initialize_visorchipset_busdev_notifiers_30()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p0 := ldv_init_zalloc(2056);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $M.77 := $p0;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_bus_type_31: ref;

axiom ldv_initialize_bus_type_31 == $sub.ref(0, 722016);

procedure ldv_initialize_bus_type_31();
  free requires assertsPassed;
  modifies $M.78, $M.0, $CurrAddr;



implementation ldv_initialize_bus_type_31()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $M.78 := $p0;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_sysfs_ops_29: ref;

axiom ldv_initialize_sysfs_ops_29 == $sub.ref(0, 723048);

procedure ldv_initialize_sysfs_ops_29();
  free requires assertsPassed;
  modifies $M.79, $M.80, $M.0, $CurrAddr;



implementation ldv_initialize_sysfs_ops_29()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $p0 := ldv_init_zalloc(296);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $M.79 := $p0;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $p2 := ldv_init_zalloc(32);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $M.80 := $p2;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_32: ref;

axiom ldv_main_exported_32 == $sub.ref(0, 724080);

procedure ldv_main_exported_32();
  free requires assertsPassed;
  modifies $M.81, $M.0, $CurrAddr;



implementation ldv_main_exported_32()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var vslice_dummy_var_230: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1368} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1369} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1370} {:cexpr "tmp___1"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} ldv_stop();
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i4 == 1;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i5 := $M.81;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_230 := version_show($p1, $p2);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1372} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 725112);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_21: ref;

axiom ldv_main_exported_21 == $sub.ref(0, 726144);

procedure ldv_main_exported_21();
  free requires assertsPassed;
  modifies $M.82, $M.0, $CurrAddr;



implementation ldv_main_exported_21()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_231: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1377} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1378} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1379} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} ldv_stop();
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i7 := $M.82;
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} vslice_dummy_var_231 := partition_guid_show($p1, $p4, $p2);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1381} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_26: ref;

axiom ldv_main_exported_26 == $sub.ref(0, 727176);

procedure ldv_main_exported_26();
  free requires assertsPassed;
  modifies $M.83, $M.0, $CurrAddr;



implementation ldv_main_exported_26()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_232: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1386} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1387} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1388} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} ldv_stop();
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i7 := $M.83;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} vslice_dummy_var_232 := clientpartition_show($p1, $p4, $p2);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1390} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_17: ref;

axiom ldv_main_exported_17 == $sub.ref(0, 728208);

procedure ldv_main_exported_17();
  free requires assertsPassed;
  modifies $M.0, $M.84, $CurrAddr;



implementation ldv_main_exported_17()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_233: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1395} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1396} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1397} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} ldv_stop();
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i7 := $M.84;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} vslice_dummy_var_233 := channel_id_show($p1, $p4, $p2);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1399} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_22: ref;

axiom ldv_main_exported_22 == $sub.ref(0, 729240);

procedure ldv_main_exported_22();
  free requires assertsPassed;
  modifies $M.85, $M.0, $CurrAddr;



implementation ldv_main_exported_22()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_234: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $p2 := ldv_init_zalloc(48);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1404} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1405} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1406} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} ldv_stop();
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i7 := $M.85;
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} vslice_dummy_var_234 := partition_handle_show($p1, $p3, $p4);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1408} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_18: ref;

axiom ldv_main_exported_18 == $sub.ref(0, 730272);

procedure ldv_main_exported_18();
  free requires assertsPassed;
  modifies $M.86, $M.0, $CurrAddr;



implementation ldv_main_exported_18()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_235: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1413} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1414} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1415} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} ldv_stop();
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i7 := $M.86;
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_235 := channel_bytes_show($p1, $p4, $p2);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1417} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_30: ref;

axiom ldv_main_exported_30 == $sub.ref(0, 731304);

procedure ldv_main_exported_30();
  free requires assertsPassed;
  modifies $M.87, $M.0, $M.40, $M.39, $M.37, $M.13, $M.14, $M.1, $M.4, $CurrAddr, assertsPassed, $M.18, $M.23, $M.24, $M.25, $M.26, $M.75, $M.42, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.52, $M.53, $M.54, $M.55, $M.61, $M.19, $M.20, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.5, $M.7, $M.9, $M.11, $M.48, $M.62, $M.6, $M.8, $M.10, $M.12, $M.65, $M.58, $M.63, $M.73, $M.74, $M.64, $M.66;



implementation ldv_main_exported_30()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1419} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1421} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} ldv_stop();
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i23 := $M.87;
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb33:
    assume $i24 == 1;
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p25 := $M.77;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} chipset_device_destroy($p25);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1433} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i20 := $M.87;
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb30:
    assume $i21 == 1;
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p22 := $M.77;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} chipset_bus_destroy($p22);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1431} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i17 := $M.87;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb27:
    assume $i18 == 1;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p19 := $M.77;
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} chipset_bus_create($p19);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1429} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i14 := $M.87;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24:
    assume $i15 == 1;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p16 := $M.77;
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} chipset_device_pause($p16);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1427} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i11 := $M.87;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume $i12 == 1;
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p13 := $M.77;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} chipset_device_resume($p13);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1425} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i8 := $M.87;
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p10 := $M.77;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} chipset_device_create($p10);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1423} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_16: ref;

axiom ldv_main_exported_16 == $sub.ref(0, 732336);

procedure ldv_main_exported_16();
  free requires assertsPassed;
  modifies $M.88, $M.0, $CurrAddr, $M.43;



implementation ldv_main_exported_16()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_236: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p0 := ldv_init_zalloc(1);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $p1 := ldv_init_zalloc(48);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $p3 := ldv_init_zalloc(1416);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1438} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1439} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1440} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} ldv_stop();
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i7 := $M.88;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} vslice_dummy_var_236 := client_bus_info_show($p4, $p2, $p0);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_23: ref;

axiom ldv_main_exported_23 == $sub.ref(0, 733368);

procedure ldv_main_exported_23();
  free requires assertsPassed;
  modifies $M.89, $M.0, $M.1, $M.4, $M.23, $M.24, $M.25, $M.26, $M.75, $CurrAddr;



implementation ldv_main_exported_23()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_237: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1447} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1448} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1449} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} ldv_stop();
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i7 := $M.89;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} vslice_dummy_var_237 := typename_show($p3, $p1, $p4);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1451} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_29: ref;

axiom ldv_main_exported_29 == $sub.ref(0, 734400);

procedure ldv_main_exported_29();
  free requires assertsPassed;
  modifies $M.76, $M.90, $M.0, $CurrAddr;



implementation ldv_main_exported_29()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_238: ref;
  var vslice_dummy_var_239: i64;
  var vslice_dummy_var_240: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $p1 := ldv_init_zalloc(1);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} vslice_dummy_var_238 := ldv_memset($p3, 0, 8);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1457} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1459} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ldv_stop();
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i15 := $M.90;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p17 := $M.79;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p18 := $M.80;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} vslice_dummy_var_240 := devmajorminor_attr_show($p17, $p18, $p1);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1463} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i9 := $M.90;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p11 := $M.79;
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p12 := $M.80;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.76, $p0);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} vslice_dummy_var_239 := devmajorminor_attr_store($p11, $p12, $p2, $i13);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1461} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_main_exported_25: ref;

axiom ldv_main_exported_25 == $sub.ref(0, 735432);

procedure ldv_main_exported_25();
  free requires assertsPassed;
  modifies $M.91, $M.0, $CurrAddr;



implementation ldv_main_exported_25()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_241: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p0 := ldv_init_zalloc(1);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $p1 := ldv_init_zalloc(48);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $p3 := ldv_init_zalloc(1416);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1468} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1469} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1470} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} ldv_stop();
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i7 := $M.91;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} vslice_dummy_var_241 := typeguid_show($p4, $p2, $p0);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1472} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_27: ref;

axiom ldv_main_exported_27 == $sub.ref(0, 736464);

procedure ldv_main_exported_27();
  free requires assertsPassed;
  modifies $M.92, $M.0, $CurrAddr;



implementation ldv_main_exported_27()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_242: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p0 := ldv_init_zalloc(1);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $p1 := ldv_init_zalloc(48);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $p3 := ldv_init_zalloc(1416);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1477} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1478} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1479} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} ldv_stop();
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i7 := $M.92;
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} vslice_dummy_var_242 := nbytes_show($p4, $p2, $p0);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1481} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_28: ref;

axiom ldv_main_exported_28 == $sub.ref(0, 737496);

procedure ldv_main_exported_28();
  free requires assertsPassed;
  modifies $M.93, $M.0, $CurrAddr;



implementation ldv_main_exported_28()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_243: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p0 := ldv_init_zalloc(1);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $p1 := ldv_init_zalloc(48);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p3 := ldv_init_zalloc(1416);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1486} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1487} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1488} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_stop();
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i7 := $M.93;
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} vslice_dummy_var_243 := physaddr_show($p4, $p2, $p0);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1490} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_20: ref;

axiom ldv_main_exported_20 == $sub.ref(0, 738528);

procedure ldv_main_exported_20();
  free requires assertsPassed;
  modifies $M.94, $M.0, $CurrAddr;



implementation ldv_main_exported_20()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_244: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1495} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1496} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1497} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_stop();
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i7 := $M.94;
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} vslice_dummy_var_244 := partition_name_show($p1, $p4, $p2);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_24: ref;

axiom ldv_main_exported_24 == $sub.ref(0, 739560);

procedure ldv_main_exported_24();
  free requires assertsPassed;
  modifies $M.95, $M.0, $CurrAddr;



implementation ldv_main_exported_24()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_245: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1504} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1505} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1506} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} ldv_stop();
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i7 := $M.95;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} vslice_dummy_var_245 := zoneguid_show($p3, $p1, $p4);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_19: ref;

axiom ldv_main_exported_19 == $sub.ref(0, 740592);

procedure ldv_main_exported_19();
  free requires assertsPassed;
  modifies $M.96, $M.0, $CurrAddr;



implementation ldv_main_exported_19()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_246: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p0 := ldv_init_zalloc(1);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p1 := ldv_init_zalloc(48);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p3 := ldv_init_zalloc(1416);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1513} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1514} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1515} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_stop();
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i7 := $M.96;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} vslice_dummy_var_246 := channel_addr_show($p4, $p2, $p0);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1517} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_31: ref;

axiom ldv_main_exported_31 == $sub.ref(0, 741624);

procedure ldv_main_exported_31();
  free requires assertsPassed;
  modifies $M.97, $M.1, $M.4, $M.0, $M.23, $M.24, $M.25, $M.26, $CurrAddr;



implementation ldv_main_exported_31()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $p0 := ldv_init_zalloc(120);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $p2 := ldv_init_zalloc(2336);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1521} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1522} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1523} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_stop();
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i12 := $M.97;
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p14 := $M.78;
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} vslice_dummy_var_248 := visorbus_match($p14, $p1);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i8 := $M.97;
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p10 := $M.78;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} vslice_dummy_var_247 := visorbus_uevent($p10, $p3);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1525} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_initialize_device_attribute_12: ref;

axiom ldv_initialize_device_attribute_12 == $sub.ref(0, 742656);

procedure ldv_initialize_device_attribute_12();
  free requires assertsPassed;
  modifies $M.98, $M.99, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_12()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $M.98 := $p0;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $M.99 := $p2;
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_visorchipset_busdev_responders_15: ref;

axiom ldv_initialize_visorchipset_busdev_responders_15 == $sub.ref(0, 743688);

procedure ldv_initialize_visorchipset_busdev_responders_15();
  free requires assertsPassed;
  modifies $M.100, $M.0, $CurrAddr;



implementation ldv_initialize_visorchipset_busdev_responders_15()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $p0 := ldv_init_zalloc(2056);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $M.100 := $p0;
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_13: ref;

axiom ldv_initialize_device_attribute_13 == $sub.ref(0, 744720);

procedure ldv_initialize_device_attribute_13();
  free requires assertsPassed;
  modifies $M.101, $M.102, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_13()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $M.101 := $p0;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $M.102 := $p2;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 745752);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 1534} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 1535} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 1536} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 1537} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_14: ref;

axiom ldv_initialize_device_attribute_14 == $sub.ref(0, 746784);

procedure ldv_initialize_device_attribute_14();
  free requires assertsPassed;
  modifies $M.103, $M.104, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_14()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $M.103 := $p0;
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $M.104 := $p2;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_10: ref;

axiom ldv_initialize_device_attribute_10 == $sub.ref(0, 747816);

procedure ldv_initialize_device_attribute_10();
  free requires assertsPassed;
  modifies $M.105, $M.106, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_10()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $M.105 := $p0;
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.106 := $p2;
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_11: ref;

axiom ldv_initialize_device_attribute_11 == $sub.ref(0, 748848);

procedure ldv_initialize_device_attribute_11();
  free requires assertsPassed;
  modifies $M.107, $M.108, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_11()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $M.107 := $p0;
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $M.108 := $p2;
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_acpi_driver_4: ref;

axiom ldv_initialize_acpi_driver_4 == $sub.ref(0, 749880);

procedure ldv_initialize_acpi_driver_4();
  free requires assertsPassed;
  modifies $M.109, $M.0, $CurrAddr;



implementation ldv_initialize_acpi_driver_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $p0 := ldv_init_zalloc(2256);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $M.109 := $p0;
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 750912);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.110, $M.111, $M.112, $M.113;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $M.110 := 0;
    call {:si_unique_call 1545} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $M.111 := 0;
    call {:si_unique_call 1546} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $M.112 := 0;
    call {:si_unique_call 1547} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $M.113 := 0;
    call {:si_unique_call 1548} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 751944);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.110, $M.55, $M.0, $M.13, $M.14, $M.19, $M.20, $M.111, $M.112, $M.113, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.65, $CurrAddr, $M.18, $M.61, $M.54, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.40, $M.48, $M.62, $M.1, $M.4, $M.63, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1549} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1550} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1551} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} ldv_stop();
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i21 := $M.113;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i23 := $M.113;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.113 := 4;
    call {:si_unique_call 1561} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p25 := $M.114;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} setup_crash_devices_work_queue($p25);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $M.113 := 1;
    call {:si_unique_call 1563} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i16 := $M.112;
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i18 := $M.112;
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.112 := 4;
    call {:si_unique_call 1558} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p20 := $M.114;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} setup_crash_devices_work_queue($p20);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $M.112 := 1;
    call {:si_unique_call 1560} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i11 := $M.111;
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i13 := $M.111;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.111 := 4;
    call {:si_unique_call 1555} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p15 := $M.114;
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} setup_crash_devices_work_queue($p15);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $M.111 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i6 := $M.110;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i8 := $M.110;
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.110 := 4;
    call {:si_unique_call 1552} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p10 := $M.114;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} setup_crash_devices_work_queue($p10);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 1554} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 752976);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.5, $M.0, $M.61, $M.54, $M.55, $M.7, $M.9, $M.11, $M.18, $M.48, $M.62, $CurrAddr, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1565} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1566} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1567} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} ldv_stop();
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i21 := $M.11;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i23 := $M.11;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.11 := 4;
    call {:si_unique_call 1577} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p25 := $M.6;
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} controlvm_periodic_work($p25);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 1579} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i16 := $M.9;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i18 := $M.9;
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.9 := 4;
    call {:si_unique_call 1574} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p20 := $M.6;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} controlvm_periodic_work($p20);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 1576} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i11 := $M.7;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i13 := $M.7;
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.7 := 4;
    call {:si_unique_call 1571} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p15 := $M.6;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} controlvm_periodic_work($p15);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 1573} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.5 := 4;
    call {:si_unique_call 1568} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p10 := $M.6;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} controlvm_periodic_work($p10);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 1570} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 754008);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.76, $M.81, $M.82, $M.115, $M.83, $M.84, $M.5, $M.7, $M.9, $M.11, $M.116, $M.110, $M.111, $M.112, $M.113, $M.117, $M.86, $M.87, $M.88, $M.92, $M.91, $M.93, $M.94, $M.118, $M.95, $M.119, $M.97, $M.120, $M.85, $M.121, $M.122, $M.123, $M.89, $M.90, $M.124, $M.126, $M.127, $M.128, $M.129, $M.130, $M.96, $M.58, $M.0, $M.61, $M.54, $M.55, $M.13, $M.14, $M.19, $M.20, $M.1, $M.4, $M.131, $M.78, $M.105, $M.106, $M.109, $M.100, $M.103, $M.104, $M.98, $M.99, $M.79, $M.80, $M.101, $M.102, $M.77, $M.107, $M.108, $M.48, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.42, $M.23, $M.24, $M.25, $M.26, $M.52, $M.53, $M.132, $M.133, $M.141, $M.142, $M.143, $M.144, $M.145, $M.57, $M.70, $M.51, $M.174, $M.175, $M.63, $M.60, $M.45, $M.44, $M.59, $M.176, $M.36, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.21, $M.41, $M.40, $M.198, $M.199, $M.200, $M.208, $M.209, $M.210, $M.211, $M.212, $M.3, $M.2, $M.35, $M.8, $M.114, $M.10, $M.6, $M.12, $M.73, $M.74, $M.38, $M.56, $M.18, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $CurrAddr, $M.62, $M.39, $M.37, $M.65, $M.67, $M.68, $M.69, $M.75, assertsPassed, $M.43, $M.64, $M.66;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $i77: i32;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $i122: i64;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $i169: i1;
  var $i170: i1;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $p199: ref;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i207: i1;
  var $i208: i1;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $i216: i32;
  var $i217: i1;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $i224: i1;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $i230: i64;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i1;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i1;
  var $i245: i1;
  var $i246: i1;
  var $i247: i32;
  var $i248: i1;
  var $i249: i32;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $i254: i32;
  var $i255: i32;
  var $i256: i32;
  var $i257: i1;
  var $i258: i32;
  var $i259: i1;
  var $i260: i32;
  var $i261: i1;
  var $i262: i64;
  var $i264: i32;
  var $i265: i1;
  var $i266: i32;
  var $i267: i1;
  var $i268: i1;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $i274: i64;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $p279: ref;
  var $i281: i32;
  var $i282: i1;
  var $i283: i32;
  var $i284: i1;
  var $i285: i1;
  var $i286: i1;
  var $i287: i1;
  var $i288: i1;
  var $i289: i1;
  var $i290: i1;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $i294: i32;
  var $i295: i32;
  var $i296: i1;
  var $p297: ref;
  var $i298: i32;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $i302: i32;
  var $i303: i32;
  var $i304: i1;
  var $p305: ref;
  var $i306: i32;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $i310: i32;
  var $i311: i32;
  var $i312: i1;
  var $p313: ref;
  var $i314: i32;
  var $i315: i32;
  var $i316: i1;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i64;
  var $i323: i32;
  var $i324: i1;
  var $i325: i32;
  var $i326: i1;
  var $i327: i1;
  var $i328: i1;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $i333: i32;
  var $i334: i1;
  var $i335: i32;
  var $i336: i32;
  var $i337: i32;
  var $i338: i1;
  var $p339: ref;
  var $i341: i32;
  var $i342: i32;
  var $i343: i32;
  var $i344: i1;
  var $i345: i32;
  var $i346: i1;
  var $i347: i32;
  var $i348: i1;
  var $i349: i1;
  var $i350: i1;
  var $i351: i1;
  var $i352: i1;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i361: i32;
  var $i362: i1;
  var $p363: ref;
  var $p364: ref;
  var $i366: i32;
  var $i367: i32;
  var $i368: i32;
  var $i369: i1;
  var $p370: ref;
  var $p371: ref;
  var $i372: i32;
  var $i373: i32;
  var $i374: i1;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $i378: i1;
  var $p379: ref;
  var $i380: i32;
  var $i381: i64;
  var vslice_dummy_var_249: ref;
  var vslice_dummy_var_250: ref;
  var vslice_dummy_var_251: ref;
  var vslice_dummy_var_252: ref;
  var vslice_dummy_var_253: ref;
  var vslice_dummy_var_254: ref;
  var vslice_dummy_var_255: ref;
  var vslice_dummy_var_256: ref;
  var vslice_dummy_var_257: ref;
  var vslice_dummy_var_258: ref;
  var vslice_dummy_var_259: ref;
  var vslice_dummy_var_260: ref;
  var vslice_dummy_var_261: ref;
  var vslice_dummy_var_262: ref;
  var vslice_dummy_var_263: ref;
  var vslice_dummy_var_264: ref;
  var vslice_dummy_var_265: i64;
  var vslice_dummy_var_266: i64;
  var vslice_dummy_var_267: i64;
  var vslice_dummy_var_268: i64;
  var vslice_dummy_var_269: i64;
  var vslice_dummy_var_270: i64;
  var vslice_dummy_var_271: i64;
  var vslice_dummy_var_272: i64;
  var vslice_dummy_var_273: i64;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i64;
  var vslice_dummy_var_276: i64;
  var vslice_dummy_var_277: i64;
  var vslice_dummy_var_278: i64;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i64;

  $bb0:
    call {:si_unique_call 1581} $initialize();
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} $p14 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $p16 := ldv_init_zalloc(48);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $p19 := ldv_init_zalloc(1416);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $p21 := ldv_init_zalloc(1);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $p22 := ldv_init_zalloc(1);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $p23 := ldv_init_zalloc(1);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $p24 := ldv_init_zalloc(1);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $p25 := ldv_init_zalloc(1);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $p26 := ldv_init_zalloc(1);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $p27 := ldv_init_zalloc(1);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p28 := ldv_init_zalloc(1);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $p29 := ldv_init_zalloc(1416);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $p31 := ldv_init_zalloc(48);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} $p33 := ldv_init_zalloc(1416);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $p35 := ldv_init_zalloc(1);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $p36 := ldv_init_zalloc(1);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} $p37 := ldv_init_zalloc(1);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $p38 := ldv_init_zalloc(48);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $p40 := ldv_init_zalloc(1416);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $p42 := ldv_init_zalloc(1);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $p43 := ldv_init_zalloc(184);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} ldv_initialize();
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p0);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} vslice_dummy_var_249 := ldv_memset($p45, 0, 8);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p1);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} vslice_dummy_var_250 := ldv_memset($p47, 0, 8);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p2);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} vslice_dummy_var_251 := ldv_memset($p49, 0, 8);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p3);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} vslice_dummy_var_252 := ldv_memset($p51, 0, 8);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p4);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} vslice_dummy_var_253 := ldv_memset($p53, 0, 8);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p5);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} vslice_dummy_var_254 := ldv_memset($p55, 0, 8);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p6);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} vslice_dummy_var_255 := ldv_memset($p57, 0, 8);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p7);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} vslice_dummy_var_256 := ldv_memset($p59, 0, 4);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p8);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} vslice_dummy_var_257 := ldv_memset($p61, 0, 4);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p9);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} vslice_dummy_var_258 := ldv_memset($p63, 0, 4);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p10);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} vslice_dummy_var_259 := ldv_memset($p65, 0, 4);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p11);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} vslice_dummy_var_260 := ldv_memset($p67, 0, 4);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p12);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} vslice_dummy_var_261 := ldv_memset($p69, 0, 4);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p13);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} vslice_dummy_var_262 := ldv_memset($p71, 0, 8);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p14);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} vslice_dummy_var_263 := ldv_memset($p73, 0, 4);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p15);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_264 := ldv_memset($p75, 0, 8);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(0);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 1638} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $M.115 := 0;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 1640} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} work_init_2();
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.116 := 1;
    call {:si_unique_call 1643} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} work_init_1();
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $M.117 := 1;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $M.86 := 0;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(0);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $M.92 := 0;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(0);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(0);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $M.93 := 0;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(0);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $M.94 := 0;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $M.118 := 0;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $M.95 := 0;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(0);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $M.119 := 0;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $M.97 := 0;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(0);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $M.120 := 0;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(0);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $M.121 := 0;
    call {:si_unique_call 1659} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $M.122 := 1;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $M.123 := 0;
    call {:si_unique_call 1661} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 1662} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(0);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(0);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $M.124 := 0;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} work_init_3();
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $M.126 := 0;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.127 := 0;
    call {:si_unique_call 1668} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $M.128 := 0;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $M.129 := 0;
    call {:si_unique_call 1670} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $M.130 := 0;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 1672} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $p154, $p155, $i156, $i158, $i159, $p160, $p161, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $p173, $p174, $i175, $i177, $i178, $p179, $p180, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $p192, $p193, $i194, $i196, $i197, $p198, $p199, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $p228, $p229, $i230, $i232, $i233, $p234, $p235, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $p273, $i274, $i276, $i277, $p278, $p279, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $p293, $i294, $i295, $i296, $p297, $i298, $i299, $i300, $p301, $i302, $i303, $i304, $p305, $i306, $i307, $i308, $p309, $i310, $i311, $i312, $p313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $p331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $p339, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $p355, $i357, $i358, $p359, $i361, $i362, $p363, $p364, $i366, $i367, $i368, $i369, $p370, $p371, $i372, $i373, $i374, $i375, $i376, $i377, $i378, $p379, $i380, $i381, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p17, $p18, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p30, $p32, $p34, $p35, $p36, $p37, $p39, $p41, $p42, $p44, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $p154, $p155, $i156, $i158, $i159, $p160, $p161, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $p173, $p174, $i175, $i177, $i178, $p179, $p180, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $p192, $p193, $i194, $i196, $i197, $p198, $p199, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $p228, $p229, $i230, $i232, $i233, $p234, $p235, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $p273, $i274, $i276, $i277, $p278, $p279, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $p293, $i294, $i295, $i296, $p297, $i298, $i299, $i300, $p301, $i302, $i303, $i304, $p305, $i306, $i307, $i308, $p309, $i310, $i311, $i312, $p313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $p331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $p339, $i341, $i342, $i343, $i344, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $p355, $i357, $i358, $p359, $i361, $i362, $p363, $p364, $i366, $i367, $i368, $i369, $p370, $p371, $i372, $i373, $i374, $i375, $i376, $i377, $i378, $p379, $i380, $i381, vslice_dummy_var_265, vslice_dummy_var_266, vslice_dummy_var_267, vslice_dummy_var_268, vslice_dummy_var_269, vslice_dummy_var_270, vslice_dummy_var_271, vslice_dummy_var_272, vslice_dummy_var_273, vslice_dummy_var_274, vslice_dummy_var_275, vslice_dummy_var_276, vslice_dummy_var_277, vslice_dummy_var_278, vslice_dummy_var_279, vslice_dummy_var_280, vslice_dummy_var_281, vslice_dummy_var_282, vslice_dummy_var_283);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i77, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i77, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i77, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i77, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i77, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i77, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} ldv_stop();
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb75_dummy;

  $bb15:
    assume $i84 == 1;
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i345 := $M.58;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i346 := $ne.i32($i345, 0);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb379:
    assume $i346 == 1;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1840} $i347 := __VERIFIER_nondet_int();
    call {:si_unique_call 1841} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i347);
    call {:si_unique_call 1842} {:cexpr "tmp___33"} boogie_si_record_i32($i347);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    $i348 := $slt.i32($i347, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    $i349 := $slt.i32($i347, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i347, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    assume !($i350 == 1);
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} ldv_stop();
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb386:
    assume $i350 == 1;
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i377 := $M.58;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i377, 2);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb409:
    assume $i378 == 1;
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p379 := $M.74;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i380 := $load.i32($M.76, $p14);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i381 := $load.i64($M.76, $p15);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} vslice_dummy_var_283 := visorchipset_ioctl($p379, $i380, $i381);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb384:
    assume $i349 == 1;
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i368 := $M.58;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 1);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb403:
    assume $i369 == 1;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p370 := $M.73;
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $p371 := $M.74;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $i372 := visorchipset_open($p370, $p371);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $M.133 := $i372;
    call {:si_unique_call 1851} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i372);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i373 := $M.133;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 0);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb405:
    assume $i374 == 1;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i375 := $M.121;
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i376 := $add.i32($i375, 1);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $M.121 := $i376;
    call {:si_unique_call 1853} {:cexpr "ref_cnt"} boogie_si_record_i32($i376);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb382:
    assume $i348 == 1;
    assume {:verifier.code 0} true;
    $i351 := $slt.i32($i347, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i351 == 1);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i361 := $M.58;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 2);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb400:
    assume $i362 == 1;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p363 := $M.73;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p364 := $M.74;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} vslice_dummy_var_282 := visorchipset_release($p363, $p364);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1848} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i366 := $M.121;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i367 := $sub.i32($i366, 1);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.121 := $i367;
    call {:si_unique_call 1849} {:cexpr "ref_cnt"} boogie_si_record_i32($i367);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb389:
    assume $i351 == 1;
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i347, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    assume !($i352 == 1);
    goto $bb388;

  $bb391:
    assume $i352 == 1;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i353 := $M.58;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 1);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $i357 := $M.58;
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 2);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb396:
    assume $i358 == 1;
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p359 := $M.74;
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} vslice_dummy_var_281 := visorchipset_mmap($p359, $p44);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1846} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb393:
    assume $i354 == 1;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p355 := $M.74;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} vslice_dummy_var_280 := visorchipset_mmap($p355, $p44);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1844} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb13:
    assume $i83 == 1;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i343 := $M.96;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i344 := $ne.i32($i343, 0);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb376:
    assume $i344 == 1;
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} ldv_main_exported_19();
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb11:
    assume $i82 == 1;
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i323 := $M.130;
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i324 := $ne.i32($i323, 0);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb353:
    assume $i324 == 1;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1828} $i325 := __VERIFIER_nondet_int();
    call {:si_unique_call 1829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i325);
    call {:si_unique_call 1830} {:cexpr "tmp___32"} boogie_si_record_i32($i325);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $i326 := $slt.i32($i325, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i325, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} ldv_stop();
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb358:
    assume $i327 == 1;
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i337 := $M.130;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 2);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb370:
    assume $i338 == 1;
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p339 := $M.109;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} vslice_dummy_var_279 := visorchipset_exit($p339);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $M.130 := 1;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i341 := $M.121;
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i342 := $sub.i32($i341, 1);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $M.121 := $i342;
    call {:si_unique_call 1837} {:cexpr "ref_cnt"} boogie_si_record_i32($i342);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    goto $bb372;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb356:
    assume $i326 == 1;
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i325, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb360;

  $bb361:
    assume $i328 == 1;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i329 := $M.130;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 1);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb363:
    assume $i330 == 1;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p331 := $M.109;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $i332 := visorchipset_init($p331);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $M.132 := $i332;
    call {:si_unique_call 1832} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i332);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i333 := $M.132;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 0);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb365:
    assume $i334 == 1;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.130 := 2;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i335 := $M.121;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i336 := $add.i32($i335, 1);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $M.121 := $i336;
    call {:si_unique_call 1834} {:cexpr "ref_cnt"} boogie_si_record_i32($i336);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    goto $bb367;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i77, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i85 == 1);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i315 := $M.129;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i316 := $ne.i32($i315, 0);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb341:
    assume $i316 == 1;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1822} $i317 := __VERIFIER_nondet_int();
    call {:si_unique_call 1823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i317);
    call {:si_unique_call 1824} {:cexpr "tmp___31"} boogie_si_record_i32($i317);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} ldv_stop();
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb344:
    assume $i318 == 1;
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i319 := $M.129;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 1);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb346:
    assume $i320 == 1;
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i321 := $load.i64($M.76, $p13);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} vslice_dummy_var_278 := devicedisabled_store($p41, $p39, $p42, $i321);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $M.129 := 1;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb18:
    assume $i85 == 1;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i281 := $M.128;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i282 := $ne.i32($i281, 0);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb301:
    assume $i282 == 1;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1806} $i283 := __VERIFIER_nondet_int();
    call {:si_unique_call 1807} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i283);
    call {:si_unique_call 1808} {:cexpr "tmp___30"} boogie_si_record_i32($i283);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i283, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i283, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $slt.i32($i283, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i283, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} ldv_stop();
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb310:
    assume $i287 == 1;
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i311 := $M.128;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 1);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb335:
    assume $i312 == 1;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p313 := $M.100;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.76, $p8);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} device_destroy_response($p313, $i314);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb308:
    assume $i286 == 1;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i307 := $M.128;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 1);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb332:
    assume $i308 == 1;
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p309 := $M.100;
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.76, $p10);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} bus_destroy_response($p309, $i310);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb306:
    assume $i285 == 1;
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i303 := $M.128;
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 1);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb329:
    assume $i304 == 1;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p305 := $M.100;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i306 := $load.i32($M.76, $p12);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} bus_create_response($p305, $i306);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb304:
    assume $i284 == 1;
    assume {:verifier.code 0} true;
    $i288 := $slt.i32($i283, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    $i289 := $slt.i32($i283, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i289 == 1);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i299 := $M.128;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 1);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb326:
    assume $i300 == 1;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p301 := $M.100;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.76, $p7);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} visorchipset_device_pause_response($p301, $i302);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb315:
    assume $i289 == 1;
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i295 := $M.128;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 1);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb323:
    assume $i296 == 1;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p297 := $M.100;
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.76, $p9);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} device_resume_response($p297, $i298);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb313:
    assume $i288 == 1;
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i283, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    assume !($i290 == 1);
    goto $bb312;

  $bb317:
    assume $i290 == 1;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i291 := $M.128;
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 1);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb319:
    assume $i292 == 1;
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p293 := $M.100;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.76, $p11);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} device_create_response($p293, $i294);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb7:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i77, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i77, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i87 == 1);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i264 := $M.127;
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i265 := $ne.i32($i264, 0);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb281:
    assume $i265 == 1;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1798} $i266 := __VERIFIER_nondet_int();
    call {:si_unique_call 1799} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i266);
    call {:si_unique_call 1800} {:cexpr "tmp___29"} boogie_si_record_i32($i266);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $i267 := $slt.i32($i266, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i266, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} ldv_stop();
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb286:
    assume $i268 == 1;
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i276 := $M.127;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 1);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb295:
    assume $i277 == 1;
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p278 := $M.99;
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p279 := $M.98;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} vslice_dummy_var_277 := error_show($p278, $p279, $p37);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb284:
    assume $i267 == 1;
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i266, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb288;

  $bb289:
    assume $i269 == 1;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i270 := $M.127;
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 1);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb291:
    assume $i271 == 1;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p272 := $M.99;
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $p273 := $M.98;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i274 := $load.i64($M.76, $p6);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} vslice_dummy_var_276 := error_store($p272, $p273, $p36, $i274);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb22:
    assume $i87 == 1;
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i256 := $M.126;
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb269:
    assume $i257 == 1;
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1792} $i258 := __VERIFIER_nondet_int();
    call {:si_unique_call 1793} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i258);
    call {:si_unique_call 1794} {:cexpr "tmp___28"} boogie_si_record_i32($i258);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} ldv_stop();
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb272:
    assume $i259 == 1;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i260 := $M.126;
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 1);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb274:
    assume $i261 == 1;
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i262 := $load.i64($M.76, $p5);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} vslice_dummy_var_275 := chipsetready_store($p34, $p32, $p35, $i262);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $M.126 := 1;
    call {:si_unique_call 1796} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb20:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i77, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i88 == 1);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb24:
    assume $i88 == 1;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i241 := $M.124;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i241, 0);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb249:
    assume $i242 == 1;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1782} $i243 := __VERIFIER_nondet_int();
    call {:si_unique_call 1783} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i243);
    call {:si_unique_call 1784} {:cexpr "tmp___27"} boogie_si_record_i32($i243);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i244 := $slt.i32($i243, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i243, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} ldv_stop();
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb254:
    assume $i245 == 1;
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i251 := $M.124;
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 1);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb263:
    assume $i252 == 1;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} vslice_dummy_var_274 := ldv_probe_6();
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $M.124 := 2;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i254 := $M.121;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i254, 1);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $M.121 := $i255;
    call {:si_unique_call 1790} {:cexpr "ref_cnt"} boogie_si_record_i32($i255);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb252:
    assume $i244 == 1;
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i243, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb256;

  $bb257:
    assume $i246 == 1;
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i247 := $M.124;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 2);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb259:
    assume $i248 == 1;
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} visorchipset_dev_release($p30);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i249 := $M.121;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i250 := $sub.i32($i249, 1);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $M.121 := $i250;
    call {:si_unique_call 1787} {:cexpr "ref_cnt"} boogie_si_record_i32($i250);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb5:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i77, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i77, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i77, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i91 == 1);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i239 := $M.90;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i239, 0);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb246:
    assume $i240 == 1;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} ldv_main_exported_29();
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb30:
    assume $i91 == 1;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i237 := $M.89;
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i237, 0);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb243:
    assume $i238 == 1;
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} ldv_main_exported_23();
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb28:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i77, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i92 == 1);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i220 := $M.123;
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb223:
    assume $i221 == 1;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1772} $i222 := __VERIFIER_nondet_int();
    call {:si_unique_call 1773} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i222);
    call {:si_unique_call 1774} {:cexpr "tmp___26"} boogie_si_record_i32($i222);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i223 := $slt.i32($i222, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i222, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    assume !($i224 == 1);
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} ldv_stop();
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb228:
    assume $i224 == 1;
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i232 := $M.123;
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 1);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb237:
    assume $i233 == 1;
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p234 := $M.102;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p235 := $M.101;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} vslice_dummy_var_273 := boottotool_show($p234, $p235, $p28);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1778} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb226:
    assume $i223 == 1;
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i222, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb230;

  $bb231:
    assume $i225 == 1;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i226 := $M.123;
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 1);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb233:
    assume $i227 == 1;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p228 := $M.102;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p229 := $M.101;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i230 := $load.i64($M.76, $p4);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} vslice_dummy_var_272 := boottotool_store($p228, $p229, $p27, $i230);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1776} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb32:
    assume $i92 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i203 := $M.122;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb193:
    assume $i204 == 1;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1723} $i205 := __VERIFIER_nondet_int();
    call {:si_unique_call 1724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i205);
    call {:si_unique_call 1725} {:cexpr "tmp___25"} boogie_si_record_i32($i205);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i205, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i205, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} ldv_stop();
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb198:
    assume $i207 == 1;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i213 := $M.122;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 1);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb211:
    assume $i214 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} $i215 := init_unisys();
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $M.131 := $i215;
    call {:si_unique_call 1730} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i215);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i216 := $M.131;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 0);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $i218 := $M.131;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb216:
    assume $i219 == 1;
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $M.122 := 2;
    call {:si_unique_call 1770} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} ldv_check_final_state();
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb213:
    assume $i217 == 1;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $M.122 := 3;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1732} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_initialize_bus_type_31();
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} ldv_initialize_device_attribute_10();
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $M.130 := 1;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} ldv_initialize_acpi_driver_4();
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $M.129 := 1;
    call {:si_unique_call 1740} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} ldv_initialize_visorchipset_busdev_responders_15();
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} ldv_initialize_device_attribute_14();
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} ldv_initialize_device_attribute_12();
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $M.126 := 1;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1751} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1752} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} ldv_initialize_sysfs_ops_29();
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} ldv_initialize_device_attribute_13();
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1758} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} ldv_initialize_visorchipset_busdev_notifiers_30();
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1762} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1764} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $M.115 := 1;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1766} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} ldv_initialize_device_attribute_11();
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb196:
    assume $i206 == 1;
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i205, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb200;

  $bb201:
    assume $i208 == 1;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i209 := $M.122;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 3);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb203:
    assume $i210 == 1;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i211 := $M.121;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i211, 0);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb205;

  $bb206:
    assume $i212 == 1;
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} exit_unisys();
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $M.122 := 2;
    call {:si_unique_call 1727} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb26:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i77, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i77, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i94 == 1);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i201 := $M.85;
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i201, 0);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb190:
    assume $i202 == 1;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} ldv_main_exported_22();
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb36:
    assume $i94 == 1;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i184 := $M.120;
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb170:
    assume $i185 == 1;
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1714} $i186 := __VERIFIER_nondet_int();
    call {:si_unique_call 1715} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i186);
    call {:si_unique_call 1716} {:cexpr "tmp___24"} boogie_si_record_i32($i186);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i187 := $slt.i32($i186, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i186, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} ldv_stop();
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb175:
    assume $i188 == 1;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i196 := $M.120;
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 1);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb184:
    assume $i197 == 1;
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p198 := $M.108;
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p199 := $M.107;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} vslice_dummy_var_271 := textid_show($p198, $p199, $p25);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb173:
    assume $i187 == 1;
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i186, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb177;

  $bb178:
    assume $i189 == 1;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i190 := $M.120;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 1);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb180:
    assume $i191 == 1;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p192 := $M.108;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p193 := $M.107;
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i194 := $load.i64($M.76, $p3);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} vslice_dummy_var_270 := textid_store($p192, $p193, $p26, $i194);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb34:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i77, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i95 == 1);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i182 := $M.97;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb167:
    assume $i183 == 1;
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} ldv_main_exported_31();
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb38:
    assume $i95 == 1;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i165 := $M.119;
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i165, 0);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb147:
    assume $i166 == 1;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1705} $i167 := __VERIFIER_nondet_int();
    call {:si_unique_call 1706} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i167);
    call {:si_unique_call 1707} {:cexpr "tmp___23"} boogie_si_record_i32($i167);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i168 := $slt.i32($i167, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i167, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i169 == 1);
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} ldv_stop();
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb152:
    assume $i169 == 1;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i177 := $M.119;
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 1);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb161:
    assume $i178 == 1;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p179 := $M.106;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p180 := $M.105;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} vslice_dummy_var_269 := remaining_steps_show($p179, $p180, $p23);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb150:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i167, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb154;

  $bb155:
    assume $i170 == 1;
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i171 := $M.119;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 1);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb157:
    assume $i172 == 1;
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p173 := $M.106;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p174 := $M.105;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i175 := $load.i64($M.76, $p2);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} vslice_dummy_var_268 := remaining_steps_store($p173, $p174, $p24, $i175);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb3:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i77, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i77, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i77, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i77, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i99 == 1);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i163 := $M.95;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb144:
    assume $i164 == 1;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} ldv_main_exported_24();
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb46:
    assume $i99 == 1;
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i146 := $M.118;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb124:
    assume $i147 == 1;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} $i148 := __VERIFIER_nondet_int();
    call {:si_unique_call 1697} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i148);
    call {:si_unique_call 1698} {:cexpr "tmp___22"} boogie_si_record_i32($i148);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i148, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i148, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} ldv_stop();
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb129:
    assume $i150 == 1;
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i158 := $M.118;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 1);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb138:
    assume $i159 == 1;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p160 := $M.104;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p161 := $M.103;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} vslice_dummy_var_267 := toolaction_show($p160, $p161, $p22);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1702} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb127:
    assume $i149 == 1;
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i148, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb131;

  $bb132:
    assume $i151 == 1;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i152 := $M.118;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 1);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb134:
    assume $i153 == 1;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p154 := $M.104;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p155 := $M.103;
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.76, $p1);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} vslice_dummy_var_266 := toolaction_store($p154, $p155, $p21, $i156);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1700} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb44:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i77, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i100 == 1);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i144 := $M.94;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb121:
    assume $i145 == 1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} ldv_main_exported_20();
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb48:
    assume $i100 == 1;
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i142 := $M.93;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i142, 0);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb118:
    assume $i143 == 1;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} ldv_main_exported_28();
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb42:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i77, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i77, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i102 == 1);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i140 := $M.91;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb115:
    assume $i141 == 1;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} ldv_main_exported_25();
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb52:
    assume $i102 == 1;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i138 := $M.92;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb112:
    assume $i139 == 1;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_main_exported_27();
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb50:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i77, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i103 == 1);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i136 := $M.88;
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i136, 0);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb109:
    assume $i137 == 1;
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} ldv_main_exported_16();
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb54:
    assume $i103 == 1;
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i134 := $M.87;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb106:
    assume $i135 == 1;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ldv_main_exported_30();
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i77, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i77, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i77, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i106 == 1);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i132 := $M.86;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb103:
    assume $i133 == 1;
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} ldv_main_exported_18();
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb60:
    assume $i106 == 1;
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i130 := $M.117;
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb100:
    assume $i131 == 1;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} invoke_work_1();
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i77, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i107 == 1);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i128 := $M.116;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb97:
    assume $i129 == 1;
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} invoke_work_2();
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i107 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i126 := $M.84;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb94:
    assume $i127 == 1;
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} ldv_main_exported_17();
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb56:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i77, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i77, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i109 == 1);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i124 := $M.83;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb91:
    assume $i125 == 1;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} ldv_main_exported_26();
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb66:
    assume $i109 == 1;
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i116 := $M.115;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb79:
    assume $i117 == 1;
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1679} $i118 := __VERIFIER_nondet_int();
    call {:si_unique_call 1680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i118);
    call {:si_unique_call 1681} {:cexpr "tmp___21"} boogie_si_record_i32($i118);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} ldv_stop();
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb82:
    assume $i119 == 1;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i120 := $M.115;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb84:
    assume $i121 == 1;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.76, $p0);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} vslice_dummy_var_265 := deviceenabled_store($p20, $p17, $p18, $i122);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $M.115 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb64:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i77, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i110 == 1);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i114 := $M.82;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb76:
    assume $i115 == 1;
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} ldv_main_exported_21();
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb68:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i77, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb17;

  $bb70:
    assume $i111 == 1;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i112 := $M.81;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i113 == 1;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} ldv_main_exported_32();
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb75_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1674} $i77 := __VERIFIER_nondet_int();
    call {:si_unique_call 1675} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i77);
    call {:si_unique_call 1676} {:cexpr "tmp___20"} boogie_si_record_i32($i77);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 755040);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    return;
}



const work_init_3: ref;

axiom work_init_3 == $sub.ref(0, 756072);

procedure work_init_3();
  free requires assertsPassed;



implementation work_init_3()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    return;
}



const exit_unisys: ref;

axiom exit_unisys == $sub.ref(0, 757104);

procedure exit_unisys();
  free requires assertsPassed;



implementation exit_unisys()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} acpi_bus_unregister_driver(unisys_acpi_driver);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    return;
}



const init_unisys: ref;

axiom init_unisys == $sub.ref(0, 758136);

procedure init_unisys() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.37, $CurrAddr;



implementation init_unisys() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i32;
  var vslice_dummy_var_284: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i0 := visorutil_spar_detect();
    call {:si_unique_call 1864} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} $i3 := acpi_bus_register_driver(unisys_acpi_driver);
    call {:si_unique_call 1866} {:cexpr "result"} boogie_si_record_i32($i3);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} vslice_dummy_var_284 := printk.ref(.str.112);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 19);
    goto $bb3;
}



const ldv_probe_6: ref;

axiom ldv_probe_6 == $sub.ref(0, 759168);

procedure ldv_probe_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1868} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1869} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 760200);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    return;
}



const visorutil_spar_detect: ref;

axiom visorutil_spar_detect == $sub.ref(0, 761232);

procedure visorutil_spar_detect() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.37, $CurrAddr;



implementation visorutil_spar_detect() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i8: i1;
  var $i13: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} $i4 := constant_test_bit(159, $add.ref($add.ref(boot_cpu_data, $mul.ref(0, 208)), $mul.ref(20, 1)));
    call {:si_unique_call 1875} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} cpuid(1073741824, $p0, $p1, $p2, $p3);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.138, $p1);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1936289365);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i8);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb8;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.37, $p2);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1884517241);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb5;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.139, $p3);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 875983457);
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb5;
}



const acpi_bus_register_driver: ref;

axiom acpi_bus_register_driver == $sub.ref(0, 762264);

procedure acpi_bus_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acpi_bus_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1877} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1878} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 763296);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const acpi_bus_unregister_driver: ref;

axiom acpi_bus_unregister_driver == $sub.ref(0, 764328);

procedure acpi_bus_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation acpi_bus_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 765360);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1880} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 1} true;
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 766392);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 767424);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 768456);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 769488);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 770520);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 771552);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 772584);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 773616);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 774648);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 775680);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 776712);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 777744);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 778776);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1881} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1882} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1883} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1884} __VERIFIER_assume($i4);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 779808);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 780840);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 781872);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 782904);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 783936);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1885} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1886} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1887} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1888} __VERIFIER_assume($i4);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 784968);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 786000);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 787032);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 788064);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 789096);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1889} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1890} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1891} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1892} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1893} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1894} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1895} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1896} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1897} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1898} __VERIFIER_assume($i7);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1899} __VERIFIER_assume($i11);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 790128);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 791160);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 792192);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 793224);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 794256);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 795288);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 796320);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 797352);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 798384);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1900} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1901} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1902} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1903} __VERIFIER_assume($i10);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 799416);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1904} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1905} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1906} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 800448);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1907} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1908} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 801480);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 802512);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1909} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1910} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 803544);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 804576);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 805608);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1911} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1912} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1913} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1914} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $p6 := malloc($i5);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_118 := $M.0;
    call {:si_unique_call 1916} cmdloc_dummy_var_119 := $memset.i8(cmdloc_dummy_var_118, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_119;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 806640);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 807672);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.0, $M.141, $M.142, $M.143, $M.144, $M.145, $M.57, $M.70, $M.52, $M.51, $M.46, $M.174, $M.175, $M.63, $M.54, $M.61, $M.48, $M.60, $M.53, $M.55, $M.45, $M.44, $M.59, $M.176, $M.36, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.21, $M.41, $M.40, $M.34, $M.198, $M.199, $M.200, $M.208, $M.209, $M.210, $M.211, $M.212, $M.3, $M.2, $M.133, $M.132, $M.131, $M.35, $M.7, $M.130, $M.107, $M.11, $M.99, $M.100, $M.110, $M.105, $M.98, $M.9, $M.109, $M.112, $M.120, $M.5, $M.116, $M.124, $M.8, $M.113, $M.119, $M.114, $M.115, $M.117, $M.121, $M.10, $M.126, $M.6, $M.12, $M.104, $M.118, $M.73, $M.127, $M.111, $M.123, $M.103, $M.106, $M.58, $M.74, $M.122, $M.101, $M.108, $M.102, $M.128, $M.129, $M.38, $M.56, $M.97, $M.81, $M.78, $M.86, $M.80, $M.93, $M.83, $M.79, $M.91, $M.88, $M.89, $M.95, $M.92, $M.96, $M.84, $M.77, $M.90, $M.85, $M.82, $M.87, $M.94, $M.18, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1917} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.0 := $store.ref($M.0, visorbus_type, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(32, 1)), visorbus_bus_groups);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(56, 1)), visorbus_match);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(64, 1)), visorbus_uevent);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorbus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, visorbus_bus_groups, visorbus_bus_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_bus_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.141 := $store.i8($M.141, __kstrtab_visor_periodic_work_stop, 118);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(1, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(2, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(3, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(4, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(5, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(6, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(7, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(8, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(9, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(10, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(11, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(12, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(13, 1)), 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(14, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(15, 1)), 119);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(16, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(17, 1)), 114);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(18, 1)), 107);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(20, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(21, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(22, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(23, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_visor_periodic_work_stop, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.142 := $store.i8($M.142, __kstrtab_visor_periodic_work_start, 118);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(2, 1)), 115);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(3, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(4, 1)), 114);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(5, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(6, 1)), 112);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(7, 1)), 101);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(8, 1)), 114);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(9, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(10, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(11, 1)), 100);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(12, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(13, 1)), 99);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(14, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(15, 1)), 119);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(16, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(17, 1)), 114);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(18, 1)), 107);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(20, 1)), 115);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(21, 1)), 116);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(22, 1)), 97);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(23, 1)), 114);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(24, 1)), 116);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_visor_periodic_work_start, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.143 := $store.i8($M.143, __kstrtab_visor_periodic_work_nextperiod, 118);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(1, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(2, 1)), 115);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(3, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(4, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(5, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(6, 1)), 112);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(7, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(8, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(9, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(10, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(11, 1)), 100);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(12, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(13, 1)), 99);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(14, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(15, 1)), 119);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(16, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(17, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(18, 1)), 107);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(19, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(20, 1)), 110);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(21, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(22, 1)), 120);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(23, 1)), 116);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(24, 1)), 112);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(25, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(26, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(27, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(28, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(29, 1)), 100);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_visor_periodic_work_nextperiod, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.144 := $store.i8($M.144, __kstrtab_visor_periodic_work_destroy, 118);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(1, 1)), 105);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(2, 1)), 115);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(3, 1)), 111);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(4, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(5, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(6, 1)), 112);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(7, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(8, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(9, 1)), 105);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(10, 1)), 111);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(11, 1)), 100);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(12, 1)), 105);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(13, 1)), 99);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(14, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(15, 1)), 119);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(16, 1)), 111);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(17, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(18, 1)), 107);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(19, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(20, 1)), 100);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(21, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(22, 1)), 115);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(23, 1)), 116);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(24, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(25, 1)), 111);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(26, 1)), 121);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_visor_periodic_work_destroy, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.145 := $store.i8($M.145, __kstrtab_visor_periodic_work_create, 118);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(1, 1)), 105);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(2, 1)), 115);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(3, 1)), 111);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(4, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(6, 1)), 112);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(7, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(8, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(9, 1)), 105);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(10, 1)), 111);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(11, 1)), 100);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(12, 1)), 105);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(13, 1)), 99);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(14, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(15, 1)), 119);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(16, 1)), 111);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(17, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(18, 1)), 107);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(19, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(20, 1)), 99);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(21, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(22, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(23, 1)), 97);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(24, 1)), 116);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(25, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_visor_periodic_work_create, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.57 := $store.ref($M.57, file_cdev, $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i64($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.57 := $store.i64($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.57 := $store.i64($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.57 := $store.i64($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.57 := $store.i64($M.57, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.57 := $store.i8($M.57, $add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(288, 1)), 0);
    $M.57 := $store.ref($M.57, $add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(296, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(304, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.57 := $store.ref($M.57, $add.ref($add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(312, 1)), $mul.ref(8, 1)), $0.ref);
    $M.57 := $store.i32($M.57, $add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(328, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref(file_cdev, $mul.ref(0, 336)), $mul.ref(332, 1)), 0);
    $M.70 := $0.ref;
    $M.52 := $sub.i32(0, 1);
    call {:si_unique_call 1918} {:cexpr "major_dev"} boogie_si_record_i32($sub.i32(0, 1));
    $M.51 := 0;
    call {:si_unique_call 1919} {:cexpr "visorchipset_major"} boogie_si_record_i32(0);
    $M.46 := $store.ref($M.46, controlvm_payload_info, $0.ref);
    $M.46 := $store.i64($M.46, $add.ref($add.ref(controlvm_payload_info, $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.46 := $store.i32($M.46, $add.ref($add.ref(controlvm_payload_info, $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.174 := $store.i8($M.174, unisys_device_ids, 80);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 78);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 80);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 48);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 65);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 48);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 55);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.174 := $store.i64($M.174, $add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(16, 1)), 0);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.174 := $store.i8($M.174, $add.ref($add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.174 := $store.i64($M.174, $add.ref($add.ref($add.ref(unisys_device_ids, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(16, 1)), 0);
    $M.175 := $store.i8($M.175, unisys_acpi_driver, 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(1, 1)), 110);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(2, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(3, 1)), 115);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(5, 1)), 115);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(8, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(9, 1)), 112);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(10, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(33, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(34, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(35, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(37, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(38, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(39, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(41, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(42, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(43, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(45, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(46, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(47, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(48, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(49, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(50, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(51, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(52, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(53, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(54, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(55, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(56, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(57, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(58, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(59, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(60, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(61, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(62, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(63, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(64, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(65, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(66, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(67, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(68, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(69, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(70, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(71, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(73, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(74, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(75, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(76, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(77, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(78, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(0, 1)), $mul.ref(79, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(0, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(1, 1)), 110);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(2, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(3, 1)), 115);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(4, 1)), 121);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(5, 1)), 115);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(6, 1)), 95);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(7, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(8, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(9, 1)), 112);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(10, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(11, 1)), 95);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(12, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(13, 1)), 108);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(14, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(15, 1)), 115);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(16, 1)), 115);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(17, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(18, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(19, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(20, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(21, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(22, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(23, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(24, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(25, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(26, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(27, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(28, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(29, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(30, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(31, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(33, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(34, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(35, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(36, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(37, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(38, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(39, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(41, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(42, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(43, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(45, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(46, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(47, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(49, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(50, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(51, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(52, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(53, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(54, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(55, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(56, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(57, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(58, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(59, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(60, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(61, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(62, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(63, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(64, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(65, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(66, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(67, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(68, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(69, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(70, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(71, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(72, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(73, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(74, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(75, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(76, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(77, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(78, 1)), 0);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(80, 1)), $mul.ref(79, 1)), 0);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(160, 1)), unisys_device_ids);
    $M.175 := $store.i32($M.175, $add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(168, 1)), 0);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(176, 1)), $mul.ref(0, 1)), visorchipset_init);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(176, 1)), $mul.ref(8, 1)), visorchipset_exit);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(176, 1)), $mul.ref(16, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(0, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(8, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(16, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(24, 1)), $0.ref);
    $M.175 := $store.i8($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(32, 1)), 0);
    $M.175 := $store.i32($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(36, 1)), 0);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(40, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(48, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(56, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(64, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(72, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(80, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(88, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(96, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(104, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(200, 1)), $mul.ref(112, 1)), $0.ref);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(unisys_acpi_driver, $mul.ref(0, 328)), $mul.ref(320, 1)), __this_module);
    $M.0 := $store.i32($M.0, g_devicechangestate_packet, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(21, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(21, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(g_devicechangestate_packet, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(21, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.ref($M.0, parahotplug_request_list, parahotplug_request_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(parahotplug_request_list, $mul.ref(0, 16)), $mul.ref(8, 1)), parahotplug_request_list);
    $M.0 := $store.i32($M.0, parahotplug_request_list_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(parahotplug_request_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(parahotplug_request_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(parahotplug_request_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(parahotplug_request_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(parahotplug_request_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(parahotplug_request_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(parahotplug_request_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.107);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(parahotplug_request_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(parahotplug_request_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, dev_attr_deviceenabled, .str.106);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_deviceenabled, $mul.ref(0, 48)), $mul.ref(40, 1)), deviceenabled_store);
    $M.0 := $store.ref($M.0, dev_attr_devicedisabled, .str.105);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_devicedisabled, $mul.ref(0, 48)), $mul.ref(40, 1)), devicedisabled_store);
    $M.0 := $store.ref($M.0, visorchipset_parahotplug_attrs, dev_attr_devicedisabled);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_parahotplug_attrs, $mul.ref(0, 24)), $mul.ref(1, 8)), dev_attr_deviceenabled);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_parahotplug_attrs, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    $M.0 := $store.ref($M.0, visorchipset_parahotplug_group, .str.104);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_parahotplug_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_parahotplug_group, $mul.ref(0, 32)), $mul.ref(16, 1)), visorchipset_parahotplug_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_parahotplug_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_chipsetready, .str.103);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 128);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_chipsetready, $mul.ref(0, 48)), $mul.ref(40, 1)), chipsetready_store);
    $M.0 := $store.ref($M.0, visorchipset_guest_attrs, dev_attr_chipsetready);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_guest_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, visorchipset_guest_group, .str.102);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_guest_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_guest_group, $mul.ref(0, 32)), $mul.ref(16, 1)), visorchipset_guest_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_guest_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_remaining_steps, .str.101);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(32, 1)), remaining_steps_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_remaining_steps, $mul.ref(0, 48)), $mul.ref(40, 1)), remaining_steps_store);
    $M.0 := $store.ref($M.0, dev_attr_textid, .str.100);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(32, 1)), textid_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_textid, $mul.ref(0, 48)), $mul.ref(40, 1)), textid_store);
    $M.0 := $store.ref($M.0, dev_attr_error, .str.99);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(32, 1)), error_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_error, $mul.ref(0, 48)), $mul.ref(40, 1)), error_store);
    $M.0 := $store.ref($M.0, dev_attr_boottotool, .str.98);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(32, 1)), boottotool_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_boottotool, $mul.ref(0, 48)), $mul.ref(40, 1)), boottotool_store);
    $M.0 := $store.ref($M.0, dev_attr_toolaction, .str.97);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(32, 1)), toolaction_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_toolaction, $mul.ref(0, 48)), $mul.ref(40, 1)), toolaction_store);
    $M.0 := $store.ref($M.0, visorchipset_install_attrs, dev_attr_toolaction);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_install_attrs, $mul.ref(0, 48)), $mul.ref(1, 8)), dev_attr_boottotool);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_install_attrs, $mul.ref(0, 48)), $mul.ref(2, 8)), dev_attr_error);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_install_attrs, $mul.ref(0, 48)), $mul.ref(3, 8)), dev_attr_textid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_install_attrs, $mul.ref(0, 48)), $mul.ref(4, 8)), dev_attr_remaining_steps);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_install_attrs, $mul.ref(0, 48)), $mul.ref(5, 8)), $0.ref);
    $M.0 := $store.ref($M.0, visorchipset_install_group, .str.96);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_install_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_install_group, $mul.ref(0, 32)), $mul.ref(16, 1)), visorchipset_install_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_install_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, visorchipset_dev_groups, visorchipset_install_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_dev_groups, $mul.ref(0, 32)), $mul.ref(1, 8)), visorchipset_guest_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_dev_groups, $mul.ref(0, 32)), $mul.ref(2, 8)), visorchipset_parahotplug_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_dev_groups, $mul.ref(0, 32)), $mul.ref(3, 8)), $0.ref);
    $M.0 := $store.ref($M.0, visorchipset_platform_device, .str.27);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(12, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(288, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(328, 1)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(88, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(104, 1)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(208, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(209, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(216, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(344, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(352, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(432, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(528, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(532, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(536, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(537, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(540, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(544, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(548, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(552, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(560, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(568, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(576, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(584, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(520, 1)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1144, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1152, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1160, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1168, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1176, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1192, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1192, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1224, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1224, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1248, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1256, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1260, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1264, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1336, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1336, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1352, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1352, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1352, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1392, 1)), visorchipset_dev_groups);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1400, 1)), visorchipset_dev_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1408, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1416, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1417, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(1440, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(1448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(1456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(1464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorchipset_platform_device, $mul.ref(0, 1480)), $mul.ref(1472, 1)), $0.ref);
    $M.63 := 0;
    call {:si_unique_call 1920} {:cexpr "controlvm_payload_bytes_buffered"} boogie_si_record_i64(0);
    $M.54 := 0;
    call {:si_unique_call 1921} {:cexpr "most_recent_message_jiffies"} boogie_si_record_i64(0);
    $M.0 := $store.i32($M.0, controlvm_pending_msg, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(21, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(21, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(controlvm_pending_msg, $mul.ref(0, 128)), $mul.ref(48, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(21, 1)), $mul.ref(2, 1)), 0);
    $M.61 := 0;
    call {:si_unique_call 1922} {:cexpr "controlvm_pending_msg_valid"} boogie_si_record_i8(0);
    $M.48 := $store.i8($M.48, chipset_events, 0);
    $M.48 := $store.i8($M.48, $add.ref($add.ref(chipset_events, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i32($M.0, g_chipset_msg_hdr, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(g_chipset_msg_hdr, $mul.ref(0, 48)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(g_chipset_msg_hdr, $mul.ref(0, 48)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(g_chipset_msg_hdr, $mul.ref(0, 48)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(g_chipset_msg_hdr, $mul.ref(0, 48)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(g_chipset_msg_hdr, $mul.ref(0, 48)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(g_chipset_msg_hdr, $mul.ref(0, 48)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(g_chipset_msg_hdr, $mul.ref(0, 48)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(g_chipset_msg_hdr, $mul.ref(0, 48)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(g_chipset_msg_hdr, $mul.ref(0, 48)), $mul.ref(44, 1)), 0);
    $M.60 := 0;
    call {:si_unique_call 1923} {:cexpr "visorchipset_holdchipsetready"} boogie_si_record_i32(0);
    $M.0 := $store.i64($M.0, periodic_controlvm_work, 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(periodic_controlvm_work, $mul.ref(0, 224)), $mul.ref(216, 1)), 0);
    $M.53 := $0.ref;
    $M.55 := 1;
    call {:si_unique_call 1924} {:cexpr "poll_jiffies"} boogie_si_record_i64(1);
    $M.45 := $sub.i8(0, 9);
    $M.44 := 115;
    $M.46 := $store.ref($M.46, controlvm_channel, $0.ref);
    $M.59 := 1;
    call {:si_unique_call 1925} {:cexpr "visorchipset_visorbusregwait"} boogie_si_record_i32(1);
    $M.176 := $store.i8($M.176, __kstrtab_visorchipset_register_busdev, 118);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(1, 1)), 105);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(2, 1)), 115);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(3, 1)), 111);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(4, 1)), 114);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(5, 1)), 99);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(6, 1)), 104);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(7, 1)), 105);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(8, 1)), 112);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(9, 1)), 115);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(10, 1)), 101);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(11, 1)), 116);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(12, 1)), 95);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(13, 1)), 114);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(14, 1)), 101);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(15, 1)), 103);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(16, 1)), 105);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(17, 1)), 115);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(18, 1)), 116);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(19, 1)), 101);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(20, 1)), 114);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(21, 1)), 95);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(22, 1)), 98);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(23, 1)), 117);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(24, 1)), 115);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(25, 1)), 100);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(26, 1)), 101);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(27, 1)), 118);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_visorchipset_register_busdev, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.36 := $store.ref($M.36, busdev_responders, bus_create_response);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(busdev_responders, $mul.ref(0, 48)), $mul.ref(8, 1)), bus_destroy_response);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(busdev_responders, $mul.ref(0, 48)), $mul.ref(16, 1)), device_create_response);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(busdev_responders, $mul.ref(0, 48)), $mul.ref(24, 1)), device_destroy_response);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(busdev_responders, $mul.ref(0, 48)), $mul.ref(32, 1)), visorchipset_device_pause_response);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(busdev_responders, $mul.ref(0, 48)), $mul.ref(40, 1)), device_resume_response);
    $M.0 := $store.i32($M.0, notifier_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.88);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(72, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(notifier_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(notifier_lock, $mul.ref(0, 96)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(notifier_lock, $mul.ref(80, 1)));
    $M.177 := $store.i8($M.177, __kstrtab_visorbus_get_device_by_id, 118);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(2, 1)), 115);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(3, 1)), 111);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(4, 1)), 114);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(5, 1)), 98);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(6, 1)), 117);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(7, 1)), 115);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(8, 1)), 95);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(9, 1)), 103);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(10, 1)), 101);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(11, 1)), 116);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(12, 1)), 95);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(13, 1)), 100);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(15, 1)), 118);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(16, 1)), 105);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(17, 1)), 99);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(18, 1)), 101);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(20, 1)), 98);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(21, 1)), 121);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(22, 1)), 95);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(23, 1)), 105);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(24, 1)), 100);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_visorbus_get_device_by_id, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.178 := $store.i8($M.178, __kstrtab_visorchannel_debug, 118);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(1, 1)), 105);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(2, 1)), 115);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(3, 1)), 111);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(4, 1)), 114);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(5, 1)), 99);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(6, 1)), 104);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(8, 1)), 110);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(9, 1)), 110);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(10, 1)), 101);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(11, 1)), 108);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(13, 1)), 100);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(14, 1)), 101);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(15, 1)), 98);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(16, 1)), 117);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(17, 1)), 103);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_visorchannel_debug, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.179 := $store.i8($M.179, __kstrtab_visorchannel_signalqueue_max_slots, 118);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(1, 1)), 105);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(2, 1)), 115);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(3, 1)), 111);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(4, 1)), 114);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(5, 1)), 99);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(6, 1)), 104);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(7, 1)), 97);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(8, 1)), 110);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(9, 1)), 110);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(10, 1)), 101);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(11, 1)), 108);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(12, 1)), 95);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(13, 1)), 115);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(14, 1)), 105);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(15, 1)), 103);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(16, 1)), 110);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(17, 1)), 97);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(18, 1)), 108);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(19, 1)), 113);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(20, 1)), 117);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(21, 1)), 101);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(22, 1)), 117);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(23, 1)), 101);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(24, 1)), 95);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(25, 1)), 109);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(26, 1)), 97);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(27, 1)), 120);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(28, 1)), 95);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(29, 1)), 115);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(30, 1)), 108);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(31, 1)), 111);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(32, 1)), 116);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(33, 1)), 115);
    $M.179 := $store.i8($M.179, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_max_slots, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.180 := $store.i8($M.180, __kstrtab_visorchannel_signalqueue_slots_avail, 118);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(1, 1)), 105);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(2, 1)), 115);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(3, 1)), 111);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(4, 1)), 114);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(5, 1)), 99);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(6, 1)), 104);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(7, 1)), 97);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(8, 1)), 110);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(9, 1)), 110);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(10, 1)), 101);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(11, 1)), 108);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(12, 1)), 95);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(13, 1)), 115);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(14, 1)), 105);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(15, 1)), 103);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(16, 1)), 110);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(17, 1)), 97);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(18, 1)), 108);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(19, 1)), 113);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(20, 1)), 117);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(21, 1)), 101);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(22, 1)), 117);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(23, 1)), 101);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(24, 1)), 95);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(25, 1)), 115);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(26, 1)), 108);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(27, 1)), 111);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(28, 1)), 116);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(29, 1)), 115);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(30, 1)), 95);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(31, 1)), 97);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(32, 1)), 118);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(33, 1)), 97);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(34, 1)), 105);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(35, 1)), 108);
    $M.180 := $store.i8($M.180, $add.ref($add.ref(__kstrtab_visorchannel_signalqueue_slots_avail, $mul.ref(0, 37)), $mul.ref(36, 1)), 0);
    $M.181 := $store.i8($M.181, __kstrtab_visorchannel_signalinsert, 118);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(2, 1)), 115);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(3, 1)), 111);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(4, 1)), 114);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(5, 1)), 99);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(6, 1)), 104);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(7, 1)), 97);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(8, 1)), 110);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(9, 1)), 110);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(10, 1)), 101);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(11, 1)), 108);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(12, 1)), 95);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(13, 1)), 115);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(14, 1)), 105);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(15, 1)), 103);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(16, 1)), 110);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(17, 1)), 97);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(18, 1)), 108);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(19, 1)), 105);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(20, 1)), 110);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(21, 1)), 115);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(22, 1)), 101);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(23, 1)), 114);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(24, 1)), 116);
    $M.181 := $store.i8($M.181, $add.ref($add.ref(__kstrtab_visorchannel_signalinsert, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.182 := $store.i8($M.182, __kstrtab_visorchannel_signalremove, 118);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(2, 1)), 115);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(3, 1)), 111);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(4, 1)), 114);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(5, 1)), 99);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(6, 1)), 104);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(7, 1)), 97);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(8, 1)), 110);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(9, 1)), 110);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(10, 1)), 101);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(11, 1)), 108);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(12, 1)), 95);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(13, 1)), 115);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(14, 1)), 105);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(15, 1)), 103);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(16, 1)), 110);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(17, 1)), 97);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(18, 1)), 108);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(19, 1)), 114);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(20, 1)), 101);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(21, 1)), 109);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(22, 1)), 111);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(23, 1)), 118);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(__kstrtab_visorchannel_signalremove, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.183 := $store.i8($M.183, __kstrtab_visorchannel_get_header, 118);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(1, 1)), 105);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(2, 1)), 115);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(3, 1)), 111);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(4, 1)), 114);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(5, 1)), 99);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(6, 1)), 104);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(7, 1)), 97);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(8, 1)), 110);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(9, 1)), 110);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(10, 1)), 101);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(11, 1)), 108);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(13, 1)), 103);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(15, 1)), 116);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(17, 1)), 104);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(18, 1)), 101);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(19, 1)), 97);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(20, 1)), 100);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(22, 1)), 114);
    $M.183 := $store.i8($M.183, $add.ref($add.ref(__kstrtab_visorchannel_get_header, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.184 := $store.i8($M.184, __kstrtab_visorchannel_clear, 118);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(1, 1)), 105);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(2, 1)), 115);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(3, 1)), 111);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(4, 1)), 114);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(5, 1)), 99);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(6, 1)), 104);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(8, 1)), 110);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(9, 1)), 110);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(10, 1)), 101);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(11, 1)), 108);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(13, 1)), 99);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(14, 1)), 108);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(16, 1)), 97);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.184 := $store.i8($M.184, $add.ref($add.ref(__kstrtab_visorchannel_clear, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.185 := $store.i8($M.185, __kstrtab_visorchannel_write, 118);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(1, 1)), 105);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(2, 1)), 115);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(3, 1)), 111);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(4, 1)), 114);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(5, 1)), 99);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(6, 1)), 104);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(8, 1)), 110);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(9, 1)), 110);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(10, 1)), 101);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(11, 1)), 108);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(13, 1)), 119);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(14, 1)), 114);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(16, 1)), 116);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.185 := $store.i8($M.185, $add.ref($add.ref(__kstrtab_visorchannel_write, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.186 := $store.i8($M.186, __kstrtab_visorchannel_read, 118);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(2, 1)), 115);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(3, 1)), 111);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(4, 1)), 114);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(5, 1)), 99);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(6, 1)), 104);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(7, 1)), 97);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(9, 1)), 110);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(10, 1)), 101);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(11, 1)), 108);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(13, 1)), 114);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(14, 1)), 101);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(15, 1)), 97);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.186 := $store.i8($M.186, $add.ref($add.ref(__kstrtab_visorchannel_read, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.187 := $store.i8($M.187, __kstrtab_visorchannel_get_uuid, 118);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(2, 1)), 115);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(3, 1)), 111);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(4, 1)), 114);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(5, 1)), 99);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(6, 1)), 104);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(7, 1)), 97);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(8, 1)), 110);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(9, 1)), 110);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(11, 1)), 108);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(13, 1)), 103);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(17, 1)), 117);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(18, 1)), 117);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(19, 1)), 105);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(20, 1)), 100);
    $M.187 := $store.i8($M.187, $add.ref($add.ref(__kstrtab_visorchannel_get_uuid, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.188 := $store.i8($M.188, __kstrtab_visorchannel_set_clientpartition, 118);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(1, 1)), 105);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(2, 1)), 115);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(3, 1)), 111);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(4, 1)), 114);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(5, 1)), 99);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(6, 1)), 104);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(7, 1)), 97);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(8, 1)), 110);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(9, 1)), 110);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(10, 1)), 101);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(11, 1)), 108);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(12, 1)), 95);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(13, 1)), 115);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(14, 1)), 101);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(15, 1)), 116);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(16, 1)), 95);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(17, 1)), 99);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(18, 1)), 108);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(19, 1)), 105);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(20, 1)), 101);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(21, 1)), 110);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(22, 1)), 116);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(23, 1)), 112);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(24, 1)), 97);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(25, 1)), 114);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(26, 1)), 116);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(27, 1)), 105);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(28, 1)), 116);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(29, 1)), 105);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(30, 1)), 111);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(31, 1)), 110);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_visorchannel_set_clientpartition, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.189 := $store.i8($M.189, __kstrtab_visorchannel_get_clientpartition, 118);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(1, 1)), 105);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(2, 1)), 115);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(3, 1)), 111);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(4, 1)), 114);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(5, 1)), 99);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(6, 1)), 104);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(7, 1)), 97);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(8, 1)), 110);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(9, 1)), 110);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(10, 1)), 101);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(11, 1)), 108);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(12, 1)), 95);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(13, 1)), 103);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(14, 1)), 101);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(15, 1)), 116);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(16, 1)), 95);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(17, 1)), 99);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(18, 1)), 108);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(19, 1)), 105);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(20, 1)), 101);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(21, 1)), 110);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(22, 1)), 116);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(23, 1)), 112);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(24, 1)), 97);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(25, 1)), 114);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(26, 1)), 116);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(27, 1)), 105);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(28, 1)), 116);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(29, 1)), 105);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(30, 1)), 111);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(31, 1)), 110);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_visorchannel_get_clientpartition, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.190 := $store.i8($M.190, __kstrtab_visorchannel_zoneid, 118);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(2, 1)), 115);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(3, 1)), 111);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(5, 1)), 99);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(6, 1)), 104);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(7, 1)), 97);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(8, 1)), 110);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(9, 1)), 110);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(10, 1)), 101);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(11, 1)), 108);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(13, 1)), 122);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(15, 1)), 110);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(16, 1)), 101);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(17, 1)), 105);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_visorchannel_zoneid, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.191 := $store.i8($M.191, __kstrtab_visorchannel_id, 118);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(2, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(3, 1)), 111);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(4, 1)), 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(5, 1)), 99);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(6, 1)), 104);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(7, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(8, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(9, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(12, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(13, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(14, 1)), 100);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_visorchannel_id, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.192 := $store.i8($M.192, __kstrtab_visorchannel_uuid_id, 118);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(2, 1)), 115);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(3, 1)), 111);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(4, 1)), 114);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(5, 1)), 99);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(6, 1)), 104);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(8, 1)), 110);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(9, 1)), 110);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(13, 1)), 117);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(14, 1)), 117);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(15, 1)), 105);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(16, 1)), 100);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(17, 1)), 95);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(18, 1)), 105);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(19, 1)), 100);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_visorchannel_uuid_id, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.193 := $store.i8($M.193, __kstrtab_visorchannel_get_nbytes, 118);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(1, 1)), 105);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(2, 1)), 115);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(3, 1)), 111);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(4, 1)), 114);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(5, 1)), 99);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(6, 1)), 104);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(7, 1)), 97);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(8, 1)), 110);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(9, 1)), 110);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(10, 1)), 101);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(11, 1)), 108);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(13, 1)), 103);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(15, 1)), 116);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(17, 1)), 110);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(18, 1)), 98);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(19, 1)), 121);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(20, 1)), 116);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(22, 1)), 115);
    $M.193 := $store.i8($M.193, $add.ref($add.ref(__kstrtab_visorchannel_get_nbytes, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.194 := $store.i8($M.194, __kstrtab_visorchannel_get_physaddr, 118);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(2, 1)), 115);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(3, 1)), 111);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(4, 1)), 114);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(5, 1)), 99);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(6, 1)), 104);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(7, 1)), 97);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(8, 1)), 110);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(9, 1)), 110);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(10, 1)), 101);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(11, 1)), 108);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(12, 1)), 95);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(13, 1)), 103);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(14, 1)), 101);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(15, 1)), 116);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(17, 1)), 112);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(18, 1)), 104);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(19, 1)), 121);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(20, 1)), 115);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(21, 1)), 97);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(22, 1)), 100);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(23, 1)), 100);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(24, 1)), 114);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_visorchannel_get_physaddr, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.195 := $store.i8($M.195, __kstrtab_visorchannel_destroy, 118);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(2, 1)), 115);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(3, 1)), 111);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(4, 1)), 114);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(5, 1)), 99);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(6, 1)), 104);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(8, 1)), 110);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(9, 1)), 110);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(13, 1)), 100);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(15, 1)), 115);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(17, 1)), 114);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(18, 1)), 111);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(19, 1)), 121);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_visorchannel_destroy, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.196 := $store.i8($M.196, __kstrtab_visorchannel_create_with_lock, 118);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(1, 1)), 105);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(2, 1)), 115);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(3, 1)), 111);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(4, 1)), 114);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(5, 1)), 99);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(6, 1)), 104);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(7, 1)), 97);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(8, 1)), 110);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(9, 1)), 110);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(10, 1)), 101);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(11, 1)), 108);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(12, 1)), 95);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(13, 1)), 99);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(14, 1)), 114);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(15, 1)), 101);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(16, 1)), 97);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(17, 1)), 116);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(18, 1)), 101);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(19, 1)), 95);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(20, 1)), 119);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(21, 1)), 105);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(22, 1)), 116);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(23, 1)), 104);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(24, 1)), 95);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(25, 1)), 108);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(26, 1)), 111);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(27, 1)), 99);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(28, 1)), 107);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_visorchannel_create_with_lock, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.197 := $store.i8($M.197, __kstrtab_visorchannel_create, 118);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(2, 1)), 115);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(3, 1)), 111);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(4, 1)), 114);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(5, 1)), 99);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(6, 1)), 104);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(7, 1)), 97);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(8, 1)), 110);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(9, 1)), 110);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(10, 1)), 101);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(11, 1)), 108);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(13, 1)), 99);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(14, 1)), 114);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(15, 1)), 101);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(17, 1)), 116);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_visorchannel_create, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.21 := $store.i8($M.21, spar_video_guid, 5);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), $sub.i8(0, 25));
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), $sub.i8(0, 42));
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 60);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i8(0, 94));
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), $sub.i8(0, 42));
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), $sub.i8(0, 91));
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 74);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i8(0, 83));
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1)), 92);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1)), 123);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1)), 8);
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1)), $sub.i8(0, 120));
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1)), $sub.i8(0, 99));
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1)), $sub.i8(0, 1));
    $M.21 := $store.i8($M.21, $add.ref($add.ref($add.ref(spar_video_guid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1)), $sub.i8(0, 30));
    $M.41 := $store.i8($M.41, spar_vbus_channel_protocol_uuid, 27);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 51);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 59);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 25);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i8(0, 113));
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), $sub.i8(0, 59));
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), $sub.i8(0, 38));
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 17);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i8(0, 107));
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1)), $sub.i8(0, 87));
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1)), $sub.i8(0, 32));
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1)), $sub.i8(0, 127));
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1)), 22);
    $M.41 := $store.i8($M.41, $add.ref($add.ref($add.ref(spar_vbus_channel_protocol_uuid, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.ref($M.0, dev_attr_client_bus_info, .str.63);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(32, 1)), client_bus_info_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_client_bus_info, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_channel_id, .str.62);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(32, 1)), channel_id_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_channel_id, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_channel_bytes, .str.61);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(32, 1)), channel_bytes_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_channel_bytes, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_channel_addr, .str.60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(32, 1)), channel_addr_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_channel_addr, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_partition_name, .str.59);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(32, 1)), partition_name_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_partition_name, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_partition_guid, .str.58);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(32, 1)), partition_guid_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_partition_guid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_partition_handle, .str.57);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(32, 1)), partition_handle_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_partition_handle, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attrs, dev_attr_partition_handle);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attrs, $mul.ref(0, 64)), $mul.ref(1, 8)), dev_attr_partition_guid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attrs, $mul.ref(0, 64)), $mul.ref(2, 8)), dev_attr_partition_name);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attrs, $mul.ref(0, 64)), $mul.ref(3, 8)), dev_attr_channel_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attrs, $mul.ref(0, 64)), $mul.ref(4, 8)), dev_attr_channel_bytes);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attrs, $mul.ref(0, 64)), $mul.ref(5, 8)), dev_attr_channel_id);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attrs, $mul.ref(0, 64)), $mul.ref(6, 8)), dev_attr_client_bus_info);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attrs, $mul.ref(0, 64)), $mul.ref(7, 8)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_grp, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_grp, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_grp, $mul.ref(0, 32)), $mul.ref(16, 1)), dev_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_grp, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, visorbus_groups, dev_attr_grp);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_typename, .str.55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(32, 1)), typename_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_typename, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_zoneguid, .str.54);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(32, 1)), zoneguid_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_zoneguid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_typeguid, .str.53);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(32, 1)), typeguid_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_typeguid, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_clientpartition, .str.52);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(32, 1)), clientpartition_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_clientpartition, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_nbytes, .str.51);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(32, 1)), nbytes_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_nbytes, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_physaddr, .str.50);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(32, 1)), physaddr_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_physaddr, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, channel_attrs, dev_attr_physaddr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(channel_attrs, $mul.ref(0, 48)), $mul.ref(1, 8)), dev_attr_nbytes);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(channel_attrs, $mul.ref(0, 48)), $mul.ref(2, 8)), dev_attr_clientpartition);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(channel_attrs, $mul.ref(0, 48)), $mul.ref(3, 8)), dev_attr_typeguid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(channel_attrs, $mul.ref(0, 48)), $mul.ref(4, 8)), dev_attr_zoneguid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(channel_attrs, $mul.ref(0, 48)), $mul.ref(5, 8)), dev_attr_typename);
    $M.0 := $store.ref($M.0, channel_attr_grp, .str.49);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(channel_attr_grp, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(channel_attr_grp, $mul.ref(0, 32)), $mul.ref(16, 1)), channel_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(channel_attr_grp, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, visorbus_dev_groups, channel_attr_grp);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_dev_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.40 := 0;
    call {:si_unique_call 1926} {:cexpr "bus_count"} boogie_si_record_i64(0);
    $M.0 := $store.ref($M.0, list_all_bus_instances, list_all_bus_instances);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(list_all_bus_instances, $mul.ref(0, 16)), $mul.ref(8, 1)), list_all_bus_instances);
    $M.0 := $store.ref($M.0, list_all_device_instances, list_all_device_instances);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(list_all_device_instances, $mul.ref(0, 16)), $mul.ref(8, 1)), list_all_device_instances);
    $M.34 := $store.ref($M.34, chipset_notifiers, chipset_bus_create);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(chipset_notifiers, $mul.ref(0, 48)), $mul.ref(8, 1)), chipset_bus_destroy);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(chipset_notifiers, $mul.ref(0, 48)), $mul.ref(16, 1)), chipset_device_create);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(chipset_notifiers, $mul.ref(0, 48)), $mul.ref(24, 1)), chipset_device_destroy);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(chipset_notifiers, $mul.ref(0, 48)), $mul.ref(32, 1)), chipset_device_pause);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(chipset_notifiers, $mul.ref(0, 48)), $mul.ref(40, 1)), chipset_device_resume);
    $M.198 := $store.i8($M.198, __kstrtab_visorbus_disable_channel_interrupts, 118);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(1, 1)), 105);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(2, 1)), 115);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(3, 1)), 111);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(4, 1)), 114);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(5, 1)), 98);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(6, 1)), 117);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(7, 1)), 115);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(8, 1)), 95);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(9, 1)), 100);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(10, 1)), 105);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(11, 1)), 115);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(12, 1)), 97);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(13, 1)), 98);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(14, 1)), 108);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(15, 1)), 101);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(16, 1)), 95);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(17, 1)), 99);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(18, 1)), 104);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(19, 1)), 97);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(20, 1)), 110);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(21, 1)), 110);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(22, 1)), 101);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(23, 1)), 108);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(24, 1)), 95);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(25, 1)), 105);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(26, 1)), 110);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(27, 1)), 116);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(28, 1)), 101);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(29, 1)), 114);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(30, 1)), 114);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(31, 1)), 117);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(32, 1)), 112);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(33, 1)), 116);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(34, 1)), 115);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_visorbus_disable_channel_interrupts, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.199 := $store.i8($M.199, __kstrtab_visorbus_enable_channel_interrupts, 118);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(1, 1)), 105);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(2, 1)), 115);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(3, 1)), 111);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(4, 1)), 114);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(5, 1)), 98);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(6, 1)), 117);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(7, 1)), 115);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(8, 1)), 95);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(9, 1)), 101);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(10, 1)), 110);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(11, 1)), 97);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(12, 1)), 98);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(13, 1)), 108);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(14, 1)), 101);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(15, 1)), 95);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(16, 1)), 99);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(17, 1)), 104);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(18, 1)), 97);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(19, 1)), 110);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(20, 1)), 110);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(21, 1)), 101);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(22, 1)), 108);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(23, 1)), 95);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(24, 1)), 105);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(25, 1)), 110);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(26, 1)), 116);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(27, 1)), 101);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(28, 1)), 114);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(29, 1)), 114);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(30, 1)), 117);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(31, 1)), 112);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(32, 1)), 116);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(33, 1)), 115);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_visorbus_enable_channel_interrupts, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.200 := $store.i8($M.200, __kstrtab_visorbus_registerdevnode, 118);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(1, 1)), 105);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(2, 1)), 115);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(3, 1)), 111);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(4, 1)), 114);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(5, 1)), 98);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(6, 1)), 117);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(7, 1)), 115);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(8, 1)), 95);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(9, 1)), 114);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(10, 1)), 101);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(11, 1)), 103);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(12, 1)), 105);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(14, 1)), 116);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(15, 1)), 101);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(16, 1)), 114);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(17, 1)), 100);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(18, 1)), 101);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(19, 1)), 118);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(20, 1)), 110);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(22, 1)), 100);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_visorbus_registerdevnode, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.208 := $store.i8($M.208, __kstrtab_visorbus_clear_channel, 118);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(2, 1)), 115);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(3, 1)), 111);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(4, 1)), 114);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(5, 1)), 98);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(6, 1)), 117);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(7, 1)), 115);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(8, 1)), 95);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(9, 1)), 99);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(10, 1)), 108);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(11, 1)), 101);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(12, 1)), 97);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(13, 1)), 114);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(16, 1)), 104);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(17, 1)), 97);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(18, 1)), 110);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(19, 1)), 110);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(21, 1)), 108);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_visorbus_clear_channel, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.209 := $store.i8($M.209, __kstrtab_visorbus_write_channel, 118);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(2, 1)), 115);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(3, 1)), 111);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(4, 1)), 114);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(5, 1)), 98);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(6, 1)), 117);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(7, 1)), 115);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(8, 1)), 95);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(9, 1)), 119);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(10, 1)), 114);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(11, 1)), 105);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(12, 1)), 116);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(16, 1)), 104);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(17, 1)), 97);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(18, 1)), 110);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(19, 1)), 110);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(21, 1)), 108);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_visorbus_write_channel, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.210 := $store.i8($M.210, __kstrtab_visorbus_read_channel, 118);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(1, 1)), 105);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(2, 1)), 115);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(3, 1)), 111);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(4, 1)), 114);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(5, 1)), 98);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(6, 1)), 117);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(7, 1)), 115);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(8, 1)), 95);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(9, 1)), 114);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(11, 1)), 97);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(12, 1)), 100);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(14, 1)), 99);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(15, 1)), 104);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(16, 1)), 97);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(17, 1)), 110);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(18, 1)), 110);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(20, 1)), 108);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_visorbus_read_channel, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.211 := $store.i8($M.211, __kstrtab_visorbus_unregister_visor_driver, 118);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(1, 1)), 105);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(2, 1)), 115);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(3, 1)), 111);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(4, 1)), 114);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(5, 1)), 98);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(6, 1)), 117);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(7, 1)), 115);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(8, 1)), 95);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(9, 1)), 117);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(10, 1)), 110);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(11, 1)), 114);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(12, 1)), 101);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(13, 1)), 103);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(14, 1)), 105);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(15, 1)), 115);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(16, 1)), 116);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(17, 1)), 101);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(18, 1)), 114);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(19, 1)), 95);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(20, 1)), 118);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(21, 1)), 105);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(22, 1)), 115);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(23, 1)), 111);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(24, 1)), 114);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(25, 1)), 95);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(26, 1)), 100);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(27, 1)), 114);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(28, 1)), 105);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(29, 1)), 118);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(30, 1)), 101);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(31, 1)), 114);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_visorbus_unregister_visor_driver, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.212 := $store.i8($M.212, __kstrtab_visorbus_register_visor_driver, 118);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(1, 1)), 105);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(2, 1)), 115);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(3, 1)), 111);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(4, 1)), 114);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(5, 1)), 98);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(6, 1)), 117);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(7, 1)), 115);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(8, 1)), 95);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(9, 1)), 114);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(10, 1)), 101);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(11, 1)), 103);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(12, 1)), 105);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(13, 1)), 115);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(14, 1)), 116);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(15, 1)), 101);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(16, 1)), 114);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(17, 1)), 95);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(18, 1)), 118);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(19, 1)), 105);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(20, 1)), 115);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(21, 1)), 111);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(22, 1)), 114);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(23, 1)), 95);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(24, 1)), 100);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(25, 1)), 114);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(26, 1)), 105);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(27, 1)), 118);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(28, 1)), 101);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(29, 1)), 114);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_visorbus_register_visor_driver, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.3 := 0;
    call {:si_unique_call 1927} {:cexpr "visorbus_forcenomatch"} boogie_si_record_i32(0);
    $M.2 := 0;
    call {:si_unique_call 1928} {:cexpr "visorbus_forcematch"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, bus_attr_version, .str.32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(32, 1)), version_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(bus_attr_version, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, visorbus_bus_attrs, bus_attr_version);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_bus_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, visorbus_bus_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_bus_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_bus_group, $mul.ref(0, 32)), $mul.ref(16, 1)), visorbus_bus_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(visorbus_bus_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.133 := 0;
    call {:si_unique_call 1929} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.132 := 0;
    call {:si_unique_call 1930} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.131 := 0;
    call {:si_unique_call 1931} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.34 := $store.ref($M.34, busdev_notifiers, $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.34 := $store.ref($M.34, $add.ref($add.ref(busdev_notifiers, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.35 := 0;
    call {:si_unique_call 1932} {:cexpr "visorbusregistered"} boogie_si_record_i32(0);
    $M.7 := 0;
    call {:si_unique_call 1933} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.130 := 0;
    call {:si_unique_call 1934} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.107 := $0.ref;
    $M.11 := 0;
    call {:si_unique_call 1935} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.99 := $0.ref;
    $M.100 := $0.ref;
    $M.110 := 0;
    call {:si_unique_call 1936} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.105 := $0.ref;
    $M.98 := $0.ref;
    call {:si_unique_call 1937} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 1938} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.109 := $0.ref;
    $M.112 := 0;
    call {:si_unique_call 1939} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.120 := 0;
    call {:si_unique_call 1940} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1941} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.116 := 0;
    call {:si_unique_call 1942} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1943} {:cexpr "ldv_work_3_1"} boogie_si_record_i32(0);
    $M.124 := 0;
    call {:si_unique_call 1944} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.8 := $0.ref;
    $M.113 := 0;
    call {:si_unique_call 1945} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.119 := 0;
    call {:si_unique_call 1946} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.114 := $0.ref;
    $M.115 := 0;
    call {:si_unique_call 1947} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.117 := 0;
    call {:si_unique_call 1948} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    call {:si_unique_call 1949} {:cexpr "ldv_work_3_3"} boogie_si_record_i32(0);
    $M.121 := 0;
    call {:si_unique_call 1950} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.10 := $0.ref;
    $M.126 := 0;
    call {:si_unique_call 1951} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.6 := $0.ref;
    $M.12 := $0.ref;
    $M.104 := $0.ref;
    call {:si_unique_call 1952} {:cexpr "ldv_work_3_0"} boogie_si_record_i32(0);
    $M.118 := 0;
    call {:si_unique_call 1953} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    call {:si_unique_call 1954} {:cexpr "ldv_work_3_2"} boogie_si_record_i32(0);
    $M.73 := $0.ref;
    $M.127 := 0;
    call {:si_unique_call 1955} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.111 := 0;
    call {:si_unique_call 1956} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.123 := 0;
    call {:si_unique_call 1957} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.103 := $0.ref;
    $M.106 := $0.ref;
    $M.58 := 0;
    call {:si_unique_call 1958} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.74 := $0.ref;
    $M.122 := 0;
    call {:si_unique_call 1959} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.101 := $0.ref;
    $M.108 := $0.ref;
    $M.102 := $0.ref;
    $M.128 := 0;
    call {:si_unique_call 1960} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.129 := 0;
    call {:si_unique_call 1961} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, clientbus_driverinfo, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(58, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(61, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(63, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(65, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(67, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(69, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(70, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(71, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(77, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(81, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(89, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(58, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(61, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(63, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(65, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(67, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(69, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(70, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(71, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(77, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(81, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(89, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(97, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(98, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(99, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(101, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(102, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(103, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(104, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(105, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(106, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(107, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(108, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(109, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(110, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(111, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(113, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(114, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(115, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(116, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(117, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(118, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(119, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(121, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(122, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(123, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(124, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(125, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(126, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(clientbus_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(127, 1)), 0);
    $M.0 := $store.i8($M.0, chipset_driverinfo, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(58, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(61, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(63, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(65, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(67, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(69, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(70, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(71, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(77, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(81, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(89, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(32, 1)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(45, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(47, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(49, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(54, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(57, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(58, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(61, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(62, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(63, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(65, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(67, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(69, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(70, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(71, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(77, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(79, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(81, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(89, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(96, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(97, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(98, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(99, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(100, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(101, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(102, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(103, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(104, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(105, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(106, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(107, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(108, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(109, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(110, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(111, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(113, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(114, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(115, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(116, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(117, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(118, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(119, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(121, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(122, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(123, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(124, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(125, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(126, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(chipset_driverinfo, $mul.ref(0, 256)), $mul.ref(128, 1)), $mul.ref(127, 1)), 0);
    $M.36 := $store.ref($M.36, chipset_responders, $0.ref);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.36 := $store.ref($M.36, $add.ref($add.ref(chipset_responders, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.38 := $0.ref;
    $M.56 := $0.ref;
    $M.0 := $store.i64($M.0, periodic_work, 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(periodic_work, $mul.ref(0, 224)), $mul.ref(216, 1)), 0);
    $M.97 := 0;
    call {:si_unique_call 1962} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1963} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(0);
    $M.78 := $0.ref;
    $M.86 := 0;
    call {:si_unique_call 1964} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    $M.80 := $0.ref;
    $M.93 := 0;
    call {:si_unique_call 1965} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1966} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(0);
    $M.79 := $0.ref;
    $M.91 := 0;
    call {:si_unique_call 1967} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1968} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 1969} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 1970} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 1971} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 1972} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1973} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    $M.77 := $0.ref;
    $M.90 := 0;
    call {:si_unique_call 1974} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1975} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1976} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 1977} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 1978} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 1979} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.290 := $store.i8($M.290, .str.34, 37);
    $M.290 := $store.i8($M.290, $add.ref($add.ref(.str.34, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.290 := $store.i8($M.290, $add.ref($add.ref(.str.34, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.290 := $store.i8($M.290, $add.ref($add.ref(.str.34, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.46 := $store.i8($M.46, .str.4, 37);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.4, $mul.ref(0, 3)), $mul.ref(1, 1)), 115);
    $M.46 := $store.i8($M.46, $add.ref($add.ref(.str.4, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.291 := $store.i8($M.291, .str.40, 37);
    $M.291 := $store.i8($M.291, $add.ref($add.ref(.str.40, $mul.ref(0, 9)), $mul.ref(1, 1)), 115);
    $M.291 := $store.i8($M.291, $add.ref($add.ref(.str.40, $mul.ref(0, 9)), $mul.ref(2, 1)), 9);
    $M.291 := $store.i8($M.291, $add.ref($add.ref(.str.40, $mul.ref(0, 9)), $mul.ref(3, 1)), 37);
    $M.291 := $store.i8($M.291, $add.ref($add.ref(.str.40, $mul.ref(0, 9)), $mul.ref(4, 1)), 115);
    $M.291 := $store.i8($M.291, $add.ref($add.ref(.str.40, $mul.ref(0, 9)), $mul.ref(5, 1)), 9);
    $M.291 := $store.i8($M.291, $add.ref($add.ref(.str.40, $mul.ref(0, 9)), $mul.ref(6, 1)), 37);
    $M.291 := $store.i8($M.291, $add.ref($add.ref(.str.40, $mul.ref(0, 9)), $mul.ref(7, 1)), 115);
    $M.291 := $store.i8($M.291, $add.ref($add.ref(.str.40, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.292 := $store.i8($M.292, .str.36, 37);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.36, $mul.ref(0, 7)), $mul.ref(1, 1)), 100);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.36, $mul.ref(0, 7)), $mul.ref(2, 1)), 58);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.36, $mul.ref(0, 7)), $mul.ref(3, 1)), 37);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.36, $mul.ref(0, 7)), $mul.ref(4, 1)), 100);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.36, $mul.ref(0, 7)), $mul.ref(5, 1)), 10);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.36, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.293 := $store.i8($M.293, .str.6, 37);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.6, $mul.ref(0, 5)), $mul.ref(1, 1)), 112);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.6, $mul.ref(0, 5)), $mul.ref(2, 1)), 85);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.6, $mul.ref(0, 5)), $mul.ref(3, 1)), 76);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.6, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.294 := $store.i8($M.294, .str.45, 48);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(1, 1)), 120);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(2, 1)), 37);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(3, 1)), 76);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(4, 1)), 120);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(5, 1)), 10);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.295 := $store.i8($M.295, .str.71, 48);
    $M.295 := $store.i8($M.295, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(1, 1)), 120);
    $M.295 := $store.i8($M.295, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(2, 1)), 37);
    $M.295 := $store.i8($M.295, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(3, 1)), 108);
    $M.295 := $store.i8($M.295, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(4, 1)), 120);
    $M.295 := $store.i8($M.295, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(5, 1)), 10);
    $M.295 := $store.i8($M.295, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.296 := $store.i8($M.296, .str.44, 123);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(1, 1)), 37);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(2, 1)), 112);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(3, 1)), 85);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(4, 1)), 98);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(5, 1)), 125);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.44, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.297 := $store.i8($M.297, .str.70, 67);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(1, 1)), 108);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(2, 1)), 105);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(3, 1)), 101);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(4, 1)), 110);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(5, 1)), 116);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(6, 1)), 32);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(7, 1)), 100);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(8, 1)), 101);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(9, 1)), 118);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(10, 1)), 105);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(11, 1)), 99);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(12, 1)), 101);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(13, 1)), 32);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(14, 1)), 47);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(15, 1)), 32);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(16, 1)), 99);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(17, 1)), 108);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(18, 1)), 105);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(19, 1)), 101);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(20, 1)), 110);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(21, 1)), 116);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(22, 1)), 32);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(23, 1)), 100);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(24, 1)), 114);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(25, 1)), 105);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(26, 1)), 118);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(27, 1)), 101);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(28, 1)), 114);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(29, 1)), 32);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(30, 1)), 105);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(31, 1)), 110);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(32, 1)), 102);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(33, 1)), 111);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(34, 1)), 32);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(35, 1)), 102);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(36, 1)), 111);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(37, 1)), 114);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(38, 1)), 32);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(39, 1)), 37);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(40, 1)), 115);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(41, 1)), 32);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(42, 1)), 112);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(43, 1)), 97);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(44, 1)), 114);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(45, 1)), 116);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(46, 1)), 105);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(47, 1)), 116);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(48, 1)), 105);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(49, 1)), 111);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(50, 1)), 110);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(51, 1)), 32);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(52, 1)), 40);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(53, 1)), 118);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(54, 1)), 98);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(55, 1)), 117);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(56, 1)), 115);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(57, 1)), 32);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(58, 1)), 35);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(59, 1)), 37);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(60, 1)), 100);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(61, 1)), 41);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(62, 1)), 58);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(63, 1)), 10);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.70, $mul.ref(0, 65)), $mul.ref(64, 1)), 0);
    $M.298 := $store.i8($M.298, .str.113, 37);
    $M.298 := $store.i8($M.298, $add.ref($add.ref(.str.113, $mul.ref(0, 5)), $mul.ref(1, 1)), 54);
    $M.298 := $store.i8($M.298, $add.ref($add.ref(.str.113, $mul.ref(0, 5)), $mul.ref(2, 1)), 51);
    $M.298 := $store.i8($M.298, $add.ref($add.ref(.str.113, $mul.ref(0, 5)), $mul.ref(3, 1)), 115);
    $M.298 := $store.i8($M.298, $add.ref($add.ref(.str.113, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.299 := $store.i8($M.299, .str.114, 67);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(1, 1)), 65);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(2, 1)), 76);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(3, 1)), 76);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(4, 1)), 72);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(5, 1)), 79);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(6, 1)), 77);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(7, 1)), 69);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(8, 1)), 68);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(9, 1)), 73);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(10, 1)), 83);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(11, 1)), 75);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(13, 1)), 77);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(14, 1)), 79);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(15, 1)), 85);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(16, 1)), 78);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(17, 1)), 84);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(18, 1)), 69);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(19, 1)), 68);
    $M.299 := $store.i8($M.299, $add.ref($add.ref(.str.114, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.300 := $store.i8($M.300, .str.115, 77);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(1, 1)), 79);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(2, 1)), 68);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(3, 1)), 85);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(4, 1)), 76);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(5, 1)), 69);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(6, 1)), 83);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(8, 1)), 76);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(9, 1)), 79);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(10, 1)), 65);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(11, 1)), 68);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(12, 1)), 69);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(13, 1)), 68);
    $M.300 := $store.i8($M.300, $add.ref($add.ref(.str.115, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.301 := $store.i8($M.301, .str.108, 83);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(1, 1)), 80);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(2, 1)), 65);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(3, 1)), 82);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(4, 1)), 83);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(5, 1)), 80);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(7, 1)), 83);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(8, 1)), 69);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(9, 1)), 76);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(10, 1)), 70);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(11, 1)), 84);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(12, 1)), 69);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(13, 1)), 83);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(14, 1)), 84);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(15, 1)), 61);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(16, 1)), 37);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(17, 1)), 100);
    $M.301 := $store.i8($M.301, $add.ref($add.ref(.str.108, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.302 := $store.i8($M.302, .str.89, 83);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(1, 1)), 80);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(2, 1)), 65);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(3, 1)), 82);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(5, 1)), 80);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(6, 1)), 65);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(7, 1)), 82);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(8, 1)), 65);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(9, 1)), 72);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(10, 1)), 79);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(11, 1)), 84);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(12, 1)), 80);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(13, 1)), 76);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(14, 1)), 85);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(15, 1)), 71);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(16, 1)), 61);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(17, 1)), 49);
    $M.302 := $store.i8($M.302, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.303 := $store.i8($M.303, .str.90, 83);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(1, 1)), 80);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(2, 1)), 65);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(3, 1)), 82);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(4, 1)), 95);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(5, 1)), 80);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(6, 1)), 65);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(7, 1)), 82);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(8, 1)), 65);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(9, 1)), 72);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(10, 1)), 79);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(11, 1)), 84);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(12, 1)), 80);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(13, 1)), 76);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(14, 1)), 85);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(15, 1)), 71);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(16, 1)), 95);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(17, 1)), 73);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(18, 1)), 68);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(19, 1)), 61);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(20, 1)), 37);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(21, 1)), 100);
    $M.303 := $store.i8($M.303, $add.ref($add.ref(.str.90, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.304 := $store.i8($M.304, .str.91, 83);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(1, 1)), 80);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(2, 1)), 65);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(3, 1)), 82);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(5, 1)), 80);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(6, 1)), 65);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(7, 1)), 82);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(8, 1)), 65);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(9, 1)), 72);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(10, 1)), 79);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(11, 1)), 84);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(12, 1)), 80);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(13, 1)), 76);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(14, 1)), 85);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(15, 1)), 71);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(17, 1)), 83);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(18, 1)), 84);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(19, 1)), 65);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(20, 1)), 84);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(21, 1)), 69);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(22, 1)), 61);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(23, 1)), 37);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(24, 1)), 100);
    $M.304 := $store.i8($M.304, $add.ref($add.ref(.str.91, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.305 := $store.i8($M.305, .str.92, 83);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(1, 1)), 80);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(2, 1)), 65);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(3, 1)), 82);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(5, 1)), 80);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(6, 1)), 65);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(7, 1)), 82);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(8, 1)), 65);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(9, 1)), 72);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(10, 1)), 79);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(11, 1)), 84);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(12, 1)), 80);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(13, 1)), 76);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(14, 1)), 85);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(15, 1)), 71);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(17, 1)), 66);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(18, 1)), 85);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(19, 1)), 83);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(20, 1)), 61);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(21, 1)), 37);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(22, 1)), 100);
    $M.305 := $store.i8($M.305, $add.ref($add.ref(.str.92, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.306 := $store.i8($M.306, .str.93, 83);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(1, 1)), 80);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(2, 1)), 65);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(3, 1)), 82);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(4, 1)), 95);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(5, 1)), 80);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(6, 1)), 65);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(7, 1)), 82);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(8, 1)), 65);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(9, 1)), 72);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(10, 1)), 79);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(11, 1)), 84);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(12, 1)), 80);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(13, 1)), 76);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(14, 1)), 85);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(15, 1)), 71);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(16, 1)), 95);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(17, 1)), 68);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(18, 1)), 69);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(19, 1)), 86);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(20, 1)), 73);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(21, 1)), 67);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(22, 1)), 69);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(23, 1)), 61);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(24, 1)), 37);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(25, 1)), 100);
    $M.306 := $store.i8($M.306, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.307 := $store.i8($M.307, .str.94, 83);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(1, 1)), 80);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(2, 1)), 65);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(3, 1)), 82);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(4, 1)), 95);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(5, 1)), 80);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(6, 1)), 65);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(7, 1)), 82);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(8, 1)), 65);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(9, 1)), 72);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(10, 1)), 79);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(11, 1)), 84);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(12, 1)), 80);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(13, 1)), 76);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(14, 1)), 85);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(15, 1)), 71);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(16, 1)), 95);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(17, 1)), 70);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(18, 1)), 85);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(19, 1)), 78);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(20, 1)), 67);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(21, 1)), 84);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(22, 1)), 73);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(23, 1)), 79);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(24, 1)), 78);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(25, 1)), 61);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(26, 1)), 37);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(27, 1)), 100);
    $M.307 := $store.i8($M.307, $add.ref($add.ref(.str.94, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    call {:si_unique_call 1980} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 808704);

procedure devirtbounce(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 809736);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.42, $M.23, $M.24, $M.25, $M.26, $M.52, $M.53, $M.54, $M.55, $M.61, $M.13, $M.14, $M.19, $M.20, $M.67, $M.68, $M.69, $M.70, $M.57, $M.39, $M.37, $M.38, $M.35, $M.36, $M.56, $M.40, $M.5, $M.7, $M.9, $M.11, $M.18, $M.48, $M.62, $M.6, $M.8, $M.10, $M.12, $M.65, $CurrAddr, assertsPassed, $M.58, $M.1, $M.4, $M.63, $M.73, $M.74, $M.75, $M.64, $M.66;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i17 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i17 == 1);
    $i16 := $eq.ref(visorchipset_exit, $p0);
    assume {:branchcond $i16} true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i16 == 1);
    $i15 := $eq.ref(visorchipset_init, $p0);
    assume {:branchcond $i15} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(visordriver_remove_device, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(visordriver_probe_device, $p0);
    assume {:branchcond $i13} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(visorbus_register_visor_driver, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1981} $i2 := visorbus_register_visor_driver($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i13 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1982} $i4 := visordriver_probe_device($p3);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    $r := $i4;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1983} $i6 := visordriver_remove_device($p5);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    $r := $i6;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1984} $i8 := visorchipset_init($p7);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    $r := $i8;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1985} $i10 := visorchipset_exit($p9);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    $r := $i10;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    call {:si_unique_call 1986} $i11 := __builtinx_object_size();
    $r := $i11;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 810768);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.61, $M.54, $M.55, $M.13, $M.14, $M.19, $M.20, $M.40, $M.18, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.65, $M.1, $M.4, $CurrAddr, $M.63, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i28 := $eq.ref(setup_crash_devices_work_queue, $p0);
    assume true;
    goto $bb19, $bb37;

  $bb37:
    assume !($i28 == 1);
    $i27 := $eq.ref(controlvm_periodic_work, $p0);
    assume true;
    goto $bb18, $bb36;

  $bb36:
    assume !($i27 == 1);
    $i26 := $eq.ref(visorchipset_dev_release, $p0);
    assume {:branchcond $i26} true;
    goto $bb17, $bb35;

  $bb35:
    assume !($i26 == 1);
    $i25 := $eq.ref(visorbus_release_busdevice, $p0);
    assume {:branchcond $i25} true;
    goto $bb16, $bb34;

  $bb34:
    assume !($i25 == 1);
    $i24 := $eq.ref(dev_periodic_work, $p0);
    assume {:branchcond $i24} true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i24 == 1);
    $i23 := $eq.ref(visorbus_release_device, $p0);
    assume true;
    goto $bb14, $bb32;

  $bb32:
    assume !($i23 == 1);
    $i22 := $eq.ref(chipset_device_resume, $p0);
    assume true;
    goto $bb13, $bb31;

  $bb31:
    assume !($i22 == 1);
    $i21 := $eq.ref(chipset_device_pause, $p0);
    assume true;
    goto $bb12, $bb30;

  $bb30:
    assume !($i21 == 1);
    $i20 := $eq.ref(chipset_device_destroy, $p0);
    assume true;
    goto $bb11, $bb29;

  $bb29:
    assume !($i20 == 1);
    $i19 := $eq.ref(chipset_device_create, $p0);
    assume true;
    goto $bb10, $bb28;

  $bb28:
    assume !($i19 == 1);
    $i18 := $eq.ref(chipset_bus_destroy, $p0);
    assume true;
    goto $bb9, $bb27;

  $bb27:
    assume !($i18 == 1);
    $i17 := $eq.ref(chipset_bus_create, $p0);
    assume true;
    goto $bb8, $bb26;

  $bb26:
    assume !($i17 == 1);
    $i16 := $eq.ref(visor_periodic_work_destroy, $p0);
    assume {:branchcond $i16} true;
    goto $bb7, $bb25;

  $bb25:
    assume !($i16 == 1);
    $i15 := $eq.ref(visorchannel_destroy, $p0);
    assume {:branchcond $i15} true;
    goto $bb6, $bb24;

  $bb24:
    assume !($i15 == 1);
    $i14 := $eq.ref(visorbus_disable_channel_interrupts, $p0);
    assume true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i14 == 1);
    $i13 := $eq.ref(periodic_work_func, $p0);
    assume {:branchcond $i13} true;
    goto $bb4, $bb22;

  $bb22:
    assume !($i13 == 1);
    $i12 := $eq.ref(visorbus_enable_channel_interrupts, $p0);
    assume true;
    goto $bb3, $bb21;

  $bb21:
    assume !($i12 == 1);
    $i11 := $eq.ref(visorbus_unregister_visor_driver, $p0);
    assume true;
    goto $bb2, $bb20;

  $bb20:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1987} visorbus_unregister_visor_driver($p1);
    return;

  $bb3:
    assume $i12 == 1;
    call {:si_unique_call 1988} visorbus_enable_channel_interrupts(arg);
    return;

  $bb4:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1989} periodic_work_func($p2);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    call {:si_unique_call 1990} visorbus_disable_channel_interrupts(arg);
    return;

  $bb6:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1991} visorchannel_destroy($p3);
    return;

  $bb7:
    assume $i16 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1992} visor_periodic_work_destroy($p4);
    return;

  $bb8:
    assume $i17 == 1;
    call {:si_unique_call 1993} chipset_bus_create(arg);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i18 == 1;
    call {:si_unique_call 1994} chipset_bus_destroy(arg);
    return;

  $bb10:
    assume $i19 == 1;
    call {:si_unique_call 1995} chipset_device_create(arg);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i20 == 1;
    call {:si_unique_call 1996} chipset_device_destroy(arg);
    return;

  $bb12:
    assume $i21 == 1;
    call {:si_unique_call 1997} chipset_device_pause(arg);
    return;

  $bb13:
    assume $i22 == 1;
    call {:si_unique_call 1998} chipset_device_resume(arg);
    return;

  $bb14:
    assume $i23 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1999} visorbus_release_device($p5);
    return;

  $bb15:
    assume $i24 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2000} dev_periodic_work($p6);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i25 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2001} visorbus_release_busdevice($p7);
    return;

  $bb17:
    assume $i26 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2002} visorchipset_dev_release($p8);
    return;

  $bb18:
    assume $i27 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2003} controlvm_periodic_work($p9);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i28 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2004} setup_crash_devices_work_queue($p10);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 811800);

procedure devirtbounce.3(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.61, $M.54, $M.55, $M.13, $M.14, $M.19, $M.20, $M.40, $M.18, $M.48, $M.62, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.39, $M.37, $M.22, $M.65, $M.1, $M.4, $CurrAddr, $M.63, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.42, $M.75, $M.64, $M.66, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation devirtbounce.3(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i35 := $eq.ref(setup_crash_devices_work_queue, $p0);
    assume {:branchcond $i35} true;
    goto $bb19, $bb37;

  $bb37:
    assume !($i35 == 1);
    $i34 := $eq.ref(controlvm_periodic_work, $p0);
    assume true;
    goto $bb18, $bb36;

  $bb36:
    assume !($i34 == 1);
    $i33 := $eq.ref(visorchipset_dev_release, $p0);
    assume {:branchcond $i33} true;
    goto $bb17, $bb35;

  $bb35:
    assume !($i33 == 1);
    $i32 := $eq.ref(visorbus_release_busdevice, $p0);
    assume {:branchcond $i32} true;
    goto $bb16, $bb34;

  $bb34:
    assume !($i32 == 1);
    $i31 := $eq.ref(dev_periodic_work, $p0);
    assume {:branchcond $i31} true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i31 == 1);
    $i30 := $eq.ref(visorbus_release_device, $p0);
    assume true;
    goto $bb14, $bb32;

  $bb32:
    assume !($i30 == 1);
    $i29 := $eq.ref(chipset_device_resume, $p0);
    assume true;
    goto $bb13, $bb31;

  $bb31:
    assume !($i29 == 1);
    $i28 := $eq.ref(chipset_device_pause, $p0);
    assume true;
    goto $bb12, $bb30;

  $bb30:
    assume !($i28 == 1);
    $i27 := $eq.ref(chipset_device_destroy, $p0);
    assume true;
    goto $bb11, $bb29;

  $bb29:
    assume !($i27 == 1);
    $i26 := $eq.ref(chipset_device_create, $p0);
    assume {:branchcond $i26} true;
    goto $bb10, $bb28;

  $bb28:
    assume !($i26 == 1);
    $i25 := $eq.ref(chipset_bus_destroy, $p0);
    assume {:branchcond $i25} true;
    goto $bb9, $bb27;

  $bb27:
    assume !($i25 == 1);
    $i24 := $eq.ref(chipset_bus_create, $p0);
    assume {:branchcond $i24} true;
    goto $bb8, $bb26;

  $bb26:
    assume !($i24 == 1);
    $i23 := $eq.ref(visor_periodic_work_destroy, $p0);
    assume true;
    goto $bb7, $bb25;

  $bb25:
    assume !($i23 == 1);
    $i22 := $eq.ref(visorchannel_destroy, $p0);
    assume true;
    goto $bb6, $bb24;

  $bb24:
    assume !($i22 == 1);
    $i21 := $eq.ref(visorbus_disable_channel_interrupts, $p0);
    assume true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(periodic_work_func, $p0);
    assume true;
    goto $bb4, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(visorbus_enable_channel_interrupts, $p0);
    assume true;
    goto $bb3, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(visorbus_unregister_visor_driver, $p0);
    assume true;
    goto $bb2, $bb20;

  $bb20:
    assume !($i18 == 1);
    assume false;
    return;

  $bb2:
    assume $i18 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2005} visorbus_unregister_visor_driver($p1);
    return;

  $bb3:
    assume $i19 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2006} visorbus_enable_channel_interrupts($p2);
    return;

  $bb4:
    assume $i20 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2007} periodic_work_func($p3);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2008} visorbus_disable_channel_interrupts($p4);
    return;

  $bb6:
    assume $i22 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2009} visorchannel_destroy($p5);
    return;

  $bb7:
    assume $i23 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2010} visor_periodic_work_destroy($p6);
    return;

  $bb8:
    assume $i24 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2011} chipset_bus_create($p7);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i25 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2012} chipset_bus_destroy($p8);
    return;

  $bb10:
    assume $i26 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2013} chipset_device_create($p9);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i27 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2014} chipset_device_destroy($p10);
    return;

  $bb12:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2015} chipset_device_pause($p11);
    return;

  $bb13:
    assume $i29 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2016} chipset_device_resume($p12);
    return;

  $bb14:
    assume $i30 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2017} visorbus_release_device($p13);
    return;

  $bb15:
    assume $i31 == 1;
    call {:si_unique_call 2018} dev_periodic_work(arg);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i32 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2019} visorbus_release_busdevice($p14);
    return;

  $bb17:
    assume $i33 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2020} visorchipset_dev_release($p15);
    return;

  $bb18:
    assume $i34 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2021} controlvm_periodic_work($p16);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i35 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2022} setup_crash_devices_work_queue($p17);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 812832);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(DEVMAJORMINOR_ATTR, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2023} $i1 := DEVMAJORMINOR_ATTR(arg, arg1, arg2);
    $r := $i1;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 813864);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 814896);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, $CurrAddr;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(device_resume_response, $p0);
    assume {:branchcond $i8} true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i8 == 1);
    $i7 := $eq.ref(visorchipset_device_pause_response, $p0);
    assume {:branchcond $i7} true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i7 == 1);
    $i6 := $eq.ref(device_destroy_response, $p0);
    assume {:branchcond $i6} true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i6 == 1);
    $i5 := $eq.ref(device_create_response, $p0);
    assume {:branchcond $i5} true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i5 == 1);
    $i4 := $eq.ref(bus_destroy_response, $p0);
    assume {:branchcond $i4} true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i4 == 1);
    $i3 := $eq.ref(bus_create_response, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i3 == 1);
    $i2 := $eq.ref(resume_state_change_complete, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i2 == 1);
    $i1 := $eq.ref(pause_state_change_complete, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2024} pause_state_change_complete(arg, arg1);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 2025} resume_state_change_complete(arg, arg1);
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 2026} bus_create_response(arg, arg1);
    return;

  $bb5:
    assume $i4 == 1;
    call {:si_unique_call 2027} bus_destroy_response(arg, arg1);
    return;

  $bb6:
    assume $i5 == 1;
    call {:si_unique_call 2028} device_create_response(arg, arg1);
    return;

  $bb7:
    assume $i6 == 1;
    call {:si_unique_call 2029} device_destroy_response(arg, arg1);
    return;

  $bb8:
    assume $i7 == 1;
    call {:si_unique_call 2030} visorchipset_device_pause_response(arg, arg1);
    return;

  $bb9:
    assume $i8 == 1;
    call {:si_unique_call 2031} device_resume_response(arg, arg1);
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 815928);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.0, $M.23, $M.24, $M.25, $M.26, $M.75, $CurrAddr;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i26 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i26} true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i26 == 1);
    $i25 := $eq.ref(visorchipset_release, $p0);
    assume {:branchcond $i25} true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i25 == 1);
    $i24 := $eq.ref(visorchipset_open, $p0);
    assume {:branchcond $i24} true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i24 == 1);
    $i23 := $eq.ref(visorchipset_mmap, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i23 == 1);
    $i22 := $eq.ref(match_visorbus_dev_by_id, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i22 == 1);
    $i21 := $eq.ref(visorbus_uevent, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i21 == 1);
    $i20 := $eq.ref(visorbus_match, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume false;
    return;

  $bb2:
    assume $i20 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2032} $i3 := visorbus_match($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i21 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2033} $i6 := visorbus_uevent($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i22 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2034} $i9 := match_visorbus_dev_by_id($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i23 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2035} $i12 := visorchipset_mmap($p10, $p11);
    $r := $i12;
    return;

  $bb6:
    assume $i24 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2036} $i15 := visorchipset_open($p13, $p14);
    $r := $i15;
    return;

  $bb7:
    assume $i25 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2037} $i18 := visorchipset_release($p16, $p17);
    $r := $i18;
    return;

  $bb8:
    assume $i26 == 1;
    call {:si_unique_call 2038} $i19 := __builtinx_object_size();
    $r := $i19;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 816960);

procedure devirtbounce.8(funcPtr: ref, arg: i64, arg1: i64, arg2: i64, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: i64, arg1: i64, arg2: i64, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 817992);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 819024);

procedure devirtbounce.10(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64, arg4: i64, arg5: i64, arg6: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64, arg4: i64, arg5: i64, arg6: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 820056);

procedure devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(visorchannel_get_clientpartition, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(visorchannel_get_nbytes, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(visorchannel_get_physaddr, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2039} $i2 := visorchannel_get_physaddr($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2040} $i4 := visorchannel_get_nbytes($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2041} $i6 := visorchannel_get_clientpartition($p5);
    $r := $i6;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 821088);

procedure devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.42, $M.23, $M.24, $M.25, $M.26, $M.52, $M.53, $M.54, $M.55, $M.61, $M.13, $M.14, $M.19, $M.20, $M.67, $M.68, $M.69, $M.70, $M.57, $M.39, $M.37, $M.38, $M.35, $M.36, $M.56, $M.40, $M.5, $M.7, $M.9, $M.11, $M.18, $M.48, $M.62, $M.6, $M.8, $M.10, $M.12, $M.65, $CurrAddr, assertsPassed, $M.58, $M.1, $M.4, $M.63, $M.73, $M.74, $M.75, $M.64, $M.66;



implementation devirtbounce.12(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i17 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i17 == 1);
    $i16 := $eq.ref(visorchipset_exit, $p0);
    assume {:branchcond $i16} true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i16 == 1);
    $i15 := $eq.ref(visorchipset_init, $p0);
    assume {:branchcond $i15} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(visordriver_remove_device, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(visordriver_probe_device, $p0);
    assume {:branchcond $i13} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(visorbus_register_visor_driver, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2042} $i2 := visorbus_register_visor_driver($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i13 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2043} $i4 := visordriver_probe_device($p3);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    $r := $i4;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2044} $i6 := visordriver_remove_device($p5);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    $r := $i6;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2045} $i8 := visorchipset_init($p7);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    $r := $i8;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2046} $i10 := visorchipset_exit($p9);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    $r := $i10;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    call {:si_unique_call 2047} $i11 := __builtinx_object_size();
    $r := $i11;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 822120);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.0, $M.23, $M.24, $M.25, $M.26, $M.75, $CurrAddr;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i22 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(visorchipset_release, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(visorchipset_open, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(visorchipset_mmap, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(match_visorbus_dev_by_id, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(visorbus_uevent, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i17 == 1);
    $i16 := $eq.ref(visorbus_match, $p0);
    assume {:branchcond $i16} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume false;
    return;

  $bb2:
    assume $i16 == 1;
    call {:si_unique_call 2048} $i1 := visorbus_match(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i17 == 1;
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2049} $i3 := visorbus_uevent(arg, $p2);
    $r := $i3;
    return;

  $bb4:
    assume $i18 == 1;
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2050} $i5 := match_visorbus_dev_by_id(arg, $p4);
    $r := $i5;
    return;

  $bb5:
    assume $i19 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2051} $i8 := visorchipset_mmap($p6, $p7);
    $r := $i8;
    return;

  $bb6:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2052} $i11 := visorchipset_open($p9, $p10);
    $r := $i11;
    return;

  $bb7:
    assume $i21 == 1;
    $p12 := $bitcast.ref.ref(arg);
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2053} $i14 := visorchipset_release($p12, $p13);
    $r := $i14;
    return;

  $bb8:
    assume $i22 == 1;
    call {:si_unique_call 2054} $i15 := __builtinx_object_size();
    $r := $i15;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 823152);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2055} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 824184);

procedure devirtbounce.15(funcPtr: ref, arg: i64, arg1: i64, arg2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: i64, arg1: i64, arg2: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.0, $M.141, $M.142, $M.143, $M.144, $M.145, $M.57, $M.70, $M.52, $M.51, $M.46, $M.174, $M.175, $M.63, $M.54, $M.61, $M.48, $M.60, $M.53, $M.55, $M.45, $M.44, $M.59, $M.176, $M.36, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.21, $M.41, $M.40, $M.34, $M.198, $M.199, $M.200, $M.208, $M.209, $M.210, $M.211, $M.212, $M.3, $M.2, $M.133, $M.132, $M.131, $M.35, $M.7, $M.130, $M.107, $M.11, $M.99, $M.100, $M.110, $M.105, $M.98, $M.9, $M.109, $M.112, $M.120, $M.5, $M.116, $M.124, $M.8, $M.113, $M.119, $M.114, $M.115, $M.117, $M.121, $M.10, $M.126, $M.6, $M.12, $M.104, $M.118, $M.73, $M.127, $M.111, $M.123, $M.103, $M.106, $M.58, $M.74, $M.122, $M.101, $M.108, $M.102, $M.128, $M.129, $M.38, $M.56, $M.97, $M.81, $M.78, $M.86, $M.80, $M.93, $M.83, $M.79, $M.91, $M.88, $M.89, $M.95, $M.92, $M.96, $M.84, $M.77, $M.90, $M.85, $M.82, $M.87, $M.94, $M.18, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2056} __SMACK_static_init();
    call {:si_unique_call 2057} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.76, $M.81, $M.82, $M.115, $M.83, $M.84, $M.5, $M.7, $M.9, $M.11, $M.116, $M.110, $M.111, $M.112, $M.113, $M.117, $M.86, $M.87, $M.88, $M.92, $M.91, $M.93, $M.94, $M.118, $M.95, $M.119, $M.97, $M.120, $M.85, $M.121, $M.122, $M.123, $M.89, $M.90, $M.124, $M.126, $M.127, $M.128, $M.129, $M.130, $M.96, $M.58, $M.0, $M.61, $M.54, $M.55, $M.13, $M.14, $M.19, $M.20, $M.1, $M.4, $M.131, $M.78, $M.105, $M.106, $M.109, $M.100, $M.103, $M.104, $M.98, $M.99, $M.79, $M.80, $M.101, $M.102, $M.77, $M.107, $M.108, $M.48, $M.49, $M.34, $M.46, $M.27, $M.28, $M.22, $M.50, $M.42, $M.23, $M.24, $M.25, $M.26, $M.52, $M.53, $M.132, $M.133, $M.141, $M.142, $M.143, $M.144, $M.145, $M.57, $M.70, $M.51, $M.174, $M.175, $M.63, $M.60, $M.45, $M.44, $M.59, $M.176, $M.36, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.21, $M.41, $M.40, $M.198, $M.199, $M.200, $M.208, $M.209, $M.210, $M.211, $M.212, $M.3, $M.2, $M.35, $M.8, $M.114, $M.10, $M.6, $M.12, $M.73, $M.74, $M.38, $M.56, $M.18, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $CurrAddr, $M.62, $M.39, $M.37, $M.65, $M.67, $M.68, $M.69, $M.75, $M.43, $M.64, $M.66;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation visorbus_match_loop_$bb11(in_$p2: ref, in_$p3: ref, in_$p7: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i49: i32, in_$i29: i32, in_$p51: ref, in_$p53: ref, in_$p55: ref, in_$p57: ref, in_$p59: ref, in_$p61: ref, in_$p63: ref, in_$p65: ref, in_$p67: ref, in_$p69: ref, in_$p71: ref, in_$p73: ref, in_$p75: ref, in_$p77: ref, in_$p79: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i64, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i64, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i1) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i49: i32, out_$i29: i32, out_$p51: ref, out_$p53: ref, out_$p55: ref, out_$p57: ref, out_$p59: ref, out_$p61: ref, out_$p63: ref, out_$p65: ref, out_$p67: ref, out_$p69: ref, out_$p71: ref, out_$p73: ref, out_$p75: ref, out_$p77: ref, out_$p79: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i64, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i64, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i1)
{

  entry:
    out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i29, out_$p51, out_$p53, out_$p55, out_$p57, out_$p59, out_$p61, out_$p63, out_$p65, out_$p67, out_$p69, out_$p71, out_$p73, out_$p75, out_$p77, out_$p79, out_$p81, out_$p82, out_$p83, out_$i84, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$p103, out_$p104, out_$i105, out_$i106 := in_$p30, in_$p31, in_$i32, in_$p34, in_$p35, in_$p36, in_$i37, in_$p38, in_$i39, in_$p40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i49, in_$i29, in_$p51, in_$p53, in_$p55, in_$p57, in_$p59, in_$p61, in_$p63, in_$p65, in_$p67, in_$p69, in_$p71, in_$p73, in_$p75, in_$p77, in_$p79, in_$p81, in_$p82, in_$p83, in_$i84, in_$p86, in_$p87, in_$p88, in_$i89, in_$p90, in_$i91, in_$p92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p99, in_$p100, in_$i101, in_$p103, in_$p104, in_$i105, in_$i106;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i49;
    goto corral_source_split_111_dummy;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i29, 1);
    call {:si_unique_call 10} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_111;

  $bb14:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i29;
    assume true;
    goto $bb14;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 0);
    goto corral_source_split_106;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} out_$i45 := uuid_le_cmp(out_$i37, out_$i39, out_$i42, out_$i44);
    call {:si_unique_call 8} {:cexpr "tmp"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.1, out_$p43);
    goto corral_source_split_104;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.1, out_$p41);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_100;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i64($M.0, out_$p38);
    goto corral_source_split_99;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.0, out_$p36);
    goto corral_source_split_97;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_95;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p31, $mul.ref(out_$i32, 24)), $mul.ref(0, 1));
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i29);
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_91;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p7, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_90;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i106 == 1;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i98 == 1;
    goto $bb17;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} out_$i97 := uuid_le_cmp(out_$i89, out_$i91, out_$i94, out_$i96);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i64($M.4, out_$p95);
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p92, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i64($M.4, out_$p93);
    goto corral_source_split_84;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p92, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$p92 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i64($M.0, out_$p90);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p87, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i64($M.0, out_$p88);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p87, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_77;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p83, $mul.ref(out_$i84, 24)), $mul.ref(0, 1));
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i29);
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p7, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p81, 0);
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1));
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p79, 0);
    goto corral_source_split_69;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1));
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p77, 0);
    goto corral_source_split_67;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1));
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p75, 0);
    goto corral_source_split_65;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_64;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p73, 0);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1));
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p71, 0);
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_60;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p69, 0);
    goto corral_source_split_59;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1));
    goto corral_source_split_58;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p67, 0);
    goto corral_source_split_57;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_56;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p65, 0);
    goto corral_source_split_55;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_54;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p63, 0);
    goto corral_source_split_53;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_52;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p61, 0);
    goto corral_source_split_51;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_50;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p59, 0);
    goto corral_source_split_49;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_48;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p57, 0);
    goto corral_source_split_47;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_46;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p55, 0);
    goto corral_source_split_45;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_44;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p53, 0);
    goto corral_source_split_43;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_42;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, out_$p51, 0);
    goto corral_source_split_41;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_40;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i64(out_$i105, 0);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    out_$i105 := $p2i.ref.i64(out_$p104);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p100, $mul.ref(out_$i101, 24)), $mul.ref(16, 1));
    goto corral_source_split_118;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i29);
    goto corral_source_split_116;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_115;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p7, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_114;

  $bb18:
    assume !(out_$i98 == 1);
    goto corral_source_split_113;

  corral_source_split_111_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i29, out_$p51, out_$p53, out_$p55, out_$p57, out_$p59, out_$p61, out_$p63, out_$p65, out_$p67, out_$p69, out_$p71, out_$p73, out_$p75, out_$p77, out_$p79, out_$p81, out_$p82, out_$p83, out_$i84, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$p103, out_$p104, out_$i105, out_$i106 := visorbus_match_loop_$bb11(in_$p2, in_$p3, in_$p7, out_$p30, out_$p31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i49, out_$i29, out_$p51, out_$p53, out_$p55, out_$p57, out_$p59, out_$p61, out_$p63, out_$p65, out_$p67, out_$p69, out_$p71, out_$p73, out_$p75, out_$p77, out_$p79, out_$p81, out_$p82, out_$p83, out_$i84, out_$p86, out_$p87, out_$p88, out_$i89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$p103, out_$p104, out_$i105, out_$i106);
    return;

  exit:
    return;
}



procedure visorbus_match_loop_$bb11(in_$p2: ref, in_$p3: ref, in_$p7: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i49: i32, in_$i29: i32, in_$p51: ref, in_$p53: ref, in_$p55: ref, in_$p57: ref, in_$p59: ref, in_$p61: ref, in_$p63: ref, in_$p65: ref, in_$p67: ref, in_$p69: ref, in_$p71: ref, in_$p73: ref, in_$p75: ref, in_$p77: ref, in_$p79: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p90: ref, in_$i91: i64, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i64, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i1) returns (out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i49: i32, out_$i29: i32, out_$p51: ref, out_$p53: ref, out_$p55: ref, out_$p57: ref, out_$p59: ref, out_$p61: ref, out_$p63: ref, out_$p65: ref, out_$p67: ref, out_$p69: ref, out_$p71: ref, out_$p73: ref, out_$p75: ref, out_$p77: ref, out_$p79: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p90: ref, out_$i91: i64, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i64, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i1);
  modifies $M.23, $M.24, $M.25, $M.26, $CurrAddr, $M.4;



implementation devmajorminor_remove_all_files_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$i3: i1, in_$i1: i32) returns (out_$i2: i32, out_$i3: i1, out_$i1: i32)
{

  entry:
    out_$i2, out_$i3, out_$i1 := in_$i2, in_$i3, in_$i1;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_291;

  $bb6:
    assume out_$i3 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i2;
    goto $bb6_dummy;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i2, 0);
    goto corral_source_split_295;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    out_$i2 := $add.i32(out_$i1, 1);
    call {:si_unique_call 47} {:cexpr "i"} boogie_si_record_i32(out_$i2);
    goto corral_source_split_294;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} devmajorminor_remove_file(in_$p0, out_$i1);
    goto corral_source_split_293;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i2, out_$i3, out_$i1 := devmajorminor_remove_all_files_loop_$bb4(in_$p0, out_$i2, out_$i3, out_$i1);
    return;

  exit:
    return;
}



procedure devmajorminor_remove_all_files_loop_$bb4(in_$p0: ref, in_$i2: i32, in_$i3: i1, in_$i1: i32) returns (out_$i2: i32, out_$i3: i1, out_$i1: i32);
  modifies $M.0;



implementation visor_periodic_work_stop_loop_$bb7(in_$p0: ref, in_$p11: ref, in_$p14: ref, in_$p15: ref, in_$i16: i1, in_$i17: i8, in_$i18: i1, in_$p19: ref, in_$i20: i8, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$i35: i8, in_$i36: i1, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$p41: ref, in_$i42: i8, in_$i43: i1, in_vslice_dummy_var_122: i64, in_vslice_dummy_var_123: i64) returns (out_$p14: ref, out_$p15: ref, out_$i16: i1, out_$i17: i8, out_$i18: i1, out_$p19: ref, out_$i20: i8, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$i35: i8, out_$i36: i1, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$p41: ref, out_$i42: i8, out_$i43: i1, out_vslice_dummy_var_122: i64, out_vslice_dummy_var_123: i64)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p40, out_$p41, out_$i42, out_$i43, out_vslice_dummy_var_122, out_vslice_dummy_var_123 := in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$p40, in_$p41, in_$i42, in_$i43, in_vslice_dummy_var_122, in_vslice_dummy_var_123;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i43 == 1;
    goto $bb18_dummy;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i8.i1(out_$i42);
    goto corral_source_split_403;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.0, in_$p11);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p41, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} _raw_write_lock(out_$p40);
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_396;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} out_vslice_dummy_var_123 := schedule_timeout_interruptible(out_$i38);
    goto corral_source_split_395;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} out_$i38 := msecs_to_jiffies(10);
    call {:si_unique_call 69} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} _raw_write_unlock(out_$p37);
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 344)), $mul.ref(0, 1));
    goto corral_source_split_392;

  $bb15:
    assume out_$i36 == 1;
    goto corral_source_split_391;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_389;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p34);
    goto corral_source_split_388;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_387;

  $bb10:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p33, 0);
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} out_vslice_dummy_var_122 := ldv__builtin_expect(out_$i31, 0);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i1.i32(out_$i29);
    goto corral_source_split_381;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i23, 0);
    goto corral_source_split_380;

  $bb12:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} warn_slowpath_null(.str.31, 180);
    goto corral_source_split_378;

  $bb11:
    assume out_$i28 == 1;
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} out_$i27 := ldv__builtin_expect(out_$i26, 0);
    call {:si_unique_call 64} {:cexpr "tmp"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i25);
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i1.i32(out_$i24);
    goto corral_source_split_372;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i1.i32(out_$i22);
    call {:si_unique_call 62} {:cexpr "__ret_warn_on"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_370;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    out_$i22 := $xor.i1(out_$i21, 1);
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i8.i1(out_$i20);
    goto corral_source_split_368;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 344)), $mul.ref(312, 1));
    goto corral_source_split_366;

  $bb9:
    assume out_$i18 == 1;
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i8.i1(out_$i17);
    goto corral_source_split_363;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i1.i8(out_$i16);
    call {:si_unique_call 61} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i17);
    goto corral_source_split_362;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} out_$i16 := ldv_cancel_delayed_work_159(out_$p15);
    goto corral_source_split_361;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 344)), $mul.ref(72, 1));
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p14, 1);
    goto corral_source_split_359;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 344)), $mul.ref(313, 1));
    goto corral_source_split_358;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 344)), $mul.ref(313, 1));
    goto corral_source_split_400;

  $bb16:
    assume !(out_$i36 == 1);
    goto corral_source_split_399;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p40, out_$p41, out_$i42, out_$i43, out_vslice_dummy_var_122, out_vslice_dummy_var_123 := visor_periodic_work_stop_loop_$bb7(in_$p0, in_$p11, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p40, out_$p41, out_$i42, out_$i43, out_vslice_dummy_var_122, out_vslice_dummy_var_123);
    return;

  exit:
    return;
}



procedure visor_periodic_work_stop_loop_$bb7(in_$p0: ref, in_$p11: ref, in_$p14: ref, in_$p15: ref, in_$i16: i1, in_$i17: i8, in_$i18: i1, in_$p19: ref, in_$i20: i8, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$i35: i8, in_$i36: i1, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$p41: ref, in_$i42: i8, in_$i43: i1, in_vslice_dummy_var_122: i64, in_vslice_dummy_var_123: i64) returns (out_$p14: ref, out_$p15: ref, out_$i16: i1, out_$i17: i8, out_$i18: i1, out_$p19: ref, out_$i20: i8, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$i35: i8, out_$i36: i1, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$p41: ref, out_$i42: i8, out_$i43: i1, out_vslice_dummy_var_122: i64, out_vslice_dummy_var_123: i64);
  modifies $M.0, $M.5, $M.7, $M.9, $M.11;



implementation fix_vbus_dev_info_loop_$bb14(in_$p0: ref, in_$p22: ref, in_$p24: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i49: i32, in_$p50: ref, in_$i51: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$i30: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i49: i32, out_$p50: ref, out_$i51: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$i30: i32)
{

  entry:
    out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i49, out_$p50, out_$i51, out_$p53, out_$p54, out_$i55, out_$i56, out_$i30 := in_$p31, in_$p32, in_$i33, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i49, in_$p50, in_$i51, in_$p53, in_$p54, in_$i55, in_$i56, in_$i30;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_544;

  $bb20:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i49;
    goto $bb20_dummy;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_589;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_588;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 24)), $mul.ref(16, 1));
    goto corral_source_split_587;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto corral_source_split_586;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i49);
    goto corral_source_split_585;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, in_$p24);
    goto corral_source_split_584;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i30, 1);
    call {:si_unique_call 106} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_583;

  $bb17:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i30;
    assume true;
    goto $bb17;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 0);
    goto corral_source_split_555;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} out_$i39 := memcmp(out_$p36, out_$p38, 16);
    call {:si_unique_call 101} {:cexpr "tmp"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_554;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_553;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2064)), $mul.ref(8, 1));
    goto corral_source_split_552;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_551;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p32, $mul.ref(out_$i33, 24)), $mul.ref(0, 1));
    goto corral_source_split_550;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i30);
    goto corral_source_split_548;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_547;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p22, $mul.ref($sub.ref(0, 96), 264)), $mul.ref(48, 1));
    goto corral_source_split_546;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i49, out_$p50, out_$i51, out_$p53, out_$p54, out_$i55, out_$i56, out_$i30 := fix_vbus_dev_info_loop_$bb14(in_$p0, in_$p22, in_$p24, out_$p31, out_$p32, out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i49, out_$p50, out_$i51, out_$p53, out_$p54, out_$i55, out_$i56, out_$i30);
    return;

  exit:
    return;
}



procedure fix_vbus_dev_info_loop_$bb14(in_$p0: ref, in_$p22: ref, in_$p24: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i49: i32, in_$p50: ref, in_$i51: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$i30: i32) returns (out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i49: i32, out_$p50: ref, out_$i51: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$i30: i32);



implementation __cpuid_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} __cpuid_loop_$bb3();
    return;

  exit:
    return;
}



procedure __cpuid_loop_$bb3();



implementation client_bus_info_show_loop_$bb15(in_$p3: ref, in_$p7: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i64, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$p58: ref, in_$i59: i64, in_$i60: i32, in_$i61: i64, in_$i62: i64, in_$i63: i1, in_$p46: ref, in_$i47: i64, in_$i48: i32, in_$i49: i32, in_$i64: i32) returns (out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i64, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$p58: ref, out_$i59: i64, out_$i60: i32, out_$i61: i64, out_$i62: i64, out_$i63: i1, out_$p46: ref, out_$i47: i64, out_$i48: i32, out_$i49: i32, out_$i64: i32)
{

  entry:
    out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p46, out_$i47, out_$i48, out_$i49, out_$i64 := in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p46, in_$i47, in_$i48, in_$i49, in_$i64;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;

  $bb20:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$p46, out_$i47, out_$i48, out_$i49 := out_$p58, out_$i59, out_$i57, out_$i60;
    goto $bb20_dummy;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i57;
    assume true;
    goto $bb20;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$i63 := $ule.i64(out_$i62, out_$i61);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i64(out_$i59, 256);
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} out_$i61 := visorchannel_get_nbytes(in_$p7);
    call {:si_unique_call 593} {:cexpr "tmp"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_2775;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i32(out_$i49, 1);
    call {:si_unique_call 591} {:cexpr "i"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_2774;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i64(out_$i47, 256);
    call {:si_unique_call 590} {:cexpr "off"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_2773;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2772;

  $bb18:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i57, out_$p58 := out_$i48, out_$p46;
    goto $bb19;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$i57, out_$p58 := out_$i56, out_$p55;
    goto $bb19;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i56 := $sub.i32(out_$i48, out_$i53);
    call {:si_unique_call 589} {:cexpr "remain"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p46, $mul.ref(out_$i54, 1));
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i53);
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} out_$i53 := vbuschannel_devinfo_to_string(in_$p3, out_$p46, out_$i48, out_$i49);
    call {:si_unique_call 588} {:cexpr "x"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2767;

  $bb17:
    assume out_$i52 == 1;
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    out_$i52 := $sge.i32(out_$i51, 0);
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} out_$i51 := visorchannel_read(in_$p7, out_$i47, out_$p50, 256);
    call {:si_unique_call 586} {:cexpr "x"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_2763;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p46, out_$i47, out_$i48, out_$i49, out_$i64 := client_bus_info_show_loop_$bb15(in_$p3, in_$p7, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p46, out_$i47, out_$i48, out_$i49, out_$i64);
    return;

  exit:
    return;
}



procedure client_bus_info_show_loop_$bb15(in_$p3: ref, in_$p7: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i64, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$p58: ref, in_$i59: i64, in_$i60: i32, in_$i61: i64, in_$i62: i64, in_$i63: i1, in_$p46: ref, in_$i47: i64, in_$i48: i32, in_$i49: i32, in_$i64: i32) returns (out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i64, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$p58: ref, out_$i59: i64, out_$i60: i32, out_$i61: i64, out_$i62: i64, out_$i63: i1, out_$p46: ref, out_$i47: i64, out_$i48: i32, out_$i49: i32, out_$i64: i32);
  modifies $M.0, $M.43, $CurrAddr;



implementation vbuschannel_devinfo_to_string_loop_$bb47(in_$i94: i32, in_$i103: i1, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i104: i32, in_$p105: ref, in_$i106: i32, in_$i110: i32, in_$i111: i1, in_$i99: i32, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i112: i32, in_$p113: ref, in_$i114: i32) returns (out_$i103: i1, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i104: i32, out_$p105: ref, out_$i106: i32, out_$i110: i32, out_$i111: i1, out_$i99: i32, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i112: i32, out_$p113: ref, out_$i114: i32)
{

  entry:
    out_$i103, out_$p107, out_$i108, out_$i109, out_$i104, out_$p105, out_$i106, out_$i110, out_$i111, out_$i99, out_$p100, out_$i101, out_$i102, out_$i112, out_$p113, out_$i114 := in_$i103, in_$p107, in_$i108, in_$i109, in_$i104, in_$p105, in_$i106, in_$i110, in_$i111, in_$i99, in_$p100, in_$i101, in_$i102, in_$i112, in_$p113, in_$i114;
    goto $bb47, exit;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  $bb53:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$i99, out_$p100, out_$i101, out_$i102 := out_$i106, out_$p105, out_$i104, out_$i110;
    goto $bb53_dummy;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    out_$i112, out_$p113, out_$i114 := out_$i104, out_$p105, out_$i106;
    assume true;
    goto $bb53;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i110, in_$i94);
    goto corral_source_split_2912;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i32(out_$i102, 1);
    call {:si_unique_call 627} {:cexpr "i"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_2911;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2910;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    out_$i104, out_$p105, out_$i106 := out_$i109, out_$p107, out_$i108;
    goto $bb51;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    out_$i104, out_$p105, out_$i106 := out_$i101, out_$p100, out_$i99;
    goto $bb51;

  $bb49:
    assume out_$i103 == 1;
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i103 := $sle.i32(out_$i101, 0);
    goto corral_source_split_2906;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    out_$i109 := $sub.i32(out_$i101, 1);
    call {:si_unique_call 629} {:cexpr "remain"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_2917;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i32(out_$i99, 1);
    call {:si_unique_call 628} {:cexpr "chars"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_2916;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref(out_$p100, $mul.ref(1, 1));
    goto corral_source_split_2915;

  $bb52:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p100, 32);
    goto corral_source_split_2914;

  $bb50:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb53_dummy:
    call {:si_unique_call 1} out_$i103, out_$p107, out_$i108, out_$i109, out_$i104, out_$p105, out_$i106, out_$i110, out_$i111, out_$i99, out_$p100, out_$i101, out_$i102, out_$i112, out_$p113, out_$i114 := vbuschannel_devinfo_to_string_loop_$bb47(in_$i94, out_$i103, out_$p107, out_$i108, out_$i109, out_$i104, out_$p105, out_$i106, out_$i110, out_$i111, out_$i99, out_$p100, out_$i101, out_$i102, out_$i112, out_$p113, out_$i114);
    return;

  exit:
    return;
}



procedure vbuschannel_devinfo_to_string_loop_$bb47(in_$i94: i32, in_$i103: i1, in_$p107: ref, in_$i108: i32, in_$i109: i32, in_$i104: i32, in_$p105: ref, in_$i106: i32, in_$i110: i32, in_$i111: i1, in_$i99: i32, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i112: i32, in_$p113: ref, in_$i114: i32) returns (out_$i103: i1, out_$p107: ref, out_$i108: i32, out_$i109: i32, out_$i104: i32, out_$p105: ref, out_$i106: i32, out_$i110: i32, out_$i111: i1, out_$i99: i32, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i112: i32, out_$p113: ref, out_$i114: i32);
  modifies $M.0;



implementation vbuschannel_devinfo_to_string_loop_$bb31(in_$i59: i32, in_$i68: i1, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i75: i32, in_$i76: i1, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i77: i32, in_$p78: ref, in_$i79: i32) returns (out_$i68: i1, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i75: i32, out_$i76: i1, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i77: i32, out_$p78: ref, out_$i79: i32)
{

  entry:
    out_$i68, out_$p72, out_$i73, out_$i74, out_$i69, out_$p70, out_$i71, out_$i75, out_$i76, out_$i64, out_$p65, out_$i66, out_$i67, out_$i77, out_$p78, out_$i79 := in_$i68, in_$p72, in_$i73, in_$i74, in_$i69, in_$p70, in_$i71, in_$i75, in_$i76, in_$i64, in_$p65, in_$i66, in_$i67, in_$i77, in_$p78, in_$i79;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;

  $bb37:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i64, out_$p65, out_$i66, out_$i67 := out_$i71, out_$p70, out_$i69, out_$i75;
    goto $bb37_dummy;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$i77, out_$p78, out_$i79 := out_$i69, out_$p70, out_$i71;
    assume true;
    goto $bb37;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i75, in_$i59);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i67, 1);
    call {:si_unique_call 617} {:cexpr "i"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_2872;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2871;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    out_$i69, out_$p70, out_$i71 := out_$i74, out_$p72, out_$i73;
    goto $bb35;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$i69, out_$p70, out_$i71 := out_$i66, out_$p65, out_$i64;
    goto $bb35;

  $bb33:
    assume out_$i68 == 1;
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i68 := $sle.i32(out_$i66, 0);
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i32(out_$i66, 1);
    call {:si_unique_call 619} {:cexpr "remain"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i64, 1);
    call {:si_unique_call 618} {:cexpr "chars"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p65, $mul.ref(1, 1));
    goto corral_source_split_2876;

  $bb36:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p65, 32);
    goto corral_source_split_2875;

  $bb34:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i68, out_$p72, out_$i73, out_$i74, out_$i69, out_$p70, out_$i71, out_$i75, out_$i76, out_$i64, out_$p65, out_$i66, out_$i67, out_$i77, out_$p78, out_$i79 := vbuschannel_devinfo_to_string_loop_$bb31(in_$i59, out_$i68, out_$p72, out_$i73, out_$i74, out_$i69, out_$p70, out_$i71, out_$i75, out_$i76, out_$i64, out_$p65, out_$i66, out_$i67, out_$i77, out_$p78, out_$i79);
    return;

  exit:
    return;
}



procedure vbuschannel_devinfo_to_string_loop_$bb31(in_$i59: i32, in_$i68: i1, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i69: i32, in_$p70: ref, in_$i71: i32, in_$i75: i32, in_$i76: i1, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i77: i32, in_$p78: ref, in_$i79: i32) returns (out_$i68: i1, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i69: i32, out_$p70: ref, out_$i71: i32, out_$i75: i32, out_$i76: i1, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i77: i32, out_$p78: ref, out_$i79: i32);
  modifies $M.0;



implementation vbuschannel_sanitize_buffer_loop_$bb4(in_$i12: i8, in_$i13: i32, in_$i14: i1, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p6: ref, in_$i7: i32, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i53: i32) returns (out_$i12: i8, out_$i13: i32, out_$i14: i1, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p6: ref, out_$i7: i32, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i53: i32)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i26, out_$i27, out_$i28, out_$i29, out_$i23, out_$i24, out_$p25, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i42, out_$i43, out_$i44, out_$i45, out_$i39, out_$i40, out_$p41, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i53 := in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i26, in_$i27, in_$i28, in_$i29, in_$i23, in_$i24, in_$p25, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i42, in_$i43, in_$i44, in_$i45, in_$i39, in_$i40, in_$p41, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p6, in_$i7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i53;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2952;

  $bb27:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$p6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11 := out_$p49, out_$i48, out_$p50, out_$i51, out_$i47, out_$i46;
    goto $bb27_dummy;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i47;
    assume true;
    goto $bb27;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    out_$i52 := $sgt.i32(out_$i51, 0);
    goto corral_source_split_3006;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    out_$i51 := $sub.i32(out_$i9, 1);
    call {:si_unique_call 645} {:cexpr "srcmax"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_3005;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p8, $mul.ref(1, 1));
    goto corral_source_split_3004;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3003;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i46, out_$i47, out_$i48, out_$p49 := 1, out_$i10, out_$i7, out_$p6;
    goto $bb26;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$i46, out_$i47, out_$i48, out_$p49 := out_$i30, out_$i39, out_$i40, out_$p41;
    goto $bb26;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2998;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i39, out_$i40, out_$p41 := out_$i45, out_$i32, out_$p33;
    goto $bb22;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40, out_$p41 := out_$i38, out_$i37, out_$p36;
    goto $bb22;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i31, 1);
    call {:si_unique_call 643} {:cexpr "chars"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2992;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i32, 1);
    call {:si_unique_call 642} {:cexpr "remain"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_2991;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p33, $mul.ref(1, 1));
    goto corral_source_split_2990;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p33, out_$i35);
    goto corral_source_split_2989;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i8($M.0, out_$p8);
    goto corral_source_split_2988;

  $bb20:
    assume out_$i34 == 1;
    goto corral_source_split_2987;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i32, 0);
    goto corral_source_split_2985;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2984;

  $bb12:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i30, out_$i31, out_$i32, out_$p33 := out_$i11, out_$i10, out_$i7, out_$p6;
    goto $bb19;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    out_$i30, out_$i31, out_$i32, out_$p33 := 0, out_$i23, out_$i24, out_$p25;
    goto $bb19;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i23, out_$i24, out_$p25 := out_$i29, out_$i7, out_$p6;
    goto $bb15;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24, out_$p25 := out_$i22, out_$i21, out_$p20;
    goto $bb15;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i10, 1);
    call {:si_unique_call 640} {:cexpr "chars"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_2973;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(out_$i7, 1);
    call {:si_unique_call 639} {:cexpr "remain"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2972;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref(out_$p6, $mul.ref(1, 1));
    goto corral_source_split_2971;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p6, 32);
    goto corral_source_split_2970;

  $bb13:
    assume out_$i19 == 1;
    goto corral_source_split_2969;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i7, 0);
    goto corral_source_split_2967;

  $bb11:
    assume out_$i18 == 1;
    goto corral_source_split_2966;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i11, 0);
    goto corral_source_split_2964;

  $bb9:
    assume out_$i17 == 1;
    goto corral_source_split_2963;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 127);
    goto corral_source_split_2961;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i8.i32(out_$i15);
    goto corral_source_split_2960;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p8);
    goto corral_source_split_2959;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_2958;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    out_$i14 := $sgt.i32(out_$i13, 31);
    goto corral_source_split_2956;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i8.i32(out_$i12);
    goto corral_source_split_2955;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i8($M.0, out_$p8);
    goto corral_source_split_2954;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := out_$i10;
    goto $bb18;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i28;
    goto $bb18;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i10, 1);
    call {:si_unique_call 641} {:cexpr "chars"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2982;

  $bb16:
    assume out_$i27 == 1;
    goto corral_source_split_2981;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i64(out_$i26, 0);
    goto corral_source_split_2977;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_2976;

  $bb14:
    assume !(out_$i19 == 1);
    goto corral_source_split_2975;

  $bb24:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := out_$i31;
    goto $bb25;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i44;
    goto $bb25;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i31, 1);
    call {:si_unique_call 644} {:cexpr "chars"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_3001;

  $bb23:
    assume out_$i43 == 1;
    goto corral_source_split_3000;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i42, 0);
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_2995;

  $bb21:
    assume !(out_$i34 == 1);
    goto corral_source_split_2994;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb8;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i26, out_$i27, out_$i28, out_$i29, out_$i23, out_$i24, out_$p25, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i42, out_$i43, out_$i44, out_$i45, out_$i39, out_$i40, out_$p41, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i53 := vbuschannel_sanitize_buffer_loop_$bb4(out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i26, out_$i27, out_$i28, out_$i29, out_$i23, out_$i24, out_$p25, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i42, out_$i43, out_$i44, out_$i45, out_$i39, out_$i40, out_$p41, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i53);
    return;

  exit:
    return;
}



procedure vbuschannel_sanitize_buffer_loop_$bb4(in_$i12: i8, in_$i13: i32, in_$i14: i1, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$i45: i32, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p6: ref, in_$i7: i32, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i53: i32) returns (out_$i12: i8, out_$i13: i32, out_$i14: i1, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$i45: i32, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p6: ref, out_$i7: i32, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i53: i32);
  modifies $M.0;



implementation vbuschannel_itoa_loop_$bb33(in_$p3: ref, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$i36: i8, in_$p37: ref, in_$i38: i1, in_$p31: ref, in_$i32: i32) returns (out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$i36: i8, out_$p37: ref, out_$i38: i1, out_$p31: ref, out_$i32: i32)
{

  entry:
    out_$i33, out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$p31, out_$i32 := in_$i33, in_$i34, in_$p35, in_$i36, in_$p37, in_$i38, in_$p31, in_$i32;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3066;

  $bb35:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$p31, out_$i32 := out_$p37, out_$i33;
    goto $bb35_dummy;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$i38 := $sgt.i32(out_$i33, 0);
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p31, $mul.ref(1, 1));
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p31, out_$i36);
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.43, out_$p35);
    goto corral_source_split_3071;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(out_$i34, 1));
    goto corral_source_split_3070;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i33);
    goto corral_source_split_3069;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i32, 1);
    call {:si_unique_call 652} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i33, out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$p31, out_$i32 := vbuschannel_itoa_loop_$bb33(in_$p3, out_$i33, out_$i34, out_$p35, out_$i36, out_$p37, out_$i38, out_$p31, out_$i32);
    return;

  exit:
    return;
}



procedure vbuschannel_itoa_loop_$bb33(in_$p3: ref, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$i36: i8, in_$p37: ref, in_$i38: i1, in_$p31: ref, in_$i32: i32) returns (out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$i36: i8, out_$p37: ref, out_$i38: i1, out_$p31: ref, out_$i32: i32);
  modifies $M.0;



implementation vbuschannel_itoa_loop_$bb24(in_$i1: i32, in_$i27: i32, in_$p28: ref, in_$i29: i1, in_$p25: ref, in_$i26: i32) returns (out_$i27: i32, out_$p28: ref, out_$i29: i1, out_$p25: ref, out_$i26: i32)
{

  entry:
    out_$i27, out_$p28, out_$i29, out_$p25, out_$i26 := in_$i27, in_$p28, in_$i29, in_$p25, in_$i26;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3053;

  $bb26:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$p25, out_$i26 := out_$p28, out_$i27;
    goto $bb26_dummy;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, in_$i1);
    goto corral_source_split_3058;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p25, $mul.ref(1, 1));
    goto corral_source_split_3057;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i26, 1);
    call {:si_unique_call 651} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_3056;

  $bb25:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p25, 63);
    goto corral_source_split_3055;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i27, out_$p28, out_$i29, out_$p25, out_$i26 := vbuschannel_itoa_loop_$bb24(in_$i1, out_$i27, out_$p28, out_$i29, out_$p25, out_$i26);
    return;

  exit:
    return;
}



procedure vbuschannel_itoa_loop_$bb24(in_$i1: i32, in_$i27: i32, in_$p28: ref, in_$i29: i1, in_$p25: ref, in_$i26: i32) returns (out_$i27: i32, out_$p28: ref, out_$i29: i1, out_$p25: ref, out_$i26: i32);
  modifies $M.0;



implementation vbuschannel_itoa_loop_$bb11(in_$p3: ref, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i8, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i9: i32, in_$i10: i32, in_$i22: i32) returns (out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i8, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i9: i32, out_$i10: i32, out_$i22: i32)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i9, out_$i10, out_$i22 := in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i9, in_$i10, in_$i22;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3026;

  $bb16:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$i10 := out_$i20, out_$i12;
    goto $bb16_dummy;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i12;
    assume true;
    goto $bb16;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$i21 := $sgt.i32(out_$i20, 0);
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$i20 := $sdiv.i32(out_$i9, 10);
    call {:si_unique_call 650} {:cexpr "num"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_3041;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, out_$p19, out_$i17);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p3, $mul.ref(0, 32)), $mul.ref(out_$i18, 1));
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i32.i8(out_$i16);
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i15, 48);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_3035;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    out_$i14 := $trunc.i32.i8(out_$i13);
    goto corral_source_split_3034;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    out_$i13 := $srem.i32(out_$i9, 10);
    goto corral_source_split_3033;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i10, 1);
    call {:si_unique_call 649} {:cexpr "digits"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_3032;

  $bb14:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i11 := $sgt.i32(out_$i10, 31);
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i9, out_$i10, out_$i22 := vbuschannel_itoa_loop_$bb11(in_$p3, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i9, out_$i10, out_$i22);
    return;

  exit:
    return;
}



procedure vbuschannel_itoa_loop_$bb11(in_$p3: ref, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i8, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i9: i32, in_$i10: i32, in_$i22: i32) returns (out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i8, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i9: i32, out_$i10: i32, out_$i22: i32);
  modifies $M.43;



implementation parahotplug_request_complete_loop_$bb4(in_$i0: i32, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p7: ref, in_$p8: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p7: ref, out_$p8: ref)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p42, out_$p43, out_$i44, out_$i45, out_$p7, out_$p8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p14, in_$p42, in_$p43, in_$i44, in_$i45, in_$p7, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3485;

  $bb13:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$p7, out_$p8 := out_$p43, out_$p7;
    goto $bb13_dummy;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, $p2i.ref.i64(parahotplug_request_list));
    goto corral_source_split_3527;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_3526;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_3525;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3524;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$p13, out_$p14 := out_$p8, out_$p8;
    assume true;
    goto $bb7;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, in_$i0);
    goto corral_source_split_3490;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3488;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p42, out_$p43, out_$i44, out_$i45, out_$p7, out_$p8 := parahotplug_request_complete_loop_$bb4(in_$i0, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p42, out_$p43, out_$i44, out_$i45, out_$p7, out_$p8);
    return;

  exit:
    return;
}



procedure parahotplug_request_complete_loop_$bb4(in_$i0: i32, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p7: ref, in_$p8: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p7: ref, out_$p8: ref);



implementation visorbus_exit_loop_$bb7(in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p13: ref, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p13: ref, out_$p14: ref)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p13, out_$p14 := in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p13, in_$p14;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3805;

  $bb9:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$p14 := out_$p14, out_$p18;
    goto $bb9_dummy;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, $p2i.ref.i64(list_all_bus_instances));
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} remove_bus_instance(out_$p16);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p15, $mul.ref($sub.ref(0, 1448), 2064));
    goto corral_source_split_3808;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p13, out_$p14 := visorbus_exit_loop_$bb7(out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p13, out_$p14);
    return;

  exit:
    return;
}



procedure visorbus_exit_loop_$bb7(in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p13: ref, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p13: ref, out_$p14: ref);
  modifies $M.40, $M.0;



implementation controlvm_periodic_work_loop_$bb37(in_$p1: ref, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$i39: i8, in_$i40: i1, in_$i41: i1, in_$i42: i8, in_$p45: ref, in_$i43: i8, in_$i44: i8, in_$i46: i1, in_$i33: i8, in_$i34: i8, in_$i47: i1, in_cmdloc_dummy_var_72: [ref]i8, in_cmdloc_dummy_var_73: [ref]i8, in_cmdloc_dummy_var_74: [ref]i8) returns (out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$i39: i8, out_$i40: i1, out_$i41: i1, out_$i42: i8, out_$p45: ref, out_$i43: i8, out_$i44: i8, out_$i46: i1, out_$i33: i8, out_$i34: i8, out_$i47: i1, out_cmdloc_dummy_var_72: [ref]i8, out_cmdloc_dummy_var_73: [ref]i8, out_cmdloc_dummy_var_74: [ref]i8)
{

  entry:
    out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p45, out_$i43, out_$i44, out_$i46, out_$i33, out_$i34, out_$i47, out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73, out_cmdloc_dummy_var_74 := in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p45, in_$i43, in_$i44, in_$i46, in_$i33, in_$i34, in_$i47, in_cmdloc_dummy_var_72, in_cmdloc_dummy_var_73, in_cmdloc_dummy_var_74;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4045;

  $bb42:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i44, out_$i43;
    goto $bb42_dummy;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i8.i1(out_$i44);
    goto corral_source_split_4065;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4064;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 923} {:cexpr "controlvm_pending_msg_valid"} boogie_si_record_i8(1);
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := 1, out_$i33;
    goto $bb41;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44 := out_$i34, out_$i42;
    goto $bb41;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i1.i8(out_$i41);
    call {:si_unique_call 921} {:cexpr "got_command"} boogie_si_record_i8(out_$i42);
    goto corral_source_split_4058;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} out_$i41 := read_controlvm_event(in_$p1);
    goto corral_source_split_4057;

  $bb39:
    assume out_$i40 == 1;
    goto corral_source_split_4056;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i8.i1(out_$i39);
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i1.i8(out_$i38);
    call {:si_unique_call 919} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i39);
    goto corral_source_split_4053;

  SeqInstr_117:
    goto corral_source_split_4052;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} out_$i38 := handle_command(in_$p1, out_$i37);
    goto SeqInstr_116;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} out_$i37 := visorchannel_get_physaddr(out_$p36);
    call {:si_unique_call 917} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_4051;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.54 := out_$i35;
    call {:si_unique_call 915} {:cexpr "most_recent_message_jiffies"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_4049;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.0, jiffies);
    goto corral_source_split_4048;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb45:
    assume !(out_$i47 == 1);
    goto corral_source_split_4071;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i8.i1(out_$i34);
    goto corral_source_split_4046;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_72 := $M.0;
    out_cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 922} out_cmdloc_dummy_var_74 := $memcpy.i8(out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73, controlvm_pending_msg, out_$p45, 128, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_74;
    goto corral_source_split_4062;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4061;

  $bb40:
    assume !(out_$i40 == 1);
    goto corral_source_split_4060;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p45, out_$i43, out_$i44, out_$i46, out_$i33, out_$i34, out_$i47, out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73, out_cmdloc_dummy_var_74 := controlvm_periodic_work_loop_$bb37(in_$p1, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p45, out_$i43, out_$i44, out_$i46, out_$i33, out_$i34, out_$i47, out_cmdloc_dummy_var_72, out_cmdloc_dummy_var_73, out_cmdloc_dummy_var_74);
    return;

  exit:
    return;
}



procedure controlvm_periodic_work_loop_$bb37(in_$p1: ref, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$i39: i8, in_$i40: i1, in_$i41: i1, in_$i42: i8, in_$p45: ref, in_$i43: i8, in_$i44: i8, in_$i46: i1, in_$i33: i8, in_$i34: i8, in_$i47: i1, in_cmdloc_dummy_var_72: [ref]i8, in_cmdloc_dummy_var_73: [ref]i8, in_cmdloc_dummy_var_74: [ref]i8) returns (out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$i39: i8, out_$i40: i1, out_$i41: i1, out_$i42: i8, out_$p45: ref, out_$i43: i8, out_$i44: i8, out_$i46: i1, out_$i33: i8, out_$i34: i8, out_$i47: i1, out_cmdloc_dummy_var_72: [ref]i8, out_cmdloc_dummy_var_73: [ref]i8, out_cmdloc_dummy_var_74: [ref]i8);
  modifies $M.61, $M.0, $M.18, $CurrAddr, $M.62, $M.63, $M.13, $M.14, $M.19, $M.20, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.54, $M.55, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.48, $M.6, $M.5, $M.8, $M.7, $M.10, $M.9, $M.12, $M.11, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74;



implementation controlvm_periodic_work_loop_$bb23(in_$p16: ref, in_$p20: ref, in_$i21: i1, in_$i22: i8, in_$i23: i1) returns (out_$p20: ref, out_$i21: i1, out_$i22: i8, out_$i23: i1)
{

  entry:
    out_$p20, out_$i21, out_$i22, out_$i23 := in_$p20, in_$i21, in_$i22, in_$i23;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i23 == 1;
    goto $bb25_dummy;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i8.i1(out_$i22);
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i8(out_$i21);
    call {:si_unique_call 910} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i22);
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} out_$i21 := visorchannel_signalremove(out_$p20, 1, in_$p16);
    goto corral_source_split_4018;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.46, controlvm_channel);
    goto corral_source_split_4017;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p20, out_$i21, out_$i22, out_$i23 := controlvm_periodic_work_loop_$bb23(in_$p16, out_$p20, out_$i21, out_$i22, out_$i23);
    return;

  exit:
    return;
}



procedure controlvm_periodic_work_loop_$bb23(in_$p16: ref, in_$p20: ref, in_$i21: i1, in_$i22: i8, in_$i23: i1) returns (out_$p20: ref, out_$i21: i1, out_$i22: i8, out_$i23: i1);
  modifies $M.0, $M.18, $CurrAddr;



implementation parahotplug_process_list_loop_$bb4(in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$i10: i64, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$i26: i8, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p5: ref, in_$p6: ref) returns (out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$i10: i64, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$i26: i8, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p5: ref, out_$p6: ref)
{

  entry:
    out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p22, out_$p23, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p5, out_$p6 := in_$p7, in_$i8, in_$p9, in_$i10, in_$i11, in_$i12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p19, in_$p22, in_$p23, in_$p25, in_$i26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p5, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4264;

  $bb13:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p5, out_$p6 := out_$p6, out_$p28;
    goto $bb13_dummy;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, $p2i.ref.i64(parahotplug_request_list));
    goto corral_source_split_4278;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_4277;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_4276;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4275;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_4273;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i64(out_$i11, 0);
    goto corral_source_split_4271;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    out_$i11 := $sub.i64(out_$i8, out_$i10);
    goto corral_source_split_4270;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i64($M.0, out_$p9);
    goto corral_source_split_4269;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_4268;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i64($M.0, jiffies);
    goto corral_source_split_4267;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_4266;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} parahotplug_request_destroy(out_$p7);
    goto corral_source_split_4295;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} controlvm_respond_physdev_changestate(out_$p19, 1400, out_$i26);
    goto corral_source_split_4293;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_4292;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 12)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4291;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_4290;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_4289;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_4288;

  $bb10:
    assume out_$i17 == 1;
    goto corral_source_split_4287;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_4285;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_4284;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p14);
    goto corral_source_split_4283;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p13, $mul.ref(48, 1));
    goto corral_source_split_4282;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_4281;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} list_del(out_$p5);
    goto corral_source_split_4280;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p22, out_$p23, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p5, out_$p6 := parahotplug_process_list_loop_$bb4(out_$p7, out_$i8, out_$p9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p22, out_$p23, out_$p25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p5, out_$p6);
    return;

  exit:
    return;
}



procedure parahotplug_process_list_loop_$bb4(in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$i10: i64, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$i26: i8, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p5: ref, in_$p6: ref) returns (out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$i10: i64, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$i26: i8, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p5: ref, out_$p6: ref);
  modifies $M.0, $M.18, $CurrAddr;



implementation parser_string_get_loop_$bb14(in_$p5: ref, in_$i7: i64, in_$i13: i64, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i20: i32, in_$i21: i64, in_$i22: i1, in_$i12: i32) returns (out_$i13: i64, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i20: i32, out_$i21: i64, out_$i22: i1, out_$i12: i32)
{

  entry:
    out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i12 := in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i20, in_$i21, in_$i22, in_$i12;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5400;

  $bb20:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i20;
    goto $bb20_dummy;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    out_$i22 := $ult.i64(out_$i21, in_$i7);
    goto corral_source_split_5415;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_5414;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i12, 1);
    call {:si_unique_call 1146} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_5413;

  $bb17:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i12;
    assume true;
    goto $bb17;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_5405;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p14);
    goto corral_source_split_5404;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(in_$p5, $mul.ref(out_$i13, 1));
    goto corral_source_split_5403;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i12);
    goto corral_source_split_5402;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i12 := parser_string_get_loop_$bb14(in_$p5, in_$i7, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i12);
    return;

  exit:
    return;
}



procedure parser_string_get_loop_$bb14(in_$p5: ref, in_$i7: i64, in_$i13: i64, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i20: i32, in_$i21: i64, in_$i22: i1, in_$i12: i32) returns (out_$i13: i64, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i20: i32, out_$i21: i64, out_$i22: i1, out_$i12: i32);



implementation remove_all_visor_devices_loop_$bb4(in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p5: ref, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p5: ref, out_$p6: ref)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p5, out_$p6 := in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p5, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5546;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$p5, out_$p6 := out_$p6, out_$p10;
    goto $bb6_dummy;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, $p2i.ref.i64(list_all_device_instances));
    goto corral_source_split_5554;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_5553;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_5552;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5551;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} remove_visor_device(out_$p8);
    goto corral_source_split_5550;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p7, $mul.ref($sub.ref(0, 1448), 2064));
    goto corral_source_split_5549;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_5548;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p5, out_$p6 := remove_all_visor_devices_loop_$bb4(out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p5, out_$p6);
    return;

  exit:
    return;
}



procedure remove_all_visor_devices_loop_$bb4(in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p5: ref, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p5: ref, out_$p6: ref);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$i77: i32, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i64, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i1, in_$i170: i1, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$p174: ref, in_$i175: i64, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$p193: ref, in_$i194: i64, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$p199: ref, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$i224: i1, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$p229: ref, in_$i230: i64, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$p235: ref, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i1, in_$i245: i1, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i32, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$i262: i64, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$p273: ref, in_$i274: i64, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$p279: ref, in_$i281: i32, in_$i282: i1, in_$i283: i32, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i1, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i294: i32, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i298: i32, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$i310: i32, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i64, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i32, in_$i333: i32, in_$i334: i1, in_$i335: i32, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$i341: i32, in_$i342: i32, in_$i343: i32, in_$i344: i1, in_$i345: i32, in_$i346: i1, in_$i347: i32, in_$i348: i1, in_$i349: i1, in_$i350: i1, in_$i351: i1, in_$i352: i1, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$p364: ref, in_$i366: i32, in_$i367: i32, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$p371: ref, in_$i372: i32, in_$i373: i32, in_$i374: i1, in_$i375: i32, in_$i376: i32, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i380: i32, in_$i381: i64, in_vslice_dummy_var_265: i64, in_vslice_dummy_var_266: i64, in_vslice_dummy_var_267: i64, in_vslice_dummy_var_268: i64, in_vslice_dummy_var_269: i64, in_vslice_dummy_var_270: i64, in_vslice_dummy_var_271: i64, in_vslice_dummy_var_272: i64, in_vslice_dummy_var_273: i64, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i64, in_vslice_dummy_var_276: i64, in_vslice_dummy_var_277: i64, in_vslice_dummy_var_278: i64, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: i32, in_vslice_dummy_var_283: i64) returns (out_$i77: i32, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i64, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i1, out_$i170: i1, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$p174: ref, out_$i175: i64, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$p193: ref, out_$i194: i64, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$p199: ref, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$i224: i1, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$p229: ref, out_$i230: i64, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$p235: ref, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i1, out_$i245: i1, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i32, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$i262: i64, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$p273: ref, out_$i274: i64, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$p279: ref, out_$i281: i32, out_$i282: i1, out_$i283: i32, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i1, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i294: i32, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i298: i32, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$i310: i32, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i64, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i32, out_$i333: i32, out_$i334: i1, out_$i335: i32, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$i341: i32, out_$i342: i32, out_$i343: i32, out_$i344: i1, out_$i345: i32, out_$i346: i1, out_$i347: i32, out_$i348: i1, out_$i349: i1, out_$i350: i1, out_$i351: i1, out_$i352: i1, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$p364: ref, out_$i366: i32, out_$i367: i32, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$p371: ref, out_$i372: i32, out_$i373: i32, out_$i374: i1, out_$i375: i32, out_$i376: i32, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i380: i32, out_$i381: i64, out_vslice_dummy_var_265: i64, out_vslice_dummy_var_266: i64, out_vslice_dummy_var_267: i64, out_vslice_dummy_var_268: i64, out_vslice_dummy_var_269: i64, out_vslice_dummy_var_270: i64, out_vslice_dummy_var_271: i64, out_vslice_dummy_var_272: i64, out_vslice_dummy_var_273: i64, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i64, out_vslice_dummy_var_276: i64, out_vslice_dummy_var_277: i64, out_vslice_dummy_var_278: i64, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: i32, out_vslice_dummy_var_283: i64)
{

  entry:
    out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$i156, out_$i158, out_$i159, out_$p160, out_$p161, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i177, out_$i178, out_$p179, out_$p180, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$p192, out_$p193, out_$i194, out_$i196, out_$i197, out_$p198, out_$p199, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$p235, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$i276, out_$i277, out_$p278, out_$p279, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$p364, out_$i366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283 := in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$p155, in_$i156, in_$i158, in_$i159, in_$p160, in_$p161, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$p173, in_$p174, in_$i175, in_$i177, in_$i178, in_$p179, in_$p180, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$p192, in_$p193, in_$i194, in_$i196, in_$i197, in_$p198, in_$p199, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$p228, in_$p229, in_$i230, in_$i232, in_$i233, in_$p234, in_$p235, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$p272, in_$p273, in_$i274, in_$i276, in_$i277, in_$p278, in_$p279, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$p293, in_$i294, in_$i295, in_$i296, in_$p297, in_$i298, in_$i299, in_$i300, in_$p301, in_$i302, in_$i303, in_$i304, in_$p305, in_$i306, in_$i307, in_$i308, in_$p309, in_$i310, in_$i311, in_$i312, in_$p313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$p331, in_$i332, in_$i333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$p339, in_$i341, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$i354, in_$p355, in_$i357, in_$i358, in_$p359, in_$i361, in_$i362, in_$p363, in_$p364, in_$i366, in_$i367, in_$i368, in_$i369, in_$p370, in_$p371, in_$i372, in_$i373, in_$i374, in_$i375, in_$i376, in_$i377, in_$i378, in_$p379, in_$i380, in_$i381, in_vslice_dummy_var_265, in_vslice_dummy_var_266, in_vslice_dummy_var_267, in_vslice_dummy_var_268, in_vslice_dummy_var_269, in_vslice_dummy_var_270, in_vslice_dummy_var_271, in_vslice_dummy_var_272, in_vslice_dummy_var_273, in_vslice_dummy_var_274, in_vslice_dummy_var_275, in_vslice_dummy_var_276, in_vslice_dummy_var_277, in_vslice_dummy_var_278, in_vslice_dummy_var_279, in_vslice_dummy_var_280, in_vslice_dummy_var_281, in_vslice_dummy_var_282, in_vslice_dummy_var_283;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1674} out_$i77 := __VERIFIER_nondet_int();
    call {:si_unique_call 1675} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i77);
    call {:si_unique_call 1676} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i77);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb75_dummy;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} ldv_main_exported_32();
    goto corral_source_split_6852;

  $bb72:
    assume out_$i113 == 1;
    goto corral_source_split_6851;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    out_$i113 := $ne.i32(out_$i112, 0);
    goto corral_source_split_6849;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    out_$i112 := $M.81;
    goto corral_source_split_6848;

  $bb70:
    assume out_$i111 == 1;
    goto corral_source_split_6847;

  $bb68:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i77, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb64:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i77, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb56:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i77, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb40:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i77, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb3:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i77, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i77, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb77:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} ldv_main_exported_21();
    goto corral_source_split_6855;

  $bb76:
    assume out_$i115 == 1;
    goto corral_source_split_6854;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i114 := $M.82;
    goto corral_source_split_6844;

  $bb69:
    assume !(out_$i110 == 1);
    goto corral_source_split_6843;

  $bb80:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb85:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $M.115 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6866;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_vslice_dummy_var_265 := deviceenabled_store(in_$p20, in_$p17, in_$p18, out_$i122);
    goto corral_source_split_6865;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i64($M.76, in_$p0);
    goto corral_source_split_6864;

  $bb84:
    assume out_$i121 == 1;
    goto corral_source_split_6863;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 1);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$i120 := $M.115;
    goto corral_source_split_6860;

  $bb82:
    assume out_$i119 == 1;
    goto corral_source_split_6859;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_6857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1679} out_$i118 := __VERIFIER_nondet_int();
    call {:si_unique_call 1680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i118);
    call {:si_unique_call 1681} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i118);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume out_$i117 == 1;
    goto corral_source_split_6857;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_6837;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    out_$i116 := $M.115;
    goto corral_source_split_6836;

  $bb66:
    assume out_$i109 == 1;
    goto corral_source_split_6835;

  $bb65:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i77, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} ldv_stop();
    goto corral_source_split_6868;

  $bb83:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb92:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} ldv_main_exported_26();
    goto corral_source_split_6871;

  $bb91:
    assume out_$i125 == 1;
    goto corral_source_split_6870;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, 0);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    out_$i124 := $M.83;
    goto corral_source_split_6840;

  $bb67:
    assume !(out_$i109 == 1);
    goto corral_source_split_6839;

  $bb95:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} ldv_main_exported_17();
    goto corral_source_split_6874;

  $bb94:
    assume out_$i127 == 1;
    goto corral_source_split_6873;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_6829;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    out_$i126 := $M.84;
    goto corral_source_split_6828;

  $bb62:
    assume out_$i107 == 1;
    goto corral_source_split_6827;

  $bb58:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i77, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb57:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i77, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb98:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_261:
    goto corral_source_split_6877;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} invoke_work_2();
    goto SeqInstr_260;

  $bb97:
    assume out_$i129 == 1;
    goto corral_source_split_6876;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i32(out_$i128, 0);
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    out_$i128 := $M.116;
    goto corral_source_split_6832;

  $bb63:
    assume !(out_$i107 == 1);
    goto corral_source_split_6831;

  $bb101:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_264:
    goto corral_source_split_6880;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} invoke_work_1();
    goto SeqInstr_263;

  $bb100:
    assume out_$i131 == 1;
    goto corral_source_split_6879;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    out_$i130 := $M.117;
    goto corral_source_split_6820;

  $bb60:
    assume out_$i106 == 1;
    goto corral_source_split_6819;

  $bb59:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i77, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb104:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} ldv_main_exported_18();
    goto corral_source_split_6883;

  $bb103:
    assume out_$i133 == 1;
    goto corral_source_split_6882;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i132 := $M.86;
    goto corral_source_split_6824;

  $bb61:
    assume !(out_$i106 == 1);
    goto corral_source_split_6823;

  $bb107:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_267:
    goto corral_source_split_6886;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} ldv_main_exported_30();
    goto SeqInstr_266;

  $bb106:
    assume out_$i135 == 1;
    goto corral_source_split_6885;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i134, 0);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$i134 := $M.87;
    goto corral_source_split_6812;

  $bb54:
    assume out_$i103 == 1;
    goto corral_source_split_6811;

  $bb50:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i77, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb42:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i77, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb41:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i77, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb110:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} ldv_main_exported_16();
    goto corral_source_split_6889;

  $bb109:
    assume out_$i137 == 1;
    goto corral_source_split_6888;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$i137 := $ne.i32(out_$i136, 0);
    goto corral_source_split_6817;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    out_$i136 := $M.88;
    goto corral_source_split_6816;

  $bb55:
    assume !(out_$i103 == 1);
    goto corral_source_split_6815;

  $bb113:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} ldv_main_exported_27();
    goto corral_source_split_6892;

  $bb112:
    assume out_$i139 == 1;
    goto corral_source_split_6891;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i139 := $ne.i32(out_$i138, 0);
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i138 := $M.92;
    goto corral_source_split_6804;

  $bb52:
    assume out_$i102 == 1;
    goto corral_source_split_6803;

  $bb51:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i77, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb116:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} ldv_main_exported_25();
    goto corral_source_split_6895;

  $bb115:
    assume out_$i141 == 1;
    goto corral_source_split_6894;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    out_$i141 := $ne.i32(out_$i140, 0);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$i140 := $M.91;
    goto corral_source_split_6808;

  $bb53:
    assume !(out_$i102 == 1);
    goto corral_source_split_6807;

  $bb119:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} ldv_main_exported_28();
    goto corral_source_split_6898;

  $bb118:
    assume out_$i143 == 1;
    goto corral_source_split_6897;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i32(out_$i142, 0);
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$i142 := $M.93;
    goto corral_source_split_6796;

  $bb48:
    assume out_$i100 == 1;
    goto corral_source_split_6795;

  $bb44:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i77, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb43:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i77, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb122:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} ldv_main_exported_20();
    goto corral_source_split_6901;

  $bb121:
    assume out_$i145 == 1;
    goto corral_source_split_6900;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i145 := $ne.i32(out_$i144, 0);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    out_$i144 := $M.94;
    goto corral_source_split_6800;

  $bb49:
    assume !(out_$i100 == 1);
    goto corral_source_split_6799;

  $bb125:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb135:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1700} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6918;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} out_vslice_dummy_var_266 := toolaction_store(out_$p154, out_$p155, in_$p21, out_$i156);
    goto corral_source_split_6917;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i64($M.76, in_$p1);
    goto corral_source_split_6916;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    out_$p155 := $M.103;
    goto corral_source_split_6915;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$p154 := $M.104;
    goto corral_source_split_6914;

  $bb134:
    assume out_$i153 == 1;
    goto corral_source_split_6913;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 1);
    goto corral_source_split_6911;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    out_$i152 := $M.118;
    goto corral_source_split_6910;

  $bb132:
    assume out_$i151 == 1;
    goto corral_source_split_6909;

  $bb127:
    assume out_$i149 == 1;
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i148, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i149 := $slt.i32(out_$i148, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_6903:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} out_$i148 := __VERIFIER_nondet_int();
    call {:si_unique_call 1697} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i148);
    call {:si_unique_call 1698} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i148);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb124:
    assume out_$i147 == 1;
    goto corral_source_split_6903;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$i147 := $ne.i32(out_$i146, 0);
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$i146 := $M.118;
    goto corral_source_split_6788;

  $bb46:
    assume out_$i99 == 1;
    goto corral_source_split_6787;

  $bb45:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i77, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb139:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1702} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6924;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} out_vslice_dummy_var_267 := toolaction_show(out_$p160, out_$p161, in_$p22);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$p161 := $M.103;
    goto corral_source_split_6922;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$p160 := $M.104;
    goto corral_source_split_6921;

  $bb138:
    assume out_$i159 == 1;
    goto corral_source_split_6920;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 1);
    goto corral_source_split_6907;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$i158 := $M.118;
    goto corral_source_split_6906;

  $bb129:
    assume out_$i150 == 1;
    goto corral_source_split_6905;

  $bb128:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i148, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} ldv_stop();
    goto corral_source_split_6926;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb130:
    assume {:verifier.code 0} true;
    assume !(out_$i150 == 1);
    goto $bb131;

  $bb133:
    assume {:verifier.code 0} true;
    assume !(out_$i151 == 1);
    goto $bb131;

  $bb145:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} ldv_main_exported_24();
    goto corral_source_split_6929;

  $bb144:
    assume out_$i164 == 1;
    goto corral_source_split_6928;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i164 := $ne.i32(out_$i163, 0);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    out_$i163 := $M.95;
    goto corral_source_split_6792;

  $bb47:
    assume !(out_$i99 == 1);
    goto corral_source_split_6791;

  $bb148:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb158:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6946;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} out_vslice_dummy_var_268 := remaining_steps_store(out_$p173, out_$p174, in_$p24, out_$i175);
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i64($M.76, in_$p2);
    goto corral_source_split_6944;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    out_$p174 := $M.105;
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$p173 := $M.106;
    goto corral_source_split_6942;

  $bb157:
    assume out_$i172 == 1;
    goto corral_source_split_6941;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 1);
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$i171 := $M.119;
    goto corral_source_split_6938;

  $bb155:
    assume out_$i170 == 1;
    goto corral_source_split_6937;

  $bb150:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i167, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb149:
    assume {:verifier.code 0} true;
    out_$i168 := $slt.i32(out_$i167, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_6931:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1705} out_$i167 := __VERIFIER_nondet_int();
    call {:si_unique_call 1706} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i167);
    call {:si_unique_call 1707} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i167);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb147:
    assume out_$i166 == 1;
    goto corral_source_split_6931;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    out_$i166 := $ne.i32(out_$i165, 0);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$i165 := $M.119;
    goto corral_source_split_6780;

  $bb38:
    assume out_$i95 == 1;
    goto corral_source_split_6779;

  $bb34:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i77, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb26:
    assume out_$i89 == 1;
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i77, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb5:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i77, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb4:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i77, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb162:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} out_vslice_dummy_var_269 := remaining_steps_show(out_$p179, out_$p180, in_$p23);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    out_$p180 := $M.105;
    goto corral_source_split_6950;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    out_$p179 := $M.106;
    goto corral_source_split_6949;

  $bb161:
    assume out_$i178 == 1;
    goto corral_source_split_6948;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 1);
    goto corral_source_split_6935;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$i177 := $M.119;
    goto corral_source_split_6934;

  $bb152:
    assume out_$i169 == 1;
    goto corral_source_split_6933;

  $bb151:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i167, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} ldv_stop();
    goto corral_source_split_6954;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb153:
    assume {:verifier.code 0} true;
    assume !(out_$i169 == 1);
    goto $bb154;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i170 == 1);
    goto $bb154;

  $bb168:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    goto $bb169;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} ldv_main_exported_31();
    goto corral_source_split_6957;

  $bb167:
    assume out_$i183 == 1;
    goto corral_source_split_6956;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$i183 := $ne.i32(out_$i182, 0);
    goto corral_source_split_6785;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    out_$i182 := $M.97;
    goto corral_source_split_6784;

  $bb39:
    assume !(out_$i95 == 1);
    goto corral_source_split_6783;

  $bb171:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb181:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} out_vslice_dummy_var_270 := textid_store(out_$p192, out_$p193, in_$p26, out_$i194);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i64($M.76, in_$p3);
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$p193 := $M.107;
    goto corral_source_split_6971;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    out_$p192 := $M.108;
    goto corral_source_split_6970;

  $bb180:
    assume out_$i191 == 1;
    goto corral_source_split_6969;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 1);
    goto corral_source_split_6967;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    out_$i190 := $M.120;
    goto corral_source_split_6966;

  $bb178:
    assume out_$i189 == 1;
    goto corral_source_split_6965;

  $bb173:
    assume out_$i187 == 1;
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i186, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i187 := $slt.i32(out_$i186, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_6959:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1714} out_$i186 := __VERIFIER_nondet_int();
    call {:si_unique_call 1715} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i186);
    call {:si_unique_call 1716} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i186);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb170:
    assume out_$i185 == 1;
    goto corral_source_split_6959;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$i185 := $ne.i32(out_$i184, 0);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    out_$i184 := $M.120;
    goto corral_source_split_6772;

  $bb36:
    assume out_$i94 == 1;
    goto corral_source_split_6771;

  $bb35:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i77, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb185:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6980;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} out_vslice_dummy_var_271 := textid_show(out_$p198, out_$p199, in_$p25);
    goto corral_source_split_6979;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    out_$p199 := $M.107;
    goto corral_source_split_6978;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    out_$p198 := $M.108;
    goto corral_source_split_6977;

  $bb184:
    assume out_$i197 == 1;
    goto corral_source_split_6976;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 1);
    goto corral_source_split_6963;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    out_$i196 := $M.120;
    goto corral_source_split_6962;

  $bb175:
    assume out_$i188 == 1;
    goto corral_source_split_6961;

  $bb174:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i186, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} ldv_stop();
    goto corral_source_split_6982;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb176:
    assume {:verifier.code 0} true;
    assume !(out_$i188 == 1);
    goto $bb177;

  $bb179:
    assume {:verifier.code 0} true;
    assume !(out_$i189 == 1);
    goto $bb177;

  $bb191:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} ldv_main_exported_22();
    goto corral_source_split_6985;

  $bb190:
    assume out_$i202 == 1;
    goto corral_source_split_6984;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    out_$i202 := $ne.i32(out_$i201, 0);
    goto corral_source_split_6777;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$i201 := $M.85;
    goto corral_source_split_6776;

  $bb37:
    assume !(out_$i94 == 1);
    goto corral_source_split_6775;

  $bb194:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb204:
    assume {:verifier.code 0} true;
    assume !(out_$i210 == 1);
    goto $bb205;

  $bb207:
    assume {:verifier.code 0} true;
    assume !(out_$i212 == 1);
    goto $bb205;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i211, 0);
    goto corral_source_split_6999;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    out_$i211 := $M.121;
    goto corral_source_split_6998;

  $bb203:
    assume out_$i210 == 1;
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 3);
    goto corral_source_split_6995;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    out_$i209 := $M.122;
    goto corral_source_split_6994;

  $bb201:
    assume out_$i208 == 1;
    goto corral_source_split_6993;

  $bb196:
    assume out_$i206 == 1;
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i205, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb195:
    assume {:verifier.code 0} true;
    out_$i206 := $slt.i32(out_$i205, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_6987:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1723} out_$i205 := __VERIFIER_nondet_int();
    call {:si_unique_call 1724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i205);
    call {:si_unique_call 1725} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i205);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb193:
    assume out_$i204 == 1;
    goto corral_source_split_6987;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i204 := $ne.i32(out_$i203, 0);
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$i203 := $M.122;
    goto corral_source_split_6764;

  $bb32:
    assume out_$i92 == 1;
    goto corral_source_split_6763;

  $bb28:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i77, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb27:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i77, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb212:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb217:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    out_$i219 := $ne.i32(out_$i218, 0);
    goto corral_source_split_7055;

  $bb215:
    assume {:verifier.code 0} true;
    out_$i218 := $M.131;
    goto corral_source_split_7054;

  $bb214:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_32"} boogie_si_record_i32(1);
    goto corral_source_split_7052;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} ldv_initialize_device_attribute_11();
    goto corral_source_split_7051;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_7050;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1766} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_7049;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $M.115 := 1;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7048;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1764} {:cexpr "ldv_state_variable_26"} boogie_si_record_i32(1);
    goto corral_source_split_7047;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_7046;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1762} {:cexpr "ldv_state_variable_22"} boogie_si_record_i32(1);
    goto corral_source_split_7045;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_7044;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} ldv_initialize_visorchipset_busdev_notifiers_30();
    goto corral_source_split_7043;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_30"} boogie_si_record_i32(1);
    goto corral_source_split_7042;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1758} {:cexpr "ldv_state_variable_23"} boogie_si_record_i32(1);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_7040;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} ldv_initialize_device_attribute_13();
    goto corral_source_split_7039;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_7038;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} ldv_initialize_sysfs_ops_29();
    goto corral_source_split_7037;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_29"} boogie_si_record_i32(1);
    goto corral_source_split_7036;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1752} {:cexpr "ldv_state_variable_27"} boogie_si_record_i32(1);
    goto corral_source_split_7035;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1751} {:cexpr "ldv_state_variable_25"} boogie_si_record_i32(1);
    goto corral_source_split_7034;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7033;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_28"} boogie_si_record_i32(1);
    goto corral_source_split_7032;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $M.126 := 1;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} ldv_initialize_device_attribute_12();
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} ldv_initialize_device_attribute_14();
    goto corral_source_split_7028;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.118 := 1;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} ldv_initialize_visorchipset_busdev_responders_15();
    goto corral_source_split_7026;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_7024;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $M.129 := 1;
    call {:si_unique_call 1740} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} ldv_initialize_acpi_driver_4();
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $M.130 := 1;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_24"} boogie_si_record_i32(1);
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} ldv_initialize_device_attribute_10();
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7018;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_7017;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_initialize_bus_type_31();
    goto corral_source_split_7016;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1732} {:cexpr "ldv_state_variable_31"} boogie_si_record_i32(1);
    goto corral_source_split_7015;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $M.122 := 3;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7014;

  $bb213:
    assume out_$i217 == 1;
    goto corral_source_split_7013;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 0);
    goto corral_source_split_7011;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    out_$i216 := $M.131;
    goto corral_source_split_7010;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $M.131 := out_$i215;
    call {:si_unique_call 1730} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i215);
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} out_$i215 := init_unisys();
    goto corral_source_split_7008;

  $bb211:
    assume out_$i214 == 1;
    goto corral_source_split_7007;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 1);
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    out_$i213 := $M.122;
    goto corral_source_split_6990;

  $bb198:
    assume out_$i207 == 1;
    goto corral_source_split_6989;

  $bb197:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i205, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} ldv_stop();
    goto corral_source_split_7060;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb199:
    assume {:verifier.code 0} true;
    assume !(out_$i207 == 1);
    goto $bb200;

  $bb202:
    assume {:verifier.code 0} true;
    assume !(out_$i208 == 1);
    goto $bb200;

  $bb224:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb234:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1776} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_7077;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} out_vslice_dummy_var_272 := boottotool_store(out_$p228, out_$p229, in_$p27, out_$i230);
    goto corral_source_split_7076;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i64($M.76, in_$p4);
    goto corral_source_split_7075;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    out_$p229 := $M.101;
    goto corral_source_split_7074;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    out_$p228 := $M.102;
    goto corral_source_split_7073;

  $bb233:
    assume out_$i227 == 1;
    goto corral_source_split_7072;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 1);
    goto corral_source_split_7070;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    out_$i226 := $M.123;
    goto corral_source_split_7069;

  $bb231:
    assume out_$i225 == 1;
    goto corral_source_split_7068;

  $bb226:
    assume out_$i223 == 1;
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i222, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb225:
    assume {:verifier.code 0} true;
    out_$i223 := $slt.i32(out_$i222, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_7062:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1772} out_$i222 := __VERIFIER_nondet_int();
    call {:si_unique_call 1773} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i222);
    call {:si_unique_call 1774} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i222);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb223:
    assume out_$i221 == 1;
    goto corral_source_split_7062;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    out_$i221 := $ne.i32(out_$i220, 0);
    goto corral_source_split_6769;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    out_$i220 := $M.123;
    goto corral_source_split_6768;

  $bb33:
    assume !(out_$i92 == 1);
    goto corral_source_split_6767;

  $bb238:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 1778} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_7083;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} out_vslice_dummy_var_273 := boottotool_show(out_$p234, out_$p235, in_$p28);
    goto corral_source_split_7082;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    out_$p235 := $M.101;
    goto corral_source_split_7081;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    out_$p234 := $M.102;
    goto corral_source_split_7080;

  $bb237:
    assume out_$i233 == 1;
    goto corral_source_split_7079;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 1);
    goto corral_source_split_7066;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$i232 := $M.123;
    goto corral_source_split_7065;

  $bb228:
    assume out_$i224 == 1;
    goto corral_source_split_7064;

  $bb227:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i222, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} ldv_stop();
    goto corral_source_split_7085;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb229:
    assume {:verifier.code 0} true;
    assume !(out_$i224 == 1);
    goto $bb230;

  $bb232:
    assume {:verifier.code 0} true;
    assume !(out_$i225 == 1);
    goto $bb230;

  $bb244:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} ldv_main_exported_23();
    goto corral_source_split_7088;

  $bb243:
    assume out_$i238 == 1;
    goto corral_source_split_7087;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$i238 := $ne.i32(out_$i237, 0);
    goto corral_source_split_6757;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    out_$i237 := $M.89;
    goto corral_source_split_6756;

  $bb30:
    assume out_$i91 == 1;
    goto corral_source_split_6755;

  $bb29:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i77, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb247:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} ldv_main_exported_29();
    goto corral_source_split_7091;

  $bb246:
    assume out_$i240 == 1;
    goto corral_source_split_7090;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i240 := $ne.i32(out_$i239, 0);
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    out_$i239 := $M.90;
    goto corral_source_split_6760;

  $bb31:
    assume !(out_$i91 == 1);
    goto corral_source_split_6759;

  $bb250:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb260:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    goto $bb261;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $M.121 := out_$i250;
    call {:si_unique_call 1787} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i250);
    goto corral_source_split_7108;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    out_$i250 := $sub.i32(out_$i249, 1);
    goto corral_source_split_7107;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    out_$i249 := $M.121;
    goto corral_source_split_7106;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7105;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} visorchipset_dev_release(in_$p30);
    goto corral_source_split_7104;

  $bb259:
    assume out_$i248 == 1;
    goto corral_source_split_7103;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 2);
    goto corral_source_split_7101;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    out_$i247 := $M.124;
    goto corral_source_split_7100;

  $bb257:
    assume out_$i246 == 1;
    goto corral_source_split_7099;

  $bb252:
    assume out_$i244 == 1;
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i243, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb251:
    assume {:verifier.code 0} true;
    out_$i244 := $slt.i32(out_$i243, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_7093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1782} out_$i243 := __VERIFIER_nondet_int();
    call {:si_unique_call 1783} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i243);
    call {:si_unique_call 1784} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i243);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb249:
    assume out_$i242 == 1;
    goto corral_source_split_7093;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    out_$i242 := $ne.i32(out_$i241, 0);
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i241 := $M.124;
    goto corral_source_split_6750;

  $bb24:
    assume out_$i88 == 1;
    goto corral_source_split_6749;

  $bb20:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i77, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb7:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i77, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb6:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i77, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb264:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $M.121 := out_$i255;
    call {:si_unique_call 1790} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    out_$i255 := $add.i32(out_$i254, 1);
    goto corral_source_split_7114;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    out_$i254 := $M.121;
    goto corral_source_split_7113;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $M.124 := 2;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7112;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} out_vslice_dummy_var_274 := ldv_probe_6();
    goto corral_source_split_7111;

  $bb263:
    assume out_$i252 == 1;
    goto corral_source_split_7110;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i251, 1);
    goto corral_source_split_7097;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    out_$i251 := $M.124;
    goto corral_source_split_7096;

  $bb254:
    assume out_$i245 == 1;
    goto corral_source_split_7095;

  $bb253:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i243, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} ldv_stop();
    goto corral_source_split_7117;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb255:
    assume {:verifier.code 0} true;
    assume !(out_$i245 == 1);
    goto $bb256;

  $bb258:
    assume {:verifier.code 0} true;
    assume !(out_$i246 == 1);
    goto $bb256;

  $bb25:
    assume !(out_$i88 == 1);
    goto corral_source_split_6753;

  $bb270:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb275:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    goto $bb276;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $M.126 := 1;
    call {:si_unique_call 1796} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7128;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} out_vslice_dummy_var_275 := chipsetready_store(in_$p34, in_$p32, in_$p35, out_$i262);
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    out_$i262 := $load.i64($M.76, in_$p5);
    goto corral_source_split_7126;

  $bb274:
    assume out_$i261 == 1;
    goto corral_source_split_7125;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 1);
    goto corral_source_split_7123;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    out_$i260 := $M.126;
    goto corral_source_split_7122;

  $bb272:
    assume out_$i259 == 1;
    goto corral_source_split_7121;

  $bb271:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_7119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1792} out_$i258 := __VERIFIER_nondet_int();
    call {:si_unique_call 1793} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i258);
    call {:si_unique_call 1794} {:cexpr "tmp___28"} boogie_si_record_i32(out_$i258);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb269:
    assume out_$i257 == 1;
    goto corral_source_split_7119;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    out_$i257 := $ne.i32(out_$i256, 0);
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    out_$i256 := $M.126;
    goto corral_source_split_6742;

  $bb22:
    assume out_$i87 == 1;
    goto corral_source_split_6741;

  $bb21:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i77, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} ldv_stop();
    goto corral_source_split_7130;

  $bb273:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb282:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb292:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7147;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} out_vslice_dummy_var_276 := error_store(out_$p272, out_$p273, in_$p36, out_$i274);
    goto corral_source_split_7146;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i64($M.76, in_$p6);
    goto corral_source_split_7145;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    out_$p273 := $M.98;
    goto corral_source_split_7144;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    out_$p272 := $M.99;
    goto corral_source_split_7143;

  $bb291:
    assume out_$i271 == 1;
    goto corral_source_split_7142;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 1);
    goto corral_source_split_7140;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    out_$i270 := $M.127;
    goto corral_source_split_7139;

  $bb289:
    assume out_$i269 == 1;
    goto corral_source_split_7138;

  $bb284:
    assume out_$i267 == 1;
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i266, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb283:
    assume {:verifier.code 0} true;
    out_$i267 := $slt.i32(out_$i266, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_7132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1798} out_$i266 := __VERIFIER_nondet_int();
    call {:si_unique_call 1799} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i266);
    call {:si_unique_call 1800} {:cexpr "tmp___29"} boogie_si_record_i32(out_$i266);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb281:
    assume out_$i265 == 1;
    goto corral_source_split_7132;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    out_$i265 := $ne.i32(out_$i264, 0);
    goto corral_source_split_6747;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    out_$i264 := $M.127;
    goto corral_source_split_6746;

  $bb23:
    assume !(out_$i87 == 1);
    goto corral_source_split_6745;

  $bb296:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $M.127 := 1;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7153;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} out_vslice_dummy_var_277 := error_show(out_$p278, out_$p279, in_$p37);
    goto corral_source_split_7152;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    out_$p279 := $M.98;
    goto corral_source_split_7151;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    out_$p278 := $M.99;
    goto corral_source_split_7150;

  $bb295:
    assume out_$i277 == 1;
    goto corral_source_split_7149;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i276, 1);
    goto corral_source_split_7136;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    out_$i276 := $M.127;
    goto corral_source_split_7135;

  $bb286:
    assume out_$i268 == 1;
    goto corral_source_split_7134;

  $bb285:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i266, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} ldv_stop();
    goto corral_source_split_7155;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb287:
    assume {:verifier.code 0} true;
    assume !(out_$i268 == 1);
    goto $bb288;

  $bb290:
    assume {:verifier.code 0} true;
    assume !(out_$i269 == 1);
    goto $bb288;

  $bb302:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb320:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7187;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} device_create_response(out_$p293, out_$i294);
    goto corral_source_split_7186;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$i294 := $load.i32($M.76, in_$p11);
    goto corral_source_split_7185;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    out_$p293 := $M.100;
    goto corral_source_split_7184;

  $bb319:
    assume out_$i292 == 1;
    goto corral_source_split_7183;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 1);
    goto corral_source_split_7181;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$i291 := $M.128;
    goto corral_source_split_7180;

  $bb317:
    assume out_$i290 == 1;
    goto corral_source_split_7179;

  $bb313:
    assume out_$i288 == 1;
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i283, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb304:
    assume out_$i284 == 1;
    assume {:verifier.code 0} true;
    out_$i288 := $slt.i32(out_$i283, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb303:
    assume {:verifier.code 0} true;
    out_$i284 := $slt.i32(out_$i283, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_7157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1806} out_$i283 := __VERIFIER_nondet_int();
    call {:si_unique_call 1807} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i283);
    call {:si_unique_call 1808} {:cexpr "tmp___30"} boogie_si_record_i32(out_$i283);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb301:
    assume out_$i282 == 1;
    goto corral_source_split_7157;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$i282 := $ne.i32(out_$i281, 0);
    goto corral_source_split_6735;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    out_$i281 := $M.128;
    goto corral_source_split_6734;

  $bb18:
    assume out_$i85 == 1;
    goto corral_source_split_6733;

  $bb9:
    assume out_$i81 == 1;
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i77, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb8:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i77, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb324:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7193;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} device_resume_response(out_$p297, out_$i298);
    goto corral_source_split_7192;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    out_$i298 := $load.i32($M.76, in_$p9);
    goto corral_source_split_7191;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    out_$p297 := $M.100;
    goto corral_source_split_7190;

  $bb323:
    assume out_$i296 == 1;
    goto corral_source_split_7189;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 1);
    goto corral_source_split_7173;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    out_$i295 := $M.128;
    goto corral_source_split_7172;

  $bb315:
    assume out_$i289 == 1;
    goto corral_source_split_7171;

  $bb314:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    out_$i289 := $slt.i32(out_$i283, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb327:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7199;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} visorchipset_device_pause_response(out_$p301, out_$i302);
    goto corral_source_split_7198;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    out_$i302 := $load.i32($M.76, in_$p7);
    goto corral_source_split_7197;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    out_$p301 := $M.100;
    goto corral_source_split_7196;

  $bb326:
    assume out_$i300 == 1;
    goto corral_source_split_7195;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i32(out_$i299, 1);
    goto corral_source_split_7177;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    out_$i299 := $M.128;
    goto corral_source_split_7176;

  $bb316:
    assume !(out_$i289 == 1);
    goto corral_source_split_7175;

  $bb330:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    goto $bb331;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7205;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} bus_create_response(out_$p305, out_$i306);
    goto corral_source_split_7204;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    out_$i306 := $load.i32($M.76, in_$p12);
    goto corral_source_split_7203;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    out_$p305 := $M.100;
    goto corral_source_split_7202;

  $bb329:
    assume out_$i304 == 1;
    goto corral_source_split_7201;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 1);
    goto corral_source_split_7161;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    out_$i303 := $M.128;
    goto corral_source_split_7160;

  $bb306:
    assume out_$i285 == 1;
    goto corral_source_split_7159;

  $bb305:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    out_$i285 := $slt.i32(out_$i283, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb333:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7211;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} bus_destroy_response(out_$p309, out_$i310);
    goto corral_source_split_7210;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i32($M.76, in_$p10);
    goto corral_source_split_7209;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    out_$p309 := $M.100;
    goto corral_source_split_7208;

  $bb332:
    assume out_$i308 == 1;
    goto corral_source_split_7207;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i307, 1);
    goto corral_source_split_7165;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    out_$i307 := $M.128;
    goto corral_source_split_7164;

  $bb308:
    assume out_$i286 == 1;
    goto corral_source_split_7163;

  $bb307:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    out_$i286 := $slt.i32(out_$i283, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb336:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb337;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $M.128 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7217;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} device_destroy_response(out_$p313, out_$i314);
    goto corral_source_split_7216;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    out_$i314 := $load.i32($M.76, in_$p8);
    goto corral_source_split_7215;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    out_$p313 := $M.100;
    goto corral_source_split_7214;

  $bb335:
    assume out_$i312 == 1;
    goto corral_source_split_7213;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 1);
    goto corral_source_split_7169;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    out_$i311 := $M.128;
    goto corral_source_split_7168;

  $bb310:
    assume out_$i287 == 1;
    goto corral_source_split_7167;

  $bb309:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i283, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} ldv_stop();
    goto corral_source_split_7219;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb311:
    assume {:verifier.code 0} true;
    assume !(out_$i287 == 1);
    goto $bb312;

  $bb318:
    assume {:verifier.code 0} true;
    assume !(out_$i290 == 1);
    goto $bb312;

  $bb342:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb347:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $M.129 := 1;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7230;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} out_vslice_dummy_var_278 := devicedisabled_store(in_$p41, in_$p39, in_$p42, out_$i321);
    goto corral_source_split_7229;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    out_$i321 := $load.i64($M.76, in_$p13);
    goto corral_source_split_7228;

  $bb346:
    assume out_$i320 == 1;
    goto corral_source_split_7227;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i319, 1);
    goto corral_source_split_7225;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    out_$i319 := $M.129;
    goto corral_source_split_7224;

  $bb344:
    assume out_$i318 == 1;
    goto corral_source_split_7223;

  $bb343:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  corral_source_split_7221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1822} out_$i317 := __VERIFIER_nondet_int();
    call {:si_unique_call 1823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i317);
    call {:si_unique_call 1824} {:cexpr "tmp___31"} boogie_si_record_i32(out_$i317);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb341:
    assume out_$i316 == 1;
    goto corral_source_split_7221;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    out_$i316 := $ne.i32(out_$i315, 0);
    goto corral_source_split_6739;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    out_$i315 := $M.129;
    goto corral_source_split_6738;

  $bb19:
    assume !(out_$i85 == 1);
    goto corral_source_split_6737;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} ldv_stop();
    goto corral_source_split_7232;

  $bb345:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb354:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb364:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb366:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $M.121 := out_$i336;
    call {:si_unique_call 1834} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i336);
    goto corral_source_split_7255;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    out_$i336 := $add.i32(out_$i335, 1);
    goto corral_source_split_7254;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    out_$i335 := $M.121;
    goto corral_source_split_7253;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.130 := 2;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7252;

  $bb365:
    assume out_$i334 == 1;
    goto corral_source_split_7251;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 0);
    goto corral_source_split_7249;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    out_$i333 := $M.132;
    goto corral_source_split_7248;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $M.132 := out_$i332;
    call {:si_unique_call 1832} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i332);
    goto corral_source_split_7247;

  SeqInstr_270:
    goto corral_source_split_7246;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} out_$i332 := visorchipset_init(out_$p331);
    goto SeqInstr_269;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    out_$p331 := $M.109;
    goto corral_source_split_7245;

  $bb363:
    assume out_$i330 == 1;
    goto corral_source_split_7244;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 1);
    goto corral_source_split_7242;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    out_$i329 := $M.130;
    goto corral_source_split_7241;

  $bb361:
    assume out_$i328 == 1;
    goto corral_source_split_7240;

  $bb356:
    assume out_$i326 == 1;
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i325, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb355:
    assume {:verifier.code 0} true;
    out_$i326 := $slt.i32(out_$i325, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_7234:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1828} out_$i325 := __VERIFIER_nondet_int();
    call {:si_unique_call 1829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i325);
    call {:si_unique_call 1830} {:cexpr "tmp___32"} boogie_si_record_i32(out_$i325);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb353:
    assume out_$i324 == 1;
    goto corral_source_split_7234;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    out_$i324 := $ne.i32(out_$i323, 0);
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    out_$i323 := $M.130;
    goto corral_source_split_6722;

  $bb11:
    assume out_$i82 == 1;
    goto corral_source_split_6721;

  $bb10:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i77, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb371:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $M.121 := out_$i342;
    call {:si_unique_call 1837} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i342);
    goto corral_source_split_7263;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    out_$i342 := $sub.i32(out_$i341, 1);
    goto corral_source_split_7262;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    out_$i341 := $M.121;
    goto corral_source_split_7261;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $M.130 := 1;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7260;

  SeqInstr_273:
    goto corral_source_split_7259;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} out_vslice_dummy_var_279 := visorchipset_exit(out_$p339);
    goto SeqInstr_272;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    out_$p339 := $M.109;
    goto corral_source_split_7258;

  $bb370:
    assume out_$i338 == 1;
    goto corral_source_split_7257;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 2);
    goto corral_source_split_7238;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    out_$i337 := $M.130;
    goto corral_source_split_7237;

  $bb358:
    assume out_$i327 == 1;
    goto corral_source_split_7236;

  $bb357:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i325, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} ldv_stop();
    goto corral_source_split_7265;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb359:
    assume {:verifier.code 0} true;
    assume !(out_$i327 == 1);
    goto $bb360;

  $bb362:
    assume {:verifier.code 0} true;
    assume !(out_$i328 == 1);
    goto $bb360;

  $bb377:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} ldv_main_exported_19();
    goto corral_source_split_7268;

  $bb376:
    assume out_$i344 == 1;
    goto corral_source_split_7267;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    out_$i344 := $ne.i32(out_$i343, 0);
    goto corral_source_split_6727;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    out_$i343 := $M.96;
    goto corral_source_split_6726;

  $bb13:
    assume out_$i83 == 1;
    goto corral_source_split_6725;

  $bb12:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i77, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb380:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb408:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb397:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1846} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7299;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} out_vslice_dummy_var_281 := visorchipset_mmap(out_$p359, in_$p44);
    goto corral_source_split_7298;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    out_$p359 := $M.74;
    goto corral_source_split_7297;

  $bb396:
    assume out_$i358 == 1;
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 2);
    goto corral_source_split_7294;

  $bb395:
    assume {:verifier.code 0} true;
    out_$i357 := $M.58;
    goto corral_source_split_7293;

  $bb394:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1844} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7291;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} out_vslice_dummy_var_280 := visorchipset_mmap(out_$p355, in_$p44);
    goto corral_source_split_7290;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    out_$p355 := $M.74;
    goto corral_source_split_7289;

  $bb393:
    assume out_$i354 == 1;
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 1);
    goto corral_source_split_7286;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$i353 := $M.58;
    goto corral_source_split_7285;

  $bb391:
    assume out_$i352 == 1;
    goto corral_source_split_7284;

  $bb389:
    assume out_$i351 == 1;
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i347, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb382:
    assume out_$i348 == 1;
    assume {:verifier.code 0} true;
    out_$i351 := $slt.i32(out_$i347, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb381:
    assume {:verifier.code 0} true;
    out_$i348 := $slt.i32(out_$i347, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_7270:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1840} out_$i347 := __VERIFIER_nondet_int();
    call {:si_unique_call 1841} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i347);
    call {:si_unique_call 1842} {:cexpr "tmp___33"} boogie_si_record_i32(out_$i347);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb379:
    assume out_$i346 == 1;
    goto corral_source_split_7270;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    out_$i346 := $ne.i32(out_$i345, 0);
    goto corral_source_split_6731;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    out_$i345 := $M.58;
    goto corral_source_split_6730;

  $bb15:
    assume out_$i84 == 1;
    goto corral_source_split_6729;

  $bb14:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i77, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb401:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    goto $bb402;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.121 := out_$i367;
    call {:si_unique_call 1849} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i367);
    goto corral_source_split_7308;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    out_$i367 := $sub.i32(out_$i366, 1);
    goto corral_source_split_7307;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    out_$i366 := $M.121;
    goto corral_source_split_7306;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1848} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7305;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} out_vslice_dummy_var_282 := visorchipset_release(out_$p363, out_$p364);
    goto corral_source_split_7304;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    out_$p364 := $M.74;
    goto corral_source_split_7303;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    out_$p363 := $M.73;
    goto corral_source_split_7302;

  $bb400:
    assume out_$i362 == 1;
    goto corral_source_split_7301;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 2);
    goto corral_source_split_7282;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    out_$i361 := $M.58;
    goto corral_source_split_7281;

  $bb390:
    assume !(out_$i351 == 1);
    goto corral_source_split_7280;

  $bb404:
    assume !(out_$i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb406:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    goto $bb407;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $M.121 := out_$i376;
    call {:si_unique_call 1853} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i376);
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$i376 := $add.i32(out_$i375, 1);
    goto corral_source_split_7321;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    out_$i375 := $M.121;
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7319;

  $bb405:
    assume out_$i374 == 1;
    goto corral_source_split_7318;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$i374 := $eq.i32(out_$i373, 0);
    goto corral_source_split_7316;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    out_$i373 := $M.133;
    goto corral_source_split_7315;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $M.133 := out_$i372;
    call {:si_unique_call 1851} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i372);
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} out_$i372 := visorchipset_open(out_$p370, out_$p371);
    goto corral_source_split_7313;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    out_$p371 := $M.74;
    goto corral_source_split_7312;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$p370 := $M.73;
    goto corral_source_split_7311;

  $bb403:
    assume out_$i369 == 1;
    goto corral_source_split_7310;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 1);
    goto corral_source_split_7274;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    out_$i368 := $M.58;
    goto corral_source_split_7273;

  $bb384:
    assume out_$i349 == 1;
    goto corral_source_split_7272;

  $bb383:
    assume !(out_$i348 == 1);
    assume {:verifier.code 0} true;
    out_$i349 := $slt.i32(out_$i347, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb410:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_7329;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} out_vslice_dummy_var_283 := visorchipset_ioctl(out_$p379, out_$i380, out_$i381);
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$i381 := $load.i64($M.76, in_$p15);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$i380 := $load.i32($M.76, in_$p14);
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$p379 := $M.74;
    goto corral_source_split_7325;

  $bb409:
    assume out_$i378 == 1;
    goto corral_source_split_7324;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    out_$i378 := $eq.i32(out_$i377, 2);
    goto corral_source_split_7278;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    out_$i377 := $M.58;
    goto corral_source_split_7277;

  $bb386:
    assume out_$i350 == 1;
    goto corral_source_split_7276;

  $bb385:
    assume !(out_$i349 == 1);
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i347, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} ldv_stop();
    goto corral_source_split_7331;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb387:
    assume {:verifier.code 0} true;
    assume !(out_$i350 == 1);
    goto $bb388;

  $bb392:
    assume {:verifier.code 0} true;
    assume !(out_$i352 == 1);
    goto $bb388;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} ldv_stop();
    goto corral_source_split_7333;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb17;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb17;

  $bb75_dummy:
    call {:si_unique_call 1} out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$i156, out_$i158, out_$i159, out_$p160, out_$p161, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i177, out_$i178, out_$p179, out_$p180, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$p192, out_$p193, out_$i194, out_$i196, out_$i197, out_$p198, out_$p199, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$p235, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$i276, out_$i277, out_$p278, out_$p279, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$p364, out_$i366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p17, in_$p18, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p30, in_$p32, in_$p34, in_$p35, in_$p36, in_$p37, in_$p39, in_$p41, in_$p42, in_$p44, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$i156, out_$i158, out_$i159, out_$p160, out_$p161, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$p174, out_$i175, out_$i177, out_$i178, out_$p179, out_$p180, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$p192, out_$p193, out_$i194, out_$i196, out_$i197, out_$p198, out_$p199, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$p228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$p235, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$i276, out_$i277, out_$p278, out_$p279, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$p297, out_$i298, out_$i299, out_$i300, out_$p301, out_$i302, out_$i303, out_$i304, out_$p305, out_$i306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$i312, out_$p313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$p364, out_$i366, out_$i367, out_$i368, out_$i369, out_$p370, out_$p371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_vslice_dummy_var_265, out_vslice_dummy_var_266, out_vslice_dummy_var_267, out_vslice_dummy_var_268, out_vslice_dummy_var_269, out_vslice_dummy_var_270, out_vslice_dummy_var_271, out_vslice_dummy_var_272, out_vslice_dummy_var_273, out_vslice_dummy_var_274, out_vslice_dummy_var_275, out_vslice_dummy_var_276, out_vslice_dummy_var_277, out_vslice_dummy_var_278, out_vslice_dummy_var_279, out_vslice_dummy_var_280, out_vslice_dummy_var_281, out_vslice_dummy_var_282, out_vslice_dummy_var_283);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$i77: i32, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i64, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$i142: i32, in_$i143: i1, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i1, in_$i170: i1, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$p174: ref, in_$i175: i64, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$p180: ref, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$p193: ref, in_$i194: i64, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$p199: ref, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i32, in_$i217: i1, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$i224: i1, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$p229: ref, in_$i230: i64, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$p235: ref, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i1, in_$i245: i1, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i32, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$i262: i64, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$p273: ref, in_$i274: i64, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$p279: ref, in_$i281: i32, in_$i282: i1, in_$i283: i32, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i1, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i294: i32, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$i298: i32, in_$i299: i32, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i306: i32, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$i310: i32, in_$i311: i32, in_$i312: i1, in_$p313: ref, in_$i314: i32, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i1, in_$i321: i64, in_$i323: i32, in_$i324: i1, in_$i325: i32, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i32, in_$i333: i32, in_$i334: i1, in_$i335: i32, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$i341: i32, in_$i342: i32, in_$i343: i32, in_$i344: i1, in_$i345: i32, in_$i346: i1, in_$i347: i32, in_$i348: i1, in_$i349: i1, in_$i350: i1, in_$i351: i1, in_$i352: i1, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$p364: ref, in_$i366: i32, in_$i367: i32, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$p371: ref, in_$i372: i32, in_$i373: i32, in_$i374: i1, in_$i375: i32, in_$i376: i32, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i380: i32, in_$i381: i64, in_vslice_dummy_var_265: i64, in_vslice_dummy_var_266: i64, in_vslice_dummy_var_267: i64, in_vslice_dummy_var_268: i64, in_vslice_dummy_var_269: i64, in_vslice_dummy_var_270: i64, in_vslice_dummy_var_271: i64, in_vslice_dummy_var_272: i64, in_vslice_dummy_var_273: i64, in_vslice_dummy_var_274: i32, in_vslice_dummy_var_275: i64, in_vslice_dummy_var_276: i64, in_vslice_dummy_var_277: i64, in_vslice_dummy_var_278: i64, in_vslice_dummy_var_279: i32, in_vslice_dummy_var_280: i32, in_vslice_dummy_var_281: i32, in_vslice_dummy_var_282: i32, in_vslice_dummy_var_283: i64) returns (out_$i77: i32, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i64, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$i142: i32, out_$i143: i1, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i1, out_$i170: i1, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$p174: ref, out_$i175: i64, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$p180: ref, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$p193: ref, out_$i194: i64, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$p199: ref, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i32, out_$i217: i1, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$i224: i1, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$p229: ref, out_$i230: i64, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$p235: ref, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i1, out_$i245: i1, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i32, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$i262: i64, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$p273: ref, out_$i274: i64, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$p279: ref, out_$i281: i32, out_$i282: i1, out_$i283: i32, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i1, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i294: i32, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$i298: i32, out_$i299: i32, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i306: i32, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$i310: i32, out_$i311: i32, out_$i312: i1, out_$p313: ref, out_$i314: i32, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i1, out_$i321: i64, out_$i323: i32, out_$i324: i1, out_$i325: i32, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i32, out_$i333: i32, out_$i334: i1, out_$i335: i32, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$i341: i32, out_$i342: i32, out_$i343: i32, out_$i344: i1, out_$i345: i32, out_$i346: i1, out_$i347: i32, out_$i348: i1, out_$i349: i1, out_$i350: i1, out_$i351: i1, out_$i352: i1, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$p364: ref, out_$i366: i32, out_$i367: i32, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$p371: ref, out_$i372: i32, out_$i373: i32, out_$i374: i1, out_$i375: i32, out_$i376: i32, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i380: i32, out_$i381: i64, out_vslice_dummy_var_265: i64, out_vslice_dummy_var_266: i64, out_vslice_dummy_var_267: i64, out_vslice_dummy_var_268: i64, out_vslice_dummy_var_269: i64, out_vslice_dummy_var_270: i64, out_vslice_dummy_var_271: i64, out_vslice_dummy_var_272: i64, out_vslice_dummy_var_273: i64, out_vslice_dummy_var_274: i32, out_vslice_dummy_var_275: i64, out_vslice_dummy_var_276: i64, out_vslice_dummy_var_277: i64, out_vslice_dummy_var_278: i64, out_vslice_dummy_var_279: i32, out_vslice_dummy_var_280: i32, out_vslice_dummy_var_281: i32, out_vslice_dummy_var_282: i32, out_vslice_dummy_var_283: i64);
  modifies $M.81, $M.0, $CurrAddr, $M.82, $M.115, $M.18, $M.83, $M.84, $M.5, $M.61, $M.54, $M.55, $M.7, $M.9, $M.11, $M.48, $M.62, $M.63, $M.13, $M.14, $M.19, $M.20, $M.6, $M.8, $M.10, $M.12, $M.64, $M.39, $M.37, $M.65, $M.22, assertsPassed, $M.23, $M.24, $M.25, $M.26, $M.66, $M.40, $M.1, $M.4, $M.42, $M.75, $M.49, $M.34, $M.46, $M.27, $M.28, $M.50, $M.52, $M.53, $M.67, $M.68, $M.69, $M.70, $M.57, $M.38, $M.35, $M.36, $M.56, $M.58, $M.73, $M.74, $M.110, $M.111, $M.112, $M.113, $M.86, $M.87, $M.88, $M.43, $M.92, $M.91, $M.93, $M.94, $M.118, $M.95, $M.119, $M.97, $M.120, $M.85, $M.107, $M.108, $M.77, $M.89, $M.101, $M.102, $M.123, $M.79, $M.80, $M.90, $M.124, $M.126, $M.98, $M.99, $M.127, $M.103, $M.104, $M.100, $M.128, $M.129, $M.109, $M.130, $M.105, $M.106, $M.96, $M.78, $M.122, $M.131, $M.76, $M.121, $M.132, $M.133;


