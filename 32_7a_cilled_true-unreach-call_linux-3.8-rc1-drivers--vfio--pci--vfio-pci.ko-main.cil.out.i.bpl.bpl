var $M.0: [ref]i64;

var $M.1: [ref]i8;

var $M.2: [ref]i64;

var $M.3: [ref]i64;

var $M.4: [ref]i8;

var $M.5: [ref]i16;

var $M.6: i32;

var $M.7: ref;

var $M.8: [ref]i32;

var $M.9: [ref]i8;

var $M.10: [ref]i64;

var $M.11: [ref]i8;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]i24;

var $M.17: [ref]i8;

var $M.18: i8;

var $M.19: [ref]i32;

var $M.20: [ref]i8;

var $M.21: [ref]i8;

var $M.22: [ref]i8;

var $M.23: [ref]i8;

var $M.24: [ref]i16;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: [ref]i32;

var $M.28: [ref]i32;

var $M.29: [ref]i8;

var $M.30: [ref]i16;

var $M.31: [ref]i32;

var $M.32: [ref]i8;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: ref;

var $M.38: ref;

var $M.39: i32;

var $M.40: i32;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: i64;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.49: i32;

var $M.50: i64;

var $M.51: ref;

var $M.52: ref;

var $M.53: i64;

var $M.54: ref;

var $M.55: ref;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 349649);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 1028);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 2056);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 3084);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 4112);

const vfio_pci_driver_group0: ref;

axiom vfio_pci_driver_group0 == $sub.ref(0, 5144);

const ldvarg0: ref;

axiom ldvarg0 == $sub.ref(0, 6176);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 7204);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 8232);

const ldvarg14: ref;

axiom ldvarg14 == $sub.ref(0, 9264);

const ldvarg15: ref;

axiom ldvarg15 == $sub.ref(0, 10296);

const ldvarg11: ref;

axiom ldvarg11 == $sub.ref(0, 11328);

const ldvarg13: ref;

axiom ldvarg13 == $sub.ref(0, 12360);

const ldvarg12: ref;

axiom ldvarg12 == $sub.ref(0, 13392);

const ldvarg10: ref;

axiom ldvarg10 == $sub.ref(0, 14424);

const ldvarg9: ref;

axiom ldvarg9 == $sub.ref(0, 15456);

const ldvarg6: ref;

axiom ldvarg6 == $sub.ref(0, 16488);

const ldvarg8: ref;

axiom ldvarg8 == $sub.ref(0, 17516);

const ldvarg7: ref;

axiom ldvarg7 == $sub.ref(0, 18548);

const ldvarg3: ref;

axiom ldvarg3 == $sub.ref(0, 19580);

const ldvarg5: ref;

axiom ldvarg5 == $sub.ref(0, 20612);

const ldvarg4: ref;

axiom ldvarg4 == $sub.ref(0, 21644);

const ldvarg2: ref;

axiom ldvarg2 == $sub.ref(0, 22676);

const ldvarg1: ref;

axiom ldvarg1 == $sub.ref(0, 23708);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 24736);

const {:count 28} pci_ext_cap_length: ref;

axiom pci_ext_cap_length == $sub.ref(0, 25816);

const {:count 20} pci_cap_length: ref;

axiom pci_cap_length == $sub.ref(0, 26860);

const {:count 28} ecap_perms: ref;

axiom ecap_perms == $sub.ref(0, 28780);

const {:count 20} cap_perms: ref;

axiom cap_perms == $sub.ref(0, 30444);

const nointxmask: ref;

axiom nointxmask == $sub.ref(0, 31469);

const vfio_pci_driver: ref;

axiom vfio_pci_driver == $sub.ref(0, 32805);

const vfio_pci_ops: ref;

axiom vfio_pci_ops == $sub.ref(0, 33885);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 34913);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 35941);

const ldv_mutex_igate_of_vfio_pci_device: ref;

axiom ldv_mutex_igate_of_vfio_pci_device == $sub.ref(0, 36969);

const vfio_irqfd_cleanup_wq: ref;

axiom vfio_irqfd_cleanup_wq == $sub.ref(0, 38001);

const {:count 9} .str.4: ref;

axiom .str.4 == $sub.ref(0, 39034);

const boot_cpu_data: ref;

axiom boot_cpu_data == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 10} .str.15: ref;

axiom .str.15 == $sub.ref(0, 40068);

const {:count 9} .str.16: ref;

axiom .str.16 == $sub.ref(0, 41101);

const {:count 11} .str.17: ref;

axiom .str.17 == $sub.ref(0, 42136);

const {:count 14} .str.14: ref;

axiom .str.14 == $sub.ref(0, 43174);

const {:count 20} .str.12: ref;

axiom .str.12 == $sub.ref(0, 44218);

const {:count 18} .str.13: ref;

axiom .str.13 == $sub.ref(0, 45260);

const {:count 124} .str.18: ref;

axiom .str.18 == $sub.ref(0, 46408);

const {:count 27} .str.19: ref;

axiom .str.19 == $sub.ref(0, 47459);

const {:count 5} .str.1: ref;

axiom .str.1 == $sub.ref(0, 48488);

const {:count 236} .str.32: ref;

axiom .str.32 == $sub.ref(0, 49748);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 37} .str.7: ref;

axiom .str.7 == $sub.ref(0, 50809);

const {:count 17} .str.8: ref;

axiom .str.8 == $sub.ref(0, 51850);

const {:count 9} .str.6: ref;

axiom .str.6 == $sub.ref(0, 52883);

const {:count 16} .str.9: ref;

axiom .str.9 == $sub.ref(0, 53923);

const {:count 229} .str.10: ref;

axiom .str.10 == $sub.ref(0, 55176);

const {:count 35} .str.11: ref;

axiom .str.11 == $sub.ref(0, 56235);

const {:count 31} .str.27: ref;

axiom .str.27 == $sub.ref(0, 57290);

const {:count 15} .str.28: ref;

axiom .str.28 == $sub.ref(0, 58329);

const {:count 64} .str.29: ref;

axiom .str.29 == $sub.ref(0, 59417);

const {:count 47} .str.30: ref;

axiom .str.30 == $sub.ref(0, 60488);

const {:count 17} .str.31: ref;

axiom .str.31 == $sub.ref(0, 61529);

const {:count 25} .str.22: ref;

axiom .str.22 == $sub.ref(0, 62578);

const {:count 14} .str.23: ref;

axiom .str.23 == $sub.ref(0, 63616);

const {:count 62} .str.24: ref;

axiom .str.24 == $sub.ref(0, 64702);

const {:count 46} .str.25: ref;

axiom .str.25 == $sub.ref(0, 65772);

const {:count 13} .str.26: ref;

axiom .str.26 == $sub.ref(0, 66809);

const {:count 13} .str.2: ref;

axiom .str.2 == $sub.ref(0, 67846);

const {:count 25} .str.3: ref;

axiom .str.3 == $sub.ref(0, 68895);

const .str: ref;

axiom .str == $sub.ref(0, 69938);

const {:count 41} .str.20: ref;

axiom .str.20 == $sub.ref(0, 71003);

const {:count 17} .str.21: ref;

axiom .str.21 == $sub.ref(0, 72044);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 73076);

const {:count 3} .str.1.49: ref;

axiom .str.1.49 == $sub.ref(0, 74103);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 75141);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 76169);

const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 77201);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 78233);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const vfio_pci_open: ref;

axiom vfio_pci_open == $sub.ref(0, 79265);

procedure vfio_pci_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.1, $CurrAddr, $M.20, $M.26, $M.25;



implementation vfio_pci_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $i2 := try_module_get(__this_module);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 408)), $mul.ref(400, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $i9 := atomic_add_return(1, $p8);
    call {:si_unique_call 3} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i11 := vfio_pci_enable($p1);
    call {:si_unique_call 5} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} module_put(__this_module);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb6;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const vfio_pci_release: ref;

axiom vfio_pci_release == $sub.ref(0, 80297);

procedure vfio_pci_release($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.3;



implementation vfio_pci_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 408)), $mul.ref(400, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i3 := atomic_dec_and_test($p2);
    call {:si_unique_call 8} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} module_put(__this_module);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} vfio_pci_disable($p1);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_pci_read: ref;

axiom vfio_pci_read == $sub.ref(0, 81329);

procedure vfio_pci_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.10, $M.0, $M.2, $M.1, $M.9, $CurrAddr, $M.27, $M.31, $M.28;



implementation vfio_pci_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i12: i1;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $i16: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} {:cexpr "vfio_pci_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i64($i4, 40);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    call {:si_unique_call 12} {:cexpr "index"} boogie_si_record_i32($i6);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i6, 7);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 7);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i6, 6);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i6);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i16, 56)), $mul.ref(24, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p19);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 256);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i6);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i24, 56)), $mul.ref(24, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 512);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i31 := vfio_pci_mem_readwrite($p7, $p1, $i2, $p3, 0);
    call {:si_unique_call 20} {:cexpr "tmp___2"} boogie_si_record_i64($i31);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i11 := $i31;
    goto $bb3;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i23 := vfio_pci_io_readwrite($p7, $p1, $i2, $p3, 0);
    call {:si_unique_call 18} {:cexpr "tmp___1"} boogie_si_record_i64($i23);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i11 := $i23;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i15 := vfio_pci_mem_readwrite($p7, $p1, $i2, $p3, 0);
    call {:si_unique_call 16} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i13 := vfio_pci_config_readwrite($p7, $p1, $i2, $p3, 0);
    call {:si_unique_call 14} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;
}



const vfio_pci_write: ref;

axiom vfio_pci_write == $sub.ref(0, 82361);

procedure vfio_pci_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.10, $M.0, $M.1, $M.2, $M.9, $CurrAddr, $M.27, $M.31, $M.28;



implementation vfio_pci_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i12: i1;
  var $i13: i64;
  var $i14: i1;
  var $i15: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} {:cexpr "vfio_pci_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i64($i4, 40);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    call {:si_unique_call 22} {:cexpr "index"} boogie_si_record_i32($i6);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i6, 7);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 7);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i6, 6);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i6);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i15, 56)), $mul.ref(24, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p18);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 256);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i6);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i23, 56)), $mul.ref(24, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.1, $p26);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 512);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i30 := vfio_pci_mem_readwrite($p7, $p1, $i2, $p3, 1);
    call {:si_unique_call 28} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i11 := $i30;
    goto $bb3;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i22 := vfio_pci_io_readwrite($p7, $p1, $i2, $p3, 1);
    call {:si_unique_call 26} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i13 := vfio_pci_config_readwrite($p7, $p1, $i2, $p3, 1);
    call {:si_unique_call 24} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;
}



const vfio_pci_ioctl: ref;

axiom vfio_pci_ioctl == $sub.ref(0, 83393);

procedure vfio_pci_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.6, assertsPassed, $M.3;



implementation vfio_pci_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i64;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i64;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $i158: i64;
  var $i159: i1;
  var $p160: ref;
  var $i161: i32;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $p180: ref;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i179: i64;
  var $p184: ref;
  var $i185: i32;
  var $i186: i64;
  var $i187: i64;
  var $p188: ref;
  var $i189: i32;
  var $i190: i64;
  var $i191: i64;
  var $i192: i1;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $p196: ref;
  var $i197: i32;
  var $i198: i1;
  var $i199: i64;
  var $p200: ref;
  var $p201: ref;
  var $i202: i32;
  var $i203: i64;
  var $i204: i64;
  var $p205: ref;
  var $i206: i64;
  var $i207: i1;
  var $i208: i64;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i32;
  var $p213: ref;
  var $i214: i32;
  var $p215: ref;
  var $i216: i32;
  var $p217: ref;
  var $i218: i32;
  var $i219: i32;
  var $p220: ref;
  var $i221: i64;
  var $i222: i1;
  var $p223: ref;
  var $i224: i8;
  var $i225: i1;
  var $p226: ref;
  var $p227: ref;
  var $i228: i32;
  var $i229: i64;
  var $i230: i64;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p7 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    call {:si_unique_call 34} {:cexpr "vfio_pci_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 35} {:cexpr "vfio_pci_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 15211);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i1, 15212);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i1, 15213);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i122 == 1);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i1, 15214);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i155 == 1);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i1, 15215);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 25);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb91:
    assume $i222 == 1;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p8, $mul.ref(0, 408)), $mul.ref(382, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i224 := $load.i8($M.1, $p223);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i225 := $trunc.i8.i1($i224);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    $i230 := $sub.i64(0, 22);
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i14 := $i230;
    goto $bb5;

  $bb93:
    assume $i225 == 1;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p8, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.1, $p226);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i228 := pci_reset_function($p227);
    call {:si_unique_call 67} {:cexpr "tmp___15"} boogie_si_record_i32($i228);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i229 := $sext.i32.i64($i228);
    call {:si_unique_call 68} {:cexpr "tmp___16"} boogie_si_record_i64($i229);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i230 := $i229;
    goto $bb95;

  $bb60:
    assume $i155 == 1;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p7);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p157 := $i2p.i64.ref($i2);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i158 := copy_from_user($p156, $p157, 20);
    call {:si_unique_call 53} {:cexpr "tmp___10"} boogie_si_record_i64($i158);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i159 := $ne.i64($i158, 0);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.1, $p160);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i162 := $zext.i32.i64($i161);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i163 := $ult.i64($i162, 20);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb65, $bb67;

  $bb67:
    assume !($i163 == 1);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.1, $p164);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i166 := $ugt.i32($i165, 2);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i166 == 1);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.1, $p167);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, $sub.i32(0, 64));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.1, $p171);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i173 := $and.i32($i172, 1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    $p209 := $0.ref;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p8, $mul.ref(0, 408)), $mul.ref(152, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} ldv_mutex_lock_6($p210);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.1, $p211);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.1, $p213);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.1, $p215);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.1, $p217);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i219 := vfio_pci_set_irqs_ioctl($p8, $i212, $i214, $i216, $i218, $p209);
    call {:si_unique_call 63} {:cexpr "ret"} boogie_si_record_i32($i219);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p8, $mul.ref(0, 408)), $mul.ref(152, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} ldv_mutex_unlock_7($p220);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} kfree($p209);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i221 := $sext.i32.i64($i219);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i14 := $i221;
    goto $bb5;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i174 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.1, $p175);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 2);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i178 == 1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.1, $p180);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i182 := $and.i32($i181, 4);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i183 == 1);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 22);
    goto $bb5;

  $bb78:
    assume $i183 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i179 := 4;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.1, $p184);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i186 := $zext.i32.i64($i185);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i187 := $sub.i64($i186, 20);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.1, $p188);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i190 := $zext.i32.i64($i189);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i191 := $mul.i64($i190, $i179);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i192 := $ult.i64($i187, $i191);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i192 == 1);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.1, $p193);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i195 := vfio_pci_get_irq_count($p8, $i194);
    call {:si_unique_call 55} {:cexpr "tmp___11"} boogie_si_record_i32($i195);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.1, $p196);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $i198 := $ugt.i32($i197, $i195);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i199 := $add.i64($i2, 20);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p200 := $i2p.i64.ref($i199);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p7, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.1, $p201);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i203 := $zext.i32.i64($i202);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i204 := $mul.i64($i203, $i179);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p205 := memdup_user($p200, $i204);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i206 := IS_ERR($p205);
    call {:si_unique_call 58} {:cexpr "tmp___14"} boogie_si_record_i64($i206);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i207 := $ne.i64($i206, 0);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p209 := $p205;
    goto $bb90;

  $bb87:
    assume $i207 == 1;
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i208 := PTR_ERR($p205);
    call {:si_unique_call 60} {:cexpr "tmp___13"} boogie_si_record_i64($i208);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i14 := $i208;
    goto $bb5;

  $bb83:
    assume $i198 == 1;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 22);
    goto $bb5;

  $bb81:
    assume $i192 == 1;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 22);
    goto $bb5;

  $bb75:
    assume $i178 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i179 := 1;
    goto $bb77;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 22);
    goto $bb5;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb66;

  $bb62:
    assume $i159 == 1;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 14);
    goto $bb5;

  $bb46:
    assume $i122 == 1;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p6);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p124 := $i2p.i64.ref($i2);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i125 := copy_from_user($p123, $p124, 16);
    call {:si_unique_call 47} {:cexpr "tmp___6"} boogie_si_record_i64($i125);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.1, $p127);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i129 := $zext.i32.i64($i128);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i130 := $ult.i64($i129, 16);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb51, $bb53;

  $bb53:
    assume !($i130 == 1);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.1, $p131);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i133 := $ugt.i32($i132, 2);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p134, 1);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.1, $p135);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i137 := vfio_pci_get_irq_count($p8, $i136);
    call {:si_unique_call 49} {:cexpr "tmp___7"} boogie_si_record_i32($i137);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p138, $i137);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.1, $p139);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 0);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i141 == 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.1, $p146);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i148 := $or.i32($i147, 8);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p149, $i148);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p150 := $i2p.i64.ref($i2);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p6);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i64.i32(16);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i153 := copy_to_user($p150, $p151, $i152);
    call {:si_unique_call 51} {:cexpr "tmp___8"} boogie_si_record_i32($i153);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i154 := $sext.i32.i64($i153);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i14 := $i154;
    goto $bb5;

  $bb57:
    assume $i141 == 1;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.1, $p142);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i144 := $or.i32($i143, 6);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p145, $i144);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 22);
    goto $bb5;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb52;

  $bb48:
    assume $i126 == 1;
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 14);
    goto $bb5;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p4);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p38 := $i2p.i64.ref($i2);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i39 := copy_from_user($p37, $p38, 32);
    call {:si_unique_call 41} {:cexpr "tmp___3"} boogie_si_record_i64($i39);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i44 := $ult.i64($i43, 32);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i46, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 22);
    goto $bb5;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i53 := $shl.i64($i52, 40);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p54, $i53);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(1296, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p58, $i57);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p59, 3);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i2);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p4);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i64.i32(32);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i120 := copy_to_user($p117, $p118, $i119);
    call {:si_unique_call 43} {:cexpr "tmp___4"} boogie_si_record_i32($i120);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i121 := $sext.i32.i64($i120);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i14 := $i121;
    goto $bb5;

  $bb22:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i46, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb26;

  $bb27:
    assume $i49 == 1;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i63 := $shl.i64($i62, 40);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p64, $i63);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p65, 0);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.1, $p66);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i67);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i68, 56)), $mul.ref(0, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.1, $p71);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i73 == 1);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i75);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i76, 56)), $mul.ref(8, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.1, $p79);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64($i82);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i83, 56)), $mul.ref(0, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.1, $p86);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i80, $i87);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i88 == 1);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p106, 0);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.1, $p107);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i109 := $eq.i64($i108, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $p110 := pci_map_rom($p36, $p5);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i111, 0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb39, $bb41;

  $bb41:
    assume !($i112 == 1);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i113 := $load.i64($M.2, $p5);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i114 := $eq.i64($i113, 0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} pci_unmap_rom($p36, $p110);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p116, 1);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i114 == 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p115, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb40;

  $bb36:
    assume $i109 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i91 := $zext.i32.i64($i90);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i91, 56)), $mul.ref(8, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.1, $p94);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i98 := $zext.i32.i64($i97);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p36, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i98, 56)), $mul.ref(0, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.1, $p101);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i103 := $sub.i64($i95, $i102);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i104 := $add.i64($i103, 1);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p105, $i104);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb31;

  $bb18:
    assume $i44 == 1;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 22);
    goto $bb5;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 14);
    goto $bb5;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i2);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i12 := copy_from_user($p10, $p11, 16);
    call {:si_unique_call 37} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i18 := $ult.i64($i17, 16);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, 2);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 408)), $mul.ref(382, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, 8);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, 3);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i2);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32(16);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i32 := copy_to_user($p29, $p30, $i31);
    call {:si_unique_call 39} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i14 := $i33;
    goto $bb5;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p26, $i25);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 22);
    goto $bb5;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64(0, 14);
    goto $bb5;
}



const vfio_pci_mmap: ref;

axiom vfio_pci_mmap == $sub.ref(0, 84425);

procedure vfio_pci_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $CurrAddr;



implementation vfio_pci_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $i81: i1;
  var $i82: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i64;
  var $i86: i1;
  var $i87: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i64;
  var $p99: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $p131: ref;
  var $i132: i64;
  var $p134: ref;
  var $i135: i64;
  var $i136: i32;
  var $i15: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i7, 28);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 70} {:cexpr "index"} boogie_si_record_i32($i9);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.1, $p10);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i14 := $ult.i64($i11, $i13);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.1, $p16);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 8);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i9, 5);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i9);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i21, 56)), $mul.ref(24, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 512);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i9);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i28, 56)), $mul.ref(0, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i33 == 1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i9);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i34, 56)), $mul.ref(8, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i9);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i39, 56)), $mul.ref(0, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.1, $p42);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i38, $i43);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.1, $p58);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.1, $p60);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64($i59, $i61);
    call {:si_unique_call 72} {:cexpr "req_len"} boogie_si_record_i64($i62);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.1, $p63);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i65 := $and.i64($i64, 268435455);
    call {:si_unique_call 73} {:cexpr "pgoff"} boogie_si_record_i64($i65);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i66 := $shl.i64($i65, 12);
    call {:si_unique_call 74} {:cexpr "req_start"} boogie_si_record_i64($i66);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i67 := $ule.i64($i57, 4095);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i67 == 1);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i66, $i62);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i69 := $ugt.i64($i68, $i57);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 408)), $mul.ref(345, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.1, $p70);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, $i9);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i9);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i87, 8));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.1, $p89);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p101, $p0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.1, $p102);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i104 := $or.i64($i103, 67387392);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p105, $i104);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.1, boot_cpu_data);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i108 := $ugt.i32($i107, 3);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i108 == 1);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p117);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p118);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 79} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p119, $p120, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i121 := $zext.i32.i64($i9);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i121, 56)), $mul.ref(0, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.1, $p124);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i126 := $lshr.i64($i125, 12);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i127 := $add.i64($i126, $i65);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p128, $i127);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i130 := $load.i64($M.1, $p129);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.1, $p131);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.1, $p134);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i136 := remap_pfn_range($p1, $i130, $i132, $i62, $i135);
    call {:si_unique_call 81} {:cexpr "tmp"} boogie_si_record_i32($i136);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i15 := $i136;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb41:
    assume $i108 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.1, $p110);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i112 := $or.i64($i111, 16);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p113, $i112);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p2);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 78} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p115, $p116, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i92 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i93 := $shl.i32(1, $i9);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i94 := pci_request_selected_regions($p5, $i93, .str.4);
    call {:si_unique_call 76} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p96 := pci_iomap($p5, $i9, 0);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i9);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i97, 8));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p99, $p96);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i95 == 1;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i15 := $i94;
    goto $bb3;

  $bb26:
    assume $i73 == 1;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 408)), $mul.ref(348, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 408)), $mul.ref(346, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.1, $p76);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i75, $i78);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i81 := $ugt.i64($i80, $i66);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i81 == 1;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i66, $i62);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 408)), $mul.ref(348, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.1, $p83);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i84);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i86 := $ugt.i64($i82, $i85);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb30;

  $bb31:
    assume $i86 == 1;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i9);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i45, 56)), $mul.ref(8, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.1, $p48);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i9);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i50, 56)), $mul.ref(0, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.1, $p53);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i55 := $sub.i64($i49, $i54);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 1);
    call {:si_unique_call 71} {:cexpr "phys_len"} boogie_si_record_i64($i56);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb15;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;
}



const pci_request_selected_regions: ref;

axiom pci_request_selected_regions == $sub.ref(0, 85457);

procedure pci_request_selected_regions($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_selected_regions($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 82} {:cexpr "pci_request_selected_regions:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 83} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 84} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_iomap: ref;

axiom pci_iomap == $sub.ref(0, 86489);

procedure pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} {:cexpr "pci_iomap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 86} {:cexpr "pci_iomap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p3 := external_alloc();
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 87521);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const remap_pfn_range: ref;

axiom remap_pfn_range == $sub.ref(0, 88553);

procedure remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $CurrAddr;



implementation remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p6, $i4);
    call {:si_unique_call 89} {:cexpr "remap_pfn_range:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 90} {:cexpr "remap_pfn_range:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 91} {:cexpr "remap_pfn_range:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 93} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 89585);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 94} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 95} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 90617);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i22: i64;
  var $i13: i64;
  var vslice_dummy_var_50: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 98} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 99} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} might_fault();
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 102} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 106} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 110} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32(1, 0);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_50 := ldv__builtin_expect($i30, 0);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} warn_slowpath_fmt.ref.i32.ref(.str.18, 66, .str.19);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 108} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 104} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 91649);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} might_fault();
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 116} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_map_rom: ref;

axiom pci_map_rom == $sub.ref(0, 92681);

procedure pci_map_rom($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_map_rom($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p2 := external_alloc();
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_unmap_rom: ref;

axiom pci_unmap_rom == $sub.ref(0, 93713);

procedure pci_unmap_rom($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_unmap_rom($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_get_irq_count: ref;

axiom vfio_pci_get_irq_count == $sub.ref(0, 94745);

procedure vfio_pci_get_irq_count($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation vfio_pci_get_irq_count($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i12: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 121} {:cexpr "vfio_pci_get_irq_count:arg:irq_type"} boogie_si_record_i32($i1);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 0);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 1);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i1, 2);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i32 := pci_find_capability($p31, 17);
    call {:si_unique_call 128} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    call {:si_unique_call 129} {:cexpr "pos___0"} boogie_si_record_i8($i33);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i33);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 2);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} vslice_dummy_var_53 := pci_read_config_word($p37, $i39, $p4);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.5, $p4);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 2047);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i12 := $i44;
    goto $bb5;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i16 := pci_find_capability($p15, 5);
    call {:si_unique_call 124} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    call {:si_unique_call 125} {:cexpr "pos"} boogie_si_record_i8($i17);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i17);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 2);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_52 := pci_read_config_word($p21, $i23, $p3);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.5, $p3);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 14);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32(1, $i27);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i12 := $i28;
    goto $bb5;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_51 := pci_read_config_byte($p7, 61, $p2);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.4, $p2);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb5;
}



const memdup_user: ref;

axiom memdup_user == $sub.ref(0, 95777);

procedure memdup_user($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation memdup_user($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} {:cexpr "memdup_user:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $p2 := external_alloc();
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 96809);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 97841);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_6: ref;

axiom ldv_mutex_lock_6 == $sub.ref(0, 98873);

procedure ldv_mutex_lock_6($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} ldv_mutex_lock_igate_of_vfio_pci_device($p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} mutex_lock($p0);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const vfio_pci_set_irqs_ioctl: ref;

axiom vfio_pci_set_irqs_ioctl == $sub.ref(0, 99905);

procedure vfio_pci_set_irqs_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.3;



implementation vfio_pci_set_irqs_ioctl($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $p17: ref;
  var $i25: i64;
  var $i26: i1;
  var $i28: i32;
  var $i27: i32;

  $bb0:
    call {:si_unique_call 137} {:cexpr "vfio_pci_set_irqs_ioctl:arg:flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 138} {:cexpr "vfio_pci_set_irqs_ioctl:arg:index"} boogie_si_record_i32($i2);
    call {:si_unique_call 139} {:cexpr "vfio_pci_set_irqs_ioctl:arg:start"} boogie_si_record_i32($i3);
    call {:si_unique_call 140} {:cexpr "vfio_pci_set_irqs_ioctl:arg:count"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p17);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    call {:si_unique_call 141} $i28 := devirtbounce($p17, $p0, $i2, $i3, $i4, $i1, $p5);
    call {:si_unique_call 142} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb43:
    assume $i26 == 1;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 25);
    goto $bb45;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i1, 56);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p17 := $p24;
    goto $bb26;

  $bb32:
    assume $i21 == 1;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p24 := vfio_pci_set_msi_trigger;
    goto $bb40;

  $bb30:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i18, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb34;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p24 := $0.ref;
    goto $bb40;

  $bb28:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i18, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb34;

  $bb38:
    assume $i23 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i1, 56);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb26;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p16 := vfio_pci_set_intx_trigger;
    goto $bb24;

  $bb15:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb19;

  $bb20:
    assume $i14 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p16 := vfio_pci_set_intx_unmask;
    goto $bb24;

  $bb13:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i10, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb19;

  $bb22:
    assume $i15 == 1;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p16 := vfio_pci_set_intx_mask;
    goto $bb24;
}



const ldv_mutex_unlock_7: ref;

axiom ldv_mutex_unlock_7 == $sub.ref(0, 100937);

procedure ldv_mutex_unlock_7($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} ldv_mutex_unlock_igate_of_vfio_pci_device($p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} mutex_unlock($p0);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 101969);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} free_($p0);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    return;
}



const pci_reset_function: ref;

axiom pci_reset_function == $sub.ref(0, 103001);

procedure pci_reset_function($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_reset_function($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 146} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 147} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 104033);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 148} $free($p0);
    return;
}



const ldv_mutex_unlock_igate_of_vfio_pci_device: ref;

axiom ldv_mutex_unlock_igate_of_vfio_pci_device == $sub.ref(0, 105065);

procedure ldv_mutex_unlock_igate_of_vfio_pci_device($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_unlock_igate_of_vfio_pci_device($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} ldv_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 150} {:cexpr "ldv_mutex_igate_of_vfio_pci_device"} boogie_si_record_i32(1);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 106097);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 107129);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} __VERIFIER_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const vfio_pci_set_intx_mask: ref;

axiom vfio_pci_set_intx_mask == $sub.ref(0, 108161);

procedure vfio_pci_set_intx_mask($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_pci_set_intx_mask($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} {:cexpr "vfio_pci_set_intx_mask:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 153} {:cexpr "vfio_pci_set_intx_mask:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 154} {:cexpr "vfio_pci_set_intx_mask:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 155} {:cexpr "vfio_pci_set_intx_mask:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i3, 1);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i4, 1);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i4, 2);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i4, 4);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i20 == 1;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 25);
    goto $bb8;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p5);
    call {:si_unique_call 157} {:cexpr "mask"} boogie_si_record_i8($i16);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} vfio_pci_intx_mask($p0);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} vfio_pci_intx_mask($p0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const vfio_pci_set_intx_unmask: ref;

axiom vfio_pci_set_intx_unmask == $sub.ref(0, 109193);

procedure vfio_pci_set_intx_unmask($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.3;



implementation vfio_pci_set_intx_unmask($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "vfio_pci_set_intx_unmask:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 160} {:cexpr "vfio_pci_set_intx_unmask:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 161} {:cexpr "vfio_pci_set_intx_unmask:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 162} {:cexpr "vfio_pci_set_intx_unmask:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i3, 1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i4, 1);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i4, 2);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i4, 4);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i20 == 1;
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p5);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    call {:si_unique_call 166} {:cexpr "fd"} boogie_si_record_i32($i22);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i23 := $sge.i32($i22, 0);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} virqfd_disable($p0, $p30);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i23 == 1;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i27 := virqfd_enable($p0, vfio_pci_intx_unmask_handler, vfio_send_intx_eventfd, $0.ref, $p26, $i22);
    call {:si_unique_call 168} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i11 := $i27;
    goto $bb8;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p5);
    call {:si_unique_call 164} {:cexpr "unmask"} boogie_si_record_i8($i16);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} vfio_pci_intx_unmask($p0);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vfio_pci_intx_unmask($p0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const vfio_pci_set_intx_trigger: ref;

axiom vfio_pci_set_intx_trigger == $sub.ref(0, 110225);

procedure vfio_pci_set_intx_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vfio_pci_set_intx_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} {:cexpr "vfio_pci_set_intx_trigger:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 171} {:cexpr "vfio_pci_set_intx_trigger:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 172} {:cexpr "vfio_pci_set_intx_trigger:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 173} {:cexpr "vfio_pci_set_intx_trigger:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i2, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i3, 1);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i4, 4);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i4, 1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i43 == 1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i4, 2);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb43:
    assume $i45 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p5);
    call {:si_unique_call 184} {:cexpr "trigger"} boogie_si_record_i8($i46);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i48 == 1;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} vfio_send_intx_eventfd($p0, $0.ref);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb40:
    assume $i43 == 1;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vfio_send_intx_eventfd($p0, $0.ref);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i41 == 1;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb8;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p5);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    call {:si_unique_call 175} {:cexpr "fd"} boogie_si_record_i32($i30);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i35 := vfio_intx_enable($p0);
    call {:si_unique_call 179} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i37 := vfio_intx_set_signal($p0, $i30);
    call {:si_unique_call 181} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i12 := $i37;
    goto $bb8;

  $bb33:
    assume $i38 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} vfio_intx_disable($p0);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i36 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i12 := $i35;
    goto $bb8;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i34 := vfio_intx_set_signal($p0, $i30);
    call {:si_unique_call 177} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i12 := $i34;
    goto $bb8;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb8;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb14;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i18 == 1);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i4, 1);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} vfio_intx_disable($p0);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;
}



const vfio_pci_set_msi_trigger: ref;

axiom vfio_pci_set_msi_trigger == $sub.ref(0, 111257);

procedure vfio_pci_set_msi_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vfio_pci_set_msi_trigger($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i64;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p83: ref;
  var $p84: ref;
  var $i86: i32;
  var $i87: i1;
  var $i53: i32;
  var $i15: i32;
  var vslice_dummy_var_54: i64;
  var vslice_dummy_var_55: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} {:cexpr "vfio_pci_set_msi_trigger:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 187} {:cexpr "vfio_pci_set_msi_trigger:arg:start"} boogie_si_record_i32($i2);
    call {:si_unique_call 188} {:cexpr "vfio_pci_set_msi_trigger:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 189} {:cexpr "vfio_pci_set_msi_trigger:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 2);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 190} {:cexpr "msix"} boogie_si_record_i8($i7);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $i1);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, $i1);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i4, 4);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, $i1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb35;

  $bb35:
    assume !($i46 == 1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i2, $i3);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(336, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i47, $i49);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    call {:si_unique_call 199} {:cexpr "vfio_pci_set_msi_trigger:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i2, $i3);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i52 := $ult.i32($i2, $i51);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb39:
    assume $i52 == 1;
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i53 := $i2;
    goto $bb42;

  $bb42:
    call $p54, $p55, $i56, $p58, $p59, $i60, $i61, $i62, $i63, $p64, $p65, $i66, $p68, $p69, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $i78, $p79, $p80, $i81, $p83, $p84, $i86, $i87, $i53, vslice_dummy_var_54, vslice_dummy_var_55 := vfio_pci_set_msi_trigger_loop_$bb42($p0, $i2, $i4, $p5, $i51, $p54, $p55, $i56, $p58, $p59, $i60, $i61, $i62, $i63, $p64, $p65, $i66, $p68, $p69, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $i78, $p79, $p80, $i81, $p83, $p84, $i86, $i87, $i53, vslice_dummy_var_54, vslice_dummy_var_55);
    goto $bb42_last;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i53);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p55, $mul.ref($i56, 40)), $mul.ref(0, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i4, 1);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i63 == 1);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i4, 2);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i53, 1);
    call {:si_unique_call 200} {:cexpr "i"} boogie_si_record_i32($i86);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i87 := $ult.i32($i86, $i51);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i87 == 1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb57:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i53 := $i86;
    goto $bb57_dummy;

  $bb51:
    assume $i72 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i53, $i2);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p5, $mul.ref($i74, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.1, $p75);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i78 == 1;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.1, $p79);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i53);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p80, $mul.ref($i81, 40)), $mul.ref(0, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.1, $p83);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} vslice_dummy_var_55 := eventfd_signal($p84, 1);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb48:
    assume $i63 == 1;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i53);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref($i66, 40)), $mul.ref(0, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} vslice_dummy_var_54 := eventfd_signal($p69, 1);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i61 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb34;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p5);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, $i1);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i2, $i3);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i7);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i38 := vfio_msi_enable($p0, $i36, $i37);
    call {:si_unique_call 195} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i7);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $i41 := vfio_msi_set_block($p0, $i2, $i3, $p30, $i40);
    call {:si_unique_call 197} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i15 := $i41;
    goto $bb8;

  $bb29:
    assume $i42 == 1;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i7);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vfio_msi_disable($p0, $i43);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i15 := $i38;
    goto $bb8;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i7);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i35 := vfio_msi_set_block($p0, $i2, $i3, $p30, $i34);
    call {:si_unique_call 193} {:cexpr "tmp"} boogie_si_record_i32($i35);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i15 := $i35;
    goto $bb8;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 2);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb12;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb14;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i4, 1);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i7);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vfio_msi_disable($p0, $i14);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb57_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1073;
}



const vfio_msi_disable: ref;

axiom vfio_msi_disable == $sub.ref(0, 112289);

procedure vfio_msi_disable($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_msi_disable($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i12: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 203} {:cexpr "vfio_msi_disable:arg:msix"} boogie_si_record_i1($i1);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(336, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_56 := vfio_msi_set_block($p0, 0, $i6, $0.ref, $i7);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(336, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i2);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} pci_disable_msi($p4);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p32, 3);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(336, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p33, 0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} kfree($p36);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} pci_disable_msix($p28);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(320, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} kfree($p31);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $p17, $p18, $p19, $i20, $p22, $i23, $i24, $i25, $i12 := vfio_msi_disable_loop_$bb4($p0, $p9, $p13, $p14, $i15, $p17, $p18, $p19, $i20, $p22, $i23, $i24, $i25, $i12);
    goto $bb4_last;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i12);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(8, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} virqfd_disable($p0, $p17);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i12);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref($i20, 40)), $mul.ref(16, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} virqfd_disable($p0, $p22);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i12, 1);
    call {:si_unique_call 207} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p9);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, $i23);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i23;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1137;
}



const vfio_msi_set_block: ref;

axiom vfio_msi_set_block == $sub.ref(0, 113321);

procedure vfio_msi_set_block($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_msi_set_block($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i1) returns ($r: i32)
{
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i14: i32;
  var $i15: i32;
  var $i29: i32;
  var $i30: i32;
  var $i12: i32;
  var $i13: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i37: i32;
  var $i38: i1;
  var $i34: i32;
  var $i10: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} {:cexpr "vfio_msi_set_block:arg:start"} boogie_si_record_i32($i1);
    call {:si_unique_call 213} {:cexpr "vfio_msi_set_block:arg:count"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 214} {:cexpr "vfio_msi_set_block:arg:msix"} boogie_si_record_i1($i4);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i1, $i2);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(336, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i6, $i8);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 215} {:cexpr "vfio_msi_set_block:arg:j"} boogie_si_record_i32($i1);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(0, $i2);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i1, 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i13, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i12, 1);
    call {:si_unique_call 221} {:cexpr "j"} boogie_si_record_i32($i32);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i33 := $uge.i32($i32, $i1);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb21;

  $bb21:
    call $i35, $i37, $i38, $i34, vslice_dummy_var_57 := vfio_msi_set_block_loop_$bb21($p0, $i1, $i5, $i35, $i37, $i38, $i34, vslice_dummy_var_57);
    goto $bb21_last;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i5);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_57 := vfio_msi_set_vector_signal($p0, $i34, $sub.i32(0, 1), $i35);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i34, 1);
    call {:si_unique_call 223} {:cexpr "j"} boogie_si_record_i32($i37);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i38 := $uge.i32($i37, $i1);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb23_dummy;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i14, $i15 := $i1, 0;
    goto $bb8;

  $bb8:
    call $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i14, $i15, $i29, $i30 := vfio_msi_set_block_loop_$bb8($p0, $i2, $p3, $i5, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i14, $i15, $i29, $i30);
    goto $bb8_last;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p3);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i5);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i23 := vfio_msi_set_vector_signal($p0, $i14, $i21, $i22);
    call {:si_unique_call 218} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i15, 1);
    call {:si_unique_call 219} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i14, 1);
    call {:si_unique_call 220} {:cexpr "j"} boogie_si_record_i32($i25);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i24, $i2);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i23, 0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i28 := $and.i1($i26, $i27);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i29, $i30 := $i25, $i23;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i29, $i30;
    goto $bb7;

  $bb13:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i14, $i15 := $i25, $i24;
    goto $bb13_dummy;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i15);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p3, $mul.ref($i18, 4));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    call {:si_unique_call 216} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1225;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1196;
}



const vfio_msi_enable: ref;

axiom vfio_msi_enable == $sub.ref(0, 114353);

procedure vfio_msi_enable($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vfio_msi_enable($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i1;
  var $i40: i16;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i39: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $p75: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} {:cexpr "vfio_msi_enable:arg:nvec"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 225} {:cexpr "vfio_msi_enable:arg:msix"} boogie_si_record_i1($i2);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 2);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 40);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p18 := kzalloc($i17, 208);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, $p18);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i3);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i58 := pci_enable_msi_block($p5, $i1);
    call {:si_unique_call 229} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(336, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p63, $i1);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i3);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i64 == 1);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p66, 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i8.i1($i3);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i67 == 1);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i68 := $mul.i32($i1, 2);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, $sub.i32(0, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i70 := fls($i69);
    call {:si_unique_call 238} {:cexpr "tmp___1"} boogie_si_record_i32($i70);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, 255);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(344, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p75, $i74);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb36:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i64 == 1;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p65, 2);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i59 == 1;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} kfree($p62);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i15 := $i58;
    goto $bb8;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i1);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i27 := $mul.i64($i26, 8);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p28 := kzalloc($i27, 208);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(320, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p30, $p28);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(320, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32(0, $i1);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(320, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i50 := pci_enable_msix($p5, $p49, $i1);
    call {:si_unique_call 233} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i51 == 1;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(320, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} kfree($p54);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} kfree($p57);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i15 := $i50;
    goto $bb8;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb21;

  $bb21:
    call $i40, $p41, $p42, $i43, $p45, $i46, $i47, $i39 := vfio_msi_enable_loop_$bb21($p0, $i1, $i40, $p41, $p42, $i43, $p45, $i46, $i47, $i39);
    goto $bb21_last;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(320, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i39);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref($i43, 8)), $mul.ref(4, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p45, $i40);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i39, 1);
    call {:si_unique_call 231} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, $i1);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i39 := $i46;
    goto $bb23_dummy;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} kfree($p37);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb8;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1294;
}



const eventfd_signal: ref;

axiom eventfd_signal == $sub.ref(0, 115385);

procedure eventfd_signal($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation eventfd_signal($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} {:cexpr "eventfd_signal:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 240} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 241} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 116417);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 243} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const pci_enable_msix: ref;

axiom pci_enable_msix == $sub.ref(0, 117449);

procedure pci_enable_msix($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 245} {:cexpr "pci_enable_msix:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 1} true;
    call {:si_unique_call 246} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 247} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_enable_msi_block: ref;

axiom pci_enable_msi_block == $sub.ref(0, 118481);

procedure pci_enable_msi_block($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msi_block($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 248} {:cexpr "pci_enable_msi_block:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 1} true;
    call {:si_unique_call 249} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 250} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fls: ref;

axiom fls == $sub.ref(0, 119513);

procedure fls($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fls($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} {:cexpr "fls:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 252} $i1 := devirtbounce.1(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 253} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 120545);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 255} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 121577);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 258} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p2 := ldv_malloc($i0);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 122609);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 260} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 261} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 262} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $p3 := malloc($i0);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i4 := ldv_is_err($p3);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 1} true;
    call {:si_unique_call 265} __VERIFIER_assume($i7);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 123641);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 266} $r := $malloc($i0);
    return;
}



const vfio_msi_set_vector_signal: ref;

axiom vfio_msi_set_vector_signal == $sub.ref(0, 124673);

procedure vfio_msi_set_vector_signal($p0: ref, $i1: i32, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_msi_set_vector_signal($p0: ref, $i1: i32, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $i4: i8;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i14: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p55: ref;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p104: ref;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} {:cexpr "vfio_msi_set_vector_signal:arg:vector"} boogie_si_record_i32($i1);
    call {:si_unique_call 268} {:cexpr "vfio_msi_set_vector_signal:arg:fd"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 269} {:cexpr "vfio_msi_set_vector_signal:arg:msix"} boogie_si_record_i1($i3);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i4);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, $i1);
    call {:si_unique_call 271} {:cexpr "tmp"} boogie_si_record_i32($i17);
    assume {:verifier.code 0} true;
    $i14 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i4);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $p19 := .str.16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(336, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i21, $i1);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i1);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(0, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i2, 0);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p57 := pci_name($p6);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $p58 := kasprintf.i32.ref.ref.i32.ref(208, .str.17, $p19, $i1, $p57);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i1);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p60, $mul.ref($i61, 40)), $mul.ref(24, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p63, $p58);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p65, $mul.ref($i66, 40)), $mul.ref(24, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.1, $p68);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $p72 := eventfd_ctx_fdget($i2);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i74 := IS_ERR($p73);
    call {:si_unique_call 279} {:cexpr "tmp___3"} boogie_si_record_i64($i74);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.1, $p85);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i1);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p86, $mul.ref($i87, 40)), $mul.ref(24, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.1, $p89);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p72);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i92 := request_irq($i14, vfio_msihandler, 0, $p90, $p91);
    call {:si_unique_call 284} {:cexpr "ret"} boogie_si_record_i32($i92);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.1, $p100);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i1);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p101, $mul.ref($i102, 40)), $mul.ref(0, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p104, $p72);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb23:
    assume $i93 == 1;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p95, $mul.ref($i96, 40)), $mul.ref(24, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.1, $p98);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} kfree($p99);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} eventfd_ctx_put($p72);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i23 := $i92;
    goto $bb9;

  $bb20:
    assume $i75 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i1);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p77, $mul.ref($i78, 40)), $mul.ref(24, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} kfree($p81);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p72);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i83 := PTR_ERR($p82);
    call {:si_unique_call 282} {:cexpr "tmp___2"} boogie_si_record_i64($i83);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i64.i32($i83);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i23 := $i84;
    goto $bb9;

  $bb17:
    assume $i71 == 1;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 12);
    goto $bb9;

  $bb14:
    assume $i56 == 1;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i1);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p33, $mul.ref($i34, 40)), $mul.ref(0, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} free_irq($i14, $p38);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref($i41, 40)), $mul.ref(24, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} kfree($p44);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i1);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p46, $mul.ref($i47, 40)), $mul.ref(0, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} eventfd_ctx_put($p50);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i1);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p52, $mul.ref($i53, 40)), $mul.ref(0, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p55, $0.ref);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p19 := .str.15;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(320, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i1);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 8)), $mul.ref(0, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p12);
    call {:si_unique_call 270} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 125705);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    return;
}



const eventfd_ctx_put: ref;

axiom eventfd_ctx_put == $sub.ref(0, 126737);

procedure eventfd_ctx_put($p0: ref);
  free requires assertsPassed;



implementation eventfd_ctx_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 127769);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $p2 := dev_name($p1);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kasprintf: ref;

axiom kasprintf == $sub.ref(0, 128801);

procedure kasprintf.i32.ref.ref($i0: i32, $p1: ref, p.2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kasprintf.i32.ref.ref($i0: i32, $p1: ref, p.2: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} {:cexpr "kasprintf:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $p2 := external_alloc();
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



procedure kasprintf.i32.ref.ref.i32.ref($i0: i32, $p1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kasprintf.i32.ref.ref.i32.ref($i0: i32, $p1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} {:cexpr "kasprintf:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p2 := external_alloc();
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const eventfd_ctx_fdget: ref;

axiom eventfd_ctx_fdget == $sub.ref(0, 129833);

procedure eventfd_ctx_fdget($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation eventfd_ctx_fdget($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} {:cexpr "eventfd_ctx_fdget:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p1 := external_alloc();
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vfio_msihandler: ref;

axiom vfio_msihandler == $sub.ref(0, 130865);

procedure vfio_msihandler($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_msihandler($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var vslice_dummy_var_58: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} {:cexpr "vfio_msihandler:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} vslice_dummy_var_58 := eventfd_signal($p2, 1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 131897);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 298} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 300} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 132929);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 301} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 302} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 303} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 304} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 133961);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(16, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $p9 := kobject_name($p8);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1144)), $mul.ref(80, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 134993);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const virqfd_disable: ref;

axiom virqfd_disable == $sub.ref(0, 136025);

procedure virqfd_disable($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation virqfd_disable($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p3 := spinlock_check($p2);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 308} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} spin_unlock_irqrestore($p9, $i4);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p10 := $M.7;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} flush_workqueue($p10);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p1);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} virqfd_deactivate($p8);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $0.ref);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_disable_msix: ref;

axiom pci_disable_msix == $sub.ref(0, 137057);

procedure pci_disable_msix($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msix($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msi: ref;

axiom pci_disable_msi == $sub.ref(0, 138089);

procedure pci_disable_msi($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msi($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 139121);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 140153);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 1} true;
    call {:si_unique_call 312} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 313} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const virqfd_deactivate: ref;

axiom virqfd_deactivate == $sub.ref(0, 141185);

procedure virqfd_deactivate($p0: ref);
  free requires assertsPassed;



implementation virqfd_deactivate($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_59: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p1 := $M.7;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(176, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_59 := queue_work($p1, $p2);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 142217);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    return;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 143249);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 144281);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 145313);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 318} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 319} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vfio_intx_disable: ref;

axiom vfio_intx_disable == $sub.ref(0, 146345);

procedure vfio_intx_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_intx_disable($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_60 := vfio_intx_set_signal($p0, $sub.i32(0, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} virqfd_disable($p0, $p4);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} virqfd_disable($p0, $p7);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, 3);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(336, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} kfree($p12);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    return;
}



const vfio_intx_set_signal: ref;

axiom vfio_intx_set_signal == $sub.ref(0, 147377);

procedure vfio_intx_set_signal($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_intx_set_signal($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i1;
  var $i54: i64;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $i75: i8;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} {:cexpr "vfio_intx_set_signal:arg:fd"} boogie_si_record_i32($i1);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p26 := pci_name($p3);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p27 := kasprintf.i32.ref.ref(208, .str.14, $p26);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p30, $p27);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p37 := eventfd_ctx_fdget($i1);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i39 := IS_ERR($p38);
    call {:si_unique_call 332} {:cexpr "tmp___1"} boogie_si_record_i64($i39);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p50, $p37);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(380, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.1, $p51);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p0);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i62 := request_irq($i56, vfio_intx_handler, $i54, $p60, $p61);
    call {:si_unique_call 337} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $p72 := spinlock_check($p71);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i73 := _raw_spin_lock_irqsave($p72);
    call {:si_unique_call 342} {:cexpr "flags"} boogie_si_record_i64($i73);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(380, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.1, $p74);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i76 == 1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.1, $p77);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.1, $p79);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i8.i1($i80);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} spin_unlock_irqrestore($p84, $i73);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb23:
    assume $i81 == 1;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.1, $p82);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} disable_irq_nosync($i83);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb21;

  $bb17:
    assume $i63 == 1;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.1, $p64);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p66, $0.ref);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} kfree($p70);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} eventfd_ctx_put($p37);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i25 := $i62;
    goto $bb6;

  $bb14:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i54 := 128;
    goto $bb16;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} kfree($p44);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p37);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i46 := PTR_ERR($p45);
    call {:si_unique_call 335} {:cexpr "tmp___0"} boogie_si_record_i64($i46);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i25 := $i47;
    goto $bb6;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb6;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} free_irq($i11, $p12);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} kfree($p16);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} eventfd_ctx_put($p20);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, $0.ref);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_intx_enable: ref;

axiom vfio_intx_enable == $sub.ref(0, 148409);

procedure vfio_intx_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vfio_intx_enable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $p31: ref;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $p43: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 2);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p16 := kzalloc(40, 208);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, $p16);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(336, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, 1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(381, 1));
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i26);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p29, $i30);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(380, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, 0);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.1, $p38);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i41 := $xor.i1($i40, 1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} pci_intx($p35, $i42);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb8;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const vfio_send_intx_eventfd: ref;

axiom vfio_send_intx_eventfd == $sub.ref(0, 149441);

procedure vfio_send_intx_eventfd($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation vfio_send_intx_eventfd($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var vslice_dummy_var_61: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i7 := ldv__builtin_expect($i6, 1);
    call {:si_unique_call 348} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(381, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 350} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} vslice_dummy_var_61 := eventfd_signal($p20, 1);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 150473);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 353} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const pci_intx: ref;

axiom pci_intx == $sub.ref(0, 151505);

procedure pci_intx($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pci_intx($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "pci_intx:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    return;
}



const vfio_intx_handler: ref;

axiom vfio_intx_handler == $sub.ref(0, 152537);

procedure vfio_intx_handler($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9;



implementation vfio_intx_handler($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i16: i32;
  var $p32: ref;
  var $i33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} {:cexpr "vfio_intx_handler:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p4 := spinlock_check($p3);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 358} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 408)), $mul.ref(380, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.8, $p11);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} disable_irq_nosync($i12);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p15, 1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} spin_unlock_irqrestore($p32, $i5);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i16, 1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vfio_send_intx_eventfd($p2, $0.ref);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.9, $p19);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i24 := pci_check_and_mask_intx($p23);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 362} {:cexpr "tmp___0"} boogie_si_record_i8($i25);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i16 := $i31;
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p29, 1);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb8;

  $bb4:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb9;
}



const disable_irq_nosync: ref;

axiom disable_irq_nosync == $sub.ref(0, 153569);

procedure disable_irq_nosync($i0: i32);
  free requires assertsPassed;



implementation disable_irq_nosync($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} {:cexpr "disable_irq_nosync:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    return;
}



const pci_check_and_mask_intx: ref;

axiom pci_check_and_mask_intx == $sub.ref(0, 154601);

procedure pci_check_and_mask_intx($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation pci_check_and_mask_intx($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 1} true;
    call {:si_unique_call 365} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 366} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vfio_pci_intx_unmask: ref;

axiom vfio_pci_intx_unmask == $sub.ref(0, 155633);

procedure vfio_pci_intx_unmask($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_pci_intx_unmask($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i1 := vfio_pci_intx_unmask_handler($p0, $0.ref);
    call {:si_unique_call 368} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 0);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vfio_send_intx_eventfd($p0, $0.ref);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_pci_intx_unmask_handler: ref;

axiom vfio_pci_intx_unmask_handler == $sub.ref(0, 156665);

procedure vfio_pci_intx_unmask_handler($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_pci_intx_unmask_handler($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i34: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i17: i32;
  var $i44: i32;
  var $p45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p5 := spinlock_check($p4);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 372} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 374} {:cexpr "tmp___2"} boogie_si_record_i64($i12);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} spin_unlock_irqrestore($p45, $i6);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(380, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17 := $i43;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i44 := $i17;
    goto $bb21;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(381, 1));
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(380, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, 0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i8($i38);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p41, $i42);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i43 := $i37;
    goto $bb20;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i29 := pci_check_and_unmask_intx($p3);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 377} {:cexpr "tmp___0"} boogie_si_record_i8($i30);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} enable_irq($i36);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    goto $bb19;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i34 := 1;
    goto $bb18;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb15;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} pci_intx($p3, 1);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb5;
}



const virqfd_enable: ref;

axiom virqfd_enable == $sub.ref(0, 157697);

procedure virqfd_enable($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.3;



implementation virqfd_enable($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i64;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p51: ref;
  var $i52: i32;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i14: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_62: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 384} {:cexpr "virqfd_enable:arg:fd"} boogie_si_record_i32($i5);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p10 := kzalloc(264, 208);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(256, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, $p4);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, $p0);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, $p1);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, $p2);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(32, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, $p3);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(176, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} __init_work($p20, 0);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p21, 4195328);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p7);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.1;
    cmdloc_dummy_var_7 := $M.1;
    call {:si_unique_call 387} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p24, $p25, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_8;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(176, 1)), $mul.ref(32, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} lockdep_init_map($p27, .str.12, $p6, 0);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(176, 1)), $mul.ref(8, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} INIT_LIST_HEAD($p29);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(176, 1)), $mul.ref(24, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, virqfd_shutdown);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(40, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __init_work($p32, 0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p33, 4195328);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p9);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.1;
    cmdloc_dummy_var_10 := $M.1;
    call {:si_unique_call 391} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p36, $p37, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_11;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} lockdep_init_map($p39, .str.13, $p8, 0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} INIT_LIST_HEAD($p41);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(40, 1)), $mul.ref(24, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, virqfd_inject);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p44 := eventfd_fget($i5);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i46 := IS_ERR($p45);
    call {:si_unique_call 396} {:cexpr "tmp___1"} boogie_si_record_i64($i46);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p53 := eventfd_ctx_fileget($p44);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i55 := IS_ERR($p54);
    call {:si_unique_call 402} {:cexpr "tmp___3"} boogie_si_record_i64($i55);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p60, $p53);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} spin_lock_irq($p61);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p4);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $p10);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} spin_unlock_irq($p66);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(120, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} init_waitqueue_func_entry($p67, virqfd_wakeup);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} init_poll_funcptr($p68, virqfd_ptable_queue_proc);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p44, $mul.ref(0, 352)), $mul.ref(32, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 216)), $mul.ref(56, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(160, 1));
    call {:si_unique_call 411} $i74 := devirtbounce.2($p72, $p44, $p73);
    call {:si_unique_call 412} {:cexpr "events"} boogie_si_record_i32($i74);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 1);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} fput($p44);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb15:
    assume $i76 == 1;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p1);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i78 == 1);
    call {:si_unique_call 413} $i79 := devirtbounce.3($p1, $p0, $p3);
    call {:si_unique_call 414} {:cexpr "tmp___4"} boogie_si_record_i32($i79);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i80 == 1;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p2);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i82 == 1;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(40, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_62 := schedule_work($p83);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i78 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb12:
    assume $i64 == 1;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} spin_unlock_irq($p65);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p53, $sub.i32(0, 16);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p51);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p44);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p11);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} kfree($p95);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i14 := $i52;
    goto $bb3;

  $bb34:
    assume $i91 == 1;
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p44);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i93 := IS_ERR($p92);
    call {:si_unique_call 421} {:cexpr "tmp___6"} boogie_si_record_i64($i93);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i93, 0);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i94 == 1;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} fput($p44);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb28:
    assume $i86 == 1;
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p51);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i88 := IS_ERR($p87);
    call {:si_unique_call 418} {:cexpr "tmp___5"} boogie_si_record_i64($i88);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i89 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} eventfd_ctx_put($p51);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb9:
    assume $i56 == 1;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p53);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i58 := PTR_ERR($p57);
    call {:si_unique_call 404} {:cexpr "tmp___2"} boogie_si_record_i64($i58);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    call {:si_unique_call 405} {:cexpr "ret"} boogie_si_record_i32($i59);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p53, $i59;
    goto $bb7;

  $bb5:
    assume $i47 == 1;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p44);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i49 := PTR_ERR($p48);
    call {:si_unique_call 398} {:cexpr "tmp___0"} boogie_si_record_i64($i49);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i64.i32($i49);
    call {:si_unique_call 399} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p51, $i52 := $0.ref, $i50;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 158729);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 159761);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 160793);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    return;
}



const virqfd_shutdown: ref;

axiom virqfd_shutdown == $sub.ref(0, 161825);

procedure virqfd_shutdown($p0: ref);



const virqfd_inject: ref;

axiom virqfd_inject == $sub.ref(0, 162857);

procedure virqfd_inject($p0: ref);



const eventfd_fget: ref;

axiom eventfd_fget == $sub.ref(0, 163889);

procedure eventfd_fget($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation eventfd_fget($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} {:cexpr "eventfd_fget:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $p1 := external_alloc();
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const eventfd_ctx_fileget: ref;

axiom eventfd_ctx_fileget == $sub.ref(0, 164921);

procedure eventfd_ctx_fileget($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation eventfd_ctx_fileget($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p1 := external_alloc();
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 165953);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} _raw_spin_lock_irq($p2);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 166985);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} _raw_spin_unlock_irq($p2);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    return;
}



const virqfd_wakeup: ref;

axiom virqfd_wakeup == $sub.ref(0, 168017);

procedure virqfd_wakeup($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const init_waitqueue_func_entry: ref;

axiom init_waitqueue_func_entry == $sub.ref(0, 169049);

procedure init_waitqueue_func_entry($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation init_waitqueue_func_entry($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 0);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $0.ref);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $p1);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    return;
}



const virqfd_ptable_queue_proc: ref;

axiom virqfd_ptable_queue_proc == $sub.ref(0, 170081);

procedure virqfd_ptable_queue_proc($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation virqfd_ptable_queue_proc($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 160), 264)), $mul.ref(120, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} add_wait_queue($p1, $p5);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    return;
}



const init_poll_funcptr: ref;

axiom init_poll_funcptr == $sub.ref(0, 171113);

procedure init_poll_funcptr($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation init_poll_funcptr($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, $sub.i64(0, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 172145);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 432} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 433} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fput: ref;

axiom fput == $sub.ref(0, 173177);

procedure fput($p0: ref);
  free requires assertsPassed;



implementation fput($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    return;
}



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 174209);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 175241);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 176273);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    return;
}



const eventfd_ctx_remove_wait_queue: ref;

axiom eventfd_ctx_remove_wait_queue == $sub.ref(0, 177305);

procedure eventfd_ctx_remove_wait_queue($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const flush_work: ref;

axiom flush_work == $sub.ref(0, 178337);

procedure flush_work($p0: ref) returns ($r: i1);



const pci_check_and_unmask_intx: ref;

axiom pci_check_and_unmask_intx == $sub.ref(0, 179369);

procedure pci_check_and_unmask_intx($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation pci_check_and_unmask_intx($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 434} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 435} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const enable_irq: ref;

axiom enable_irq == $sub.ref(0, 180401);

procedure enable_irq($i0: i32);
  free requires assertsPassed;



implementation enable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} {:cexpr "enable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_intx_mask: ref;

axiom vfio_pci_intx_mask == $sub.ref(0, 181433);

procedure vfio_pci_intx_mask($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_pci_intx_mask($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p4 := spinlock_check($p3);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 439} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 441} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} spin_unlock_irqrestore($p29, $i5);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(380, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(380, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1300, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} disable_irq_nosync($i25);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p28, 1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} pci_intx($p2, 0);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} pci_intx($p2, 0);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_mutex_lock_igate_of_vfio_pci_device: ref;

axiom ldv_mutex_lock_igate_of_vfio_pci_device == $sub.ref(0, 182465);

procedure ldv_mutex_lock_igate_of_vfio_pci_device($p0: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_mutex_lock_igate_of_vfio_pci_device($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.6 := 2;
    call {:si_unique_call 447} {:cexpr "ldv_mutex_igate_of_vfio_pci_device"} boogie_si_record_i32(2);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 183497);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    return;
}



const pci_read_config_byte: ref;

axiom pci_read_config_byte == $sub.ref(0, 184529);

procedure pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} {:cexpr "pci_read_config_byte:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i7 := pci_bus_read_config_byte($p4, $i6, $i1, $p2);
    call {:si_unique_call 450} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_find_capability: ref;

axiom pci_find_capability == $sub.ref(0, 185561);

procedure pci_find_capability($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_find_capability($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 451} {:cexpr "pci_find_capability:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 452} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 453} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_read_config_word: ref;

axiom pci_read_config_word == $sub.ref(0, 186593);

procedure pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "pci_read_config_word:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i7 := pci_bus_read_config_word($p4, $i6, $i1, $p2);
    call {:si_unique_call 456} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_read_config_word: ref;

axiom pci_bus_read_config_word == $sub.ref(0, 187625);

procedure pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 457} {:cexpr "pci_bus_read_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 458} {:cexpr "pci_bus_read_config_word:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 459} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 460} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_bus_read_config_byte: ref;

axiom pci_bus_read_config_byte == $sub.ref(0, 188657);

procedure pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 461} {:cexpr "pci_bus_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 462} {:cexpr "pci_bus_read_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 463} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 464} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 189689);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 190721);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 465} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 466} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 467} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 191753);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 192785);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 468} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 469} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 470} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 193817);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_config_readwrite: ref;

axiom vfio_pci_config_readwrite == $sub.ref(0, 194849);

procedure vfio_pci_config_readwrite($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.10, $M.0, $M.1, $CurrAddr, $M.27, $M.31, $M.28;



implementation vfio_pci_config_readwrite($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i64;
  var $i21: i32;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i1;
  var $i30: i64;
  var $i31: i32;
  var $i34: i1;
  var $i35: i64;
  var $i36: i32;
  var $p32: ref;
  var $i33: i32;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i51: i64;
  var $i11: i64;
  var $i52: i64;
  var $i53: i64;
  var $i40: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 473} {:cexpr "vfio_pci_config_readwrite:arg:count"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 474} {:cexpr "vfio_pci_config_readwrite:arg:iswrite"} boogie_si_record_i1($i4);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p3);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p5, $i7);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.10, $p5);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 1099511627775);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p5, $i9);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i2, 0);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p3);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, $i11);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i53);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i40 := $i11;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p12, $i13, $i14 := $p1, $i2, 0;
    goto $bb4;

  $bb4:
    call $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i34, $i35, $i36, $p32, $i33, $p22, $i23, $i24, $i37, $i38, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $p12, $i13, $i14, $i51 := vfio_pci_config_readwrite_loop_$bb4($p0, $p5, $i6, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i34, $i35, $i36, $p32, $i33, $p22, $i23, $i24, $i37, $i38, $i41, $i42, $i43, $i44, $i45, $p46, $i47, $i48, $i49, $i50, $p12, $i13, $i14, $i51);
    goto $bb4_last;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i64($i13, 3);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i64($i13, 1);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i6);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i35 := vfio_config_do_rw($p0, $p12, 1, $p5, $i34);
    call {:si_unique_call 479} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    call {:si_unique_call 480} {:cexpr "ret"} boogie_si_record_i32($i36);
    assume {:verifier.code 0} true;
    $p32, $i33 := $p12, $i36;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p22, $i23, $i24 := $p32, $i13, $i33;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i24, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i38 := $i24;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i24);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i42 := $sub.i64($i23, $i41);
    call {:si_unique_call 484} {:cexpr "count"} boogie_si_record_i64($i42);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i24);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, $i14);
    call {:si_unique_call 485} {:cexpr "done"} boogie_si_record_i64($i44);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i24);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p22, $mul.ref($i45, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i24);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.10, $p5);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i47, $i48);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, $p5, $i49);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i42, 0);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i51 := $i44;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i11 := $i51;
    goto $bb3;

  $bb22:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p12, $i13, $i14 := $p46, $i42, $i44;
    goto $bb22_dummy;

  $bb18:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb20;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.10, $p5);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb14;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i6);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i30 := vfio_config_do_rw($p0, $p12, 2, $p5, $i29);
    call {:si_unique_call 482} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    call {:si_unique_call 483} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p32, $i33 := $p12, $i31;
    goto $bb17;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.10, $p5);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 3);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i6);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i20 := vfio_config_do_rw($p0, $p12, 4, $p5, $i19);
    call {:si_unique_call 476} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    call {:si_unique_call 477} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p22, $i23, $i24 := $p12, $i13, $i21;
    goto $bb11;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2300;
}



const vfio_pci_io_readwrite: ref;

axiom vfio_pci_io_readwrite == $sub.ref(0, 195881);

procedure vfio_pci_io_readwrite($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr;



implementation vfio_pci_io_readwrite($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;
  var $i16: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i23: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $i69: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i1;
  var $i86: i1;
  var $i87: i64;
  var $i88: i1;
  var $i89: i1;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $i104: i64;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $i111: i16;
  var $i112: i32;
  var $i113: i16;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i16;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i124: i1;
  var $i125: i64;
  var $i126: i1;
  var $i127: i8;
  var $i128: i32;
  var $i129: i8;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $p121: ref;
  var $i122: i64;
  var $i123: i32;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $i103: i32;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i64;
  var $i140: i64;
  var $p141: ref;
  var $i142: i64;
  var $i143: i64;
  var $i144: i1;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i145: i64;
  var $i81: i64;
  var $i146: i64;
  var $i147: i64;
  var $i22: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p6 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p7 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 489} {:cexpr "vfio_pci_io_readwrite:arg:count"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i4);
    call {:si_unique_call 490} {:cexpr "vfio_pci_io_readwrite:arg:iswrite"} boogie_si_record_i1($i4);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p3);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 1099511627775);
    call {:si_unique_call 491} {:cexpr "pos"} boogie_si_record_i64($i12);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p3);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i14 := $ashr.i64($i13, 40);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    call {:si_unique_call 492} {:cexpr "bar"} boogie_si_record_i32($i15);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i16, 56)), $mul.ref(0, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p19);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i15);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i23, 56)), $mul.ref(0, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.1, $p26);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i15);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i29, 56)), $mul.ref(8, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.1, $p32);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i15);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i34, 56)), $mul.ref(0, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i33, $i38);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i12, $i2);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i54 := $ugt.i64($i53, $i52);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i15);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i55, 8));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i15);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i76, 8));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.1, $p78);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i2, 0);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i81 := 0;
    assume {:branchcond $i80} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.0, $p3);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i147 := $add.i64($i146, $i81);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i147);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i22 := $i81;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb23:
    assume $i80 == 1;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p82, $i83, $i84, $i85 := $p1, $i2, 0, $i12;
    goto $bb26;

  $bb26:
    call $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $p94, $p95, $i96, $p97, $i98, $i99, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $p114, $p115, $i116, $i117, $p118, $i119, $i120, $i124, $i125, $i126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $p121, $i122, $i123, $p100, $i101, $i102, $i103, $i136, $i137, $i138, $i139, $i140, $p141, $i142, $i143, $i144, $p82, $i83, $i84, $i85, $i145 := vfio_pci_io_readwrite_loop_$bb26($p5, $p6, $p7, $i8, $p79, $i86, $i87, $i88, $i89, $p90, $i91, $i92, $i93, $p94, $p95, $i96, $p97, $i98, $i99, $i104, $i105, $i106, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $p114, $p115, $i116, $i117, $p118, $i119, $i120, $i124, $i125, $i126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $p121, $i122, $i123, $p100, $i101, $i102, $i103, $i136, $i137, $i138, $i139, $i140, $p141, $i142, $i143, $i144, $p82, $i83, $i84, $i85, $i145);
    goto $bb26_last;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i86 := $ugt.i64($i83, 2);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i104 := $and.i64($i85, 1);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i8.i1($i8);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i124 == 1);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p79, $mul.ref($i85, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i132 := ioread8($p131);
    call {:si_unique_call 517} {:cexpr "tmp___6"} boogie_si_record_i32($i132);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i8($i132);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, $i133);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i134 := copy_to_user($p82, $p7, 1);
    call {:si_unique_call 519} {:cexpr "tmp___7"} boogie_si_record_i32($i134);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p121, $i122, $i123 := $p82, $i85, 1;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p100, $i101, $i102, $i103 := $p121, $i83, $i122, $i123;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i103);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i137 := $sub.i64($i101, $i136);
    call {:si_unique_call 504} {:cexpr "count"} boogie_si_record_i64($i137);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i103);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i139 := $add.i64($i138, $i84);
    call {:si_unique_call 505} {:cexpr "done"} boogie_si_record_i64($i139);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i103);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p100, $mul.ref($i140, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i103);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i143 := $add.i64($i142, $i102);
    call {:si_unique_call 506} {:cexpr "pos"} boogie_si_record_i64($i143);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i137, 0);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i145 := $i139;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i81 := $i145;
    goto $bb25;

  $bb67:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $p82, $i83, $i84, $i85 := $p141, $i137, $i139, $i143;
    goto $bb67_dummy;

  $bb64:
    assume $i135 == 1;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb3;

  $bb58:
    assume $i124 == 1;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i125 := copy_from_user($p7, $p82, 1);
    call {:si_unique_call 515} {:cexpr "tmp___5"} boogie_si_record_i64($i125);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.1, $p7);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i8($i128);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p79, $mul.ref($i85, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} iowrite8($i129, $p130);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i126 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb3;

  $bb43:
    assume $i105 == 1;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i106 := $ugt.i64($i83, 1);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb45;

  $bb46:
    assume $i106 == 1;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i8);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i107 == 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p79, $mul.ref($i85, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i116 := ioread16($p115);
    call {:si_unique_call 510} {:cexpr "tmp___3"} boogie_si_record_i32($i116);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p6, $i117);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p6);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i119 := copy_to_user($p82, $p118, 2);
    call {:si_unique_call 512} {:cexpr "tmp___4"} boogie_si_record_i32($i119);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p121, $i122, $i123 := $p82, $i85, 2;
    goto $bb57;

  $bb54:
    assume $i120 == 1;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb3;

  $bb48:
    assume $i107 == 1;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p6);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i109 := copy_from_user($p108, $p82, 2);
    call {:si_unique_call 508} {:cexpr "tmp___2"} boogie_si_record_i64($i109);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i111 := $load.i16($M.1, $p6);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i112 := $zext.i16.i32($i111);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i16($i112);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p79, $mul.ref($i85, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} iowrite16($i113, $p114);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i110 == 1;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb3;

  $bb28:
    assume $i86 == 1;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i87 := $and.i64($i85, 3);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb30;

  $bb31:
    assume $i88 == 1;
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i8.i1($i8);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i89 == 1);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p79, $mul.ref($i85, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i96 := ioread32($p95);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, $i96);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p5);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i98 := copy_to_user($p82, $p97, 4);
    call {:si_unique_call 502} {:cexpr "tmp___1"} boogie_si_record_i32($i98);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p100, $i101, $i102, $i103 := $p82, $i83, $i85, 4;
    goto $bb42;

  $bb39:
    assume $i99 == 1;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb3;

  $bb33:
    assume $i89 == 1;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p5);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i91 := copy_from_user($p90, $p82, 4);
    call {:si_unique_call 499} {:cexpr "tmp___0"} boogie_si_record_i64($i91);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.1, $p5);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p79, $mul.ref($i85, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} iowrite32($i93, $p94);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i92 == 1;
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb3;

  $bb14:
    assume $i60 == 1;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32(1, $i15);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i62 := pci_request_selected_regions($p10, $i61, .str.1);
    call {:si_unique_call 495} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p65 := pci_iomap($p10, $i15, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i15);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i66, 8));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p68, $p65);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i15);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i69, 8));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i74 == 1;
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i75 := $shl.i32(1, $i15);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} pci_release_selected_regions($p10, $i75);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb3;

  $bb16:
    assume $i63 == 1;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i62);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i22 := $i64;
    goto $bb3;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i15);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i40, 56)), $mul.ref(8, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.1, $p43);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i15);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i45, 56)), $mul.ref(0, 1));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.1, $p48);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i50 := $sub.i64($i44, $i49);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 1);
    call {:si_unique_call 493} {:cexpr "tmp"} boogie_si_record_i64($i51);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb3;

  $bb67_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2438;
}



const vfio_pci_mem_readwrite: ref;

axiom vfio_pci_mem_readwrite == $sub.ref(0, 196913);

procedure vfio_pci_mem_readwrite($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.1, $M.0, $M.9, $CurrAddr;



implementation vfio_pci_mem_readwrite($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i24: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $i41: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i1;
  var $i56: i64;
  var $i57: i1;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i64: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i73: i64;
  var $p74: ref;
  var $i75: i64;
  var $p77: ref;
  var $i78: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $i102: i64;
  var $i103: i64;
  var $p62: ref;
  var $i63: i64;
  var $i104: i64;
  var $i105: i1;
  var $i106: i1;
  var $i113: i64;
  var $i114: i1;
  var $i115: i64;
  var $i116: i64;
  var $i118: i1;
  var $i119: i64;
  var $i120: i64;
  var $i117: i64;
  var $i121: i1;
  var $i122: i64;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $i129: i64;
  var $i130: i64;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $i140: i64;
  var $i141: i64;
  var $i147: i1;
  var $i148: i64;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $p152: ref;
  var $i153: i64;
  var $i154: i1;
  var $i155: i64;
  var $i156: i64;
  var $i157: i16;
  var $i158: i32;
  var $i159: i16;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i16;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $i167: i64;
  var $i168: i64;
  var $i174: i1;
  var $i175: i1;
  var $i176: i64;
  var $i177: i1;
  var $i178: i64;
  var $i179: i64;
  var $i180: i8;
  var $i181: i32;
  var $i182: i8;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $i186: i8;
  var $i187: i32;
  var $i188: i1;
  var $i189: i64;
  var $i190: i64;
  var $i196: i1;
  var $i197: i64;
  var $i198: i1;
  var $i203: i32;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $i207: i64;
  var $i208: i64;
  var $i209: i64;
  var $i210: i1;
  var $i202: i64;
  var $p199: ref;
  var $i200: i64;
  var $i201: i64;
  var $p211: ref;
  var $i212: i64;
  var $i213: i64;
  var $i214: i64;
  var $p191: ref;
  var $i192: i64;
  var $i193: i64;
  var $i194: i64;
  var $i195: i64;
  var $p169: ref;
  var $i170: i64;
  var $i171: i64;
  var $i172: i64;
  var $i173: i64;
  var $p142: ref;
  var $i143: i64;
  var $i144: i64;
  var $i145: i64;
  var $i146: i64;
  var $i215: i64;
  var $i216: i64;
  var $p217: ref;
  var $i218: i64;
  var $i219: i1;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $i220: i64;
  var $i221: i64;
  var $i107: i64;
  var $i108: i64;
  var $i222: i64;
  var $i223: i64;
  var $i131: i64;
  var $i132: i64;
  var $i224: i1;
  var $i225: i1;
  var $i226: i64;
  var $i23: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p7 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $p8 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 525} {:cexpr "vfio_pci_mem_readwrite:arg:count"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i4);
    call {:si_unique_call 526} {:cexpr "vfio_pci_mem_readwrite:arg:iswrite"} boogie_si_record_i1($i4);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p3);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i13 := $and.i64($i12, 1099511627775);
    call {:si_unique_call 527} {:cexpr "pos"} boogie_si_record_i64($i13);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p3);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i15 := $ashr.i64($i14, 40);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    call {:si_unique_call 528} {:cexpr "bar"} boogie_si_record_i32($i16);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p5, 0);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i17, 56)), $mul.ref(0, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i16);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i24, 56)), $mul.ref(0, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i29 == 1);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i16);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i30, 56)), $mul.ref(8, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.1, $p33);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i16);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i35, 56)), $mul.ref(0, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.1, $p38);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i34, $i39);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i54 := $ugt.i64($i13, $i53);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i13, $i53);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i13, $i2);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i57 := $ugt.i64($i56, $i53);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i2;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i16, 6);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i60 == 1);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i16);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i64, 8));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i16);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i85, 8));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.1, $p87);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(345, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.1, $p89);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, $i16);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i103 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p62, $i63 := $p88, $i103;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p62);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i105 := $eq.i64($i104, 0);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i59, 0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i107, $i108 := 0, $i59;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i222 := $load.i64($M.0, $p3);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i223 := $add.i64($i222, $i107);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i223);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i107, $i108;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i16, 6);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i225 := $eq.i64($i132, 0);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    $i226 := $sub.i64(0, 14);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i23 := $i226;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb117:
    assume $i225 == 1;
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i226 := $i131;
    goto $bb119;

  $bb114:
    assume $i224 == 1;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} pci_unmap_rom($p11, $p62);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb38:
    assume $i106 == 1;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p109, $i110, $i111, $i112 := $p1, $i59, $i13, 0;
    goto $bb41;

  $bb41:
    call $i113, $i114, $i115, $i116, $i118, $i119, $i120, $i117, $i121, $i122, $i123, $i124, $i125, $p126, $i127, $i128, $i129, $i130, $i133, $p134, $p135, $i136, $p137, $i138, $i139, $i140, $i141, $i147, $i148, $i149, $i150, $i151, $p152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $p160, $p161, $i162, $i163, $p164, $i165, $i166, $i167, $i168, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $p183, $p184, $i185, $i186, $i187, $i188, $i189, $i190, $i196, $i197, $i198, $i203, $p204, $i205, $i206, $i207, $i208, $i209, $i210, $i202, $p199, $i200, $i201, $p211, $i212, $i213, $i214, $p191, $i192, $i193, $i194, $i195, $p169, $i170, $i171, $i172, $i173, $p142, $i143, $i144, $i145, $i146, $i215, $i216, $p217, $i218, $i219, $p109, $i110, $i111, $i112, $i220, $i221 := vfio_pci_mem_readwrite_loop_$bb41($p5, $p6, $p7, $p8, $i9, $i53, $p62, $i63, $i113, $i114, $i115, $i116, $i118, $i119, $i120, $i117, $i121, $i122, $i123, $i124, $i125, $p126, $i127, $i128, $i129, $i130, $i133, $p134, $p135, $i136, $p137, $i138, $i139, $i140, $i141, $i147, $i148, $i149, $i150, $i151, $p152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $p160, $p161, $i162, $i163, $p164, $i165, $i166, $i167, $i168, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $p183, $p184, $i185, $i186, $i187, $i188, $i189, $i190, $i196, $i197, $i198, $i203, $p204, $i205, $i206, $i207, $i208, $i209, $i210, $i202, $p199, $i200, $i201, $p211, $i212, $i213, $i214, $p191, $i192, $i193, $i194, $i195, $p169, $i170, $i171, $i172, $i173, $p142, $i143, $i144, $i145, $i146, $i215, $i216, $p217, $i218, $i219, $p109, $i110, $i111, $i112, $i220, $i221);
    goto $bb41_last;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i113 := $load.i64($M.2, $p5);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i114 := $ult.i64($i111, $i113);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i114 == 1);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i118 := $uge.i64($i111, $i63);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i120 := 0;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i117 := $i120;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i121 := $ugt.i64($i117, 3);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i147 := $ugt.i64($i117, 1);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i174 := $ne.i64($i117, 0);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i174 == 1);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i8.i1($i9);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i196 == 1);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i197 := $sub.i64($i63, $i111);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i198 := $ugt.i64($i197, 0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p199, $i200, $i201 := $p109, $i110, $i112;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i198 == 1);
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p211, $i212, $i213 := $p199, $i200, $i201;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i214 := $sub.i64($i63, $i111);
    call {:si_unique_call 566} {:cexpr "filled"} boogie_si_record_i64($i214);
    assume {:verifier.code 0} true;
    $p191, $i192, $i193, $i194, $i195 := $p211, $i212, $i111, $i213, $i214;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p169, $i170, $i171, $i172, $i173 := $p191, $i192, $i193, $i194, $i195;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p142, $i143, $i144, $i145, $i146 := $p169, $i170, $i171, $i172, $i173;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i215 := $sub.i64($i143, $i146);
    call {:si_unique_call 545} {:cexpr "count"} boogie_si_record_i64($i215);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i216 := $add.i64($i145, $i146);
    call {:si_unique_call 546} {:cexpr "done"} boogie_si_record_i64($i216);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p142, $mul.ref($i146, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i218 := $add.i64($i144, $i146);
    call {:si_unique_call 547} {:cexpr "pos"} boogie_si_record_i64($i218);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i219 := $ne.i64($i215, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i220, $i221 := $i216, $i215;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i107, $i108 := $i220, $i221;
    goto $bb40;

  $bb111:
    assume $i219 == 1;
    assume {:verifier.code 0} true;
    $p109, $i110, $i111, $i112 := $p217, $i215, $i218, $i216;
    goto $bb111_dummy;

  $bb98:
    assume $i198 == 1;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i202 := 0;
    goto $bb101;

  $bb101:
    call $i203, $p204, $i205, $i206, $i207, $i208, $i209, $i210, $i202 := vfio_pci_mem_readwrite_loop_$bb101($i197, $i203, $p204, $i205, $i206, $i207, $i208, $i209, $i210, $i202, $p109, $i110, $i112);
    goto $bb101_last;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} might_fault();
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($sub.i8(0, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($p109, $mul.ref($i202, 1));
    call {:si_unique_call 563} $i205 := devirtbounce.5(0, $i203, $p204);
    call {:si_unique_call 564} {:cexpr "__ret_pu"} boogie_si_record_i32($i205);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i206 := $ne.i32($i205, 0);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i207, $i208 := $i112, $i110;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i209 := $add.i64($i202, 1);
    call {:si_unique_call 565} {:cexpr "i"} boogie_si_record_i64($i209);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i210 := $ugt.i64($i197, $i209);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i210 == 1);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p199, $i200, $i201 := $p109, $i110, $i112;
    goto $bb100;

  $bb107:
    assume $i210 == 1;
    assume {:verifier.code 0} true;
    $i202 := $i209;
    goto $bb107_dummy;

  $bb104:
    assume $i206 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i207, $i208;
    goto $bb60;

  $bb96:
    assume $i196 == 1;
    assume {:verifier.code 0} true;
    $p211, $i212, $i213 := $p109, $i110, $i112;
    goto $bb110;

  $bb84:
    assume $i174 == 1;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i8.i1($i9);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i175 == 1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p62, $mul.ref($i111, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i185 := ioread8($p184);
    call {:si_unique_call 558} {:cexpr "tmp___5"} boogie_si_record_i32($i185);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i32.i8($i185);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, $i186);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i187 := copy_to_user($p109, $p8, 1);
    call {:si_unique_call 560} {:cexpr "tmp___6"} boogie_si_record_i32($i187);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 0);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i189, $i190 := $i112, $i110;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p191, $i192, $i193, $i194, $i195 := $p109, $i110, $i111, $i112, 1;
    goto $bb95;

  $bb92:
    assume $i188 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i189, $i190;
    goto $bb60;

  $bb86:
    assume $i175 == 1;
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i176 := copy_from_user($p8, $p109, 1);
    call {:si_unique_call 556} {:cexpr "tmp___4"} boogie_si_record_i64($i176);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i178, $i179 := $i112, $i110;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.1, $p8);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i8($i181);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p62, $mul.ref($i111, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} iowrite8($i182, $p183);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb88:
    assume $i177 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i178, $i179;
    goto $bb60;

  $bb67:
    assume $i147 == 1;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i148 := $and.i64($i111, 1);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i149 := $eq.i64($i148, 0);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb69;

  $bb70:
    assume $i149 == 1;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i150 := $ugt.i64($i110, 1);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb69;

  $bb72:
    assume $i150 == 1;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i8.i1($i9);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i151 == 1);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p62, $mul.ref($i111, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i162 := ioread16($p161);
    call {:si_unique_call 551} {:cexpr "tmp___2"} boogie_si_record_i32($i162);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p7, $i163);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p7);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i165 := copy_to_user($p109, $p164, 2);
    call {:si_unique_call 553} {:cexpr "tmp___3"} boogie_si_record_i32($i165);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i165, 0);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i167, $i168 := $i112, $i110;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p169, $i170, $i171, $i172, $i173 := $p109, $i110, $i111, $i112, 2;
    goto $bb83;

  $bb80:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i167, $i168;
    goto $bb60;

  $bb74:
    assume $i151 == 1;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p7);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $i153 := copy_from_user($p152, $p109, 2);
    call {:si_unique_call 549} {:cexpr "tmp___1"} boogie_si_record_i64($i153);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i155, $i156 := $i112, $i110;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.1, $p7);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i157);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i16($i158);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p62, $mul.ref($i111, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} iowrite16($i159, $p160);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i154 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i155, $i156;
    goto $bb60;

  $bb49:
    assume $i121 == 1;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i122 := $and.i64($i111, 3);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i123 := $eq.i64($i122, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb51;

  $bb52:
    assume $i123 == 1;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i124 := $ugt.i64($i110, 3);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb51;

  $bb54:
    assume $i124 == 1;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i8.i1($i9);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i125 == 1);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p62, $mul.ref($i111, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i136 := ioread32($p135);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, $i136);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p6);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i138 := copy_to_user($p109, $p137, 4);
    call {:si_unique_call 543} {:cexpr "tmp___0"} boogie_si_record_i32($i138);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i140, $i141 := $i112, $i110;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p142, $i143, $i144, $i145, $i146 := $p109, $i110, $i111, $i112, 4;
    goto $bb66;

  $bb63:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i140, $i141;
    goto $bb60;

  $bb56:
    assume $i125 == 1;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p6);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i127 := copy_from_user($p126, $p109, 4);
    call {:si_unique_call 540} {:cexpr "tmp"} boogie_si_record_i64($i127);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i129, $i130 := $i112, $i110;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.1, $p6);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p62, $mul.ref($i111, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} iowrite32($i133, $p134);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb58:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i129, $i130;
    goto $bb60;

  $bb46:
    assume $i118 == 1;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i119 := $sub.i64($i53, $i111);
    call {:si_unique_call 538} {:cexpr "fillable"} boogie_si_record_i64($i119);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb48;

  $bb43:
    assume $i114 == 1;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.2, $p5);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i116 := $sub.i64($i115, $i111);
    call {:si_unique_call 537} {:cexpr "fillable"} boogie_si_record_i64($i116);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i117 := $i116;
    goto $bb45;

  $bb35:
    assume $i105 == 1;
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64(0, 22);
    goto $bb3;

  $bb32:
    assume $i92 == 1;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(348, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.1, $p93);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i94);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p5, $i95);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(348, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.1, $p96);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(346, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.1, $p98);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i97, $i100);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i102 := $zext.i32.i64($i101);
    call {:si_unique_call 536} {:cexpr "x_end"} boogie_si_record_i64($i102);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i103 := $i102;
    goto $bb34;

  $bb23:
    assume $i69 == 1;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i70 := $shl.i32(1, $i16);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i71 := pci_request_selected_regions($p11, $i70, .str.1);
    call {:si_unique_call 533} {:cexpr "ret"} boogie_si_record_i32($i71);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p74 := pci_iomap($p11, $i16, 0);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i16);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i75, 8));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p77, $p74);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i16);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i78, 8));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i83 == 1;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i84 := $shl.i32(1, $i16);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} pci_release_selected_regions($p11, $i84);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64(0, 22);
    goto $bb3;

  $bb25:
    assume $i72 == 1;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i71);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i23 := $i73;
    goto $bb3;

  $bb20:
    assume $i60 == 1;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p61 := pci_map_rom($p11, $p5);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p62, $i63 := $p61, $i53;
    goto $bb22;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i58 := $sub.i64($i53, $i13);
    call {:si_unique_call 530} {:cexpr "count"} boogie_si_record_i64($i58);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb19;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb3;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i16);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i41, 56)), $mul.ref(8, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.1, $p44);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i16);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i46, 56)), $mul.ref(0, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.1, $p49);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i51 := $sub.i64($i45, $i50);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, 1);
    call {:si_unique_call 529} {:cexpr "end"} boogie_si_record_i64($i52);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64(0, 22);
    goto $bb3;

  $bb107_dummy:
    assume false;
    return;

  $bb101_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  $bb111_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;
}



const pci_release_selected_regions: ref;

axiom pci_release_selected_regions == $sub.ref(0, 197945);

procedure pci_release_selected_regions($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pci_release_selected_regions($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} {:cexpr "pci_release_selected_regions:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    return;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 198977);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    return;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 200009);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 1} true;
    call {:si_unique_call 570} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 571} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iowrite16: ref;

axiom iowrite16 == $sub.ref(0, 201041);

procedure iowrite16($i0: i16, $p1: ref);
  free requires assertsPassed;



implementation iowrite16($i0: i16, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} {:cexpr "iowrite16:arg:arg0"} boogie_si_record_i16($i0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    return;
}



const ioread16: ref;

axiom ioread16 == $sub.ref(0, 202073);

procedure ioread16($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread16($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 1} true;
    call {:si_unique_call 573} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 574} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iowrite8: ref;

axiom iowrite8 == $sub.ref(0, 203105);

procedure iowrite8($i0: i8, $p1: ref);
  free requires assertsPassed;



implementation iowrite8($i0: i8, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} {:cexpr "iowrite8:arg:arg0"} boogie_si_record_i8($i0);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    return;
}



const ioread8: ref;

axiom ioread8 == $sub.ref(0, 204137);

procedure ioread8($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread8($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 1} true;
    call {:si_unique_call 576} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 577} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vfio_config_do_rw: ref;

axiom vfio_config_do_rw == $sub.ref(0, 205169);

procedure vfio_config_do_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.27, $M.31, $M.28, $CurrAddr;



implementation vfio_config_do_rw($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i1) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $i50: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i64;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p51: ref;
  var $i52: i32;
  var $i78: i1;
  var $i80: i32;
  var $i81: i1;
  var $i79: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $i88: i1;
  var $i89: i32;
  var $i90: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var $i101: i1;
  var $i102: i32;
  var $i103: i64;
  var $i105: i64;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i32;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i64;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i64;
  var $i136: i1;
  var $i137: i64;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $i124: i64;
  var $i17: i64;
  var vslice_dummy_var_63: i64;
  var vslice_dummy_var_64: i64;
  var vslice_dummy_var_65: i64;
  var vslice_dummy_var_66: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 579} {:cexpr "vfio_config_do_rw:arg:count"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 580} {:cexpr "vfio_config_do_rw:arg:iswrite"} boogie_si_record_i1($i4);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    call {:si_unique_call 581} {:cexpr "vfio_config_do_rw:arg:ret"} boogie_si_record_i64($i2);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.10, $p3);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i10 := $slt.i64($i9, 0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.10, $p3);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, $i2);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 2696)), $mul.ref(1296, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i64($i12, $i15);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64($i2, 4);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(56, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.10, $p3);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i22 := $sdiv.i64($i21, 4);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p20, $mul.ref($i22, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    call {:si_unique_call 582} {:cexpr "cap_id"} boogie_si_record_i8($i24);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 255);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.10, $p3);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i64($i32, 255);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i24);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i54 := $ugt.i32($i53, 19);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    call {:si_unique_call 588} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i55);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i32($i56);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 590} {:cexpr "tmp___1"} boogie_si_record_i64($i59);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i55, 0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_64 := ldv__builtin_expect($i63, 0);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i24);
    $p66 := $add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref($i65, 32));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i24);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 5);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $p71 := $p66;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i24);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p51, $i52 := $p71, $i77;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i52, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i79 := 0;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i32($i79);
    call {:si_unique_call 599} {:cexpr "__ret_warn_on___1"} boogie_si_record_i32($i82);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 601} {:cexpr "tmp___2"} boogie_si_record_i64($i86);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i82, 0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i32($i88);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i89);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_65 := ldv__builtin_expect($i90, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i52);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.10, $p3);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i94 := $sgt.i64($i92, $i93);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i95 := $zext.i1.i32($i94);
    call {:si_unique_call 604} {:cexpr "__ret_warn_on___2"} boogie_si_record_i32($i95);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i97);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i99 := ldv__builtin_expect($i98, 0);
    call {:si_unique_call 606} {:cexpr "tmp___3"} boogie_si_record_i64($i99);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i95, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i32($i101);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_66 := ldv__builtin_expect($i103, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.10, $p3);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i64.i32($i105);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i107 := $sub.i32($i106, $i52);
    call {:si_unique_call 609} {:cexpr "offset"} boogie_si_record_i32($i107);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i8.i1($i6);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i108 == 1);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.1, $p125);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i137 := $i2;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p5);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i64.i32($i2);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i140 := copy_to_user($p1, $p138, $i139);
    call {:si_unique_call 619} {:cexpr "tmp___7"} boogie_si_record_i32($i140);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i124 := $i137;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i17 := $i124;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb59:
    assume $i141 == 1;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, 14);
    goto $bb6;

  $bb53:
    assume $i128 == 1;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.1, $p129);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i131 := $load.i64($M.10, $p3);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i64.i32($i131);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i64.i32($i2);
    call {:si_unique_call 615} $i134 := devirtbounce.7($p130, $p0, $i132, $i133, $p51, $i107, $p5);
    call {:si_unique_call 616} {:cexpr "tmp___6"} boogie_si_record_i32($i134);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i134);
    call {:si_unique_call 617} {:cexpr "ret"} boogie_si_record_i64($i135);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i136 := $slt.i64($i135, 0);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i137 := $i135;
    goto $bb58;

  $bb55:
    assume $i136 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i17 := $i135;
    goto $bb6;

  $bb44:
    assume $i108 == 1;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.1, $p109);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i111, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p5);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i114 := copy_from_user($p113, $p1, $i2);
    call {:si_unique_call 611} {:cexpr "tmp___4"} boogie_si_record_i64($i114);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.1, $p116);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.10, $p3);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i64.i32($i118);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i64.i32($i2);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.1, $p5);
    call {:si_unique_call 612} $i122 := devirtbounce.6($p117, $p0, $i119, $i120, $p51, $i107, $i121);
    call {:si_unique_call 613} {:cexpr "tmp___5"} boogie_si_record_i32($i122);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i122);
    call {:si_unique_call 614} {:cexpr "ret"} boogie_si_record_i64($i123);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i124 := $i123;
    goto $bb52;

  $bb49:
    assume $i115 == 1;
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, 14);
    goto $bb6;

  $bb46:
    assume $i112 == 1;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb6;

  $bb41:
    assume $i100 == 1;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} warn_slowpath_null(.str.32, 1514);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i87 == 1;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} warn_slowpath_null(.str.32, 1513);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i78 == 1;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i24);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    assume {:verifier.code 0} true;
    $i79 := $i81;
    goto $bb37;

  $bb32:
    assume $i73 == 1;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.10, $p3);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i64.i32($i74);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i76 := vfio_find_cap_start($p0, $i75);
    call {:si_unique_call 598} {:cexpr "cap_start"} boogie_si_record_i32($i76);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i77 := $i76;
    goto $bb34;

  $bb29:
    assume $i68 == 1;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(72, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p71 := $p70;
    goto $bb31;

  $bb26:
    assume $i60 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} warn_slowpath_null(.str.32, 1502);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i24);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i32($i34, 27);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    call {:si_unique_call 585} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i36);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 587} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i36, 0);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} vslice_dummy_var_63 := ldv__builtin_expect($i44, 0);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i24);
    $p47 := $add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref($i46, 32));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.10, $p3);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i50 := vfio_find_cap_start($p0, $i49);
    call {:si_unique_call 594} {:cexpr "cap_start"} boogie_si_record_i32($i50);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p47, $i50;
    goto $bb25;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} warn_slowpath_null(.str.32, 1496);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i6);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p5);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i2);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i30 := copy_to_user($p1, $p28, $i29);
    call {:si_unique_call 584} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb6;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, 14);
    goto $bb6;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb6;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, 22);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, 14);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 206201);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    return;
}



const vfio_find_cap_start: ref;

axiom vfio_find_cap_start == $sub.ref(0, 207233);

procedure vfio_find_cap_start($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_find_cap_start($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i18: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i22: i32;
  var $i17: i32;
  var $i32: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} {:cexpr "vfio_find_cap_start:arg:pos"} boogie_si_record_i32($i1);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 255);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := 64;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i4 := $sdiv.i32($i3, 4);
    call {:si_unique_call 622} {:cexpr "base"} boogie_si_record_i32($i4);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i5 := $sdiv.i32($i1, 4);
    call {:si_unique_call 623} {:cexpr "pos"} boogie_si_record_i32($i5);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(56, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p9);
    call {:si_unique_call 624} {:cexpr "cap"} boogie_si_record_i8($i10);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(56, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i16 := $sge.i32($i15, $i4);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i17 := $i5;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i17, 4);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i13 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i18 := $i5;
    goto $bb11;

  $bb11:
    call $i19, $i20, $i21, $i18, $p23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $i22 := vfio_find_cap_start_loop_$bb11($i4, $i10, $p14, $i19, $i20, $i21, $i18, $p23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $i22);
    goto $bb11_last;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p14);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i18);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, $sub.i64(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p23, $mul.ref($i25, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i10);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i28, $i29);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i31 := $i18;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i17 := $i31;
    goto $bb10;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 1);
    call {:si_unique_call 625} {:cexpr "pos"} boogie_si_record_i32($i19);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, $sub.i32(0, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i21 := $sge.i32($i20, $i4);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i22 := $i19;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i17 := $i22;
    goto $bb10;

  $bb13:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb13_dummy;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i3 := 256;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3073;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 208265);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 627} devirtbounce.8(0, $p2, $p1, $p2);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p1);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vfio_pci_disable: ref;

axiom vfio_pci_disable == $sub.ref(0, 209297);

procedure vfio_pci_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.3;



implementation vfio_pci_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i7: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i1;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} pci_disable_device($p2);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vslice_dummy_var_67 := vfio_pci_set_irqs_ioctl($p0, 33, $i4, 0, 0, $0.ref);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(381, 1));
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p6, 0);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vfio_config_free($p0);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb1;

  $bb1:
    call $i8, $p10, $p11, $i12, $i13, $i14, $p16, $p17, $i18, $i19, $p21, $i22, $i23, $i7 := vfio_pci_disable_loop_$bb1($p0, $p2, $i8, $p10, $p11, $i12, $i13, $i14, $p16, $p17, $i18, $i19, $p21, $i22, $i23, $i7);
    goto $bb1_last;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i8, 8));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i7);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i14, 8));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} pci_iounmap($p2, $p17);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32(1, $i7);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} pci_release_selected_regions($p2, $i18);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i7);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref($i19, 8));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, $0.ref);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i7, 1);
    call {:si_unique_call 631} {:cexpr "bar"} boogie_si_record_i32($i22);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i22, 5);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(392, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i25 := pci_load_and_free_saved_state($p2, $p24);
    call {:si_unique_call 635} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vslice_dummy_var_70 := pci_write_config_word($p2, 4, 1024);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(382, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} pci_restore_state($p2);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_71 := __pci_reset_function($p2);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p28 := dev_name($p27);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_68 := printk.ref.ref.ref(.str.7, .str.8, $p28);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(382, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_69 := pci_save_state($p2);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb7_dummy;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3113;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 210329);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 211361);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    return;
}



const vfio_config_free: ref;

axiom vfio_config_free == $sub.ref(0, 212393);

procedure vfio_config_free($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_config_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} kfree($p2);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $0.ref);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(56, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} kfree($p5);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(56, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $0.ref);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(72, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} kfree($p9);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(72, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $0.ref);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    return;
}



const pci_iounmap: ref;

axiom pci_iounmap == $sub.ref(0, 213425);

procedure pci_iounmap($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_iounmap($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    return;
}



const pci_load_and_free_saved_state: ref;

axiom pci_load_and_free_saved_state == $sub.ref(0, 214457);

procedure pci_load_and_free_saved_state($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_load_and_free_saved_state($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 645} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 646} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 215489);

procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 647} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 648} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 1} true;
    call {:si_unique_call 649} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 650} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 651} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 652} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 653} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 654} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 216521);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 655} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 656} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_write_config_word: ref;

axiom pci_write_config_word == $sub.ref(0, 217553);

procedure pci_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation pci_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} {:cexpr "pci_write_config_word:arg:where"} boogie_si_record_i32($i1);
    call {:si_unique_call 658} {:cexpr "pci_write_config_word:arg:val"} boogie_si_record_i16($i2);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i2);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i9 := pci_bus_write_config_word($p4, $i6, $i1, $i8);
    call {:si_unique_call 660} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const __pci_reset_function: ref;

axiom __pci_reset_function == $sub.ref(0, 218585);

procedure __pci_reset_function($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_reset_function($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 661} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 662} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 219617);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    return;
}



const pci_bus_write_config_word: ref;

axiom pci_bus_write_config_word == $sub.ref(0, 220649);

procedure pci_bus_write_config_word($p0: ref, $i1: i32, $i2: i32, $i3: i16) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_write_config_word($p0: ref, $i1: i32, $i2: i32, $i3: i16) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 663} {:cexpr "pci_bus_write_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 664} {:cexpr "pci_bus_write_config_word:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 665} {:cexpr "pci_bus_write_config_word:arg:arg3"} boogie_si_record_i16($i3);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 666} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 667} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 221681);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 1} true;
    call {:si_unique_call 668} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 669} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 222713);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 671} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 672} $i3 := devirtbounce.9(0, $p2, $i0, $p2);
    call {:si_unique_call 673} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vfio_pci_enable: ref;

axiom vfio_pci_enable == $sub.ref(0, 223745);

procedure vfio_pci_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.1, $CurrAddr, $M.20, $M.26, $M.25;



implementation vfio_pci_enable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i44: i8;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i1;
  var $p52: ref;
  var $i53: i8;
  var $p55: ref;
  var $i56: i8;
  var $i57: i1;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $i66: i16;
  var $i67: i32;
  var $i68: i16;
  var $i70: i32;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i77: i32;
  var $i78: i32;
  var $i80: i32;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i8;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i16;
  var $i94: i32;
  var $i95: i32;
  var $i96: i16;
  var $p97: ref;
  var $p98: ref;
  var $i9: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.11, $p5);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i7 := pci_enable_device($p6);
    call {:si_unique_call 679} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i10 := pci_reset_function($p6);
    call {:si_unique_call 681} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(382, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i11);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p12, $i13);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} vslice_dummy_var_72 := pci_save_state($p6);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p15 := pci_store_saved_state($p6);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(392, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p16, $p15);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(392, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.11, $p17);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i40 := vfio_config_init($p0);
    call {:si_unique_call 689} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i44 := $M.18;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i46 := $xor.i1($i45, 1);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i49 := ldv__builtin_expect($i48, 1);
    call {:si_unique_call 693} {:cexpr "tmp___2"} boogie_si_record_i64($i49);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} vslice_dummy_var_75 := pci_read_config_word($p6, 4, $p1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(380, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.11, $p55);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i56);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $i70 := pci_find_capability($p6, 17);
    call {:si_unique_call 698} {:cexpr "tmp___3"} boogie_si_record_i32($i70);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    call {:si_unique_call 699} {:cexpr "msix_pos"} boogie_si_record_i8($i71);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(345, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p98, $sub.i8(0, 1));
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i71);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 2);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_77 := pci_read_config_word($p6, $i75, $p3);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i71);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, 4);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_78 := pci_read_config_dword($p6, $i78, $p4);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.19, $p4);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 7);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(345, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p85, $i84);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.19, $p4);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, $sub.i32(0, 8));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(348, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p88, $i87);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.5, $p3);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 2047);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, 1);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i16($i92);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i95 := $mul.i32($i94, 16);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i16($i95);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(346, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p97, $i96);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.5, $p1);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 1024);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb19;

  $bb20:
    assume $i61 == 1;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.5, $p1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 64511);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.5 := $store.i16($M.5, $p1, $i65);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.5, $p1);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_76 := pci_write_config_word($p6, 4, $i68);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i51 := pci_intx_mask_supported($p6);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(380, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i8($i51);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p52, $i53);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(392, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_74 := pci_load_and_free_saved_state($p6, $p42);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} pci_disable_device($p6);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i9 := $i40;
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p21, .str.6);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p22, .str.9);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p23, .str.10);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p24, .str.11);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.16, $p26);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 93);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p26, $i29);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p30, 0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.17, $p31);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 685} {:cexpr "tmp___1"} boogie_si_record_i64($i35);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p38 := dev_name($p37);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_73 := __dynamic_pr_debug.ref.ref.ref.ref($p2, .str.11, .str.9, $p38);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 224777);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 702} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 703} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_store_saved_state: ref;

axiom pci_store_saved_state == $sub.ref(0, 225809);

procedure pci_store_saved_state($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_store_saved_state($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p1 := external_alloc();
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 226841);

procedure __dynamic_pr_debug.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 705} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 706} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vfio_config_init: ref;

axiom vfio_config_init == $sub.ref(0, 227873);

procedure vfio_config_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.1, $M.20, $M.26, $M.25, $CurrAddr;



implementation vfio_config_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i16;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i27: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i10: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.11, $p1);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1296, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i5 := $sdiv.i32($i4, 4);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p7 := kmalloc($i6, 208);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1296, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p14 := kmalloc($i13, 208);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(56, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p17, $p7);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p18, $p14);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.1;
    call {:si_unique_call 710} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p7, 0, 16, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_13;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p7, $mul.ref(16, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1296, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, $sub.i32(0, 64));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i23 := $sdiv.i32($i22, 4);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.1;
    call {:si_unique_call 711} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p19, $sub.i8(0, 1), $i24, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_15;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i25 := vfio_fill_vconfig_bytes($p0, 0, 64);
    call {:si_unique_call 713} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(384, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p28, 1);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p14);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(16, 4));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(352, 1)), $mul.ref(0, 4));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p33, $i31);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p14);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(20, 4));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(352, 1)), $mul.ref(1, 4));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p38, $i36);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p14);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(24, 4));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(352, 1)), $mul.ref(2, 4));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p43, $i41);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p14);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(28, 4));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(352, 1)), $mul.ref(3, 4));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p48, $i46);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p14);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(32, 4));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(352, 1)), $mul.ref(4, 4));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p53, $i51);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p14);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(36, 4));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(352, 1)), $mul.ref(5, 4));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p58, $i56);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p14);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(48, 4));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(352, 1)), $mul.ref(6, 4));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p63, $i61);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p2);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(2250, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p65);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i76 := vfio_cap_init($p0);
    call {:si_unique_call 719} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i78 := vfio_ecap_init($p0);
    call {:si_unique_call 721} {:cexpr "ret"} boogie_si_record_i32($i78);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb18:
    assume $i79 == 1;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i27 := $i78;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} kfree($p7);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(56, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p80, $0.ref);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} kfree($p14);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p81, $0.ref);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i82 := pcibios_err_to_errno($i27);
    call {:si_unique_call 717} {:cexpr "tmp___1"} boogie_si_record_i32($i82);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i10 := $i82;
    goto $bb3;

  $bb15:
    assume $i77 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i27 := $i76;
    goto $bb10;

  $bb12:
    assume $i68 == 1;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(60, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.1, $p69);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p14);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p71, $i70);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(62, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.1, $p72);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p14);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(2, 2));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p75, $i73);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} kfree($p7);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const pci_intx_mask_supported: ref;

axiom pci_intx_mask_supported == $sub.ref(0, 228905);

procedure pci_intx_mask_supported($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation pci_intx_mask_supported($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 722} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 723} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_read_config_dword: ref;

axiom pci_read_config_dword == $sub.ref(0, 229937);

procedure pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} {:cexpr "pci_read_config_dword:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(16, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(56, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i7 := pci_bus_read_config_dword($p4, $i6, $i1, $p2);
    call {:si_unique_call 726} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_read_config_dword: ref;

axiom pci_bus_read_config_dword == $sub.ref(0, 230969);

procedure pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_dword($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 727} {:cexpr "pci_bus_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 728} {:cexpr "pci_bus_read_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 1} true;
    call {:si_unique_call 729} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 730} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 232001);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const vfio_fill_vconfig_bytes: ref;

axiom vfio_fill_vconfig_bytes == $sub.ref(0, 233033);

procedure vfio_fill_vconfig_bytes($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vfio_fill_vconfig_bytes($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i23: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i16;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i9: i32;
  var $i10: i32;
  var $i53: i32;
  var $i8: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 733} {:cexpr "vfio_fill_vconfig_bytes:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 734} {:cexpr "vfio_fill_vconfig_bytes:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.11, $p5);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i2, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i22 := $i8;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i1, $i2;
    goto $bb4;

  $bb4:
    call $i11, $i12, $i13, $p14, $p15, $p16, $i17, $p18, $i19, $i20, $i21, $i23, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $p43, $p44, $i45, $p46, $i47, $i48, $i49, $i40, $i41, $i42, $i24, $i25, $i26, $i27, $i50, $i51, $i52, $i9, $i10, $i53 := vfio_fill_vconfig_bytes_loop_$bb4($p0, $p3, $p4, $p6, $i11, $i12, $i13, $p14, $p15, $p16, $i17, $p18, $i19, $i20, $i21, $i23, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $p43, $p44, $i45, $p46, $i47, $i48, $i49, $i40, $i41, $i42, $i24, $i25, $i26, $i27, $i50, $i51, $i52, $i9, $i10, $i53);
    goto $bb4_last;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 3);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i10, 1);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.11, $p43);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i9);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p44, $mul.ref($i45, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i47 := pci_read_config_byte($p6, $i9, $p46);
    call {:si_unique_call 740} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i49 := $i47;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i9, $i47, 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i24, $i25, $i26, $i27 := $i40, $i10, $i41, $i42;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i24, $i27);
    call {:si_unique_call 737} {:cexpr "offset"} boogie_si_record_i32($i50);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32($i25, $i27);
    call {:si_unique_call 738} {:cexpr "size"} boogie_si_record_i32($i51);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i53 := $i26;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i8 := $i53;
    goto $bb3;

  $bb28:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i9, $i10 := $i50, $i51;
    goto $bb28_dummy;

  $bb25:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i22 := $i49;
    goto $bb13;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i9, 1);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb18;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.11, $p31);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i9);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p33, $mul.ref($i34, 2));
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i36 := pci_read_config_word($p6, $i9, $p4);
    call {:si_unique_call 742} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.5, $p4);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p35, $i39);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42 := $i9, $i36, 2;
    goto $bb24;

  $bb21:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i22 := $i38;
    goto $bb13;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i9, 3);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.11, $p14);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i9);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 4));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i19 := pci_read_config_dword($p6, $i9, $p3);
    call {:si_unique_call 736} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.19, $p3);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p18, $i23);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i24, $i25, $i26, $i27 := $i9, $i10, $i19, 4;
    goto $bb15;

  $bb11:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb13;

  $bb28_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3512;
}



const vfio_cap_init: ref;

axiom vfio_cap_init == $sub.ref(0, 234065);

procedure vfio_cap_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.11, $M.26, $CurrAddr;



implementation vfio_cap_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $i42: i8;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $i52: i8;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $i61: i32;
  var $i63: i32;
  var $i75: i1;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i64;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i64;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i8;
  var $i103: i32;
  var $i105: i32;
  var $i106: i1;
  var $i76: i32;
  var $i107: i8;
  var $i108: i32;
  var $i109: i32;
  var $i110: i64;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i8;
  var $i115: i32;
  var $i116: i64;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i8;
  var $i131: i32;
  var $i132: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i134: i32;
  var $i62: i32;
  var $i135: i1;
  var $i136: i32;
  var $i133: i32;
  var $i24: i32;
  var $i74: i32;
  var $i138: i32;
  var $i137: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i16;
  var $i145: i32;
  var $i146: i32;
  var $i147: i16;
  var $i11: i32;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.11, $p5);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(56, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.11, $p7);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i9 := pci_read_config_word($p6, 6, $p1);
    call {:si_unique_call 748} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.5, $p1);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i16 := pci_read_config_byte($p6, 52, $p2);
    call {:si_unique_call 750} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.11, $p18);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(52, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.20, $p2);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i24 := 0;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i138 := $i24;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i137 := $i138;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i137, 0);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb58:
    assume $i139 == 1;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.11, $p140);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p142, $mul.ref(6, 2));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i144 := $load.i16($M.1, $p143);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i144);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 65519);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i16($i146);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p143, $i147);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i25, $p26, $i27 := 0, $p20, 48;
    goto $bb14;

  $bb14:
    call $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p64, $p65, $i66, $i67, $i69, $i70, $i71, $i72, $i73, $i61, $i63, $i75, $i77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i105, $i106, $i76, $i107, $i108, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p122, $p123, $i124, $i125, $i126, $p127, $i128, $i129, $i130, $i131, $i132, $i25, $p26, $i27, $i134, $i62, $i135, $i136, $i133, $i74, cmdloc_dummy_var_16, cmdloc_dummy_var_17, vslice_dummy_var_79, vslice_dummy_var_80 := vfio_cap_init_loop_$bb14($p0, $p2, $p3, $p4, $p6, $p8, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p64, $p65, $i66, $i67, $i69, $i70, $i71, $i72, $i73, $i61, $i63, $i75, $i77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i105, $i106, $i76, $i107, $i108, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p122, $p123, $i124, $i125, $i126, $p127, $i128, $i129, $i130, $i131, $i132, $i25, $p26, $i27, $i134, $i62, $i135, $i136, $i133, $i74, cmdloc_dummy_var_16, cmdloc_dummy_var_17, vslice_dummy_var_79, vslice_dummy_var_80);
    goto $bb14_last;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i134 := $i27;
    goto $bb53;

  $bb53:
    call $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p64, $p65, $i66, $i67, $i69, $i70, $i71, $i72, $i73, $i61, $i63, $i134, $i62, $i135, $i136, $i74, vslice_dummy_var_79 := vfio_cap_init_loop_$bb53($p0, $p2, $p3, $p4, $p6, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $p64, $p65, $i66, $i67, $i69, $i70, $i71, $i72, $i73, $i61, $i63, $i25, $p26, $i134, $i62, $i135, $i136, $i74, vslice_dummy_var_79);
    goto $bb53_last;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i134, 1);
    call {:si_unique_call 769} {:cexpr "loops"} boogie_si_record_i32($i62);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i136 := $i25;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i137 := $i136;
    goto $bb56;

  $bb54:
    assume $i135 == 1;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.20, $p2);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i30 := pci_read_config_byte($p6, $i29, $p3);
    call {:si_unique_call 752} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.20, $p2);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i36 := pci_read_config_byte($p6, $i35, $p4);
    call {:si_unique_call 754} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.21, $p3);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i41 := $ule.i32($i40, 19);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i61, $i63 := $i62, $i59;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32(0, $i63);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.20, $p2);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i109 := $udiv.i32($i108, 4);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i110 := $zext.i32.i64($i109);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p8, $mul.ref($i110, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.21, $p3);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i115 := $sdiv.i32($i63, 4);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i115);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.1;
    call {:si_unique_call 765} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p111, $i114, $i116, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_17;
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.20, $p2);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i119 := vfio_fill_vconfig_bytes($p0, $i118, $i63);
    call {:si_unique_call 767} {:cexpr "ret"} boogie_si_record_i32($i119);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i121 := $i119;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.11, $p122);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.20, $p2);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i64($i124);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i126 := $add.i64($i125, 1);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p123, $mul.ref($i126, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.23, $p4);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p2, $i128);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i129 := $add.i32($i25, 1);
    call {:si_unique_call 768} {:cexpr "caps"} boogie_si_record_i32($i129);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.20, $p2);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i130);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i133 := $i129;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i24 := $i133;
    goto $bb13;

  $bb51:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    $i25, $p26, $i27 := $i129, $p127, $i61;
    goto $bb51_dummy;

  $bb48:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i11 := $i121;
    goto $bb3;

  $bb36:
    assume $i75 == 1;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb39;

  $bb39:
    call $i77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i105, $i106, $i76, vslice_dummy_var_80 := vfio_cap_init_loop_$bb39($p2, $p3, $p6, $p8, $i63, $i77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i105, $i106, $i76, vslice_dummy_var_80);
    goto $bb39_last;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.20, $p2);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, $i76);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i80 := $sdiv.i32($i79, 4);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i80);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p8, $mul.ref($i81, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.1, $p82);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 255);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i88 := ldv__builtin_expect($i87, 1);
    call {:si_unique_call 761} {:cexpr "tmp___0"} boogie_si_record_i64($i88);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p91 := dev_name($p90);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.20, $p2);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, $i76);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.20, $p2);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, $i76);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i97);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p8, $mul.ref($i98, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.1, $p99);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.21, $p3);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vslice_dummy_var_80 := printk.ref.ref.ref.i32.i32.i32(.str.24, .str.23, $p91, $i94, $i101, $i103);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i76, 4);
    call {:si_unique_call 762} {:cexpr "i"} boogie_si_record_i32($i105);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i105, $i63);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i106 == 1);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb45:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i76 := $i105;
    goto $bb45_dummy;

  $bb41:
    assume $i89 == 1;
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb31:
    assume $i60 == 1;
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p65 := dev_name($p64);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.21, $p3);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} vslice_dummy_var_79 := printk.ref.ref.ref.i32(.str.22, .str.23, $p65, $i67);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.23, $p4);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p26, $i69);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.23, $p4);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p2, $i70);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.20, $p2);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i74 := $i25;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i138 := $i74;
    goto $bb57;

  $bb33:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i134 := $i62;
    goto $bb33_dummy;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.21, $p3);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref($i44, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.22, $p45);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    call {:si_unique_call 755} {:cexpr "len"} boogie_si_record_i32($i47);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 255);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i58 := $i47;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb30;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.21, $p3);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.20, $p2);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i55 := vfio_cap_len($p0, $i51, $i54);
    call {:si_unique_call 757} {:cexpr "len"} boogie_si_record_i32($i55);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i57 := $i55;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i58 := $i55;
    goto $bb29;

  $bb26:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i11 := $i57;
    goto $bb3;

  $bb19:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i11 := $i38;
    goto $bb3;

  $bb16:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i11 := $i32;
    goto $bb3;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;

  $bb45_dummy:
    assume false;
    return;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3674;

  $bb33_dummy:
    assume false;
    return;

  $bb53_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3746;

  $bb51_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3607;
}



const vfio_ecap_init: ref;

axiom vfio_ecap_init == $sub.ref(0, 235097);

procedure vfio_ecap_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.25, $CurrAddr;



implementation vfio_ecap_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i56: i64;
  var $i57: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i58: i16;
  var $i59: i32;
  var $i60: i16;
  var $i46: i16;
  var $i47: i32;
  var $i49: i16;
  var $i50: i32;
  var $i76: i16;
  var $i77: i32;
  var $i78: i16;
  var $i79: i32;
  var $i80: i8;
  var $i81: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i64;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i64;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i107: i32;
  var $i108: i1;
  var $i82: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i64;
  var $p112: ref;
  var $i113: i32;
  var $i114: i8;
  var $i115: i32;
  var $i116: i64;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $p133: ref;
  var $i135: i32;
  var $i134: i32;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $i143: i16;
  var $i144: i32;
  var $i145: i32;
  var $i146: i16;
  var $i147: i32;
  var $i148: i1;
  var $i17: i32;
  var $i18: i16;
  var $p19: ref;
  var $i20: i32;
  var $i48: i32;
  var $i22: i16;
  var $i150: i32;
  var $i151: i1;
  var $i149: i32;
  var $i16: i32;
  var $i152: i32;
  var $i75: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i9: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.11, $p2);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(56, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.11, $p4);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(383, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.11, $p6);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(1296, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 256));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i13 := $sdiv.i32($i12, 4);
    call {:si_unique_call 771} {:cexpr "loops"} boogie_si_record_i32($i13);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, 1);
    call {:si_unique_call 772} {:cexpr "loops"} boogie_si_record_i32($i14);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i13, 0);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i16 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i153 := $i16;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 0);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb55:
    assume $i154 == 1;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.11, $p155);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p157, $mul.ref(256, 4));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p158, 0);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i17, $i18, $p19, $i20 := $i14, 256, $0.ref, 0;
    goto $bb8;

  $bb8:
    call $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p51, $p52, $i53, $i54, $i56, $i57, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i58, $i59, $i60, $i46, $i47, $i49, $i50, $i76, $i77, $i78, $i79, $i80, $i81, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $p96, $i97, $i98, $i99, $i100, $i101, $p102, $i103, $i104, $i105, $i107, $i108, $i82, $i109, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p122, $p123, $p124, $i125, $p126, $i127, $i128, $p129, $p130, $p131, $i132, $p133, $i135, $i134, $p136, $p137, $p138, $i139, $p140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i17, $i18, $p19, $i20, $i48, $i22, $i150, $i151, $i149, $i152, $i75, cmdloc_dummy_var_18, cmdloc_dummy_var_19, vslice_dummy_var_81, vslice_dummy_var_82 := vfio_ecap_init_loop_$bb8($p0, $p1, $p3, $p5, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p51, $p52, $i53, $i54, $i56, $i57, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i58, $i59, $i60, $i46, $i47, $i49, $i50, $i76, $i77, $i78, $i79, $i80, $i81, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $p96, $i97, $i98, $i99, $i100, $i101, $p102, $i103, $i104, $i105, $i107, $i108, $i82, $i109, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p122, $p123, $p124, $i125, $p126, $i127, $i128, $p129, $p130, $p131, $i132, $p133, $i135, $i134, $p136, $p137, $p138, $i139, $p140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i17, $i18, $p19, $i20, $i48, $i22, $i150, $i151, $i149, $i152, $i75, cmdloc_dummy_var_18, cmdloc_dummy_var_19, vslice_dummy_var_81, vslice_dummy_var_82);
    goto $bb8_last;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i48, $i22 := $i17, $i18;
    goto $bb50;

  $bb50:
    call $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p51, $p52, $i53, $i54, $i56, $i57, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i58, $i59, $i60, $i46, $i47, $i49, $i50, $i48, $i22, $i150, $i151, $i152, $i75, vslice_dummy_var_81 := vfio_ecap_init_loop_$bb50($p0, $p1, $p3, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p51, $p52, $i53, $i54, $i56, $i57, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i58, $i59, $i60, $i46, $i47, $i49, $i50, $p19, $i20, $i48, $i22, $i150, $i151, $i152, $i75, vslice_dummy_var_81);
    goto $bb50_last;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i22);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i151 := $ugt.i32($i150, 255);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i152 := $i20;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i153 := $i152;
    goto $bb53;

  $bb51:
    assume $i151 == 1;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i22);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $i23 := pci_read_config_dword($p3, $i21, $p1);
    call {:si_unique_call 774} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.19, $p1);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    call {:si_unique_call 775} {:cexpr "ecap"} boogie_si_record_i16($i27);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i29 := $ule.i32($i28, 27);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i46, $i47, $i49, $i50 := $i22, $i48, $i27, $i44;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i76, $i77, $i78, $i79, $i80 := $i46, $i47, $i49, $i50, 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32(0, $i79);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i76);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i110 := $udiv.i32($i109, 4);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i111 := $zext.i32.i64($i110);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p5, $mul.ref($i111, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i78);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i115 := $sdiv.i32($i79, 4);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i115);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.1;
    call {:si_unique_call 789} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p112, $i114, $i116, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_19;
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i76);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i118 := vfio_fill_vconfig_bytes($p0, $i117, $i79);
    call {:si_unique_call 791} {:cexpr "ret"} boogie_si_record_i32($i118);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i120 := $i118;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i8.i1($i80);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i121 == 1);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i20, 1);
    call {:si_unique_call 792} {:cexpr "ecaps"} boogie_si_record_i32($i135);
    assume {:verifier.code 0} true;
    $i134 := $i135;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.11, $p136);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i64($i76);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p138, $mul.ref($i139, 4));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.19, $p1);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i142 := $lshr.i32($i141, 20);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i142);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i144 := $zext.i16.i32($i143);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i145 := $and.i32($i144, 4092);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i16($i145);
    call {:si_unique_call 793} {:cexpr "epos"} boogie_si_record_i16($i146);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i147 := $sub.i32($i77, 1);
    call {:si_unique_call 794} {:cexpr "loops"} boogie_si_record_i32($i147);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i77, 0);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i149 := $i134;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i16 := $i149;
    goto $bb7;

  $bb48:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $i17, $i18, $p19, $i20 := $i147, $i146, $p140, $i134;
    goto $bb48_dummy;

  $bb45:
    assume $i121 == 1;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.11, $p122);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i64($i76);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p124, $mul.ref($i125, 4));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.1, $p126);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, $sub.i32(0, 4194304));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.11, $p129);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i64($i76);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p131, $mul.ref($i132, 4));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p133, $i128);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i134 := $i20;
    goto $bb47;

  $bb42:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i9 := $i120;
    goto $bb3;

  $bb30:
    assume $i81 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb33;

  $bb33:
    call $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $p96, $i97, $i98, $i99, $i100, $i101, $p102, $i103, $i104, $i105, $i107, $i108, $i82, vslice_dummy_var_82 := vfio_ecap_init_loop_$bb33($p3, $p5, $i76, $i78, $i79, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $p96, $i97, $i98, $i99, $i100, $i101, $p102, $i103, $i104, $i105, $i107, $i108, $i82, vslice_dummy_var_82);
    goto $bb33_last;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i76);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, $i82);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i85 := $sdiv.i32($i84, 4);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i85);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p5, $mul.ref($i86, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.1, $p87);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 255);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i91 := $zext.i1.i32($i90);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i91);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i93 := ldv__builtin_expect($i92, 1);
    call {:si_unique_call 785} {:cexpr "tmp___0"} boogie_si_record_i64($i93);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $p96 := dev_name($p95);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i76);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, $i82);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i76);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, $i82);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i100);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p5, $mul.ref($i101, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.1, $p102);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i78);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} vslice_dummy_var_82 := printk.ref.ref.ref.i32.i32.i32(.str.29, .str.28, $p96, $i98, $i104, $i105);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i82, 4);
    call {:si_unique_call 786} {:cexpr "i"} boogie_si_record_i32($i107);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i107, $i79);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i108 == 1);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb39:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i82 := $i107;
    goto $bb39_dummy;

  $bb35:
    assume $i94 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p52 := dev_name($p51);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i27);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i22);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_81 := printk.ref.ref.ref.i32.i32(.str.27, .str.28, $p52, $i53, $i54);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p19);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i58, $i59, $i60 := $i22, $i48, $i27;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i76, $i77, $i78, $i79, $i80 := $i58, $i59, $i60, 4, 1;
    goto $bb29;

  $bb24:
    assume $i57 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.19, $p1);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i62 := $lshr.i32($i61, 20);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 4092);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    call {:si_unique_call 781} {:cexpr "epos"} boogie_si_record_i16($i66);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    call {:si_unique_call 782} {:cexpr "val"} boogie_si_record_i32($i67);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.1, $p19);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 4194303);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, $i69);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p19);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i71 := $shl.i32($i67, 20);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i70, $i71);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, $i72);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i48, 1);
    call {:si_unique_call 783} {:cexpr "loops"} boogie_si_record_i32($i73);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i48, 0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i75 := $i20;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i153 := $i75;
    goto $bb53;

  $bb26:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i48, $i22 := $i73, $i66;
    goto $bb26_dummy;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i27);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref($i31, 2));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.24, $p32);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    call {:si_unique_call 776} {:cexpr "len"} boogie_si_record_i32($i34);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 255);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i34;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb21;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i27);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i22);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i40 := vfio_ext_cap_len($p0, $i37, $i39);
    call {:si_unique_call 778} {:cexpr "len"} boogie_si_record_i32($i40);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i42 := $i23;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    goto $bb20;

  $bb17:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i9 := $i42;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i9 := $i25;
    goto $bb3;

  $bb39_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3864;

  $bb26_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3950;

  $bb48_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;
}



const pcibios_err_to_errno: ref;

axiom pcibios_err_to_errno == $sub.ref(0, 236129);

procedure pcibios_err_to_errno($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pcibios_err_to_errno($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} {:cexpr "pcibios_err_to_errno:arg:err"} boogie_si_record_i32($i0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 135);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 136);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 137);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 137);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 25);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 28);
    goto $bb3;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 5);
    goto $bb3;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 14);
    goto $bb3;

  $bb6:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 131);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 134);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 19);
    goto $bb3;

  $bb17:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, 131);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb14;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 22);
    goto $bb3;

  $bb15:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i0, 129);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb14;

  $bb21:
    assume $i10 == 1;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 2);
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const vfio_ext_cap_len: ref;

axiom vfio_ext_cap_len == $sub.ref(0, 237161);

procedure vfio_ext_cap_len($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $CurrAddr;



implementation vfio_ext_cap_len($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $i82: i8;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i25: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 798} {:cexpr "vfio_ext_cap_len:arg:ecap"} boogie_si_record_i16($i1);
    call {:si_unique_call 799} {:cexpr "vfio_ext_cap_len:arg:epos"} boogie_si_record_i16($i2);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.11, $p5);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i7, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p107 := dev_name($p106);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i1);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i2);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vslice_dummy_var_83 := printk.ref.ref.ref.i32.i32(.str.30, $p107, .str.31, $i108, $i109);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i2);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, 4);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i92 := pci_read_config_dword($p6, $i91, $p4);
    call {:si_unique_call 803} {:cexpr "ret"} boogie_si_record_i32($i92);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.19, $p4);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 1536);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 512);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i25 := 12;
    goto $bb31;

  $bb54:
    assume $i97 == 1;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.25, $p3);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 134152192);
    call {:si_unique_call 827} {:cexpr "sts"} boogie_si_record_i32($i100);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i101 := $ashr.i32($i100, 16);
    call {:si_unique_call 828} {:cexpr "sts"} boogie_si_record_i32($i101);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i102 := $mul.i32($i101, 2);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i102, $sub.i32(0, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i104 := $or.i32($i103, 3);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i104, 13);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i25 := $i105;
    goto $bb31;

  $bb51:
    assume $i93 == 1;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i94 := pcibios_err_to_errno($i92);
    call {:si_unique_call 826} {:cexpr "tmp___5"} boogie_si_record_i32($i94);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i25 := $i94;
    goto $bb31;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i2);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 4);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i75 := pci_read_config_byte($p6, $i74, $p3);
    call {:si_unique_call 801} {:cexpr "ret"} boogie_si_record_i32($i75);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.25, $p3);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 31);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p3, $i81);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.25, $p3);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i83, 3);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p3, $i86);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.25, $p3);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 16);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i25 := $i89;
    goto $bb31;

  $bb48:
    assume $i76 == 1;
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i77 := pcibios_err_to_errno($i75);
    call {:si_unique_call 824} {:cexpr "tmp___4"} boogie_si_record_i32($i77);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i25 := $i77;
    goto $bb31;

  $bb4:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i2);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 8);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i58 := pci_read_config_byte($p6, $i57, $p3);
    call {:si_unique_call 805} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.25, $p3);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 224);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p3, $i64);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.25, $p3);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i67 := $ashr.i32($i66, 5);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p3, $i68);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.25, $p3);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i71 := $mul.i32($i70, 8);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, 4);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i25 := $i72;
    goto $bb31;

  $bb45:
    assume $i59 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i60 := pcibios_err_to_errno($i58);
    call {:si_unique_call 822} {:cexpr "tmp___3"} boogie_si_record_i32($i60);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i25 := $i60;
    goto $bb31;

  $bb11:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i2);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 4);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i33 := pci_read_config_byte($p6, $i32, $p3);
    call {:si_unique_call 807} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.25, $p3);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 32);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i25 := 8;
    goto $bb31;

  $bb36:
    assume $i39 == 1;
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i2);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 5);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i42 := pci_read_config_byte($p6, $i41, $p3);
    call {:si_unique_call 817} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.25, $p3);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i53 := 256;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i54 := $sdiv.i32($i53, 8);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i54, 8);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i25 := $i55;
    goto $bb31;

  $bb41:
    assume $i47 == 1;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.25, $p3);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, $sub.i32(0, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, 31);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 1);
    call {:si_unique_call 820} {:cexpr "bits"} boogie_si_record_i32($i52);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb43;

  $bb38:
    assume $i43 == 1;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i44 := pcibios_err_to_errno($i42);
    call {:si_unique_call 819} {:cexpr "tmp___2"} boogie_si_record_i32($i44);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i25 := $i44;
    goto $bb31;

  $bb33:
    assume $i34 == 1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i35 := pcibios_err_to_errno($i33);
    call {:si_unique_call 815} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i25 := $i35;
    goto $bb31;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i7, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i7, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i7, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb19:
    assume $i16 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i2);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 4);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i22 := pci_read_config_dword($p6, $i21, $p4);
    call {:si_unique_call 809} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.19, $p4);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i32($i26, 20);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i25 := $i27;
    goto $bb31;

  $bb29:
    assume $i23 == 1;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i24 := pcibios_err_to_errno($i22);
    call {:si_unique_call 813} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb31;

  $bb17:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i7, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i2);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i30 := vfio_vc_cap_len($p0, $i29);
    call {:si_unique_call 811} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i25 := $i30;
    goto $bb31;

  $bb15:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i7, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb26;

  $bb24:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb27:
    assume $i19 == 1;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    goto $bb22;
}



const vfio_vc_cap_len: ref;

axiom vfio_vc_cap_len == $sub.ref(0, 238193);

procedure vfio_vc_cap_len($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation vfio_vc_cap_len($p0: ref, $i1: i16) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i25: i32;
  var $i21: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 832} {:cexpr "vfio_vc_cap_len:arg:pos"} boogie_si_record_i16($i1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.11, $p3);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 4);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i7 := pci_read_config_dword($p4, $i6, $p2);
    call {:si_unique_call 834} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.19, $p2);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 7);
    call {:si_unique_call 837} {:cexpr "evcc"} boogie_si_record_i32($i12);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i1);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 8);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i15 := pci_read_config_dword($p4, $i14, $p2);
    call {:si_unique_call 839} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.19, $p2);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 8);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.19, $p2);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 4);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.19, $p2);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 2);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i25 := $i29;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i21 := $i25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i21, 4);
    call {:si_unique_call 842} {:cexpr "vc_arb"} boogie_si_record_i32($i30);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i12, 1);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i31, 12);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 16);
    call {:si_unique_call 843} {:cexpr "len"} boogie_si_record_i32($i33);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i30, 0);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i33;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i10 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i33, $sub.i32(0, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, 15);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    call {:si_unique_call 844} {:cexpr "len"} boogie_si_record_i32($i37);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i38 := $sdiv.i32($i30, 8);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, $i37);
    call {:si_unique_call 845} {:cexpr "len"} boogie_si_record_i32($i39);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb19;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i29 := 32;
    goto $bb16;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i25 := 64;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i21 := 128;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i17 := pcibios_err_to_errno($i15);
    call {:si_unique_call 841} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i10 := $i17;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i9 := pcibios_err_to_errno($i7);
    call {:si_unique_call 836} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const vfio_cap_len: ref;

axiom vfio_cap_len == $sub.ref(0, 239225);

procedure vfio_cap_len($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.26, $CurrAddr, $M.1;



implementation vfio_cap_len($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i8;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i20: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 848} {:cexpr "vfio_cap_len:arg:cap"} boogie_si_record_i8($i1);
    call {:si_unique_call 849} {:cexpr "vfio_cap_len:arg:pos"} boogie_si_record_i8($i2);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.11, $p5);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i7, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p72 := dev_name($p71);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i1);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i2);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_84 := printk.ref.ref.ref.i32.i32(.str.25, $p72, .str.26, $i73, $i74);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i2);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i59, 4);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $i61 := pci_read_config_byte($p6, $i60, $p4);
    call {:si_unique_call 851} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.26, $p4);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 15);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i8($i66);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p4, $i67);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.26, $p4);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 15);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i70 == 1);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i20 := 8;
    goto $bb21;

  $bb44:
    assume $i70 == 1;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i20 := 16;
    goto $bb21;

  $bb41:
    assume $i62 == 1;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i63 := pcibios_err_to_errno($i61);
    call {:si_unique_call 871} {:cexpr "tmp___5"} boogie_si_record_i32($i63);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i20 := $i63;
    goto $bb21;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i7, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i2);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 2);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i41 := pci_read_config_word($p6, $i40, $p3);
    call {:si_unique_call 853} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.5, $p3);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 15);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i47 == 1);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(383, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p48, 1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i20 := 44;
    goto $bb21;

  $bb33:
    assume $i47 == 1;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i20 := 20;
    goto $bb21;

  $bb30:
    assume $i42 == 1;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i43 := pcibios_err_to_errno($i41);
    call {:si_unique_call 867} {:cexpr "tmp___2"} boogie_si_record_i32($i43);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i20 := $i43;
    goto $bb21;

  $bb4:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i2);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 2);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i34 := pci_read_config_byte($p6, $i33, $p4);
    call {:si_unique_call 855} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.26, $p4);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i20 := $i38;
    goto $bb21;

  $bb27:
    assume $i35 == 1;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i36 := pcibios_err_to_errno($i34);
    call {:si_unique_call 865} {:cexpr "tmp___1"} boogie_si_record_i32($i36);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i20 := $i36;
    goto $bb21;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i7, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i7, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i15 == 1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i2);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 3);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i51 := pci_read_config_byte($p6, $i50, $p4);
    call {:si_unique_call 859} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.26, $p4);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 224);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := 28;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i20 := $i58;
    goto $bb21;

  $bb38:
    assume $i57 == 1;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i58 := 24;
    goto $bb40;

  $bb35:
    assume $i52 == 1;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i53 := pcibios_err_to_errno($i51);
    call {:si_unique_call 869} {:cexpr "tmp___3"} boogie_si_record_i32($i53);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i20 := $i53;
    goto $bb21;

  $bb17:
    assume $i15 == 1;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i2);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 2);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $i23 := pci_read_config_word($p6, $i22, $p3);
    call {:si_unique_call 857} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.5, $p3);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i28 := $ashr.i32($i27, 12);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 3);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i30 == 1);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i20 := 8;
    goto $bb21;

  $bb25:
    assume $i30 == 1;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(383, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p31, 1);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i20 := 24;
    goto $bb21;

  $bb22:
    assume $i24 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $i25 := pcibios_err_to_errno($i23);
    call {:si_unique_call 863} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb21;

  $bb15:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i7, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb19:
    assume $i16 == 1;
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i2);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i19 := vfio_msi_cap_len($p0, $i18);
    call {:si_unique_call 861} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb21;
}



const vfio_msi_cap_len: ref;

axiom vfio_msi_cap_len == $sub.ref(0, 240257);

procedure vfio_msi_cap_len($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.1, $CurrAddr;



implementation vfio_msi_cap_len($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 875} {:cexpr "vfio_msi_cap_len:arg:pos"} boogie_si_record_i8($i1);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.11, $p3);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 2);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i7 := pci_read_config_word($p4, $i6, $p2);
    call {:si_unique_call 877} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.5, $p2);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 128);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := 10;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.5, $p2);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 256);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i16;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(72, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.11, $p23);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p27 := kmalloc(32, 208);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(72, 1));
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p29, $p27);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(72, 1));
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.11, $p30);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(72, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.11, $p34);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.5, $p2);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i39 := init_pci_cap_msi_perm($p35, $i22, $i38);
    call {:si_unique_call 884} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i10 := $i39;
    goto $bb3;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i10 := $i22;
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i16, 10);
    call {:si_unique_call 881} {:cexpr "len"} boogie_si_record_i32($i21);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i15 := $add.i32(10, 4);
    call {:si_unique_call 880} {:cexpr "len"} boogie_si_record_i32($i15);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i9 := pcibios_err_to_errno($i7);
    call {:si_unique_call 879} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const init_pci_cap_msi_perm: ref;

axiom init_pci_cap_msi_perm == $sub.ref(0, 241289);

procedure init_pci_cap_msi_perm($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_pci_cap_msi_perm($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} {:cexpr "init_pci_cap_msi_perm:arg:len"} boogie_si_record_i32($i1);
    call {:si_unique_call 886} {:cexpr "init_pci_cap_msi_perm:arg:flags"} boogie_si_record_i16($i2);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i3 := alloc_perm_bits($p0, $i1);
    call {:si_unique_call 888} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, vfio_msi_config_read);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, vfio_msi_config_write);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} p_setb($p0, 1, $sub.i8(0, 1), 0);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} p_setb($p0, 2, $sub.i8(0, 1), $sub.i8(0, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} p_setd($p0, 4, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i2);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 128);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} p_setw($p0, 8, $sub.i16(0, 1), $sub.i16(0, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i2);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 256);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} p_setd($p0, 12, 0, $sub.i32(0, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} p_setd($p0, 16, 0, $sub.i32(0, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} p_setd($p0, 8, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} p_setw($p0, 12, $sub.i16(0, 1), $sub.i16(0, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i2);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 256);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} p_setd($p0, 16, 0, $sub.i32(0, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} p_setd($p0, 20, 0, $sub.i32(0, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const alloc_perm_bits: ref;

axiom alloc_perm_bits == $sub.ref(0, 242321);

procedure alloc_perm_bits($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation alloc_perm_bits($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} {:cexpr "alloc_perm_bits:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 3);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    call {:si_unique_call 900} {:cexpr "size"} boogie_si_record_i32($i4);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $p6 := kzalloc($i5, 208);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p7, $p6);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i4);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p9 := kzalloc($i8, 208);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p9);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, vfio_default_config_read);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, vfio_default_config_write);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} free_perm_bits($p0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;
}



const vfio_msi_config_read: ref;

axiom vfio_msi_config_read == $sub.ref(0, 243353);

procedure vfio_msi_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.28, $CurrAddr;



implementation vfio_msi_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i16;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} {:cexpr "vfio_msi_config_read:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 905} {:cexpr "vfio_msi_config_read:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 906} {:cexpr "vfio_msi_config_read:arg:offset"} boogie_si_record_i32($i4);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i4, 2);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i28 := vfio_default_config_read($p0, $i1, $i2, $p3, $i4, $p5);
    call {:si_unique_call 910} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i4, $i2);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 1);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i9 := vfio_find_cap_start($p0, $i1);
    call {:si_unique_call 908} {:cexpr "start"} boogie_si_record_i32($i9);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i9);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 2));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.1, $p14);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 65521);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p14, $i18);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.1, $p14);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(344, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i16($i22);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 1);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i20, $i25);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p14, $i27);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vfio_msi_config_write: ref;

axiom vfio_msi_config_write == $sub.ref(0, 244385);

procedure vfio_msi_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.27, $M.28, $CurrAddr;



implementation vfio_msi_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $i46: i16;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} {:cexpr "vfio_msi_config_write:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 912} {:cexpr "vfio_msi_config_write:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 913} {:cexpr "vfio_msi_config_write:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 914} {:cexpr "vfio_msi_config_write:arg:val"} boogie_si_record_i32($i5);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i6 := vfio_default_config_write($p0, $i1, $i2, $p3, $i4, $i5);
    call {:si_unique_call 916} {:cexpr "count"} boogie_si_record_i32($i6);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i4, 2);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i4, $i6);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 1);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i12 := vfio_find_cap_start($p0, $i1);
    call {:si_unique_call 918} {:cexpr "start"} boogie_si_record_i32($i12);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i12);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 2);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p14, $mul.ref($i16, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.1, $p18);
    call {:si_unique_call 919} {:cexpr "flags"} boogie_si_record_i16($i19);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 1);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i19;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 112);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i29 := $ashr.i32($i28, 4);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(344, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.1, $p30);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i29, $i32);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i26;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p18, $i46);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i12, 2);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i46);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i52 := pci_user_write_config_word($p48, $i49, $i51);
    call {:si_unique_call 924} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i53 == 1;
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i54 := pcibios_err_to_errno($i52);
    call {:si_unique_call 926} {:cexpr "tmp"} boogie_si_record_i32($i54);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i8 := $i54;
    goto $bb3;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i26);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 65423);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    call {:si_unique_call 921} {:cexpr "flags"} boogie_si_record_i16($i36);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(344, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 4);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i42 := $sext.i16.i32($i41);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i43 := $sext.i16.i32($i36);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i42, $i43);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    call {:si_unique_call 922} {:cexpr "flags"} boogie_si_record_i16($i45);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb15;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i19);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 65534);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    call {:si_unique_call 920} {:cexpr "flags"} boogie_si_record_i16($i25);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const p_setb: ref;

axiom p_setb == $sub.ref(0, 245417);

procedure p_setb($p0: ref, $i1: i32, $i2: i8, $i3: i8);
  free requires assertsPassed;
  modifies $M.1;



implementation p_setb($p0: ref, $i1: i32, $i2: i8, $i3: i8)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} {:cexpr "p_setb:arg:off"} boogie_si_record_i32($i1);
    call {:si_unique_call 928} {:cexpr "p_setb:arg:virt"} boogie_si_record_i8($i2);
    call {:si_unique_call 929} {:cexpr "p_setb:arg:write"} boogie_si_record_i8($i3);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i1);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 1));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p7, $i2);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i1);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p11, $i3);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    return;
}



const p_setd: ref;

axiom p_setd == $sub.ref(0, 246449);

procedure p_setd($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation p_setd($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} {:cexpr "p_setd:arg:off"} boogie_si_record_i32($i1);
    call {:si_unique_call 931} {:cexpr "p_setd:arg:virt"} boogie_si_record_i32($i2);
    call {:si_unique_call 932} {:cexpr "p_setd:arg:write"} boogie_si_record_i32($i3);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i1);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 4));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, $i2);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 4));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p13, $i3);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    return;
}



const p_setw: ref;

axiom p_setw == $sub.ref(0, 247481);

procedure p_setw($p0: ref, $i1: i32, $i2: i16, $i3: i16);
  free requires assertsPassed;
  modifies $M.1;



implementation p_setw($p0: ref, $i1: i32, $i2: i16, $i3: i16)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} {:cexpr "p_setw:arg:off"} boogie_si_record_i32($i1);
    call {:si_unique_call 934} {:cexpr "p_setw:arg:virt"} boogie_si_record_i16($i2);
    call {:si_unique_call 935} {:cexpr "p_setw:arg:write"} boogie_si_record_i16($i3);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i1);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 2));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p8, $i2);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 2));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p13, $i3);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    return;
}



const vfio_default_config_write: ref;

axiom vfio_default_config_write == $sub.ref(0, 248513);

procedure vfio_default_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.27, $M.28, $CurrAddr;



implementation vfio_default_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i18: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 940} {:cexpr "vfio_default_config_write:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 941} {:cexpr "vfio_default_config_write:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 942} {:cexpr "vfio_default_config_write:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 943} {:cexpr "vfio_default_config_write:arg:val"} boogie_si_record_i32($i5);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, 0);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 0);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i2);
    call {:si_unique_call 944} {:cexpr "__len"} boogie_si_record_i64($i10);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p7);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i4);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.1;
    cmdloc_dummy_var_21 := $M.1;
    call {:si_unique_call 945} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p11, $p15, $i10, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_22;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p7);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i2);
    call {:si_unique_call 946} {:cexpr "__len___0"} boogie_si_record_i64($i19);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p6);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i4);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p22, $mul.ref($i23, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.1;
    cmdloc_dummy_var_24 := $M.1;
    call {:si_unique_call 947} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p20, $p24, $i19, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_25;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p7);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p6);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i25, $i26);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.1, $p6);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i54 := $xor.i32($i53, $sub.i32(0, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p7);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i54, $i55);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb8:
    assume $i57 == 1;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p9, 0);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i60 := vfio_user_config_read($p59, $i1, $p9, $i2);
    call {:si_unique_call 953} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p6);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i63 := $xor.i32($i62, $sub.i32(0, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p7);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i63, $i64);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i66 := $xor.i32($i65, $sub.i32(0, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.27, $p9);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i66, $i67);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p9, $i68);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.1, $p6);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i70 := $xor.i32($i69, $sub.i32(0, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p7);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i70, $i71);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, $i5);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.27, $p9);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i73, $i74);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p9, $i75);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.27, $p9);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i77 := vfio_user_config_write($p59, $i1, $i76, $i2);
    call {:si_unique_call 955} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i78 == 1;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i18 := $i77;
    goto $bb3;

  $bb10:
    assume $i61 == 1;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i18 := $i60;
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, 0);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i2);
    call {:si_unique_call 948} {:cexpr "__len___1"} boogie_si_record_i64($i29);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p8);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i1);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.1;
    cmdloc_dummy_var_27 := $M.1;
    call {:si_unique_call 949} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p30, $p34, $i29, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_28;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p7);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p6);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i35, $i36);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i38 := $xor.i32($i37, $sub.i32(0, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p8);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i38, $i39);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, $i40);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p7);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p6);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i41, $i42);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $i5);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p8);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i44, $i45);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, $i46);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i2);
    call {:si_unique_call 950} {:cexpr "__len___2"} boogie_si_record_i64($i47);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.1, $p48);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i1);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p49, $mul.ref($i50, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p8);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.1;
    cmdloc_dummy_var_30 := $M.1;
    call {:si_unique_call 951} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p51, $p52, $i47, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_31;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb3;
}



const pci_user_write_config_word: ref;

axiom pci_user_write_config_word == $sub.ref(0, 249545);

procedure pci_user_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_write_config_word($p0: ref, $i1: i32, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 956} {:cexpr "pci_user_write_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 957} {:cexpr "pci_user_write_config_word:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 1} true;
    call {:si_unique_call 958} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 959} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vfio_user_config_read: ref;

axiom vfio_user_config_read == $sub.ref(0, 250577);

procedure vfio_user_config_read($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.1, $CurrAddr;



implementation vfio_user_config_read($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i15: i32;
  var $i20: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $p6 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 963} {:cexpr "vfio_user_config_read:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 964} {:cexpr "vfio_user_config_read:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p4, 0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.28, $p4);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i20);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $i21 := pcibios_err_to_errno($i15);
    call {:si_unique_call 972} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i19 := pci_user_read_config_dword($p0, $i1, $p4);
    call {:si_unique_call 966} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i15 := $i19;
    goto $bb13;

  $bb4:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i16 := pci_user_read_config_word($p0, $i1, $p6);
    call {:si_unique_call 968} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.30, $p6);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p4, $i18);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb13;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i12 := pci_user_read_config_byte($p0, $i1, $p5);
    call {:si_unique_call 970} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.29, $p5);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p4, $i14);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb13;
}



const vfio_user_config_write: ref;

axiom vfio_user_config_write == $sub.ref(0, 251609);

procedure vfio_user_config_write($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_user_config_write($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i13: i32;
  var $i19: i32;

  $bb0:
    call {:si_unique_call 973} {:cexpr "vfio_user_config_write:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 974} {:cexpr "vfio_user_config_write:arg:val"} boogie_si_record_i32($i2);
    call {:si_unique_call 975} {:cexpr "vfio_user_config_write:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 976} {:cexpr "vfio_user_config_write:arg:tmp_val"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i19 := pcibios_err_to_errno($i13);
    call {:si_unique_call 984} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i18 := pci_user_write_config_dword($p0, $i1, $i2);
    call {:si_unique_call 978} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i2);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i17 := pci_user_write_config_word($p0, $i1, $i16);
    call {:si_unique_call 980} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb13;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb11:
    assume $i8 == 1;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i2);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i12 := pci_user_write_config_byte($p0, $i1, $i11);
    call {:si_unique_call 982} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb13;
}



const pci_user_write_config_byte: ref;

axiom pci_user_write_config_byte == $sub.ref(0, 252641);

procedure pci_user_write_config_byte($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_write_config_byte($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 985} {:cexpr "pci_user_write_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 986} {:cexpr "pci_user_write_config_byte:arg:arg2"} boogie_si_record_i8($i2);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 1} true;
    call {:si_unique_call 987} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 988} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_user_write_config_dword: ref;

axiom pci_user_write_config_dword == $sub.ref(0, 253673);

procedure pci_user_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_write_config_dword($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 989} {:cexpr "pci_user_write_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 990} {:cexpr "pci_user_write_config_dword:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 1} true;
    call {:si_unique_call 991} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 992} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_user_read_config_byte: ref;

axiom pci_user_read_config_byte == $sub.ref(0, 254705);

procedure pci_user_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 993} {:cexpr "pci_user_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 1} true;
    call {:si_unique_call 994} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 995} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_user_read_config_word: ref;

axiom pci_user_read_config_word == $sub.ref(0, 255737);

procedure pci_user_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 996} {:cexpr "pci_user_read_config_word:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 1} true;
    call {:si_unique_call 997} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 998} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_user_read_config_dword: ref;

axiom pci_user_read_config_dword == $sub.ref(0, 256769);

procedure pci_user_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_user_read_config_dword($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 999} {:cexpr "pci_user_read_config_dword:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1000} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1001} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vfio_default_config_read: ref;

axiom vfio_default_config_read == $sub.ref(0, 257801);

procedure vfio_default_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.28, $CurrAddr;



implementation vfio_default_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i29: i32;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1004} {:cexpr "vfio_default_config_read:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1005} {:cexpr "vfio_default_config_read:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1006} {:cexpr "vfio_default_config_read:arg:offset"} boogie_si_record_i32($i4);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p6, 0);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i2);
    call {:si_unique_call 1007} {:cexpr "__len"} boogie_si_record_i64($i8);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p5);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.1;
    cmdloc_dummy_var_33 := $M.1;
    call {:si_unique_call 1008} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p9, $p13, $i8, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_34;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i2);
    call {:si_unique_call 1009} {:cexpr "__len___0"} boogie_si_record_i64($i14);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p6);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i4);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.1;
    cmdloc_dummy_var_36 := $M.1;
    call {:si_unique_call 1010} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p15, $p19, $i14, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_37;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(4, $i2);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i21 := $mul.i32($i20, 8);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i32($sub.i32(0, 1), $i21);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p6);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i22, $i23);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i29 := $i2;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p7, 0);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i27 := vfio_user_config_read($p26, $i1, $p7, $i2);
    call {:si_unique_call 1012} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p6);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i31 := $xor.i32($i30, $sub.i32(0, 1));
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.31, $p7);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i31, $i32);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.1, $p5);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p6);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i34, $i35);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i33, $i36);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, $i37);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i29 := $i27;
    goto $bb5;
}



const free_perm_bits: ref;

axiom free_perm_bits == $sub.ref(0, 258833);

procedure free_perm_bits($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation free_perm_bits($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} kfree($p2);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} kfree($p4);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $0.ref);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, $0.ref);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_probe: ref;

axiom vfio_pci_probe == $sub.ref(0, 259865);

procedure vfio_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vfio_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i10: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_85 := pci_read_config_byte($p0, 14, $p2);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.32, $p2);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 14);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $p12 := iommu_group_get($p11);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $p15 := kzalloc(408, 208);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, $p0);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(0, 408)), $mul.ref(340, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p20, 3);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref(0, 408)), $mul.ref(152, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} __mutex_init($p21, .str.2, $p3);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p16, $mul.ref(0, 408)), $mul.ref(80, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_86 := spinlock_check($p22);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 408)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} __raw_spin_lock_init($p26, .str.3, $p4);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref(0, 408)), $mul.ref(400, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} atomic_set($p27, 0);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p16);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i30 := vfio_add_group_dev($p28, vfio_pci_ops, $p29);
    call {:si_unique_call 1027} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} iommu_group_put($p12);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p16);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} kfree($p32);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} iommu_group_put($p12);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const vfio_pci_remove: ref;

axiom vfio_pci_remove == $sub.ref(0, 260897);

procedure vfio_pci_remove($p0: ref);
  free requires assertsPassed;



implementation vfio_pci_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $p2 := vfio_del_group_dev($p1);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(152, 1)), $mul.ref(1136, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} iommu_group_put($p8);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} kfree($p9);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_del_group_dev: ref;

axiom vfio_del_group_dev == $sub.ref(0, 261929);

procedure vfio_del_group_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vfio_del_group_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p1 := external_alloc();
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const iommu_group_put: ref;

axiom iommu_group_put == $sub.ref(0, 262961);

procedure iommu_group_put($p0: ref);
  free requires assertsPassed;



implementation iommu_group_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    return;
}



const iommu_group_get: ref;

axiom iommu_group_get == $sub.ref(0, 263993);

procedure iommu_group_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation iommu_group_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p1 := external_alloc();
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 265025);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 266057);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 267089);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i1);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    return;
}



const vfio_add_group_dev: ref;

axiom vfio_add_group_dev == $sub.ref(0, 268121);

procedure vfio_add_group_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_add_group_dev($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1036} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1037} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vfio_direct_config_read: ref;

axiom vfio_direct_config_read == $sub.ref(0, 269153);

procedure vfio_direct_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.1, $CurrAddr;



implementation vfio_direct_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i11: i32;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} {:cexpr "vfio_direct_config_read:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1039} {:cexpr "vfio_direct_config_read:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1040} {:cexpr "vfio_direct_config_read:arg:offset"} boogie_si_record_i32($i4);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i8 := vfio_user_config_read($p7, $i1, $p5, $i2);
    call {:si_unique_call 1042} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i1, 255);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i13 := $sle.i32($i4, 3);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i1, 63);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i4, 0);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i4, 1);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i64(1, 63);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i32 == 1);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p5);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i1);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref($i41, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.1;
    cmdloc_dummy_var_48 := $M.1;
    call {:si_unique_call 1052} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p38, $p42, 1, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_49;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i32 == 1;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p5);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i1);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p35, $mul.ref($i36, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.1;
    cmdloc_dummy_var_45 := $M.1;
    call {:si_unique_call 1051} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p33, $p37, 1, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_46;
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb12:
    assume $i21 == 1;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i2, 1);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb15:
    assume $i22 == 1;
    call {:si_unique_call 1047} {:cexpr "vfio_direct_config_read:arg:_min2"} boogie_si_record_i32($i2);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32(2, $i2);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    call {:si_unique_call 1048} {:cexpr "vfio_direct_config_read:arg:tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i24 := $i2;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    call {:si_unique_call 1049} {:cexpr "__len___0"} boogie_si_record_i64($i25);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p5);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p28, $mul.ref($i29, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.1;
    cmdloc_dummy_var_42 := $M.1;
    call {:si_unique_call 1050} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p26, $p30, $i25, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_43;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i24 := 2;
    goto $bb19;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i2);
    call {:si_unique_call 1045} {:cexpr "vfio_direct_config_read:arg:__len"} boogie_si_record_i32($i2);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i1);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.1;
    cmdloc_dummy_var_39 := $M.1;
    call {:si_unique_call 1046} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p15, $p19, $i14, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_40;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i10 := pcibios_err_to_errno($i8);
    call {:si_unique_call 1044} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const main: ref;

axiom main == $sub.ref(0, 270185);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.35, $M.36, $M.1, $M.39, $M.40, $M.56, $M.37, $M.38, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.24, $M.22, $M.18, $M.59, $M.58, $M.57, $M.6, $M.7, $CurrAddr, $M.3, $M.10, $M.0, $M.2, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, assertsPassed, $M.9, $M.27, $M.31, $M.28, $M.20, $M.26, $M.25;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i64;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $p91: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i64;
  var vslice_dummy_var_90: i64;
  var vslice_dummy_var_91: i64;
  var vslice_dummy_var_92: i64;

  $bb0:
    call {:si_unique_call 1053} $initialize();
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} ldv_initialize();
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 1056} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 1057} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1058} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 1059} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $i57, $i58, $p59, $p60, $i62, $i63, $p64, $p65, $i66, $p67, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $i80, $i81, $p82, $i83, $i84, $i86, $i87, $p88, $p89, $i90, $p91, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92 := main_loop_$bb1($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $p54, $p55, $i57, $i58, $p59, $p60, $i62, $i63, $p64, $p65, $i66, $p67, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $i80, $i81, $p82, $i83, $i84, $i86, $i87, $p88, $p89, $i90, $p91, $i93, $i94, $p95, $i96, $i97, $i98, $i99, $i100, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb34_dummy;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i42 := $M.36;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb64:
    assume $i43 == 1;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1085} $i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 1086} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i44);
    call {:si_unique_call 1087} {:cexpr "tmp___2"} boogie_si_record_i32($i44);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i44, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i44, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i44, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb73:
    assume $i48 == 1;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i93 := $M.36;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 1);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb104:
    assume $i94 == 1;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p95 := $M.55;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i96 := vfio_pci_open($p95);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $M.56 := $i96;
    call {:si_unique_call 1104} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i96);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i97 := $M.56;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb106:
    assume $i98 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1105} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i99 := $M.34;
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 1);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $M.34 := $i100;
    call {:si_unique_call 1106} {:cexpr "ref_cnt"} boogie_si_record_i32($i100);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb71:
    assume $i47 == 1;
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i86 := $M.36;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 2);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb101:
    assume $i87 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p88 := $M.51;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p89 := $M.52;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i90 := $M.53;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p91 := $M.54;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} vslice_dummy_var_92 := vfio_pci_read($p88, $p89, $i90, $p91);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1102} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb69:
    assume $i46 == 1;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i74 := $M.36;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i80 := $M.36;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 2);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb98:
    assume $i81 == 1;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p82 := $M.48;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i83 := $M.49;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i84 := $M.50;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} vslice_dummy_var_91 := vfio_pci_ioctl($p82, $i83, $i84);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1100} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb100;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb95:
    assume $i75 == 1;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p76 := $M.48;
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i77 := $M.49;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i78 := $M.50;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} vslice_dummy_var_90 := vfio_pci_ioctl($p76, $i77, $i78);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1098} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    goto $bb97;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i44, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i50 == 1);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i69 := $M.36;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 2);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb92:
    assume $i70 == 1;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p71 := $M.47;
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vfio_pci_release($p71);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1095} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i72 := $M.34;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i72, 1);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $M.34 := $i73;
    call {:si_unique_call 1096} {:cexpr "ref_cnt"} boogie_si_record_i32($i73);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb78:
    assume $i50 == 1;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i62 := $M.36;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 2);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb89:
    assume $i63 == 1;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p64 := $M.43;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p65 := $M.44;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i66 := $M.45;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p67 := $M.46;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_89 := vfio_pci_write($p64, $p65, $i66, $p67);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1093} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb76:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb75;

  $bb80:
    assume $i51 == 1;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i52 := $M.36;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i57 := $M.36;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 2);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb85:
    assume $i58 == 1;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p59 := $M.41;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p60 := $M.42;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} vslice_dummy_var_88 := vfio_pci_mmap($p59, $p60);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1091} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume $i53 == 1;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p54 := $M.41;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p55 := $M.42;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} vslice_dummy_var_87 := vfio_pci_mmap($p54, $p55);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1089} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb5:
    assume $i2 == 1;
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i25 := $M.35;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35:
    assume $i26 == 1;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1073} $i27 := __VERIFIER_nondet_int();
    call {:si_unique_call 1074} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i27);
    call {:si_unique_call 1075} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i27, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb40:
    assume $i29 == 1;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i35 := $M.35;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 1);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb53:
    assume $i36 == 1;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $i37 := vfio_pci_init();
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $M.40 := $i37;
    call {:si_unique_call 1080} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i37);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i38 := $M.40;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i40 := $M.40;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i41 == 1;
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1084} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} ldv_check_final_state();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i39 == 1;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1081} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1082} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1083} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb38:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i27, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb42;

  $bb43:
    assume $i30 == 1;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i31 := $M.35;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 3);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb45:
    assume $i32 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i33 := $M.34;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb47;

  $bb48:
    assume $i34 == 1;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} vfio_pci_cleanup();
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1077} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb3:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb9;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i5 := $M.33;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1063} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 1064} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    call {:si_unique_call 1065} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i20 := $M.33;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29:
    assume $i21 == 1;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p22 := $M.37;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} vfio_pci_remove($p22);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1071} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i23 := $M.34;
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i23, 1);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $M.34 := $i24;
    call {:si_unique_call 1072} {:cexpr "ref_cnt"} boogie_si_record_i32($i24);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb15:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb19;

  $bb20:
    assume $i10 == 1;
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i11 := $M.33;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i12 == 1;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p13 := $M.37;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p14 := $M.38;
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i15 := vfio_pci_probe($p13, $p14);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $M.39 := $i15;
    call {:si_unique_call 1067} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i15);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i16 := $M.39;
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i17 == 1;
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1068} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i18 := $M.34;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $M.34 := $i19;
    call {:si_unique_call 1069} {:cexpr "ref_cnt"} boogie_si_record_i32($i19);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb34_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1060} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1061} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1062} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 271217);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.6, $M.57, $M.58;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 1107} {:cexpr "ldv_mutex_igate_of_vfio_pci_device"} boogie_si_record_i32(1);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1108} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1109} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_cleanup: ref;

axiom vfio_pci_cleanup == $sub.ref(0, 272249);

procedure vfio_pci_cleanup();
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_pci_cleanup()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} pci_unregister_driver(vfio_pci_driver);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} vfio_pci_virqfd_exit();
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} vfio_pci_uninit_perm_bits();
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_init: ref;

axiom vfio_pci_init == $sub.ref(0, 273281);

procedure vfio_pci_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.7, $CurrAddr;



implementation vfio_pci_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i5: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i0 := vfio_pci_init_perm_bits();
    call {:si_unique_call 1114} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i3 := vfio_pci_virqfd_init();
    call {:si_unique_call 1116} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i6 := __pci_register_driver(vfio_pci_driver, __this_module, .str.6);
    call {:si_unique_call 1119} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} vfio_pci_virqfd_exit();
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} vfio_pci_uninit_perm_bits();
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 274313);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i0 := $M.6;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} ldv_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.57;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} ldv_error();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.58;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ldv_error();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_pci_init_perm_bits: ref;

axiom vfio_pci_init_perm_bits == $sub.ref(0, 275345);

procedure vfio_pci_init_perm_bits() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vfio_pci_init_perm_bits() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i0 := init_pci_cap_basic_perm(cap_perms);
    call {:si_unique_call 1125} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i1 := init_pci_cap_pm_perm($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)));
    call {:si_unique_call 1127} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, $i0);
    call {:si_unique_call 1128} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(3, 32)), $mul.ref(24, 1)), vfio_direct_config_write);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $i3 := init_pci_cap_pcix_perm($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)));
    call {:si_unique_call 1130} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, $i2);
    call {:si_unique_call 1131} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(9, 32)), $mul.ref(24, 1)), vfio_direct_config_write);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i5 := init_pci_cap_exp_perm($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)));
    call {:si_unique_call 1133} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $i4);
    call {:si_unique_call 1134} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i7 := init_pci_cap_af_perm($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)));
    call {:si_unique_call 1136} {:cexpr "tmp___2"} boogie_si_record_i32($i7);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, $i6);
    call {:si_unique_call 1137} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i9 := init_pci_ext_cap_err_perm($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)));
    call {:si_unique_call 1139} {:cexpr "tmp___3"} boogie_si_record_i32($i9);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, $i8);
    call {:si_unique_call 1140} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i11 := init_pci_ext_cap_pwr_perm($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)));
    call {:si_unique_call 1142} {:cexpr "tmp___4"} boogie_si_record_i32($i11);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, $i10);
    call {:si_unique_call 1143} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(11, 32)), $mul.ref(24, 1)), vfio_direct_config_write);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} vfio_pci_uninit_perm_bits();
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_pci_virqfd_init: ref;

axiom vfio_pci_virqfd_init == $sub.ref(0, 276377);

procedure vfio_pci_virqfd_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $CurrAddr;



implementation vfio_pci_virqfd_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $p1 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str, 10, 1, $p0, .str);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.7 := $p1;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p2 := $M.7;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 277409);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1147} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1148} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vfio_pci_virqfd_exit: ref;

axiom vfio_pci_virqfd_exit == $sub.ref(0, 278441);

procedure vfio_pci_virqfd_exit();
  free requires assertsPassed;



implementation vfio_pci_virqfd_exit()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p0 := $M.7;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} destroy_workqueue($p0);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    return;
}



const vfio_pci_uninit_perm_bits: ref;

axiom vfio_pci_uninit_perm_bits == $sub.ref(0, 279473);

procedure vfio_pci_uninit_perm_bits();
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_pci_uninit_perm_bits()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} free_perm_bits(cap_perms);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} free_perm_bits($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} free_perm_bits($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} free_perm_bits($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} free_perm_bits($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} free_perm_bits($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} free_perm_bits($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 280505);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 281537);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1158} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $p5 := external_alloc();
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const init_pci_cap_basic_perm: ref;

axiom init_pci_cap_basic_perm == $sub.ref(0, 282569);

procedure init_pci_cap_basic_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_pci_cap_basic_perm($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i1 := alloc_perm_bits($p0, 64);
    call {:si_unique_call 1161} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, vfio_basic_config_read);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, vfio_basic_config_write);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} p_setw($p0, 0, $sub.i16(0, 1), 0);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} p_setw($p0, 2, $sub.i16(0, 1), 0);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} p_setw($p0, 4, 1024, $sub.i16(0, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} p_setw($p0, 6, 16, 0);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} p_setb($p0, 12, 0, $sub.i8(0, 1));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} p_setb($p0, 13, 0, $sub.i8(0, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} p_setb($p0, 15, 0, $sub.i8(0, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} p_setd($p0, 16, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} p_setd($p0, 20, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} p_setd($p0, 24, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} p_setd($p0, 28, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} p_setd($p0, 32, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} p_setd($p0, 36, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} p_setd($p0, 48, $sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} p_setb($p0, 52, $sub.i8(0, 1), 0);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} p_setb($p0, 60, $sub.i8(0, 1), $sub.i8(0, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 12);
    goto $bb3;
}



const init_pci_cap_pm_perm: ref;

axiom init_pci_cap_pm_perm == $sub.ref(0, 283601);

procedure init_pci_cap_pm_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_pci_cap_pm_perm($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(1, 1)));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i3 := alloc_perm_bits($p0, $i2);
    call {:si_unique_call 1179} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} p_setb($p0, 1, $sub.i8(0, 1), 0);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} p_setd($p0, 4, 0, $sub.i32(0, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const vfio_direct_config_write: ref;

axiom vfio_direct_config_write == $sub.ref(0, 284633);

procedure vfio_direct_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_direct_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} {:cexpr "vfio_direct_config_write:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1183} {:cexpr "vfio_direct_config_write:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1184} {:cexpr "vfio_direct_config_write:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 1185} {:cexpr "vfio_direct_config_write:arg:val"} boogie_si_record_i32($i5);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $i8 := vfio_user_config_write($p7, $i1, $i5, $i2);
    call {:si_unique_call 1187} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const init_pci_cap_pcix_perm: ref;

axiom init_pci_cap_pcix_perm == $sub.ref(0, 285665);

procedure init_pci_cap_pcix_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_pci_cap_pcix_perm($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i1 := alloc_perm_bits($p0, 24);
    call {:si_unique_call 1189} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} p_setb($p0, 1, $sub.i8(0, 1), 0);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} p_setw($p0, 2, 0, $sub.i16(0, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} p_setd($p0, 8, 0, $sub.i32(0, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 12);
    goto $bb3;
}



const init_pci_cap_exp_perm: ref;

axiom init_pci_cap_exp_perm == $sub.ref(0, 286697);

procedure init_pci_cap_exp_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_pci_cap_exp_perm($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i1 := alloc_perm_bits($p0, 44);
    call {:si_unique_call 1194} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} p_setb($p0, 1, $sub.i8(0, 1), 0);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} p_setw($p0, 8, 0, $sub.i16(0, 513));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} p_setw($p0, 40, 0, $sub.i16(0, 33));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 12);
    goto $bb3;
}



const init_pci_cap_af_perm: ref;

axiom init_pci_cap_af_perm == $sub.ref(0, 287729);

procedure init_pci_cap_af_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_pci_cap_af_perm($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(19, 1)));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $i3 := alloc_perm_bits($p0, $i2);
    call {:si_unique_call 1199} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} p_setb($p0, 1, $sub.i8(0, 1), 0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} p_setb($p0, 4, 0, 1);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const init_pci_ext_cap_err_perm: ref;

axiom init_pci_ext_cap_err_perm == $sub.ref(0, 288761);

procedure init_pci_ext_cap_err_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_pci_ext_cap_err_perm($p0: ref) returns ($r: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(1, 2)));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i3 := alloc_perm_bits($p0, $i2);
    call {:si_unique_call 1203} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} p_setd($p0, 0, $sub.i32(0, 1), 0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} p_setd($p0, 4, 0, 67104817);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} p_setd($p0, 8, 0, 67104817);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} p_setd($p0, 12, 0, 67104817);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} p_setd($p0, 16, 0, 61889);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} p_setd($p0, 20, 0, 61889);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} p_setd($p0, 24, 0, 320);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const init_pci_ext_cap_pwr_perm: ref;

axiom init_pci_ext_cap_pwr_perm == $sub.ref(0, 289793);

procedure init_pci_ext_cap_pwr_perm($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation init_pci_ext_cap_pwr_perm($p0: ref) returns ($r: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(4, 2)));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $i3 := alloc_perm_bits($p0, $i2);
    call {:si_unique_call 1212} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} p_setd($p0, 0, $sub.i32(0, 1), 0);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} p_setb($p0, 8, 0, $sub.i8(0, 1));
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const vfio_basic_config_read: ref;

axiom vfio_basic_config_read == $sub.ref(0, 290825);

procedure vfio_basic_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.28, $CurrAddr;



implementation vfio_basic_config_read($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} {:cexpr "vfio_basic_config_read:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1216} {:cexpr "vfio_basic_config_read:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1217} {:cexpr "vfio_basic_config_read:arg:offset"} boogie_si_record_i32($i4);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i4, 15);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i4, 47);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i10 := vfio_default_config_read($p0, $i1, $i2, $p3, $i4, $p5);
    call {:si_unique_call 1220} {:cexpr "count"} boogie_si_record_i32($i10);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, 4);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(2250, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.1, $p15);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb15;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(4, 2));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.1, $p22);
    call {:si_unique_call 1221} {:cexpr "cmd"} boogie_si_record_i16($i23);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p5);
    call {:si_unique_call 1222} {:cexpr "tmp_val"} boogie_si_record_i32($i24);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i23);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 2);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, $i24);
    call {:si_unique_call 1223} {:cexpr "tmp_val"} boogie_si_record_i32($i27);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, $i27);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i4, 51);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} vfio_bar_fixup($p0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i4, 39);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;
}



const vfio_basic_config_write: ref;

axiom vfio_basic_config_write == $sub.ref(0, 291857);

procedure vfio_basic_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.27, $M.28, $CurrAddr;



implementation vfio_basic_config_write($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i17: i16;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i8;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i8;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i8;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i16;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i16;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i16;
  var $i69: i1;
  var $i70: i1;
  var $i71: i16;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i8;
  var $i76: i1;
  var $p77: ref;
  var $i78: i8;
  var $i79: i1;
  var $p80: ref;
  var $i81: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i1;
  var $p85: ref;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $p90: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $p6 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 1225} {:cexpr "vfio_basic_config_write:arg:pos"} boogie_si_record_i32($i1);
    call {:si_unique_call 1226} {:cexpr "vfio_basic_config_write:arg:count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1227} {:cexpr "vfio_basic_config_write:arg:offset"} boogie_si_record_i32($i4);
    call {:si_unique_call 1228} {:cexpr "vfio_basic_config_write:arg:val"} boogie_si_record_i32($i5);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(4, 2));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i4, 4);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i53 := vfio_default_config_write($p0, $i1, $i2, $p3, $i4, $i5);
    call {:si_unique_call 1240} {:cexpr "count"} boogie_si_record_i32($i53);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i4, 4);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i4, 3);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i86 := $sgt.i32($i4, 15);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i88 := $sgt.i32($i4, 47);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i16 := $i53;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb54:
    assume $i88 == 1;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i89 := $sle.i32($i4, 51);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb56;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(384, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p90, 1);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb48:
    assume $i86 == 1;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i87 := $sle.i32($i4, 39);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb50;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb52;

  $bb30:
    assume $i69 == 1;
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i70 := $sle.i32($i4, 5);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb32;

  $bb33:
    assume $i70 == 1;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.1, $p12);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 1024);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i8($i74);
    call {:si_unique_call 1241} {:cexpr "virt_intx_disable"} boogie_si_record_i8($i75);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i8.i1($i75);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i81 == 1);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(381, 1));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.1, $p82);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i83);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i84 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(381, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p85, 0);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} vfio_pci_intx_unmask($p0);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb42;

  $bb35:
    assume $i76 == 1;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(381, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.1, $p77);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i79 == 1);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(381, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p80, 1);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} vfio_pci_intx_mask($p0);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb37;

  $bb27:
    assume $i55 == 1;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.1, $p12);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32(3);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i59 := $xor.i32($i58, $sub.i32(0, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i57, $i59);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p12, $i61);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.1, $p12);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i52);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32(3);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i64, $i65);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i63, $i66);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p12, $i68);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i54 == 1;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i16 := $i53;
    goto $bb5;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i14 := pci_user_read_config_word($p8, 4, $p6);
    call {:si_unique_call 1230} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i5);
    call {:si_unique_call 1231} {:cexpr "new_cmd"} boogie_si_record_i16($i17);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.30, $p6);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 2);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 1232} {:cexpr "phys_mem"} boogie_si_record_i8($i22);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.1, $p12);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 2);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1233} {:cexpr "virt_mem"} boogie_si_record_i8($i27);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i17);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 2);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 1234} {:cexpr "new_mem"} boogie_si_record_i8($i31);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.30, $p6);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 1);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 1235} {:cexpr "phys_io"} boogie_si_record_i8($i36);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.1, $p12);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 1);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 1236} {:cexpr "virt_io"} boogie_si_record_i8($i41);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i17);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 1);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 1237} {:cexpr "new_io"} boogie_si_record_i8($i45);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i31);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i45);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i52 := $i17;
    goto $bb23;

  $bb15:
    assume $i49 == 1;
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i41);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb17;

  $bb18:
    assume $i50 == 1;
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i36);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} vfio_bar_restore($p0);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb17;

  $bb7:
    assume $i46 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i27);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb9;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i22);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb9;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb5;
}



const vfio_bar_restore: ref;

axiom vfio_bar_restore == $sub.ref(0, 292889);

procedure vfio_bar_restore($p0: ref);
  free requires assertsPassed;



implementation vfio_bar_restore($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i19: i32;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i37: i64;
  var $p17: ref;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(352, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(2250, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.1, $p6);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $p11 := dev_name($p10);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} vslice_dummy_var_93 := printk.ref.ref.ref(.str.20, .str.21, $p11);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.1, $p4);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} vslice_dummy_var_94 := pci_user_write_config_dword($p2, 16, $i13);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p4, $mul.ref(1, 4));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p15);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} vslice_dummy_var_95 := pci_user_write_config_dword($p2, 20, $i19);
    $i21 := $add.i64(1, 1);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p4, $mul.ref($i21, 4));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} vslice_dummy_var_97 := pci_user_write_config_dword($p2, 24, $i23);
    $i25 := $add.i64($i21, 1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p4, $mul.ref($i25, 4));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} vslice_dummy_var_98 := pci_user_write_config_dword($p2, 28, $i27);
    $i29 := $add.i64($i25, 1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p4, $mul.ref($i29, 4));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} vslice_dummy_var_99 := pci_user_write_config_dword($p2, 32, $i31);
    $i33 := $add.i64($i29, 1);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p4, $mul.ref($i33, 4));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} vslice_dummy_var_100 := pci_user_write_config_dword($p2, 36, $i35);
    $i37 := $add.i64($i33, 1);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p4, $mul.ref($i37, 4));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p17);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} vslice_dummy_var_96 := pci_user_write_config_dword($p2, 48, $i16);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfio_bar_fixup: ref;

axiom vfio_bar_fixup == $sub.ref(0, 293921);

procedure vfio_bar_fixup($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation vfio_bar_fixup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i9: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i17: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i15: i32;
  var $p16: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i1;
  var $p7: ref;
  var $i8: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p83: ref;
  var $i84: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p92: ref;
  var $i93: i64;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(0, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(16, 4));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p7, $i8 := $p6, 0;
    goto $bb1;

  $bb1:
    call $i9, $p12, $i13, $i14, $i17, $p20, $i21, $i22, $i23, $p26, $i27, $i28, $p31, $i32, $i33, $i34, $p37, $i38, $i39, $p42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i15, $p16, $i64, $p65, $i66, $p7, $i8 := vfio_bar_fixup_loop_$bb1($p2, $i9, $p12, $i13, $i14, $i17, $p20, $i21, $i22, $i23, $p26, $i27, $i28, $p31, $i32, $i33, $i34, $p37, $i38, $i39, $p42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i15, $p16, $i64, $p65, $i66, $p7, $i8);
    goto $bb1_last;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i9, 56)), $mul.ref(0, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i8);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i17, 56)), $mul.ref(0, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i8);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i23, 56)), $mul.ref(8, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.1, $p26);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i8);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i28, 56)), $mul.ref(0, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i27, $i32);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p7);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i64.i32($i46);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i47, $i48);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i49);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i50 := vfio_generate_bar_flags($p2, $i8);
    call {:si_unique_call 1256} {:cexpr "tmp"} boogie_si_record_i32($i50);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p7);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, $i50);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i52);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.1, $p7);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 4);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i62, $p63 := $i8, $p7;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i15, $p16 := $i62, $p63;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i15, 1);
    call {:si_unique_call 1253} {:cexpr "i"} boogie_si_record_i32($i64);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p16, $mul.ref(1, 4));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i66 := $sle.i32($i64, 5);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i66 == 1);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(48, 4));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(6, 56)), $mul.ref(0, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.1, $p73);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i75 == 1);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, 0);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 408)), $mul.ref(384, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p105, 0);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i75 == 1;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(6, 56)), $mul.ref(0, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.1, $p78);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i80 == 1);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(6, 56)), $mul.ref(8, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.1, $p83);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(6, 56)), $mul.ref(0, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.1, $p87);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i84, $i88);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i100 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i101 := $or.i64($i100, 1);
    call {:si_unique_call 1259} {:cexpr "mask"} boogie_si_record_i64($i101);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p70);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i101);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i102, $i103);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p70, $i104);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(6, 56)), $mul.ref(8, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.1, $p92);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(6, 56)), $mul.ref(0, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.1, $p96);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i98 := $sub.i64($i93, $i97);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i99 := $xor.i64($i98, $sub.i64(0, 1));
    call {:si_unique_call 1258} {:cexpr "mask"} boogie_si_record_i64($i99);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i100 := $i99;
    goto $bb26;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb22;

  $bb16:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $p7, $i8 := $p65, $i64;
    goto $bb16_dummy;

  $bb13:
    assume $i55 == 1;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p7, $mul.ref(1, 4));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i58 := $lshr.i64($i46, 32);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i57, $i59);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p56, $i60);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i8, 1);
    call {:si_unique_call 1257} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i62, $p63 := $i61, $p56;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i8);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i34, 56)), $mul.ref(8, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i8);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i39, 56)), $mul.ref(0, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.1, $p42);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i44 := $sub.i64($i38, $i43);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i45 := $xor.i64($i44, $sub.i64(0, 1));
    call {:si_unique_call 1254} {:cexpr "mask"} boogie_si_record_i64($i45);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb8;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 0);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i15, $p16 := $i8, $p7;
    goto $bb5;

  $bb16_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5569;
}



const vfio_generate_bar_flags: ref;

axiom vfio_generate_bar_flags == $sub.ref(0, 294953);

procedure vfio_generate_bar_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfio_generate_bar_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} {:cexpr "vfio_generate_bar_flags:arg:bar"} boogie_si_record_i32($i1);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref($i2, 56)), $mul.ref(24, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.1, $p5);
    call {:si_unique_call 1261} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i6, 256);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $and.i64($i6, 8192);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i6, 1048576);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i13, 4);
    call {:si_unique_call 1263} {:cexpr "val"} boogie_si_record_i32($i16);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i12 := $or.i32(0, 8);
    call {:si_unique_call 1262} {:cexpr "val"} boogie_si_record_i32($i12);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 295985);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 297017);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1264} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 1} true;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 298049);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 299081);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 300113);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 301145);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 302177);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 303209);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 304241);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 305273);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 306305);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 307337);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 308369);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 309401);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 310433);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1265} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1266} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1267} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1268} __VERIFIER_assume($i4);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 311465);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 312497);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 313529);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 314561);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1269} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1270} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1271} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1272} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1273} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1274} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1275} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1276} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1277} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1278} __VERIFIER_assume($i7);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1279} __VERIFIER_assume($i11);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 315593);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 316625);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 317657);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 318689);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 319721);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 320753);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1280} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1281} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1282} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1283} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1284} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1285} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1286} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1287} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1288} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1289} __VERIFIER_assume($i7);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1290} __VERIFIER_assume($i11);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 321785);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 322817);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 323849);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 324881);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 325913);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 326945);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 327977);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 329009);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 330041);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1291} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1292} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1293} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1294} __VERIFIER_assume($i10);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 331073);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1295} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1296} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1297} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 332105);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1298} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1299} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1300} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 333137);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1301} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1302} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 334169);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 335201);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1303} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1304} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 336233);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 337265);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 338297);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 339329);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.24, $M.22, $M.1, $M.18, $M.59, $M.58, $M.57, $M.6, $M.7;



implementation __SMACK_static_init()
{

  $bb0:
    $M.33 := 0;
    call {:si_unique_call 1305} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1306} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1307} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1308} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.37 := $0.ref;
    $M.38 := $0.ref;
    $M.39 := 0;
    call {:si_unique_call 1309} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1310} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := $0.ref;
    $M.44 := $0.ref;
    $M.45 := 0;
    call {:si_unique_call 1311} {:cexpr "ldvarg12"} boogie_si_record_i64(0);
    $M.46 := $0.ref;
    $M.47 := $0.ref;
    $M.48 := $0.ref;
    $M.49 := 0;
    call {:si_unique_call 1312} {:cexpr "ldvarg8"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1313} {:cexpr "ldvarg7"} boogie_si_record_i64(0);
    $M.51 := $0.ref;
    $M.52 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 1314} {:cexpr "ldvarg4"} boogie_si_record_i64(0);
    $M.54 := $0.ref;
    $M.55 := $0.ref;
    $M.56 := 0;
    call {:si_unique_call 1315} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.24 := $store.i16($M.24, pci_ext_cap_length, 0);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(1, 2)), 44);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(2, 2)), 255);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(3, 2)), 12);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(4, 2)), 16);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(5, 2)), 0);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(6, 2)), 0);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(7, 2)), 0);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(8, 2)), 255);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(9, 2)), 255);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(10, 2)), 0);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(11, 2)), 255);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(12, 2)), 0);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(13, 2)), 255);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(14, 2)), 8);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(15, 2)), 8);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(16, 2)), 64);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(17, 2)), 0);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(18, 2)), 40);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(19, 2)), 16);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(20, 2)), 0);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(21, 2)), 255);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(22, 2)), 255);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(23, 2)), 255);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(24, 2)), 8);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(25, 2)), 0);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(26, 2)), 0);
    $M.24 := $store.i16($M.24, $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(27, 2)), 0);
    $M.22 := $store.i8($M.22, pci_cap_length, 64);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(1, 1)), 8);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(2, 1)), 12);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(3, 1)), 8);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(4, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(5, 1)), $sub.i8(0, 1));
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(6, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(7, 1)), $sub.i8(0, 1));
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(8, 1)), $sub.i8(0, 1));
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(9, 1)), $sub.i8(0, 1));
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(10, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(11, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(13, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(14, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(15, 1)), 0);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(16, 1)), $sub.i8(0, 1));
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(17, 1)), 12);
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(18, 1)), $sub.i8(0, 1));
    $M.22 := $store.i8($M.22, $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(19, 1)), 6);
    $M.1 := $store.ref($M.1, ecap_perms, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(0, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(1, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(2, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(2, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(2, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(2, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(3, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(3, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(3, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(3, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(4, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(5, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(5, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(5, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(5, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(6, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(6, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(6, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(6, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(7, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(7, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(7, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(7, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(8, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(8, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(8, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(8, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(9, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(9, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(9, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(9, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(10, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(10, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(10, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(10, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(11, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(11, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(11, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(11, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(12, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(12, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(12, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(12, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(13, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(13, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(13, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(13, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(14, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(14, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(14, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(14, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(15, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(15, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(15, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(15, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(16, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(16, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(16, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(16, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(17, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(17, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(17, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(17, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(18, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(18, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(18, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(18, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(19, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(19, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(19, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(19, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(20, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(20, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(20, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(20, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(21, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(21, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(21, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(21, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(22, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(22, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(22, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(22, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(23, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(23, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(23, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(23, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(24, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(24, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(24, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(24, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(25, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(25, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(25, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(25, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(26, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(26, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(26, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(26, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(27, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(27, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(27, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(ecap_perms, $mul.ref(0, 896)), $mul.ref(27, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, cap_perms, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(0, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(1, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(2, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(2, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(2, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(2, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(3, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(3, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(3, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(3, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(4, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(4, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(4, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(4, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(5, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(5, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(5, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(5, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(6, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(6, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(6, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(6, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(7, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(8, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(8, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(8, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(8, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(9, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(9, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(9, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(9, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(10, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(10, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(10, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(10, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(11, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(11, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(11, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(11, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(12, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(12, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(12, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(12, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(13, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(13, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(13, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(13, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(14, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(14, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(14, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(14, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(15, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(15, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(15, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(15, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(16, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(17, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(17, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(17, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(17, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(18, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(18, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(18, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(18, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)), $mul.ref(16, 1)), vfio_direct_config_read);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(cap_perms, $mul.ref(0, 640)), $mul.ref(19, 32)), $mul.ref(24, 1)), $0.ref);
    $M.18 := 0;
    call {:si_unique_call 1316} {:cexpr "nointxmask"} boogie_si_record_i8(0);
    $M.59 := $store.ref($M.59, vfio_pci_driver, $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.4);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), vfio_pci_probe);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), vfio_pci_remove);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.59 := $store.i64($M.59, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.59 := $store.ref($M.59, $add.ref($add.ref($add.ref($add.ref(vfio_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.58 := 0;
    call {:si_unique_call 1317} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1318} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.6 := 0;
    call {:si_unique_call 1319} {:cexpr "ldv_mutex_igate_of_vfio_pci_device"} boogie_si_record_i32(0);
    $M.7 := $0.ref;
    $M.1 := $store.i8($M.1, .str.15, 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(1, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(4, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(5, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(6, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(8, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.15, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.16, 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(1, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(4, 1)), 45);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(6, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.16, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, .str.8, 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(1, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(5, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(6, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(9, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(10, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(12, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(13, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(14, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.8, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i8($M.1, .str.9, 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(1, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(5, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(6, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(7, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(10, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(11, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(12, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(13, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.28, 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(1, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(6, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(7, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(8, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(10, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(11, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(12, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(13, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.28, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.31, 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(1, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(5, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(6, 1)), 120);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(9, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(10, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(11, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(13, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i8($M.1, .str.23, 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(1, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(5, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(6, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(7, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(9, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(10, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(11, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.23, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.26, 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(1, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(5, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(6, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(7, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(9, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(11, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.26, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.21, 118);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(1, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(5, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(6, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(7, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(13, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(14, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.21, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    call {:si_unique_call 1320} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 340361);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.3;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(vfio_pci_set_msi_trigger, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(vfio_pci_set_intx_trigger, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(vfio_pci_set_intx_unmask, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(vfio_pci_set_intx_mask, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 1321} $i1 := vfio_pci_set_intx_mask(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i1;
    return;

  $bb3:
    assume $i7 == 1;
    call {:si_unique_call 1322} $i2 := vfio_pci_set_intx_unmask(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i2;
    return;

  $bb4:
    assume $i8 == 1;
    call {:si_unique_call 1323} $i3 := vfio_pci_set_intx_trigger(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i3;
    return;

  $bb5:
    assume $i9 == 1;
    call {:si_unique_call 1324} $i4 := vfio_pci_set_msi_trigger(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i4;
    return;

  $bb6:
    assume $i10 == 1;
    call {:si_unique_call 1325} $i5 := __builtinx_object_size();
    $r := $i5;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 341393);

procedure devirtbounce.1(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1326} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 342425);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $CurrAddr;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(vfio_pci_probe, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i13 == 1);
    $i12 := $eq.ref(vfio_pci_intx_unmask_handler, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i12 == 1);
    $i11 := $eq.ref(vfio_pci_mmap, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1327} $i3 := vfio_pci_mmap($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1328} $i6 := vfio_pci_intx_unmask_handler($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i13 == 1;
    call {:si_unique_call 1329} $i7 := __builtinx_object_size();
    $r := $i7;
    return;

  $bb5:
    assume $i14 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1330} $i10 := vfio_pci_probe($p8, $p9);
    $r := $i10;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 343457);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.3, $CurrAddr;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(vfio_pci_probe, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(vfio_pci_intx_unmask_handler, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(vfio_pci_mmap, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1331} $i3 := vfio_pci_mmap($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i10 == 1;
    call {:si_unique_call 1332} $i4 := vfio_pci_intx_unmask_handler(arg, arg1);
    $r := $i4;
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 1333} $i5 := __builtinx_object_size();
    $r := $i5;
    return;

  $bb5:
    assume $i12 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1334} $i8 := vfio_pci_probe($p6, $p7);
    $r := $i8;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 344489);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref);



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 345521);

procedure devirtbounce.5(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9;



implementation devirtbounce.5(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(vfio_intx_handler, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i5 == 1);
    $i4 := $eq.ref(vfio_msihandler, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 1335} $i1 := vfio_msihandler(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 1336} $i2 := vfio_intx_handler(arg, arg1);
    $r := $i2;
    return;

  $bb4:
    assume $i6 == 1;
    call {:si_unique_call 1337} $i3 := __builtinx_object_size();
    $r := $i3;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 346553);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref, arg4: i32, arg5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.27, $M.28, $CurrAddr;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref, arg4: i32, arg5: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(vfio_basic_config_write, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(vfio_direct_config_write, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(vfio_default_config_write, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(vfio_msi_config_write, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 1338} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i7 == 1;
    call {:si_unique_call 1339} $i2 := vfio_msi_config_write(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i2;
    return;

  $bb4:
    assume $i8 == 1;
    call {:si_unique_call 1340} $i3 := vfio_default_config_write(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i3;
    return;

  $bb5:
    assume $i9 == 1;
    call {:si_unique_call 1341} $i4 := vfio_direct_config_write(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i4;
    return;

  $bb6:
    assume $i10 == 1;
    call {:si_unique_call 1342} $i5 := vfio_basic_config_write(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i5;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 347585);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref, arg4: i32, arg5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.31, $M.28, $CurrAddr;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref, arg4: i32, arg5: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(vfio_basic_config_read, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(vfio_direct_config_read, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(vfio_default_config_read, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(vfio_msi_config_read, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 1343} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i7 == 1;
    call {:si_unique_call 1344} $i2 := vfio_msi_config_read(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i2;
    return;

  $bb4:
    assume $i8 == 1;
    call {:si_unique_call 1345} $i3 := vfio_default_config_read(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i3;
    return;

  $bb5:
    assume $i9 == 1;
    call {:si_unique_call 1346} $i4 := vfio_direct_config_read(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i4;
    return;

  $bb6:
    assume $i10 == 1;
    call {:si_unique_call 1347} $i5 := vfio_basic_config_read(arg, arg1, arg2, arg3, arg4, arg5);
    $r := $i5;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 348617);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(virqfd_ptable_queue_proc, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1348} virqfd_ptable_queue_proc($p1, $p2, $p3);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 349649);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1349} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.24, $M.22, $M.1, $M.18, $M.59, $M.58, $M.57, $M.6, $M.7, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1350} __SMACK_static_init();
    call {:si_unique_call 1351} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.33, $M.34, $M.35, $M.36, $M.1, $M.39, $M.40, $M.56, $M.37, $M.38, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.24, $M.22, $M.18, $M.59, $M.58, $M.57, $M.6, $M.7, $CurrAddr, $M.3, $M.10, $M.0, $M.2, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.9, $M.27, $M.31, $M.28, $M.20, $M.26, $M.25;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation vfio_pci_set_msi_trigger_loop_$bb42(in_$p0: ref, in_$i2: i32, in_$i4: i32, in_$p5: ref, in_$i51: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$p75: ref, in_$i76: i8, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$i86: i32, in_$i87: i1, in_$i53: i32, in_vslice_dummy_var_54: i64, in_vslice_dummy_var_55: i64) returns (out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$p75: ref, out_$i76: i8, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$i86: i32, out_$i87: i1, out_$i53: i32, out_vslice_dummy_var_54: i64, out_vslice_dummy_var_55: i64)
{

  entry:
    out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$p83, out_$p84, out_$i86, out_$i87, out_$i53, out_vslice_dummy_var_54, out_vslice_dummy_var_55 := in_$p54, in_$p55, in_$i56, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$p68, in_$p69, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$p79, in_$p80, in_$i81, in_$p83, in_$p84, in_$i86, in_$i87, in_$i53, in_vslice_dummy_var_54, in_vslice_dummy_var_55;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1073;

  $bb57:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := out_$i86;
    goto $bb57_dummy;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$i87 := $ult.i32(out_$i86, in_$i51);
    goto corral_source_split_1087;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i53, 1);
    call {:si_unique_call 200} {:cexpr "i"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_1086;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i61 == 1;
    goto corral_source_split_1084;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i64(out_$i60, 0);
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_1081;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.1, out_$p58);
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p55, $mul.ref(out_$i56, 40)), $mul.ref(0, 1));
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.1, out_$p54);
    goto corral_source_split_1076;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} out_vslice_dummy_var_54 := eventfd_signal(out_$p69, 1);
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.1, out_$p68);
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p65, $mul.ref(out_$i66, 40)), $mul.ref(0, 1));
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.1, out_$p64);
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1093;

  $bb48:
    assume out_$i63 == 1;
    goto corral_source_split_1092;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i32(out_$i62, 0);
    goto corral_source_split_1090;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i62 := $and.i32(in_$i4, 1);
    goto corral_source_split_1089;

  $bb45:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb52:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} out_vslice_dummy_var_55 := eventfd_signal(out_$p84, 1);
    goto corral_source_split_1120;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.1, out_$p83);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p80, $mul.ref(out_$i81, 40)), $mul.ref(0, 1));
    goto corral_source_split_1118;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i53);
    goto corral_source_split_1116;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.1, out_$p79);
    goto corral_source_split_1115;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1114;

  $bb53:
    assume out_$i78 == 1;
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i77, 0);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i76);
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i8($M.1, out_$p75);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(in_$p5, $mul.ref(out_$i74, 1));
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i32.i64(out_$i73);
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i53, in_$i2);
    goto corral_source_split_1106;

  $bb51:
    assume out_$i72 == 1;
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$i71 := $and.i32(in_$i4, 2);
    goto corral_source_split_1102;

  $bb49:
    assume !(out_$i63 == 1);
    goto corral_source_split_1101;

  $bb57_dummy:
    call {:si_unique_call 1} out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$p83, out_$p84, out_$i86, out_$i87, out_$i53, out_vslice_dummy_var_54, out_vslice_dummy_var_55 := vfio_pci_set_msi_trigger_loop_$bb42(in_$p0, in_$i2, in_$i4, in_$p5, in_$i51, out_$p54, out_$p55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p68, out_$p69, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$p83, out_$p84, out_$i86, out_$i87, out_$i53, out_vslice_dummy_var_54, out_vslice_dummy_var_55);
    return;

  exit:
    return;
}



procedure vfio_pci_set_msi_trigger_loop_$bb42(in_$p0: ref, in_$i2: i32, in_$i4: i32, in_$p5: ref, in_$i51: i32, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i64, in_$p75: ref, in_$i76: i8, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$i86: i32, in_$i87: i1, in_$i53: i32, in_vslice_dummy_var_54: i64, in_vslice_dummy_var_55: i64) returns (out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i64, out_$p75: ref, out_$i76: i8, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$i86: i32, out_$i87: i1, out_$i53: i32, out_vslice_dummy_var_54: i64, out_vslice_dummy_var_55: i64);



implementation vfio_msi_disable_loop_$bb4(in_$p0: ref, in_$p9: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i12: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i12 := in_$p13, in_$p14, in_$i15, in_$p17, in_$p18, in_$p19, in_$i20, in_$p22, in_$i23, in_$i24, in_$i25, in_$i12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1137;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i23;
    goto $bb6_dummy;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, out_$i23);
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.1, in_$p9);
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i12, 1);
    call {:si_unique_call 207} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} virqfd_disable(in_$p0, out_$p22);
    goto corral_source_split_1150;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i20, 40)), $mul.ref(16, 1));
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i12);
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.1, out_$p18);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} virqfd_disable(in_$p0, out_$p17);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(8, 1));
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i12);
    goto corral_source_split_1141;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_1140;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(328, 1));
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i12 := vfio_msi_disable_loop_$bb4(in_$p0, in_$p9, out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$p19, out_$i20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i12);
    return;

  exit:
    return;
}



procedure vfio_msi_disable_loop_$bb4(in_$p0: ref, in_$p9: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i12: i32);
  modifies $M.1;



implementation vfio_msi_set_block_loop_$bb21(in_$p0: ref, in_$i1: i32, in_$i5: i8, in_$i35: i1, in_$i37: i32, in_$i38: i1, in_$i34: i32, in_vslice_dummy_var_57: i32) returns (out_$i35: i1, out_$i37: i32, out_$i38: i1, out_$i34: i32, out_vslice_dummy_var_57: i32)
{

  entry:
    out_$i35, out_$i37, out_$i38, out_$i34, out_vslice_dummy_var_57 := in_$i35, in_$i37, in_$i38, in_$i34, in_vslice_dummy_var_57;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1225;

  $bb23:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i37;
    goto $bb23_dummy;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$i38 := $uge.i32(out_$i37, in_$i1);
    goto corral_source_split_1230;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i34, 1);
    call {:si_unique_call 223} {:cexpr "j"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_1229;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} out_vslice_dummy_var_57 := vfio_msi_set_vector_signal(in_$p0, out_$i34, $sub.i32(0, 1), out_$i35);
    goto corral_source_split_1228;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i8.i1(in_$i5);
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i35, out_$i37, out_$i38, out_$i34, out_vslice_dummy_var_57 := vfio_msi_set_block_loop_$bb21(in_$p0, in_$i1, in_$i5, out_$i35, out_$i37, out_$i38, out_$i34, out_vslice_dummy_var_57);
    return;

  exit:
    return;
}



procedure vfio_msi_set_block_loop_$bb21(in_$p0: ref, in_$i1: i32, in_$i5: i8, in_$i35: i1, in_$i37: i32, in_$i38: i1, in_$i34: i32, in_vslice_dummy_var_57: i32) returns (out_$i35: i1, out_$i37: i32, out_$i38: i1, out_$i34: i32, out_vslice_dummy_var_57: i32);
  modifies $M.1;



implementation vfio_msi_set_block_loop_$bb8(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i5: i8, in_$i16: i64, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i14: i32, in_$i15: i32, in_$i29: i32, in_$i30: i32) returns (out_$i16: i64, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i14: i32, out_$i15: i32, out_$i29: i32, out_$i30: i32)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i14, out_$i15, out_$i29, out_$i30 := in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i14, in_$i15, in_$i29, in_$i30;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1196;

  $bb13:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$i15 := out_$i25, out_$i24;
    goto $bb13_dummy;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$i29, out_$i30 := out_$i25, out_$i23;
    assume true;
    goto $bb13;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i1(out_$i26, out_$i27);
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i23, 0);
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i32(out_$i24, in_$i2);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i14, 1);
    call {:si_unique_call 220} {:cexpr "j"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i15, 1);
    call {:si_unique_call 219} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} out_$i23 := vfio_msi_set_vector_signal(in_$p0, out_$i14, out_$i21, out_$i22);
    call {:si_unique_call 218} {:cexpr "ret"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1208;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i8.i1(in_$i5);
    goto corral_source_split_1207;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(0, 1);
    goto $bb12;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i20;
    goto $bb12;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.1, out_$p19);
    call {:si_unique_call 216} {:cexpr "tmp"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p3, $mul.ref(out_$i18, 4));
    goto corral_source_split_1203;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_1202;

  $bb10:
    assume out_$i17 == 1;
    goto corral_source_split_1201;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_1199;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_1198;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i14, out_$i15, out_$i29, out_$i30 := vfio_msi_set_block_loop_$bb8(in_$p0, in_$i2, in_$p3, in_$i5, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i14, out_$i15, out_$i29, out_$i30);
    return;

  exit:
    return;
}



procedure vfio_msi_set_block_loop_$bb8(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i5: i8, in_$i16: i64, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i14: i32, in_$i15: i32, in_$i29: i32, in_$i30: i32) returns (out_$i16: i64, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i14: i32, out_$i15: i32, out_$i29: i32, out_$i30: i32);
  modifies $M.1;



implementation vfio_msi_enable_loop_$bb21(in_$p0: ref, in_$i1: i32, in_$i40: i16, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i39: i32) returns (out_$i40: i16, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i39: i32)
{

  entry:
    out_$i40, out_$p41, out_$p42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i39 := in_$i40, in_$p41, in_$p42, in_$i43, in_$p45, in_$i46, in_$i47, in_$i39;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1294;

  $bb23:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i46;
    goto $bb23_dummy;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i46, in_$i1);
    goto corral_source_split_1304;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i39, 1);
    call {:si_unique_call 231} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_1303;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p45, out_$i40);
    goto corral_source_split_1302;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p42, $mul.ref(out_$i43, 8)), $mul.ref(4, 1));
    goto corral_source_split_1301;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto corral_source_split_1300;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i39);
    goto corral_source_split_1299;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_1298;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(320, 1));
    goto corral_source_split_1297;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i32.i16(out_$i39);
    goto corral_source_split_1296;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i40, out_$p41, out_$p42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i39 := vfio_msi_enable_loop_$bb21(in_$p0, in_$i1, out_$i40, out_$p41, out_$p42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i39);
    return;

  exit:
    return;
}



procedure vfio_msi_enable_loop_$bb21(in_$p0: ref, in_$i1: i32, in_$i40: i16, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i39: i32) returns (out_$i40: i16, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i39: i32);
  modifies $M.1;



implementation vfio_pci_config_readwrite_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i6: i8, in_$i15: i1, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$i19: i1, in_$i20: i64, in_$i21: i32, in_$i25: i1, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$i29: i1, in_$i30: i64, in_$i31: i32, in_$i34: i1, in_$i35: i64, in_$i36: i32, in_$p32: ref, in_$i33: i32, in_$p22: ref, in_$i23: i64, in_$i24: i32, in_$i37: i1, in_$i38: i32, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$i49: i64, in_$i50: i1, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i51: i64) returns (out_$i15: i1, out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$i19: i1, out_$i20: i64, out_$i21: i32, out_$i25: i1, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$i29: i1, out_$i30: i64, out_$i31: i32, out_$i34: i1, out_$i35: i64, out_$i36: i32, out_$p32: ref, out_$i33: i32, out_$p22: ref, out_$i23: i64, out_$i24: i32, out_$i37: i1, out_$i38: i32, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$i49: i64, out_$i50: i1, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i51: i64)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i34, out_$i35, out_$i36, out_$p32, out_$i33, out_$p22, out_$i23, out_$i24, out_$i37, out_$i38, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p12, out_$i13, out_$i14, out_$i51 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i34, in_$i35, in_$i36, in_$p32, in_$i33, in_$p22, in_$i23, in_$i24, in_$i37, in_$i38, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p12, in_$i13, in_$i14, in_$i51;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2300;

  $bb22:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$i13, out_$i14 := out_$p46, out_$i42, out_$i44;
    goto $bb22_dummy;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i44;
    assume true;
    goto $bb22;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i42, 0);
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.10 := $store.i64($M.10, in_$p5, out_$i49);
    goto corral_source_split_2346;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i64(out_$i47, out_$i48);
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.10, in_$p5);
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p22, $mul.ref(out_$i45, 1));
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i64(out_$i43, out_$i14);
    call {:si_unique_call 485} {:cexpr "done"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$i42 := $sub.i64(out_$i23, out_$i41);
    call {:si_unique_call 484} {:cexpr "count"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_2338;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2337;

  $bb19:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i24;
    assume true;
    goto $bb19;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i24, 0);
    goto corral_source_split_2317;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2316;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p22, out_$i23, out_$i24 := out_$p32, out_$i13, out_$i33;
    goto $bb11;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    out_$p22, out_$i23, out_$i24 := out_$p12, out_$i13, out_$i21;
    goto $bb11;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i64.i32(out_$i20);
    call {:si_unique_call 477} {:cexpr "ret"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2314;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} out_$i20 := vfio_config_do_rw(in_$p0, out_$p12, 4, in_$p5, out_$i19);
    call {:si_unique_call 476} {:cexpr "tmp"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(in_$i6);
    goto corral_source_split_2312;

  $bb9:
    assume out_$i18 == 1;
    goto corral_source_split_2311;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i64(out_$i17, 0);
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i64(out_$i16, 3);
    goto corral_source_split_2306;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i64($M.10, in_$p5);
    goto corral_source_split_2305;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_2304;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i15 := $ugt.i64(out_$i13, 3);
    goto corral_source_split_2302;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i64.i32(out_$i35);
    call {:si_unique_call 480} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    assume {:verifier.code 0} true;
    out_$p32, out_$i33 := out_$p12, out_$i36;
    goto $bb17;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    out_$p32, out_$i33 := out_$p12, out_$i31;
    goto $bb17;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i64.i32(out_$i30);
    call {:si_unique_call 483} {:cexpr "ret"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2330;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} out_$i30 := vfio_config_do_rw(in_$p0, out_$p12, 2, in_$p5, out_$i29);
    call {:si_unique_call 482} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_2329;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i8.i1(in_$i6);
    goto corral_source_split_2328;

  $bb15:
    assume out_$i28 == 1;
    goto corral_source_split_2327;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i64(out_$i27, 0);
    goto corral_source_split_2322;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i64(out_$i26, 1);
    goto corral_source_split_2321;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.10, in_$p5);
    goto corral_source_split_2320;

  $bb12:
    assume out_$i25 == 1;
    goto corral_source_split_2319;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i25 := $ugt.i64(out_$i13, 1);
    goto corral_source_split_2309;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i15 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb8;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} out_$i35 := vfio_config_do_rw(in_$p0, out_$p12, 1, in_$p5, out_$i34);
    call {:si_unique_call 479} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i35);
    goto corral_source_split_2325;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(in_$i6);
    goto corral_source_split_2324;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb14;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i34, out_$i35, out_$i36, out_$p32, out_$i33, out_$p22, out_$i23, out_$i24, out_$i37, out_$i38, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p12, out_$i13, out_$i14, out_$i51 := vfio_pci_config_readwrite_loop_$bb4(in_$p0, in_$p5, in_$i6, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i34, out_$i35, out_$i36, out_$p32, out_$i33, out_$p22, out_$i23, out_$i24, out_$i37, out_$i38, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p12, out_$i13, out_$i14, out_$i51);
    return;

  exit:
    return;
}



procedure vfio_pci_config_readwrite_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i6: i8, in_$i15: i1, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$i19: i1, in_$i20: i64, in_$i21: i32, in_$i25: i1, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$i29: i1, in_$i30: i64, in_$i31: i32, in_$i34: i1, in_$i35: i64, in_$i36: i32, in_$p32: ref, in_$i33: i32, in_$p22: ref, in_$i23: i64, in_$i24: i32, in_$i37: i1, in_$i38: i32, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$i49: i64, in_$i50: i1, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i51: i64) returns (out_$i15: i1, out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$i19: i1, out_$i20: i64, out_$i21: i32, out_$i25: i1, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$i29: i1, out_$i30: i64, out_$i31: i32, out_$i34: i1, out_$i35: i64, out_$i36: i32, out_$p32: ref, out_$i33: i32, out_$p22: ref, out_$i23: i64, out_$i24: i32, out_$i37: i1, out_$i38: i32, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$i49: i64, out_$i50: i1, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i51: i64);
  modifies $M.10, $M.1, $M.27, $M.31, $M.28, $CurrAddr;



implementation vfio_pci_io_readwrite_loop_$bb26(in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i8, in_$p79: ref, in_$i86: i1, in_$i87: i64, in_$i88: i1, in_$i89: i1, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$i104: i64, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i111: i16, in_$i112: i32, in_$i113: i16, in_$p114: ref, in_$p115: ref, in_$i116: i32, in_$i117: i16, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i124: i1, in_$i125: i64, in_$i126: i1, in_$i127: i8, in_$i128: i32, in_$i129: i8, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i8, in_$i134: i32, in_$i135: i1, in_$p121: ref, in_$i122: i64, in_$i123: i32, in_$p100: ref, in_$i101: i64, in_$i102: i64, in_$i103: i32, in_$i136: i64, in_$i137: i64, in_$i138: i64, in_$i139: i64, in_$i140: i64, in_$p141: ref, in_$i142: i64, in_$i143: i64, in_$i144: i1, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$i145: i64) returns (out_$i86: i1, out_$i87: i64, out_$i88: i1, out_$i89: i1, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$i104: i64, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i111: i16, out_$i112: i32, out_$i113: i16, out_$p114: ref, out_$p115: ref, out_$i116: i32, out_$i117: i16, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i124: i1, out_$i125: i64, out_$i126: i1, out_$i127: i8, out_$i128: i32, out_$i129: i8, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i8, out_$i134: i32, out_$i135: i1, out_$p121: ref, out_$i122: i64, out_$i123: i32, out_$p100: ref, out_$i101: i64, out_$i102: i64, out_$i103: i32, out_$i136: i64, out_$i137: i64, out_$i138: i64, out_$i139: i64, out_$i140: i64, out_$p141: ref, out_$i142: i64, out_$i143: i64, out_$i144: i1, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$i145: i64)
{

  entry:
    out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p121, out_$i122, out_$i123, out_$p100, out_$i101, out_$i102, out_$i103, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$p82, out_$i83, out_$i84, out_$i85, out_$i145 := in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$i91, in_$i92, in_$i93, in_$p94, in_$p95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i104, in_$i105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$p114, in_$p115, in_$i116, in_$i117, in_$p118, in_$i119, in_$i120, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$i132, in_$i133, in_$i134, in_$i135, in_$p121, in_$i122, in_$i123, in_$p100, in_$i101, in_$i102, in_$i103, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$p141, in_$i142, in_$i143, in_$i144, in_$p82, in_$i83, in_$i84, in_$i85, in_$i145;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2438;

  $bb67:
    assume out_$i144 == 1;
    assume {:verifier.code 0} true;
    out_$p82, out_$i83, out_$i84, out_$i85 := out_$p141, out_$i137, out_$i139, out_$i143;
    goto $bb67_dummy;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$i145 := out_$i139;
    assume true;
    goto $bb67;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$i144 := $ne.i64(out_$i137, 0);
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$i143 := $add.i64(out_$i142, out_$i102);
    call {:si_unique_call 506} {:cexpr "pos"} boogie_si_record_i64(out_$i143);
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    out_$i142 := $sext.i32.i64(out_$i103);
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref(out_$p100, $mul.ref(out_$i140, 1));
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i140 := $sext.i32.i64(out_$i103);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$i139 := $add.i64(out_$i138, out_$i84);
    call {:si_unique_call 505} {:cexpr "done"} boogie_si_record_i64(out_$i139);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$i138 := $sext.i32.i64(out_$i103);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$i137 := $sub.i64(out_$i101, out_$i136);
    call {:si_unique_call 504} {:cexpr "count"} boogie_si_record_i64(out_$i137);
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$i136 := $sext.i32.i64(out_$i103);
    goto corral_source_split_2474;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2473;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p100, out_$i101, out_$i102, out_$i103 := out_$p121, out_$i83, out_$i122, out_$i123;
    goto $bb42;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p100, out_$i101, out_$i102, out_$i103 := out_$p82, out_$i83, out_$i85, 4;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} iowrite32(out_$i93, out_$p94);
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(in_$p79, $mul.ref(out_$i85, 1));
    goto corral_source_split_2468;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.1, in_$p5);
    goto corral_source_split_2467;

  $bb36:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i64(out_$i91, 0);
    goto corral_source_split_2455;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} out_$i91 := copy_from_user(out_$p90, out_$p82, 4);
    call {:si_unique_call 499} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i91);
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$p90 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_2453;

  $bb33:
    assume out_$i89 == 1;
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$i89 := $trunc.i8.i1(in_$i8);
    goto corral_source_split_2450;

  $bb31:
    assume out_$i88 == 1;
    goto corral_source_split_2449;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i64(out_$i87, 0);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$i87 := $and.i64(out_$i85, 3);
    goto corral_source_split_2443;

  $bb28:
    assume out_$i86 == 1;
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i86 := $ugt.i64(out_$i83, 2);
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb40:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} out_$i98 := copy_to_user(out_$p82, out_$p97, 4);
    call {:si_unique_call 502} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$p97 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, in_$p5, out_$i96);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} out_$i96 := ioread32(out_$p95);
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(in_$p79, $mul.ref(out_$i85, 1));
    goto corral_source_split_2458;

  $bb34:
    assume !(out_$i89 == 1);
    goto corral_source_split_2457;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p121, out_$i122, out_$i123 := out_$p82, out_$i85, 1;
    goto $bb57;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p121, out_$i122, out_$i123 := out_$p82, out_$i85, 2;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} iowrite16(out_$i113, out_$p114);
    goto corral_source_split_2512;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref(in_$p79, $mul.ref(out_$i85, 1));
    goto corral_source_split_2511;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    out_$i113 := $trunc.i32.i16(out_$i112);
    goto corral_source_split_2510;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i16.i32(out_$i111);
    goto corral_source_split_2509;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i16($M.1, in_$p6);
    goto corral_source_split_2508;

  $bb51:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i64(out_$i109, 0);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} out_$i109 := copy_from_user(out_$p108, out_$p82, 2);
    call {:si_unique_call 508} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i109);
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$p108 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_2493;

  $bb48:
    assume out_$i107 == 1;
    goto corral_source_split_2492;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$i107 := $trunc.i8.i1(in_$i8);
    goto corral_source_split_2490;

  $bb46:
    assume out_$i106 == 1;
    goto corral_source_split_2489;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$i106 := $ugt.i64(out_$i83, 1);
    goto corral_source_split_2485;

  $bb43:
    assume out_$i105 == 1;
    goto corral_source_split_2484;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i64(out_$i104, 0);
    goto corral_source_split_2447;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i104 := $and.i64(out_$i85, 1);
    goto corral_source_split_2446;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i88 == 1);
    goto $bb30;

  $bb55:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_2504;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} out_$i119 := copy_to_user(out_$p82, out_$p118, 2);
    call {:si_unique_call 512} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    out_$p118 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_2502;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, in_$p6, out_$i117);
    goto corral_source_split_2501;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    out_$i117 := $trunc.i32.i16(out_$i116);
    goto corral_source_split_2500;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} out_$i116 := ioread16(out_$p115);
    call {:si_unique_call 510} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_2499;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref(in_$p79, $mul.ref(out_$i85, 1));
    goto corral_source_split_2498;

  $bb49:
    assume !(out_$i107 == 1);
    goto corral_source_split_2497;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} iowrite8(out_$i129, out_$p130);
    goto corral_source_split_2534;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref(in_$p79, $mul.ref(out_$i85, 1));
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    out_$i129 := $trunc.i32.i8(out_$i128);
    goto corral_source_split_2532;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i8.i32(out_$i127);
    goto corral_source_split_2531;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i8($M.1, in_$p7);
    goto corral_source_split_2530;

  $bb61:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i64(out_$i125, 0);
    goto corral_source_split_2518;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} out_$i125 := copy_from_user(in_$p7, out_$p82, 1);
    call {:si_unique_call 515} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i125);
    goto corral_source_split_2517;

  $bb58:
    assume out_$i124 == 1;
    goto corral_source_split_2516;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i124 := $trunc.i8.i1(in_$i8);
    goto corral_source_split_2487;

  $bb44:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb45;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i106 == 1);
    goto $bb45;

  $bb65:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i134, 0);
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} out_$i134 := copy_to_user(out_$p82, in_$p7, 1);
    call {:si_unique_call 519} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, in_$p7, out_$i133);
    goto corral_source_split_2524;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    out_$i133 := $trunc.i32.i8(out_$i132);
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} out_$i132 := ioread8(out_$p131);
    call {:si_unique_call 517} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_2522;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref(in_$p79, $mul.ref(out_$i85, 1));
    goto corral_source_split_2521;

  $bb59:
    assume !(out_$i124 == 1);
    goto corral_source_split_2520;

  $bb67_dummy:
    call {:si_unique_call 1} out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p121, out_$i122, out_$i123, out_$p100, out_$i101, out_$i102, out_$i103, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$p82, out_$i83, out_$i84, out_$i85, out_$i145 := vfio_pci_io_readwrite_loop_$bb26(in_$p5, in_$p6, in_$p7, in_$i8, in_$p79, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$i91, out_$i92, out_$i93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p121, out_$i122, out_$i123, out_$p100, out_$i101, out_$i102, out_$i103, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$p82, out_$i83, out_$i84, out_$i85, out_$i145);
    return;

  exit:
    return;
}



procedure vfio_pci_io_readwrite_loop_$bb26(in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i8, in_$p79: ref, in_$i86: i1, in_$i87: i64, in_$i88: i1, in_$i89: i1, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$i104: i64, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i111: i16, in_$i112: i32, in_$i113: i16, in_$p114: ref, in_$p115: ref, in_$i116: i32, in_$i117: i16, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i124: i1, in_$i125: i64, in_$i126: i1, in_$i127: i8, in_$i128: i32, in_$i129: i8, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i8, in_$i134: i32, in_$i135: i1, in_$p121: ref, in_$i122: i64, in_$i123: i32, in_$p100: ref, in_$i101: i64, in_$i102: i64, in_$i103: i32, in_$i136: i64, in_$i137: i64, in_$i138: i64, in_$i139: i64, in_$i140: i64, in_$p141: ref, in_$i142: i64, in_$i143: i64, in_$i144: i1, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$i145: i64) returns (out_$i86: i1, out_$i87: i64, out_$i88: i1, out_$i89: i1, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$i104: i64, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i111: i16, out_$i112: i32, out_$i113: i16, out_$p114: ref, out_$p115: ref, out_$i116: i32, out_$i117: i16, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i124: i1, out_$i125: i64, out_$i126: i1, out_$i127: i8, out_$i128: i32, out_$i129: i8, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i8, out_$i134: i32, out_$i135: i1, out_$p121: ref, out_$i122: i64, out_$i123: i32, out_$p100: ref, out_$i101: i64, out_$i102: i64, out_$i103: i32, out_$i136: i64, out_$i137: i64, out_$i138: i64, out_$i139: i64, out_$i140: i64, out_$p141: ref, out_$i142: i64, out_$i143: i64, out_$i144: i1, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$i145: i64);
  modifies $M.1;



implementation vfio_pci_mem_readwrite_loop_$bb101(in_$i197: i64, in_$i203: i32, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$i207: i64, in_$i208: i64, in_$i209: i64, in_$i210: i1, in_$i202: i64, in_$p109: ref, in_$i110: i64, in_$i112: i64) returns (out_$i203: i32, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$i207: i64, out_$i208: i64, out_$i209: i64, out_$i210: i1, out_$i202: i64)
{

  entry:
    out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i202 := in_$i203, in_$p204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i202;
    goto $bb101, exit;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  $bb107:
    assume out_$i210 == 1;
    assume {:verifier.code 0} true;
    out_$i202 := out_$i209;
    goto $bb107_dummy;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i210 := $ugt.i64(in_$i197, out_$i209);
    goto corral_source_split_2812;

  $bb106:
    assume {:verifier.code 0} true;
    out_$i209 := $add.i64(out_$i202, 1);
    call {:si_unique_call 565} {:cexpr "i"} boogie_si_record_i64(out_$i209);
    goto corral_source_split_2811;

  $bb105:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$i207, out_$i208 := in_$i112, in_$i110;
    assume true;
    goto $bb105;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i206 := $ne.i32(out_$i205, 0);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref(in_$p109, $mul.ref(out_$i202, 1));
    call {:si_unique_call 563} out_$i205 := devirtbounce.5(0, out_$i203, out_$p204);
    call {:si_unique_call 564} {:cexpr "__ret_pu"} boogie_si_record_i32(out_$i205);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i8.i32($sub.i8(0, 1));
    goto corral_source_split_2804;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} might_fault();
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb107_dummy:
    call {:si_unique_call 1} out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i202 := vfio_pci_mem_readwrite_loop_$bb101(in_$i197, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i202, in_$p109, in_$i110, in_$i112);
    return;

  exit:
    return;
}



procedure vfio_pci_mem_readwrite_loop_$bb101(in_$i197: i64, in_$i203: i32, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$i207: i64, in_$i208: i64, in_$i209: i64, in_$i210: i1, in_$i202: i64, in_$p109: ref, in_$i110: i64, in_$i112: i64) returns (out_$i203: i32, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$i207: i64, out_$i208: i64, out_$i209: i64, out_$i210: i1, out_$i202: i64);
  modifies $M.9;



implementation vfio_pci_mem_readwrite_loop_$bb41(in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i8, in_$i53: i64, in_$p62: ref, in_$i63: i64, in_$i113: i64, in_$i114: i1, in_$i115: i64, in_$i116: i64, in_$i118: i1, in_$i119: i64, in_$i120: i64, in_$i117: i64, in_$i121: i1, in_$i122: i64, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$i129: i64, in_$i130: i64, in_$i133: i32, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$i140: i64, in_$i141: i64, in_$i147: i1, in_$i148: i64, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$p152: ref, in_$i153: i64, in_$i154: i1, in_$i155: i64, in_$i156: i64, in_$i157: i16, in_$i158: i32, in_$i159: i16, in_$p160: ref, in_$p161: ref, in_$i162: i32, in_$i163: i16, in_$p164: ref, in_$i165: i32, in_$i166: i1, in_$i167: i64, in_$i168: i64, in_$i174: i1, in_$i175: i1, in_$i176: i64, in_$i177: i1, in_$i178: i64, in_$i179: i64, in_$i180: i8, in_$i181: i32, in_$i182: i8, in_$p183: ref, in_$p184: ref, in_$i185: i32, in_$i186: i8, in_$i187: i32, in_$i188: i1, in_$i189: i64, in_$i190: i64, in_$i196: i1, in_$i197: i64, in_$i198: i1, in_$i203: i32, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$i207: i64, in_$i208: i64, in_$i209: i64, in_$i210: i1, in_$i202: i64, in_$p199: ref, in_$i200: i64, in_$i201: i64, in_$p211: ref, in_$i212: i64, in_$i213: i64, in_$i214: i64, in_$p191: ref, in_$i192: i64, in_$i193: i64, in_$i194: i64, in_$i195: i64, in_$p169: ref, in_$i170: i64, in_$i171: i64, in_$i172: i64, in_$i173: i64, in_$p142: ref, in_$i143: i64, in_$i144: i64, in_$i145: i64, in_$i146: i64, in_$i215: i64, in_$i216: i64, in_$p217: ref, in_$i218: i64, in_$i219: i1, in_$p109: ref, in_$i110: i64, in_$i111: i64, in_$i112: i64, in_$i220: i64, in_$i221: i64) returns (out_$i113: i64, out_$i114: i1, out_$i115: i64, out_$i116: i64, out_$i118: i1, out_$i119: i64, out_$i120: i64, out_$i117: i64, out_$i121: i1, out_$i122: i64, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$i129: i64, out_$i130: i64, out_$i133: i32, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$i140: i64, out_$i141: i64, out_$i147: i1, out_$i148: i64, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$p152: ref, out_$i153: i64, out_$i154: i1, out_$i155: i64, out_$i156: i64, out_$i157: i16, out_$i158: i32, out_$i159: i16, out_$p160: ref, out_$p161: ref, out_$i162: i32, out_$i163: i16, out_$p164: ref, out_$i165: i32, out_$i166: i1, out_$i167: i64, out_$i168: i64, out_$i174: i1, out_$i175: i1, out_$i176: i64, out_$i177: i1, out_$i178: i64, out_$i179: i64, out_$i180: i8, out_$i181: i32, out_$i182: i8, out_$p183: ref, out_$p184: ref, out_$i185: i32, out_$i186: i8, out_$i187: i32, out_$i188: i1, out_$i189: i64, out_$i190: i64, out_$i196: i1, out_$i197: i64, out_$i198: i1, out_$i203: i32, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$i207: i64, out_$i208: i64, out_$i209: i64, out_$i210: i1, out_$i202: i64, out_$p199: ref, out_$i200: i64, out_$i201: i64, out_$p211: ref, out_$i212: i64, out_$i213: i64, out_$i214: i64, out_$p191: ref, out_$i192: i64, out_$i193: i64, out_$i194: i64, out_$i195: i64, out_$p169: ref, out_$i170: i64, out_$i171: i64, out_$i172: i64, out_$i173: i64, out_$p142: ref, out_$i143: i64, out_$i144: i64, out_$i145: i64, out_$i146: i64, out_$i215: i64, out_$i216: i64, out_$p217: ref, out_$i218: i64, out_$i219: i1, out_$p109: ref, out_$i110: i64, out_$i111: i64, out_$i112: i64, out_$i220: i64, out_$i221: i64)
{

  entry:
    out_$i113, out_$i114, out_$i115, out_$i116, out_$i118, out_$i119, out_$i120, out_$i117, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i133, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i196, out_$i197, out_$i198, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i202, out_$p199, out_$i200, out_$i201, out_$p211, out_$i212, out_$i213, out_$i214, out_$p191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p109, out_$i110, out_$i111, out_$i112, out_$i220, out_$i221 := in_$i113, in_$i114, in_$i115, in_$i116, in_$i118, in_$i119, in_$i120, in_$i117, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i133, in_$p134, in_$p135, in_$i136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$p152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$p160, in_$p161, in_$i162, in_$i163, in_$p164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$p183, in_$p184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i196, in_$i197, in_$i198, in_$i203, in_$p204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i202, in_$p199, in_$i200, in_$i201, in_$p211, in_$i212, in_$i213, in_$i214, in_$p191, in_$i192, in_$i193, in_$i194, in_$i195, in_$p169, in_$i170, in_$i171, in_$i172, in_$i173, in_$p142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i215, in_$i216, in_$p217, in_$i218, in_$i219, in_$p109, in_$i110, in_$i111, in_$i112, in_$i220, in_$i221;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;

  $bb111:
    assume out_$i219 == 1;
    assume {:verifier.code 0} true;
    out_$p109, out_$i110, out_$i111, out_$i112 := out_$p217, out_$i215, out_$i218, out_$i216;
    goto $bb111_dummy;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$i220, out_$i221 := out_$i216, out_$i215;
    assume true;
    goto $bb111;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    out_$i219 := $ne.i64(out_$i215, 0);
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$i218 := $add.i64(out_$i144, out_$i146);
    call {:si_unique_call 547} {:cexpr "pos"} boogie_si_record_i64(out_$i218);
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref(out_$p142, $mul.ref(out_$i146, 1));
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$i216 := $add.i64(out_$i145, out_$i146);
    call {:si_unique_call 546} {:cexpr "done"} boogie_si_record_i64(out_$i216);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$i215 := $sub.i64(out_$i143, out_$i146);
    call {:si_unique_call 545} {:cexpr "count"} boogie_si_record_i64(out_$i215);
    goto corral_source_split_2723;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p142, out_$i143, out_$i144, out_$i145, out_$i146 := out_$p169, out_$i170, out_$i171, out_$i172, out_$i173;
    goto $bb66;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p142, out_$i143, out_$i144, out_$i145, out_$i146 := out_$p109, out_$i110, out_$i111, out_$i112, 4;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} iowrite32(out_$i133, out_$p134);
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref(in_$p62, $mul.ref(out_$i111, 1));
    goto corral_source_split_2717;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.1, in_$p6);
    goto corral_source_split_2716;

  $bb59:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$i129, out_$i130 := out_$i112, out_$i110;
    assume true;
    goto $bb59;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, 0);
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} out_$i127 := copy_from_user(out_$p126, out_$p109, 4);
    call {:si_unique_call 540} {:cexpr "tmp"} boogie_si_record_i64(out_$i127);
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    out_$p126 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_2699;

  $bb56:
    assume out_$i125 == 1;
    goto corral_source_split_2698;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    out_$i125 := $trunc.i8.i1(in_$i9);
    goto corral_source_split_2696;

  $bb54:
    assume out_$i124 == 1;
    goto corral_source_split_2695;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$i124 := $ugt.i64(out_$i110, 3);
    goto corral_source_split_2693;

  $bb52:
    assume out_$i123 == 1;
    goto corral_source_split_2692;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i64(out_$i122, 0);
    goto corral_source_split_2688;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    out_$i122 := $and.i64(out_$i111, 3);
    goto corral_source_split_2687;

  $bb49:
    assume out_$i121 == 1;
    goto corral_source_split_2686;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    out_$i121 := $ugt.i64(out_$i117, 3);
    goto corral_source_split_2681;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_2680;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i117 := out_$i120;
    goto $bb45;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    out_$i117 := out_$i116;
    goto $bb45;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    out_$i116 := $sub.i64(out_$i115, out_$i111);
    call {:si_unique_call 537} {:cexpr "fillable"} boogie_si_record_i64(out_$i116);
    goto corral_source_split_2675;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i64($M.2, in_$p5);
    goto corral_source_split_2674;

  $bb43:
    assume out_$i114 == 1;
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    out_$i114 := $ult.i64(out_$i111, out_$i113);
    goto corral_source_split_2671;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i64($M.2, in_$p5);
    goto corral_source_split_2670;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb47:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i120 := 0;
    goto $bb48;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$i120 := out_$i119;
    goto $bb48;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$i119 := $sub.i64(in_$i53, out_$i111);
    call {:si_unique_call 538} {:cexpr "fillable"} boogie_si_record_i64(out_$i119);
    goto corral_source_split_2684;

  $bb46:
    assume out_$i118 == 1;
    goto corral_source_split_2683;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    out_$i118 := $uge.i64(out_$i111, in_$i63);
    goto corral_source_split_2678;

  $bb44:
    assume !(out_$i114 == 1);
    goto corral_source_split_2677;

  $bb64:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$i140, out_$i141 := out_$i112, out_$i110;
    assume true;
    goto $bb64;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$i139 := $ne.i32(out_$i138, 0);
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} out_$i138 := copy_to_user(out_$p109, out_$p137, 4);
    call {:si_unique_call 543} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i138);
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$p137 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, in_$p6, out_$i136);
    goto corral_source_split_2706;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} out_$i136 := ioread32(out_$p135);
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref(in_$p62, $mul.ref(out_$i111, 1));
    goto corral_source_split_2704;

  $bb57:
    assume !(out_$i125 == 1);
    goto corral_source_split_2703;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p169, out_$i170, out_$i171, out_$i172, out_$i173 := out_$p191, out_$i192, out_$i193, out_$i194, out_$i195;
    goto $bb83;

  $bb79:
    assume {:verifier.code 0} true;
    out_$p169, out_$i170, out_$i171, out_$i172, out_$i173 := out_$p109, out_$i110, out_$i111, out_$i112, 2;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} iowrite16(out_$i159, out_$p160);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref(in_$p62, $mul.ref(out_$i111, 1));
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$i159 := $trunc.i32.i16(out_$i158);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$i158 := $zext.i16.i32(out_$i157);
    goto corral_source_split_2758;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i16($M.1, in_$p7);
    goto corral_source_split_2757;

  $bb77:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$i155, out_$i156 := out_$i112, out_$i110;
    assume true;
    goto $bb77;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$i154 := $ne.i64(out_$i153, 0);
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} out_$i153 := copy_from_user(out_$p152, out_$p109, 2);
    call {:si_unique_call 549} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i153);
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$p152 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_2742;

  $bb74:
    assume out_$i151 == 1;
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$i151 := $trunc.i8.i1(in_$i9);
    goto corral_source_split_2739;

  $bb72:
    assume out_$i150 == 1;
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$i150 := $ugt.i64(out_$i110, 1);
    goto corral_source_split_2736;

  $bb70:
    assume out_$i149 == 1;
    goto corral_source_split_2735;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i64(out_$i148, 0);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    out_$i148 := $and.i64(out_$i111, 1);
    goto corral_source_split_2730;

  $bb67:
    assume out_$i147 == 1;
    goto corral_source_split_2729;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i147 := $ugt.i64(out_$i117, 1);
    goto corral_source_split_2690;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb51;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i123 == 1);
    goto $bb51;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb51;

  $bb81:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$i167, out_$i168 := out_$i112, out_$i110;
    assume true;
    goto $bb81;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    out_$i166 := $ne.i32(out_$i165, 0);
    goto corral_source_split_2753;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_$i165 := copy_to_user(out_$p109, out_$p164, 2);
    call {:si_unique_call 553} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$p164 := $bitcast.ref.ref(in_$p7);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, in_$p7, out_$i163);
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$i163 := $trunc.i32.i16(out_$i162);
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} out_$i162 := ioread16(out_$p161);
    call {:si_unique_call 551} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i162);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref(in_$p62, $mul.ref(out_$i111, 1));
    goto corral_source_split_2747;

  $bb75:
    assume !(out_$i151 == 1);
    goto corral_source_split_2746;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$i214 := $sub.i64(in_$i63, out_$i111);
    call {:si_unique_call 566} {:cexpr "filled"} boogie_si_record_i64(out_$i214);
    assume {:verifier.code 0} true;
    out_$p191, out_$i192, out_$i193, out_$i194, out_$i195 := out_$p211, out_$i212, out_$i111, out_$i213, out_$i214;
    goto $bb95;

  $bb91:
    assume {:verifier.code 0} true;
    out_$p191, out_$i192, out_$i193, out_$i194, out_$i195 := out_$p109, out_$i110, out_$i111, out_$i112, 1;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} iowrite8(out_$i182, out_$p183);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref(in_$p62, $mul.ref(out_$i111, 1));
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$i182 := $trunc.i32.i8(out_$i181);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$i181 := $zext.i8.i32(out_$i180);
    goto corral_source_split_2786;

  $bb90:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i8($M.1, in_$p8);
    goto corral_source_split_2785;

  $bb89:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i178, out_$i179 := out_$i112, out_$i110;
    assume true;
    goto $bb89;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i64(out_$i176, 0);
    goto corral_source_split_2773;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} out_$i176 := copy_from_user(in_$p8, out_$p109, 1);
    call {:si_unique_call 556} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i176);
    goto corral_source_split_2772;

  $bb86:
    assume out_$i175 == 1;
    goto corral_source_split_2771;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$i175 := $trunc.i8.i1(in_$i9);
    goto corral_source_split_2766;

  $bb84:
    assume out_$i174 == 1;
    goto corral_source_split_2765;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i174 := $ne.i64(out_$i117, 0);
    goto corral_source_split_2733;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i147 == 1);
    goto $bb69;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i149 == 1);
    goto $bb69;

  $bb73:
    assume {:verifier.code 0} true;
    assume !(out_$i150 == 1);
    goto $bb69;

  $bb93:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$i189, out_$i190 := out_$i112, out_$i110;
    assume true;
    goto $bb93;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    out_$i188 := $ne.i32(out_$i187, 0);
    goto corral_source_split_2781;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} out_$i187 := copy_to_user(out_$p109, in_$p8, 1);
    call {:si_unique_call 560} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, in_$p8, out_$i186);
    goto corral_source_split_2779;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i186 := $trunc.i32.i8(out_$i185);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} out_$i185 := ioread8(out_$p184);
    call {:si_unique_call 558} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i185);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref(in_$p62, $mul.ref(out_$i111, 1));
    goto corral_source_split_2776;

  $bb87:
    assume !(out_$i175 == 1);
    goto corral_source_split_2775;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2816;

  $bb109:
    assume {:verifier.code 0} true;
    out_$p211, out_$i212, out_$i213 := out_$p199, out_$i200, out_$i201;
    goto $bb110;

  $bb96:
    assume out_$i196 == 1;
    assume {:verifier.code 0} true;
    out_$p211, out_$i212, out_$i213 := out_$p109, out_$i110, out_$i112;
    goto $bb110;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$i196 := $trunc.i8.i1(in_$i9);
    goto corral_source_split_2769;

  $bb85:
    assume !(out_$i174 == 1);
    goto corral_source_split_2768;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb100:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2799;

  $bb99:
    assume {:verifier.code 0} true;
    assume !(out_$i198 == 1);
    goto $bb100;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$p199, out_$i200, out_$i201 := out_$p109, out_$i110, out_$i112;
    goto $bb100;

  $bb108:
    assume !(out_$i210 == 1);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i210 := $ugt.i64(out_$i197, out_$i209);
    goto corral_source_split_2812;

  $bb106:
    assume {:verifier.code 0} true;
    out_$i209 := $add.i64(out_$i202, 1);
    call {:si_unique_call 565} {:cexpr "i"} boogie_si_record_i64(out_$i209);
    goto corral_source_split_2811;

  $bb105:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$i207, out_$i208 := out_$i112, out_$i110;
    assume true;
    goto $bb105;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i206 := $ne.i32(out_$i205, 0);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref(out_$p109, $mul.ref(out_$i202, 1));
    call {:si_unique_call 563} out_$i205 := devirtbounce.5(0, out_$i203, out_$p204);
    call {:si_unique_call 564} {:cexpr "__ret_pu"} boogie_si_record_i32(out_$i205);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i8.i32($sub.i8(0, 1));
    goto corral_source_split_2804;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} might_fault();
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    call out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i202 := vfio_pci_mem_readwrite_loop_$bb101(out_$i197, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i202, out_$p109, out_$i110, out_$i112);
    goto $bb101_last;

  $bb101_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2801;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$i202 := 0;
    goto $bb101;

  $bb107:
    assume out_$i210 == 1;
    assume {:verifier.code 0} true;
    out_$i202 := out_$i209;
    assume false;
    return;

  $bb98:
    assume out_$i198 == 1;
    goto corral_source_split_2797;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$p199, out_$i200, out_$i201 := out_$p109, out_$i110, out_$i112;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$i198 := $ugt.i64(out_$i197, 0);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$i197 := $sub.i64(in_$i63, out_$i111);
    goto corral_source_split_2794;

  $bb97:
    assume !(out_$i196 == 1);
    goto corral_source_split_2793;

  $bb111_dummy:
    call {:si_unique_call 1} out_$i113, out_$i114, out_$i115, out_$i116, out_$i118, out_$i119, out_$i120, out_$i117, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i133, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i196, out_$i197, out_$i198, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i202, out_$p199, out_$i200, out_$i201, out_$p211, out_$i212, out_$i213, out_$i214, out_$p191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p109, out_$i110, out_$i111, out_$i112, out_$i220, out_$i221 := vfio_pci_mem_readwrite_loop_$bb41(in_$p5, in_$p6, in_$p7, in_$p8, in_$i9, in_$i53, in_$p62, in_$i63, out_$i113, out_$i114, out_$i115, out_$i116, out_$i118, out_$i119, out_$i120, out_$i117, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i133, out_$p134, out_$p135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i196, out_$i197, out_$i198, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i202, out_$p199, out_$i200, out_$i201, out_$p211, out_$i212, out_$i213, out_$i214, out_$p191, out_$i192, out_$i193, out_$i194, out_$i195, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p109, out_$i110, out_$i111, out_$i112, out_$i220, out_$i221);
    return;

  exit:
    return;
}



procedure vfio_pci_mem_readwrite_loop_$bb41(in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i8, in_$i53: i64, in_$p62: ref, in_$i63: i64, in_$i113: i64, in_$i114: i1, in_$i115: i64, in_$i116: i64, in_$i118: i1, in_$i119: i64, in_$i120: i64, in_$i117: i64, in_$i121: i1, in_$i122: i64, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$i129: i64, in_$i130: i64, in_$i133: i32, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$p137: ref, in_$i138: i32, in_$i139: i1, in_$i140: i64, in_$i141: i64, in_$i147: i1, in_$i148: i64, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$p152: ref, in_$i153: i64, in_$i154: i1, in_$i155: i64, in_$i156: i64, in_$i157: i16, in_$i158: i32, in_$i159: i16, in_$p160: ref, in_$p161: ref, in_$i162: i32, in_$i163: i16, in_$p164: ref, in_$i165: i32, in_$i166: i1, in_$i167: i64, in_$i168: i64, in_$i174: i1, in_$i175: i1, in_$i176: i64, in_$i177: i1, in_$i178: i64, in_$i179: i64, in_$i180: i8, in_$i181: i32, in_$i182: i8, in_$p183: ref, in_$p184: ref, in_$i185: i32, in_$i186: i8, in_$i187: i32, in_$i188: i1, in_$i189: i64, in_$i190: i64, in_$i196: i1, in_$i197: i64, in_$i198: i1, in_$i203: i32, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$i207: i64, in_$i208: i64, in_$i209: i64, in_$i210: i1, in_$i202: i64, in_$p199: ref, in_$i200: i64, in_$i201: i64, in_$p211: ref, in_$i212: i64, in_$i213: i64, in_$i214: i64, in_$p191: ref, in_$i192: i64, in_$i193: i64, in_$i194: i64, in_$i195: i64, in_$p169: ref, in_$i170: i64, in_$i171: i64, in_$i172: i64, in_$i173: i64, in_$p142: ref, in_$i143: i64, in_$i144: i64, in_$i145: i64, in_$i146: i64, in_$i215: i64, in_$i216: i64, in_$p217: ref, in_$i218: i64, in_$i219: i1, in_$p109: ref, in_$i110: i64, in_$i111: i64, in_$i112: i64, in_$i220: i64, in_$i221: i64) returns (out_$i113: i64, out_$i114: i1, out_$i115: i64, out_$i116: i64, out_$i118: i1, out_$i119: i64, out_$i120: i64, out_$i117: i64, out_$i121: i1, out_$i122: i64, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$i129: i64, out_$i130: i64, out_$i133: i32, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$p137: ref, out_$i138: i32, out_$i139: i1, out_$i140: i64, out_$i141: i64, out_$i147: i1, out_$i148: i64, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$p152: ref, out_$i153: i64, out_$i154: i1, out_$i155: i64, out_$i156: i64, out_$i157: i16, out_$i158: i32, out_$i159: i16, out_$p160: ref, out_$p161: ref, out_$i162: i32, out_$i163: i16, out_$p164: ref, out_$i165: i32, out_$i166: i1, out_$i167: i64, out_$i168: i64, out_$i174: i1, out_$i175: i1, out_$i176: i64, out_$i177: i1, out_$i178: i64, out_$i179: i64, out_$i180: i8, out_$i181: i32, out_$i182: i8, out_$p183: ref, out_$p184: ref, out_$i185: i32, out_$i186: i8, out_$i187: i32, out_$i188: i1, out_$i189: i64, out_$i190: i64, out_$i196: i1, out_$i197: i64, out_$i198: i1, out_$i203: i32, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$i207: i64, out_$i208: i64, out_$i209: i64, out_$i210: i1, out_$i202: i64, out_$p199: ref, out_$i200: i64, out_$i201: i64, out_$p211: ref, out_$i212: i64, out_$i213: i64, out_$i214: i64, out_$p191: ref, out_$i192: i64, out_$i193: i64, out_$i194: i64, out_$i195: i64, out_$p169: ref, out_$i170: i64, out_$i171: i64, out_$i172: i64, out_$i173: i64, out_$p142: ref, out_$i143: i64, out_$i144: i64, out_$i145: i64, out_$i146: i64, out_$i215: i64, out_$i216: i64, out_$p217: ref, out_$i218: i64, out_$i219: i1, out_$p109: ref, out_$i110: i64, out_$i111: i64, out_$i112: i64, out_$i220: i64, out_$i221: i64);
  modifies $M.1, $M.9;



implementation vfio_find_cap_start_loop_$bb11(in_$i4: i32, in_$i10: i8, in_$p14: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i18: i32, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i22: i32) returns (out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i18: i32, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i22: i32)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$i18, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i22 := in_$i19, in_$i20, in_$i21, in_$i18, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i22;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3073;

  $bb13:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i19;
    goto $bb13_dummy;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i19;
    assume true;
    goto $bb13;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$i21 := $sge.i32(out_$i20, in_$i4);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i19, $sub.i32(0, 1));
    goto corral_source_split_3084;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i19 := $sub.i32(out_$i18, 1);
    call {:si_unique_call 625} {:cexpr "pos"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3083;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume out_$i30 == 1;
    goto corral_source_split_3089;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i18;
    assume true;
    goto $bb15;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i28, out_$i29);
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(in_$i10);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i27);
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i8($M.1, out_$p26);
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p23, $mul.ref(out_$i25, 1));
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i64(out_$i24, $sub.i64(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i18);
    goto corral_source_split_3075;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, in_$p14);
    goto corral_source_split_3074;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$i18, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i22 := vfio_find_cap_start_loop_$bb11(in_$i4, in_$i10, in_$p14, out_$i19, out_$i20, out_$i21, out_$i18, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i22);
    return;

  exit:
    return;
}



procedure vfio_find_cap_start_loop_$bb11(in_$i4: i32, in_$i10: i8, in_$p14: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i18: i32, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i22: i32) returns (out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i18: i32, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i22: i32);



implementation {:SIextraRecBound 6} vfio_pci_disable_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$i7 := in_$i8, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p16, in_$p17, in_$i18, in_$i19, in_$p21, in_$i22, in_$i23, in_$i7;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3113;

  $bb7:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i22;
    goto $bb7_dummy;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$i23 := $sle.i32(out_$i22, 5);
    goto corral_source_split_3124;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i7, 1);
    call {:si_unique_call 631} {:cexpr "bar"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3123;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i13 == 1;
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i12, 0);
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.1, out_$p10);
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_3116;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p21, $0.ref);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref(out_$i19, 8));
    goto corral_source_split_3133;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} pci_release_selected_regions(in_$p2, out_$i18);
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i18 := $shl.i32(1, out_$i7);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} pci_iounmap(in_$p2, out_$p17);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(8, 1)), $mul.ref(out_$i14, 8));
    goto corral_source_split_3127;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3126;

  $bb4:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$i7 := vfio_pci_disable_loop_$bb1(in_$p0, in_$p2, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$i7);
    return;

  exit:
    return;
}



procedure vfio_pci_disable_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i7: i32);
  modifies $M.1;



implementation vfio_fill_vconfig_bytes_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i23: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i16, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i9: i32, in_$i10: i32, in_$i53: i32) returns (out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i23: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i16, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i9: i32, out_$i10: i32, out_$i53: i32)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i40, out_$i41, out_$i42, out_$i24, out_$i25, out_$i26, out_$i27, out_$i50, out_$i51, out_$i52, out_$i9, out_$i10, out_$i53 := in_$i11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p43, in_$p44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i40, in_$i41, in_$i42, in_$i24, in_$i25, in_$i26, in_$i27, in_$i50, in_$i51, in_$i52, in_$i9, in_$i10, in_$i53;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3512;

  $bb28:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$i10 := out_$i50, out_$i51;
    goto $bb28_dummy;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i26;
    assume true;
    goto $bb28;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_3541;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    out_$i51 := $sub.i32(out_$i25, out_$i27);
    call {:si_unique_call 738} {:cexpr "size"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_3540;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i24, out_$i27);
    call {:si_unique_call 737} {:cexpr "offset"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3539;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3538;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i24, out_$i25, out_$i26, out_$i27 := out_$i40, out_$i10, out_$i41, out_$i42;
    goto $bb15;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    out_$i24, out_$i25, out_$i26, out_$i27 := out_$i9, out_$i10, out_$i19, 4;
    goto $bb15;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p18, out_$i23);
    goto corral_source_split_3536;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.19, in_$p3);
    goto corral_source_split_3535;

  $bb12:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i19;
    assume true;
    goto $bb12;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_3529;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} out_$i19 := pci_read_config_dword(in_$p6, out_$i9, in_$p3);
    call {:si_unique_call 736} {:cexpr "ret"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3528;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 4));
    goto corral_source_split_3527;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i9);
    goto corral_source_split_3526;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_3525;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.11, out_$p14);
    goto corral_source_split_3524;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3523;

  $bb9:
    assume out_$i13 == 1;
    goto corral_source_split_3522;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_3518;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i12 := $and.i32(out_$i9, 3);
    goto corral_source_split_3517;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $sgt.i32(out_$i10, 3);
    goto corral_source_split_3514;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i9, out_$i47, 1;
    goto $bb24;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41, out_$i42 := out_$i9, out_$i36, 2;
    goto $bb24;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, out_$p35, out_$i39);
    goto corral_source_split_3566;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i16($M.5, in_$p4);
    goto corral_source_split_3565;

  $bb22:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb22;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} out_$i36 := pci_read_config_word(in_$p6, out_$i9, in_$p4);
    call {:si_unique_call 742} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3560;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p33, $mul.ref(out_$i34, 2));
    goto corral_source_split_3559;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i9);
    goto corral_source_split_3558;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_3557;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.11, out_$p31);
    goto corral_source_split_3556;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3555;

  $bb19:
    assume out_$i30 == 1;
    goto corral_source_split_3554;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_3545;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i9, 1);
    goto corral_source_split_3544;

  $bb16:
    assume out_$i28 == 1;
    goto corral_source_split_3543;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i28 := $sgt.i32(out_$i10, 1);
    goto corral_source_split_3520;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb8;

  $bb26:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i47;
    assume true;
    goto $bb26;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} out_$i47 := pci_read_config_byte(in_$p6, out_$i9, out_$p46);
    call {:si_unique_call 740} {:cexpr "ret"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3551;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p44, $mul.ref(out_$i45, 1));
    goto corral_source_split_3550;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i9);
    goto corral_source_split_3549;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.11, out_$p43);
    goto corral_source_split_3548;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3547;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb18;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i40, out_$i41, out_$i42, out_$i24, out_$i25, out_$i26, out_$i27, out_$i50, out_$i51, out_$i52, out_$i9, out_$i10, out_$i53 := vfio_fill_vconfig_bytes_loop_$bb4(in_$p0, in_$p3, in_$p4, in_$p6, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p43, out_$p44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i40, out_$i41, out_$i42, out_$i24, out_$i25, out_$i26, out_$i27, out_$i50, out_$i51, out_$i52, out_$i9, out_$i10, out_$i53);
    return;

  exit:
    return;
}



procedure vfio_fill_vconfig_bytes_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i23: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i16, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i9: i32, in_$i10: i32, in_$i53: i32) returns (out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i23: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i16, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i9: i32, out_$i10: i32, out_$i53: i32);
  modifies $M.1;



implementation vfio_cap_init_loop_$bb39(in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p8: ref, in_$i63: i32, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i64, in_$p82: ref, in_$i83: i8, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i64, in_$i88: i64, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i32, in_$i95: i8, in_$i96: i32, in_$i97: i32, in_$i98: i64, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$i102: i8, in_$i103: i32, in_$i105: i32, in_$i106: i1, in_$i76: i32, in_vslice_dummy_var_80: i32) returns (out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i64, out_$p82: ref, out_$i83: i8, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i64, out_$i88: i64, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i32, out_$i95: i8, out_$i96: i32, out_$i97: i32, out_$i98: i64, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$i102: i8, out_$i103: i32, out_$i105: i32, out_$i106: i1, out_$i76: i32, out_vslice_dummy_var_80: i32)
{

  entry:
    out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i76, out_vslice_dummy_var_80 := in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i105, in_$i106, in_$i76, in_vslice_dummy_var_80;
    goto $bb39, exit;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3674;

  $bb45:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := out_$i105;
    goto $bb45_dummy;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i105, in_$i63);
    goto corral_source_split_3693;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i76, 4);
    call {:si_unique_call 762} {:cexpr "i"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_3692;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i89 == 1;
    goto corral_source_split_3690;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i64(out_$i88, 0);
    goto corral_source_split_3688;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_$i88 := ldv__builtin_expect(out_$i87, 1);
    call {:si_unique_call 761} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i88);
    goto corral_source_split_3687;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i86);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i1.i32(out_$i85);
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 255);
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i8.i32(out_$i83);
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i8($M.1, out_$p82);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(in_$p8, $mul.ref(out_$i81, 1));
    goto corral_source_split_3681;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i80);
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    out_$i80 := $sdiv.i32(out_$i79, 4);
    goto corral_source_split_3679;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, out_$i76);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3677;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_vslice_dummy_var_80 := printk.ref.ref.ref.i32.i32.i32(.str.24, .str.23, out_$p91, out_$i94, out_$i101, out_$i103);
    goto corral_source_split_3709;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i100);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i8($M.1, out_$p99);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(in_$p8, $mul.ref(out_$i98, 1));
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i97);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i96, out_$i76);
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i32(out_$i95);
    goto corral_source_split_3701;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i93, out_$i76);
    goto corral_source_split_3699;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i8.i32(out_$i92);
    goto corral_source_split_3698;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3697;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} out_$p91 := dev_name(out_$p90);
    goto corral_source_split_3696;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3695;

  $bb42:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i76, out_vslice_dummy_var_80 := vfio_cap_init_loop_$bb39(in_$p2, in_$p3, in_$p6, in_$p8, in_$i63, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i76, out_vslice_dummy_var_80);
    return;

  exit:
    return;
}



procedure vfio_cap_init_loop_$bb39(in_$p2: ref, in_$p3: ref, in_$p6: ref, in_$p8: ref, in_$i63: i32, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i64, in_$p82: ref, in_$i83: i8, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i64, in_$i88: i64, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i32, in_$i95: i8, in_$i96: i32, in_$i97: i32, in_$i98: i64, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$i102: i8, in_$i103: i32, in_$i105: i32, in_$i106: i1, in_$i76: i32, in_vslice_dummy_var_80: i32) returns (out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i64, out_$p82: ref, out_$i83: i8, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i64, out_$i88: i64, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i32, out_$i95: i8, out_$i96: i32, out_$i97: i32, out_$i98: i64, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$i102: i8, out_$i103: i32, out_$i105: i32, out_$i106: i1, out_$i76: i32, out_vslice_dummy_var_80: i32);



implementation vfio_cap_init_loop_$bb53(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i32, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p64: ref, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i69: i8, in_$i70: i8, in_$i71: i8, in_$i72: i32, in_$i73: i1, in_$i61: i32, in_$i63: i32, in_$i25: i32, in_$p26: ref, in_$i134: i32, in_$i62: i32, in_$i135: i1, in_$i136: i32, in_$i74: i32, in_vslice_dummy_var_79: i32) returns (out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i32, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p64: ref, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i69: i8, out_$i70: i8, out_$i71: i8, out_$i72: i32, out_$i73: i1, out_$i61: i32, out_$i63: i32, out_$i134: i32, out_$i62: i32, out_$i135: i1, out_$i136: i32, out_$i74: i32, out_vslice_dummy_var_79: i32)
{

  entry:
    out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i134, out_$i62, out_$i135, out_$i136, out_$i74, out_vslice_dummy_var_79 := in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p64, in_$p65, in_$i66, in_$i67, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i61, in_$i63, in_$i134, in_$i62, in_$i135, in_$i136, in_$i74, in_vslice_dummy_var_79;
    goto $bb53, exit;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_3746;

  $bb33:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i134 := out_$i62;
    goto $bb33_dummy;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$i74 := in_$i25;
    assume true;
    goto $bb33;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, in_$p2, out_$i70);
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i8($M.23, in_$p4);
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, in_$p26, out_$i69);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.23, in_$p4);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} out_vslice_dummy_var_79 := printk.ref.ref.ref.i32(.str.22, .str.23, out_$p65, out_$i67);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_$p65 := dev_name(out_$p64);
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3655;

  $bb31:
    assume out_$i60 == 1;
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$i61, out_$i63 := out_$i62, out_$i59;
    assume true;
    goto $bb31;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_3652;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3651;

  $bb23:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := 0;
    goto $bb30;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i58;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3649;

  $bb25:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := out_$i47;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i55;
    goto $bb29;

  $bb27:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i55;
    assume true;
    goto $bb27;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i55, 0);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} out_$i55 := vfio_cap_len(in_$p0, out_$i51, out_$i54);
    call {:si_unique_call 757} {:cexpr "len"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i8(out_$i53);
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3641;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i8(out_$i50);
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_3639;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3638;

  $bb24:
    assume out_$i48 == 1;
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 255);
    goto corral_source_split_3635;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    call {:si_unique_call 755} {:cexpr "len"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.22, out_$p45);
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(out_$i44, 1));
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3629;

  $bb22:
    assume out_$i41 == 1;
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$i41 := $ule.i32(out_$i40, 19);
    goto corral_source_split_3626;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_3625;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3624;

  $bb20:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb20;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_3620;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} out_$i36 := pci_read_config_byte(in_$p6, out_$i35, in_$p4);
    call {:si_unique_call 754} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3619;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i34, 1);
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_3617;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3616;

  $bb17:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    assume true;
    goto $bb17;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} out_$i30 := pci_read_config_byte(in_$p6, out_$i29, in_$p3);
    call {:si_unique_call 752} {:cexpr "ret"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_3610;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3609;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb54:
    assume out_$i135 == 1;
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    out_$i136 := in_$i25;
    assume true;
    goto $bb54;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i134, 0);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i32(out_$i134, 1);
    call {:si_unique_call 769} {:cexpr "loops"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3747;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i134, out_$i62, out_$i135, out_$i136, out_$i74, out_vslice_dummy_var_79 := vfio_cap_init_loop_$bb53(in_$p0, in_$p2, in_$p3, in_$p4, in_$p6, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, in_$i25, in_$p26, out_$i134, out_$i62, out_$i135, out_$i136, out_$i74, out_vslice_dummy_var_79);
    return;

  exit:
    return;
}



procedure vfio_cap_init_loop_$bb53(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i32, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p64: ref, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i69: i8, in_$i70: i8, in_$i71: i8, in_$i72: i32, in_$i73: i1, in_$i61: i32, in_$i63: i32, in_$i25: i32, in_$p26: ref, in_$i134: i32, in_$i62: i32, in_$i135: i1, in_$i136: i32, in_$i74: i32, in_vslice_dummy_var_79: i32) returns (out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i32, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p64: ref, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i69: i8, out_$i70: i8, out_$i71: i8, out_$i72: i32, out_$i73: i1, out_$i61: i32, out_$i63: i32, out_$i134: i32, out_$i62: i32, out_$i135: i1, out_$i136: i32, out_$i74: i32, out_vslice_dummy_var_79: i32);
  modifies $M.20, $M.1, $M.11, $M.26, $CurrAddr;



implementation vfio_cap_init_loop_$bb14(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i32, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p64: ref, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i69: i8, in_$i70: i8, in_$i71: i8, in_$i72: i32, in_$i73: i1, in_$i61: i32, in_$i63: i32, in_$i75: i1, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i64, in_$p82: ref, in_$i83: i8, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i64, in_$i88: i64, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i32, in_$i95: i8, in_$i96: i32, in_$i97: i32, in_$i98: i64, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$i102: i8, in_$i103: i32, in_$i105: i32, in_$i106: i1, in_$i76: i32, in_$i107: i8, in_$i108: i32, in_$i109: i32, in_$i110: i64, in_$p111: ref, in_$i112: i8, in_$i113: i32, in_$i114: i8, in_$i115: i32, in_$i116: i64, in_$i117: i8, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$i124: i8, in_$i125: i64, in_$i126: i64, in_$p127: ref, in_$i128: i8, in_$i129: i32, in_$i130: i8, in_$i131: i32, in_$i132: i1, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i134: i32, in_$i62: i32, in_$i135: i1, in_$i136: i32, in_$i133: i32, in_$i74: i32, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32) returns (out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i32, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p64: ref, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i69: i8, out_$i70: i8, out_$i71: i8, out_$i72: i32, out_$i73: i1, out_$i61: i32, out_$i63: i32, out_$i75: i1, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i64, out_$p82: ref, out_$i83: i8, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i64, out_$i88: i64, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i32, out_$i95: i8, out_$i96: i32, out_$i97: i32, out_$i98: i64, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$i102: i8, out_$i103: i32, out_$i105: i32, out_$i106: i1, out_$i76: i32, out_$i107: i8, out_$i108: i32, out_$i109: i32, out_$i110: i64, out_$p111: ref, out_$i112: i8, out_$i113: i32, out_$i114: i8, out_$i115: i32, out_$i116: i64, out_$i117: i8, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$i124: i8, out_$i125: i64, out_$i126: i64, out_$p127: ref, out_$i128: i8, out_$i129: i32, out_$i130: i8, out_$i131: i32, out_$i132: i1, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i134: i32, out_$i62: i32, out_$i135: i1, out_$i136: i32, out_$i133: i32, out_$i74: i32, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32)
{

  entry:
    out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i75, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i76, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i25, out_$p26, out_$i27, out_$i134, out_$i62, out_$i135, out_$i136, out_$i133, out_$i74, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_79, out_vslice_dummy_var_80 := in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p64, in_$p65, in_$i66, in_$i67, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i61, in_$i63, in_$i75, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i105, in_$i106, in_$i76, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$p122, in_$p123, in_$i124, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i25, in_$p26, in_$i27, in_$i134, in_$i62, in_$i135, in_$i136, in_$i133, in_$i74, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_vslice_dummy_var_79, in_vslice_dummy_var_80;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3607;

  $bb51:
    assume out_$i132 == 1;
    assume {:verifier.code 0} true;
    out_$i25, out_$p26, out_$i27 := out_$i129, out_$p127, out_$i61;
    goto $bb51_dummy;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$i133 := out_$i129;
    assume true;
    goto $bb51;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i32(out_$i131, 0);
    goto corral_source_split_3742;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$i131 := $zext.i8.i32(out_$i130);
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3740;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    out_$i129 := $add.i32(out_$i25, 1);
    call {:si_unique_call 768} {:cexpr "caps"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_3739;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, in_$p2, out_$i128);
    goto corral_source_split_3738;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i8($M.23, in_$p4);
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(out_$p123, $mul.ref(out_$i126, 1));
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    out_$i126 := $add.i64(out_$i125, 1);
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i8.i64(out_$i124);
    goto corral_source_split_3734;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.11, out_$p122);
    goto corral_source_split_3732;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3731;

  $bb49:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i119;
    assume true;
    goto $bb49;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_3727;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_$i119 := vfio_fill_vconfig_bytes(in_$p0, out_$i118, out_$i63);
    call {:si_unique_call 767} {:cexpr "ret"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_3726;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i8.i32(out_$i117);
    goto corral_source_split_3725;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3724;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_16 := $M.1;
    call {:si_unique_call 765} out_cmdloc_dummy_var_17 := $memset.i8(out_cmdloc_dummy_var_16, out_$p111, out_$i114, out_$i116, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_17;
    goto corral_source_split_3723;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i115);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$i115 := $sdiv.i32(out_$i63, 4);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$i114 := $trunc.i32.i8(out_$i113);
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i8.i32(out_$i112);
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3718;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref(in_$p8, $mul.ref(out_$i110, 1));
    goto corral_source_split_3717;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i32.i64(out_$i109);
    goto corral_source_split_3716;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    out_$i109 := $udiv.i32(out_$i108, 4);
    goto corral_source_split_3715;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i8.i32(out_$i107);
    goto corral_source_split_3714;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3713;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb38;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb46:
    assume !(out_$i106 == 1);
    goto corral_source_split_3711;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i105, out_$i63);
    goto corral_source_split_3693;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i76, 4);
    call {:si_unique_call 762} {:cexpr "i"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_3692;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i89 == 1;
    goto corral_source_split_3690;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i64(out_$i88, 0);
    goto corral_source_split_3688;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_$i88 := ldv__builtin_expect(out_$i87, 1);
    call {:si_unique_call 761} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i88);
    goto corral_source_split_3687;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i86);
    goto corral_source_split_3686;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i1.i32(out_$i85);
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 255);
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i8.i32(out_$i83);
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i8($M.1, out_$p82);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(in_$p8, $mul.ref(out_$i81, 1));
    goto corral_source_split_3681;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i80);
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    out_$i80 := $sdiv.i32(out_$i79, 4);
    goto corral_source_split_3679;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, out_$i76);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i8.i32(out_$i77);
    goto corral_source_split_3677;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    call out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i76, out_vslice_dummy_var_80 := vfio_cap_init_loop_$bb39(in_$p2, in_$p3, in_$p6, in_$p8, out_$i63, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i76, out_vslice_dummy_var_80);
    goto $bb39_last;

  $bb39_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3674;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    out_$i76 := 0;
    goto $bb39;

  $bb45:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i76 := out_$i105;
    assume false;
    return;

  $bb36:
    assume out_$i75 == 1;
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(0, out_$i63);
    goto corral_source_split_3670;

  $bb32:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$i61, out_$i63 := out_$i62, out_$i59;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 0);
    goto corral_source_split_3652;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3651;

  $bb23:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := 0;
    goto $bb30;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i58;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3649;

  $bb25:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := out_$i47;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i55;
    goto $bb29;

  $bb27:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i55;
    assume true;
    goto $bb27;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i55, 0);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} out_$i55 := vfio_cap_len(in_$p0, out_$i51, out_$i54);
    call {:si_unique_call 757} {:cexpr "len"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$i54 := $trunc.i32.i8(out_$i53);
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3641;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i8(out_$i50);
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_3639;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3638;

  $bb24:
    assume out_$i48 == 1;
    goto corral_source_split_3637;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 255);
    goto corral_source_split_3635;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i8.i32(out_$i46);
    call {:si_unique_call 755} {:cexpr "len"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.22, out_$p45);
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(pci_cap_length, $mul.ref(0, 20)), $mul.ref(out_$i44, 1));
    goto corral_source_split_3632;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_3630;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3629;

  $bb22:
    assume out_$i41 == 1;
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$i41 := $ule.i32(out_$i40, 19);
    goto corral_source_split_3626;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_3625;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3624;

  $bb20:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    assume true;
    goto $bb20;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_3620;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} out_$i36 := pci_read_config_byte(in_$p6, out_$i35, in_$p4);
    call {:si_unique_call 754} {:cexpr "ret"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3619;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i34, 1);
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_3617;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3616;

  $bb17:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    assume true;
    goto $bb17;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} out_$i30 := pci_read_config_byte(in_$p6, out_$i29, in_$p3);
    call {:si_unique_call 752} {:cexpr "ret"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3611;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_3610;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3609;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb54:
    assume out_$i135 == 1;
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    out_$i136 := out_$i25;
    assume true;
    goto $bb54;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i134, 0);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i32(out_$i134, 1);
    call {:si_unique_call 769} {:cexpr "loops"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3747;

  $bb53:
    call out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i134, out_$i62, out_$i135, out_$i136, out_$i74, out_vslice_dummy_var_79 := vfio_cap_init_loop_$bb53(in_$p0, in_$p2, in_$p3, in_$p4, in_$p6, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i25, out_$p26, out_$i134, out_$i62, out_$i135, out_$i136, out_$i74, out_vslice_dummy_var_79);
    goto $bb53_last;

  $bb53_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3746;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i27;
    goto $bb53;

  $bb33:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i134 := out_$i62;
    assume false;
    return;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i25;
    assume true;
    goto $bb33;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, in_$p2, out_$i70);
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i8($M.23, in_$p4);
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, out_$p26, out_$i69);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.23, in_$p4);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} out_vslice_dummy_var_79 := printk.ref.ref.ref.i32(.str.22, .str.23, out_$p65, out_$i67);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_$p65 := dev_name(out_$p64);
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3655;

  $bb31:
    assume out_$i60 == 1;
    goto corral_source_split_3654;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_vslice_dummy_var_80 := printk.ref.ref.ref.i32.i32.i32(.str.24, .str.23, out_$p91, out_$i94, out_$i101, out_$i103);
    goto corral_source_split_3709;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.21, in_$p3);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i100);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i8($M.1, out_$p99);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(in_$p8, $mul.ref(out_$i98, 1));
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i97);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i96, out_$i76);
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i32(out_$i95);
    goto corral_source_split_3701;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i93, out_$i76);
    goto corral_source_split_3699;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i8.i32(out_$i92);
    goto corral_source_split_3698;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i8($M.20, in_$p2);
    goto corral_source_split_3697;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} out_$p91 := dev_name(out_$p90);
    goto corral_source_split_3696;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p6, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3695;

  $bb42:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i75, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i76, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i25, out_$p26, out_$i27, out_$i134, out_$i62, out_$i135, out_$i136, out_$i133, out_$i74, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_79, out_vslice_dummy_var_80 := vfio_cap_init_loop_$bb14(in_$p0, in_$p2, in_$p3, in_$p4, in_$p6, in_$p8, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p64, out_$p65, out_$i66, out_$i67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i61, out_$i63, out_$i75, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i105, out_$i106, out_$i76, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i25, out_$p26, out_$i27, out_$i134, out_$i62, out_$i135, out_$i136, out_$i133, out_$i74, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_vslice_dummy_var_79, out_vslice_dummy_var_80);
    return;

  exit:
    return;
}



procedure vfio_cap_init_loop_$bb14(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$i28: i8, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i8, in_$i40: i32, in_$i41: i1, in_$i42: i8, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$i46: i8, in_$i47: i32, in_$i48: i1, in_$i49: i8, in_$i50: i32, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$p64: ref, in_$p65: ref, in_$i66: i8, in_$i67: i32, in_$i69: i8, in_$i70: i8, in_$i71: i8, in_$i72: i32, in_$i73: i1, in_$i61: i32, in_$i63: i32, in_$i75: i1, in_$i77: i8, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i64, in_$p82: ref, in_$i83: i8, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i64, in_$i88: i64, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i92: i8, in_$i93: i32, in_$i94: i32, in_$i95: i8, in_$i96: i32, in_$i97: i32, in_$i98: i64, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$i102: i8, in_$i103: i32, in_$i105: i32, in_$i106: i1, in_$i76: i32, in_$i107: i8, in_$i108: i32, in_$i109: i32, in_$i110: i64, in_$p111: ref, in_$i112: i8, in_$i113: i32, in_$i114: i8, in_$i115: i32, in_$i116: i64, in_$i117: i8, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$i124: i8, in_$i125: i64, in_$i126: i64, in_$p127: ref, in_$i128: i8, in_$i129: i32, in_$i130: i8, in_$i131: i32, in_$i132: i1, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i134: i32, in_$i62: i32, in_$i135: i1, in_$i136: i32, in_$i133: i32, in_$i74: i32, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32) returns (out_$i28: i8, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i8, out_$i40: i32, out_$i41: i1, out_$i42: i8, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$i46: i8, out_$i47: i32, out_$i48: i1, out_$i49: i8, out_$i50: i32, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$p64: ref, out_$p65: ref, out_$i66: i8, out_$i67: i32, out_$i69: i8, out_$i70: i8, out_$i71: i8, out_$i72: i32, out_$i73: i1, out_$i61: i32, out_$i63: i32, out_$i75: i1, out_$i77: i8, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i64, out_$p82: ref, out_$i83: i8, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i64, out_$i88: i64, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i92: i8, out_$i93: i32, out_$i94: i32, out_$i95: i8, out_$i96: i32, out_$i97: i32, out_$i98: i64, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$i102: i8, out_$i103: i32, out_$i105: i32, out_$i106: i1, out_$i76: i32, out_$i107: i8, out_$i108: i32, out_$i109: i32, out_$i110: i64, out_$p111: ref, out_$i112: i8, out_$i113: i32, out_$i114: i8, out_$i115: i32, out_$i116: i64, out_$i117: i8, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$i124: i8, out_$i125: i64, out_$i126: i64, out_$p127: ref, out_$i128: i8, out_$i129: i32, out_$i130: i8, out_$i131: i32, out_$i132: i1, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i134: i32, out_$i62: i32, out_$i135: i1, out_$i136: i32, out_$i133: i32, out_$i74: i32, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32);
  modifies $M.20, $M.1, $CurrAddr, $M.11, $M.26;



implementation vfio_ecap_init_loop_$bb33(in_$p3: ref, in_$p5: ref, in_$i76: i16, in_$i78: i16, in_$i79: i32, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i64, in_$p87: ref, in_$i88: i8, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i64, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i64, in_$p102: ref, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$i107: i32, in_$i108: i1, in_$i82: i32, in_vslice_dummy_var_82: i32) returns (out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i64, out_$p87: ref, out_$i88: i8, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i64, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i64, out_$p102: ref, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$i107: i32, out_$i108: i1, out_$i82: i32, out_vslice_dummy_var_82: i32)
{

  entry:
    out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i107, out_$i108, out_$i82, out_vslice_dummy_var_82 := in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p102, in_$i103, in_$i104, in_$i105, in_$i107, in_$i108, in_$i82, in_vslice_dummy_var_82;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3864;

  $bb39:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := out_$i107;
    goto $bb39_dummy;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i107, in_$i79);
    goto corral_source_split_3882;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i82, 4);
    call {:si_unique_call 786} {:cexpr "i"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_3881;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i94 == 1;
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i64(out_$i93, 0);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_$i93 := ldv__builtin_expect(out_$i92, 1);
    call {:si_unique_call 785} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i93);
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i91);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i1.i32(out_$i90);
    goto corral_source_split_3874;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 255);
    goto corral_source_split_3873;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i8.i32(out_$i88);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i8($M.1, out_$p87);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(in_$p5, $mul.ref(out_$i86, 1));
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i85);
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$i85 := $sdiv.i32(out_$i84, 4);
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, out_$i82);
    goto corral_source_split_3867;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i16.i32(in_$i76);
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} out_vslice_dummy_var_82 := printk.ref.ref.ref.i32.i32.i32(.str.29, .str.28, out_$p96, out_$i98, out_$i104, out_$i105);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i16.i32(in_$i78);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i8.i32(out_$i103);
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i8($M.1, out_$p102);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref(in_$p5, $mul.ref(out_$i101, 1));
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i100);
    goto corral_source_split_3890;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i32(out_$i99, out_$i82);
    goto corral_source_split_3889;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i16.i32(in_$i76);
    goto corral_source_split_3888;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i97, out_$i82);
    goto corral_source_split_3887;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i16.i32(in_$i76);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} out_$p96 := dev_name(out_$p95);
    goto corral_source_split_3885;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3884;

  $bb36:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i107, out_$i108, out_$i82, out_vslice_dummy_var_82 := vfio_ecap_init_loop_$bb33(in_$p3, in_$p5, in_$i76, in_$i78, in_$i79, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i107, out_$i108, out_$i82, out_vslice_dummy_var_82);
    return;

  exit:
    return;
}



procedure vfio_ecap_init_loop_$bb33(in_$p3: ref, in_$p5: ref, in_$i76: i16, in_$i78: i16, in_$i79: i32, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i64, in_$p87: ref, in_$i88: i8, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i64, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i64, in_$p102: ref, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$i107: i32, in_$i108: i1, in_$i82: i32, in_vslice_dummy_var_82: i32) returns (out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i64, out_$p87: ref, out_$i88: i8, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i64, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i64, out_$p102: ref, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$i107: i32, out_$i108: i1, out_$i82: i32, out_vslice_dummy_var_82: i32);



implementation vfio_ecap_init_loop_$bb50(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i56: i64, in_$i57: i1, in_$i61: i32, in_$i62: i32, in_$i63: i16, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i58: i16, in_$i59: i32, in_$i60: i16, in_$i46: i16, in_$i47: i32, in_$i49: i16, in_$i50: i32, in_$p19: ref, in_$i20: i32, in_$i48: i32, in_$i22: i16, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i75: i32, in_vslice_dummy_var_81: i32) returns (out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i56: i64, out_$i57: i1, out_$i61: i32, out_$i62: i32, out_$i63: i16, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i58: i16, out_$i59: i32, out_$i60: i16, out_$i46: i16, out_$i47: i32, out_$i49: i16, out_$i50: i32, out_$i48: i32, out_$i22: i16, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i75: i32, out_vslice_dummy_var_81: i32)
{

  entry:
    out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i48, out_$i22, out_$i150, out_$i151, out_$i152, out_$i75, out_vslice_dummy_var_81 := in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p51, in_$p52, in_$i53, in_$i54, in_$i56, in_$i57, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i58, in_$i59, in_$i60, in_$i46, in_$i47, in_$i49, in_$i50, in_$i48, in_$i22, in_$i150, in_$i151, in_$i152, in_$i75, in_vslice_dummy_var_81;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3950;

  $bb26:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i48, out_$i22 := out_$i73, out_$i66;
    goto $bb26_dummy;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i75 := in_$i20;
    assume true;
    goto $bb26;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i48, 0);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i48, 1);
    call {:si_unique_call 783} {:cexpr "loops"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, in_$p19, out_$i72);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i72 := $or.i32(out_$i70, out_$i71);
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    out_$i71 := $shl.i32(out_$i67, 20);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.1, in_$p19);
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, in_$p19, out_$i69);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 4194303);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.1, in_$p19);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    call {:si_unique_call 782} {:cexpr "val"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    call {:si_unique_call 781} {:cexpr "epos"} boogie_si_record_i16(out_$i66);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 4092);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i63 := $trunc.i32.i16(out_$i62);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$i62 := $lshr.i32(out_$i61, 20);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.19, in_$p1);
    goto corral_source_split_3840;

  $bb24:
    assume out_$i57 == 1;
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$i58, out_$i59, out_$i60 := out_$i22, out_$i48, out_$i27;
    assume true;
    goto $bb24;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(in_$p19);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_vslice_dummy_var_81 := printk.ref.ref.ref.i32.i32(.str.27, .str.28, out_$p52, out_$i53, out_$i54);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i22);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_$p52 := dev_name(out_$p51);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3831;

  $bb22:
    assume out_$i45 == 1;
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i46, out_$i47, out_$i49, out_$i50 := out_$i22, out_$i48, out_$i27, out_$i44;
    assume true;
    goto $bb22;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_3828;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3827;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := 0;
    goto $bb21;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i43;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3825;

  $bb16:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := out_$i34;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i40;
    goto $bb20;

  $bb18:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i23;
    assume true;
    goto $bb18;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 0);
    goto corral_source_split_3821;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} out_$i40 := vfio_ext_cap_len(in_$p0, out_$i37, out_$i39);
    call {:si_unique_call 778} {:cexpr "len"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_3819;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i22);
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(out_$i36);
    goto corral_source_split_3817;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3816;

  $bb15:
    assume out_$i35 == 1;
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 255);
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    call {:si_unique_call 776} {:cexpr "len"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.24, out_$p32);
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(out_$i31, 2));
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3808;

  $bb13:
    assume out_$i29 == 1;
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$i29 := $ule.i32(out_$i28, 27);
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i16(out_$i26);
    call {:si_unique_call 775} {:cexpr "ecap"} boogie_si_record_i16(out_$i27);
    goto corral_source_split_3803;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.19, in_$p1);
    goto corral_source_split_3802;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i23;
    assume true;
    goto $bb11;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} out_$i23 := pci_read_config_dword(in_$p3, out_$i21, in_$p1);
    call {:si_unique_call 774} {:cexpr "ret"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3797;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i22);
    goto corral_source_split_3796;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb51:
    assume out_$i151 == 1;
    goto corral_source_split_3954;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i152 := in_$i20;
    assume true;
    goto $bb51;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$i151 := $ugt.i32(out_$i150, 255);
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i16.i32(out_$i22);
    goto corral_source_split_3951;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i48, out_$i22, out_$i150, out_$i151, out_$i152, out_$i75, out_vslice_dummy_var_81 := vfio_ecap_init_loop_$bb50(in_$p0, in_$p1, in_$p3, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, in_$p19, in_$i20, out_$i48, out_$i22, out_$i150, out_$i151, out_$i152, out_$i75, out_vslice_dummy_var_81);
    return;

  exit:
    return;
}



procedure vfio_ecap_init_loop_$bb50(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i56: i64, in_$i57: i1, in_$i61: i32, in_$i62: i32, in_$i63: i16, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i58: i16, in_$i59: i32, in_$i60: i16, in_$i46: i16, in_$i47: i32, in_$i49: i16, in_$i50: i32, in_$p19: ref, in_$i20: i32, in_$i48: i32, in_$i22: i16, in_$i150: i32, in_$i151: i1, in_$i152: i32, in_$i75: i32, in_vslice_dummy_var_81: i32) returns (out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i56: i64, out_$i57: i1, out_$i61: i32, out_$i62: i32, out_$i63: i16, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i58: i16, out_$i59: i32, out_$i60: i16, out_$i46: i16, out_$i47: i32, out_$i49: i16, out_$i50: i32, out_$i48: i32, out_$i22: i16, out_$i150: i32, out_$i151: i1, out_$i152: i32, out_$i75: i32, out_vslice_dummy_var_81: i32);
  modifies $M.1, $M.25, $CurrAddr;



implementation vfio_ecap_init_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i56: i64, in_$i57: i1, in_$i61: i32, in_$i62: i32, in_$i63: i16, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i58: i16, in_$i59: i32, in_$i60: i16, in_$i46: i16, in_$i47: i32, in_$i49: i16, in_$i50: i32, in_$i76: i16, in_$i77: i32, in_$i78: i16, in_$i79: i32, in_$i80: i8, in_$i81: i1, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i64, in_$p87: ref, in_$i88: i8, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i64, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i64, in_$p102: ref, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$i107: i32, in_$i108: i1, in_$i82: i32, in_$i109: i32, in_$i110: i32, in_$i111: i64, in_$p112: ref, in_$i113: i32, in_$i114: i8, in_$i115: i32, in_$i116: i64, in_$i117: i32, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$i132: i64, in_$p133: ref, in_$i135: i32, in_$i134: i32, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i16, in_$i144: i32, in_$i145: i32, in_$i146: i16, in_$i147: i32, in_$i148: i1, in_$i17: i32, in_$i18: i16, in_$p19: ref, in_$i20: i32, in_$i48: i32, in_$i22: i16, in_$i150: i32, in_$i151: i1, in_$i149: i32, in_$i152: i32, in_$i75: i32, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32) returns (out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i56: i64, out_$i57: i1, out_$i61: i32, out_$i62: i32, out_$i63: i16, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i58: i16, out_$i59: i32, out_$i60: i16, out_$i46: i16, out_$i47: i32, out_$i49: i16, out_$i50: i32, out_$i76: i16, out_$i77: i32, out_$i78: i16, out_$i79: i32, out_$i80: i8, out_$i81: i1, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i64, out_$p87: ref, out_$i88: i8, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i64, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i64, out_$p102: ref, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$i107: i32, out_$i108: i1, out_$i82: i32, out_$i109: i32, out_$i110: i32, out_$i111: i64, out_$p112: ref, out_$i113: i32, out_$i114: i8, out_$i115: i32, out_$i116: i64, out_$i117: i32, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$i132: i64, out_$p133: ref, out_$i135: i32, out_$i134: i32, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i16, out_$i144: i32, out_$i145: i32, out_$i146: i16, out_$i147: i32, out_$i148: i1, out_$i17: i32, out_$i18: i16, out_$p19: ref, out_$i20: i32, out_$i48: i32, out_$i22: i16, out_$i150: i32, out_$i151: i1, out_$i149: i32, out_$i152: i32, out_$i75: i32, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32)
{

  entry:
    out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i107, out_$i108, out_$i82, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$i132, out_$p133, out_$i135, out_$i134, out_$p136, out_$p137, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i17, out_$i18, out_$p19, out_$i20, out_$i48, out_$i22, out_$i150, out_$i151, out_$i149, out_$i152, out_$i75, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p51, in_$p52, in_$i53, in_$i54, in_$i56, in_$i57, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i58, in_$i59, in_$i60, in_$i46, in_$i47, in_$i49, in_$i50, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$p102, in_$i103, in_$i104, in_$i105, in_$i107, in_$i108, in_$i82, in_$i109, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p124, in_$i125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130, in_$p131, in_$i132, in_$p133, in_$i135, in_$i134, in_$p136, in_$p137, in_$p138, in_$i139, in_$p140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i17, in_$i18, in_$p19, in_$i20, in_$i48, in_$i22, in_$i150, in_$i151, in_$i149, in_$i152, in_$i75, in_cmdloc_dummy_var_18, in_cmdloc_dummy_var_19, in_vslice_dummy_var_81, in_vslice_dummy_var_82;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;

  $bb48:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18, out_$p19, out_$i20 := out_$i147, out_$i146, out_$p140, out_$i134;
    goto $bb48_dummy;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$i149 := out_$i134;
    assume true;
    goto $bb48;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    out_$i148 := $ne.i32(out_$i77, 0);
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i147 := $sub.i32(out_$i77, 1);
    call {:si_unique_call 794} {:cexpr "loops"} boogie_si_record_i32(out_$i147);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i146 := $trunc.i32.i16(out_$i145);
    call {:si_unique_call 793} {:cexpr "epos"} boogie_si_record_i16(out_$i146);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$i145 := $and.i32(out_$i144, 4092);
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$i144 := $zext.i16.i32(out_$i143);
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$i143 := $trunc.i32.i16(out_$i142);
    goto corral_source_split_3941;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$i142 := $lshr.i32(out_$i141, 20);
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.19, in_$p1);
    goto corral_source_split_3939;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref(out_$p138, $mul.ref(out_$i139, 4));
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i16.i64(out_$i76);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$p138 := $bitcast.ref.ref(out_$p137);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.11, out_$p136);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3934;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i135 := $add.i32(out_$i20, 1);
    call {:si_unique_call 792} {:cexpr "ecaps"} boogie_si_record_i32(out_$i135);
    assume {:verifier.code 0} true;
    out_$i134 := out_$i135;
    goto $bb47;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i20;
    goto $bb47;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p133, out_$i128);
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref(out_$p131, $mul.ref(out_$i132, 4));
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i16.i64(out_$i76);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$p131 := $bitcast.ref.ref(out_$p130);
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.11, out_$p129);
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$i128 := $and.i32(out_$i127, $sub.i32(0, 4194304));
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.1, out_$p126);
    goto corral_source_split_3922;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref(out_$p124, $mul.ref(out_$i125, 4));
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i16.i64(out_$i76);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(out_$p123);
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.11, out_$p122);
    goto corral_source_split_3918;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p0, $mul.ref(0, 408)), $mul.ref(64, 1));
    goto corral_source_split_3917;

  $bb45:
    assume out_$i121 == 1;
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i121 := $trunc.i8.i1(out_$i80);
    goto corral_source_split_3914;

  $bb43:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i120 := out_$i118;
    assume true;
    goto $bb43;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i32(out_$i118, 0);
    goto corral_source_split_3910;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} out_$i118 := vfio_fill_vconfig_bytes(in_$p0, out_$i117, out_$i79);
    call {:si_unique_call 791} {:cexpr "ret"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i16.i32(out_$i76);
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_18 := $M.1;
    call {:si_unique_call 789} out_cmdloc_dummy_var_19 := $memset.i8(out_cmdloc_dummy_var_18, out_$p112, out_$i114, out_$i116, $zext.i32.i64(1), 0 == 1);
    $M.1 := out_cmdloc_dummy_var_19;
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i115);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i115 := $sdiv.i32(out_$i79, 4);
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    out_$i114 := $trunc.i32.i8(out_$i113);
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i16.i32(out_$i78);
    goto corral_source_split_3903;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref(in_$p5, $mul.ref(out_$i111, 1));
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i111 := $zext.i32.i64(out_$i110);
    goto corral_source_split_3901;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    out_$i110 := $udiv.i32(out_$i109, 4);
    goto corral_source_split_3900;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i16.i32(out_$i76);
    goto corral_source_split_3899;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb32;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb40:
    assume !(out_$i108 == 1);
    goto corral_source_split_3897;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i107, out_$i79);
    goto corral_source_split_3882;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i82, 4);
    call {:si_unique_call 786} {:cexpr "i"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_3881;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i94 == 1;
    goto corral_source_split_3879;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i64(out_$i93, 0);
    goto corral_source_split_3877;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_$i93 := ldv__builtin_expect(out_$i92, 1);
    call {:si_unique_call 785} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i93);
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i91);
    goto corral_source_split_3875;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i1.i32(out_$i90);
    goto corral_source_split_3874;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 255);
    goto corral_source_split_3873;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i8.i32(out_$i88);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i8($M.1, out_$p87);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(in_$p5, $mul.ref(out_$i86, 1));
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i85);
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$i85 := $sdiv.i32(out_$i84, 4);
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, out_$i82);
    goto corral_source_split_3867;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i16.i32(out_$i76);
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    call out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i107, out_$i108, out_$i82, out_vslice_dummy_var_82 := vfio_ecap_init_loop_$bb33(in_$p3, in_$p5, out_$i76, out_$i78, out_$i79, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i107, out_$i108, out_$i82, out_vslice_dummy_var_82);
    goto $bb33_last;

  $bb33_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3864;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    out_$i82 := 0;
    goto $bb33;

  $bb39:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := out_$i107;
    assume false;
    return;

  $bb30:
    assume out_$i81 == 1;
    goto corral_source_split_3862;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(0, out_$i79);
    goto corral_source_split_3860;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  $bb23:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i76, out_$i77, out_$i78, out_$i79, out_$i80 := out_$i46, out_$i47, out_$i49, out_$i50, 0;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i76, out_$i77, out_$i78, out_$i79, out_$i80 := out_$i58, out_$i59, out_$i60, 4, 1;
    goto $bb29;

  $bb25:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$i58, out_$i59, out_$i60 := out_$i22, out_$i48, out_$i27;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} out_vslice_dummy_var_81 := printk.ref.ref.ref.i32.i32(.str.27, .str.28, out_$p52, out_$i53, out_$i54);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i22);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_$p52 := dev_name(out_$p51);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3831;

  $bb22:
    assume out_$i45 == 1;
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i46, out_$i47, out_$i49, out_$i50 := out_$i22, out_$i48, out_$i27, out_$i44;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i44, 0);
    goto corral_source_split_3828;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3827;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := 0;
    goto $bb21;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i43;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3825;

  $bb16:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := out_$i34;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i40;
    goto $bb20;

  $bb18:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i23;
    assume true;
    goto $bb18;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 0);
    goto corral_source_split_3821;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} out_$i40 := vfio_ext_cap_len(in_$p0, out_$i37, out_$i39);
    call {:si_unique_call 778} {:cexpr "len"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_3819;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i22);
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i32.i16(out_$i36);
    goto corral_source_split_3817;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3816;

  $bb15:
    assume out_$i35 == 1;
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 255);
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    call {:si_unique_call 776} {:cexpr "len"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.24, out_$p32);
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(pci_ext_cap_length, $mul.ref(0, 56)), $mul.ref(out_$i31, 2));
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3808;

  $bb13:
    assume out_$i29 == 1;
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$i29 := $ule.i32(out_$i28, 27);
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i16(out_$i26);
    call {:si_unique_call 775} {:cexpr "ecap"} boogie_si_record_i16(out_$i27);
    goto corral_source_split_3803;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.19, in_$p1);
    goto corral_source_split_3802;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i23;
    assume true;
    goto $bb11;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} out_$i23 := pci_read_config_dword(in_$p3, out_$i21, in_$p1);
    call {:si_unique_call 774} {:cexpr "ret"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3797;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i22);
    goto corral_source_split_3796;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb51:
    assume out_$i151 == 1;
    goto corral_source_split_3954;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i152 := out_$i20;
    assume true;
    goto $bb51;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$i151 := $ugt.i32(out_$i150, 255);
    goto corral_source_split_3952;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i16.i32(out_$i22);
    goto corral_source_split_3951;

  $bb50:
    call out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i48, out_$i22, out_$i150, out_$i151, out_$i152, out_$i75, out_vslice_dummy_var_81 := vfio_ecap_init_loop_$bb50(in_$p0, in_$p1, in_$p3, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$p19, out_$i20, out_$i48, out_$i22, out_$i150, out_$i151, out_$i152, out_$i75, out_vslice_dummy_var_81);
    goto $bb50_last;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3950;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    out_$i48, out_$i22 := out_$i17, out_$i18;
    goto $bb50;

  $bb26:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i48, out_$i22 := out_$i73, out_$i66;
    assume false;
    return;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i20;
    assume true;
    goto $bb26;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i48, 0);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i48, 1);
    call {:si_unique_call 783} {:cexpr "loops"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p19, out_$i72);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i72 := $or.i32(out_$i70, out_$i71);
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    out_$i71 := $shl.i32(out_$i67, 20);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.1, out_$p19);
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p19, out_$i69);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$i69 := $and.i32(out_$i68, 4194303);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i32($M.1, out_$p19);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    call {:si_unique_call 782} {:cexpr "val"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    call {:si_unique_call 781} {:cexpr "epos"} boogie_si_record_i16(out_$i66);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 4092);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i63 := $trunc.i32.i16(out_$i62);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$i62 := $lshr.i32(out_$i61, 20);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.19, in_$p1);
    goto corral_source_split_3840;

  $bb24:
    assume out_$i57 == 1;
    goto corral_source_split_3839;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} out_vslice_dummy_var_82 := printk.ref.ref.ref.i32.i32.i32(.str.29, .str.28, out_$p96, out_$i98, out_$i104, out_$i105);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i16.i32(out_$i78);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i8.i32(out_$i103);
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i8($M.1, out_$p102);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref(in_$p5, $mul.ref(out_$i101, 1));
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i100);
    goto corral_source_split_3890;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i32(out_$i99, out_$i82);
    goto corral_source_split_3889;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i16.i32(out_$i76);
    goto corral_source_split_3888;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i97, out_$i82);
    goto corral_source_split_3887;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i16.i32(out_$i76);
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} out_$p96 := dev_name(out_$p95);
    goto corral_source_split_3885;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2696)), $mul.ref(152, 1));
    goto corral_source_split_3884;

  $bb36:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb46:
    assume !(out_$i121 == 1);
    goto corral_source_split_3931;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i107, out_$i108, out_$i82, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$i132, out_$p133, out_$i135, out_$i134, out_$p136, out_$p137, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i17, out_$i18, out_$p19, out_$i20, out_$i48, out_$i22, out_$i150, out_$i151, out_$i149, out_$i152, out_$i75, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_vslice_dummy_var_81, out_vslice_dummy_var_82 := vfio_ecap_init_loop_$bb8(in_$p0, in_$p1, in_$p3, in_$p5, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p51, out_$p52, out_$i53, out_$i54, out_$i56, out_$i57, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i58, out_$i59, out_$i60, out_$i46, out_$i47, out_$i49, out_$i50, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i107, out_$i108, out_$i82, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$i132, out_$p133, out_$i135, out_$i134, out_$p136, out_$p137, out_$p138, out_$i139, out_$p140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i17, out_$i18, out_$p19, out_$i20, out_$i48, out_$i22, out_$i150, out_$i151, out_$i149, out_$i152, out_$i75, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_vslice_dummy_var_81, out_vslice_dummy_var_82);
    return;

  exit:
    return;
}



procedure vfio_ecap_init_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i21: i32, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i1, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i56: i64, in_$i57: i1, in_$i61: i32, in_$i62: i32, in_$i63: i16, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i58: i16, in_$i59: i32, in_$i60: i16, in_$i46: i16, in_$i47: i32, in_$i49: i16, in_$i50: i32, in_$i76: i16, in_$i77: i32, in_$i78: i16, in_$i79: i32, in_$i80: i8, in_$i81: i1, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i86: i64, in_$p87: ref, in_$i88: i8, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i64, in_$i93: i64, in_$i94: i1, in_$p95: ref, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i64, in_$p102: ref, in_$i103: i8, in_$i104: i32, in_$i105: i32, in_$i107: i32, in_$i108: i1, in_$i82: i32, in_$i109: i32, in_$i110: i32, in_$i111: i64, in_$p112: ref, in_$i113: i32, in_$i114: i8, in_$i115: i32, in_$i116: i64, in_$i117: i32, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$p126: ref, in_$i127: i32, in_$i128: i32, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$i132: i64, in_$p133: ref, in_$i135: i32, in_$i134: i32, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$p140: ref, in_$i141: i32, in_$i142: i32, in_$i143: i16, in_$i144: i32, in_$i145: i32, in_$i146: i16, in_$i147: i32, in_$i148: i1, in_$i17: i32, in_$i18: i16, in_$p19: ref, in_$i20: i32, in_$i48: i32, in_$i22: i16, in_$i150: i32, in_$i151: i1, in_$i149: i32, in_$i152: i32, in_$i75: i32, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32) returns (out_$i21: i32, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i1, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i56: i64, out_$i57: i1, out_$i61: i32, out_$i62: i32, out_$i63: i16, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i58: i16, out_$i59: i32, out_$i60: i16, out_$i46: i16, out_$i47: i32, out_$i49: i16, out_$i50: i32, out_$i76: i16, out_$i77: i32, out_$i78: i16, out_$i79: i32, out_$i80: i8, out_$i81: i1, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i86: i64, out_$p87: ref, out_$i88: i8, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i64, out_$i93: i64, out_$i94: i1, out_$p95: ref, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i32, out_$i101: i64, out_$p102: ref, out_$i103: i8, out_$i104: i32, out_$i105: i32, out_$i107: i32, out_$i108: i1, out_$i82: i32, out_$i109: i32, out_$i110: i32, out_$i111: i64, out_$p112: ref, out_$i113: i32, out_$i114: i8, out_$i115: i32, out_$i116: i64, out_$i117: i32, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$p126: ref, out_$i127: i32, out_$i128: i32, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$i132: i64, out_$p133: ref, out_$i135: i32, out_$i134: i32, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$p140: ref, out_$i141: i32, out_$i142: i32, out_$i143: i16, out_$i144: i32, out_$i145: i32, out_$i146: i16, out_$i147: i32, out_$i148: i1, out_$i17: i32, out_$i18: i16, out_$p19: ref, out_$i20: i32, out_$i48: i32, out_$i22: i16, out_$i150: i32, out_$i151: i1, out_$i149: i32, out_$i152: i32, out_$i75: i32, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32);
  modifies $M.1, $CurrAddr, $M.25;



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$i78: i64, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$p91: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i64, in_vslice_dummy_var_90: i64, in_vslice_dummy_var_91: i64, in_vslice_dummy_var_92: i64) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$i78: i64, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$p91: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i64, out_vslice_dummy_var_90: i64, out_vslice_dummy_var_91: i64, out_vslice_dummy_var_92: i64)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i57, out_$i58, out_$p59, out_$p60, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$p91, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92 := in_$i0, in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i57, in_$i58, in_$p59, in_$p60, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$p67, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i86, in_$i87, in_$p88, in_$p89, in_$i90, in_$p91, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1060} out_$i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1061} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i0);
    call {:si_unique_call 1062} {:cexpr "tmp"} boogie_si_record_i32(out_$i0);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb34_dummy;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $M.34 := out_$i19;
    call {:si_unique_call 1069} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i18, 1);
    goto corral_source_split_4970;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    out_$i18 := $M.34;
    goto corral_source_split_4969;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1068} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4968;

  $bb24:
    assume out_$i17 == 1;
    goto corral_source_split_4967;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    out_$i16 := $M.39;
    goto corral_source_split_4964;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $M.39 := out_$i15;
    call {:si_unique_call 1067} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_4963;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} out_$i15 := vfio_pci_probe(out_$p13, out_$p14);
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    out_$p14 := $M.38;
    goto corral_source_split_4961;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    out_$p13 := $M.37;
    goto corral_source_split_4960;

  $bb22:
    assume out_$i12 == 1;
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 1);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    out_$i11 := $M.33;
    goto corral_source_split_4956;

  $bb20:
    assume out_$i10 == 1;
    goto corral_source_split_4955;

  $bb15:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4949:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1063} out_$i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 1064} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i7);
    call {:si_unique_call 1065} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i7);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i6 == 1;
    goto corral_source_split_4949;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    out_$i5 := $M.33;
    goto corral_source_split_4946;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_4945;

  $bb3:
    assume out_$i1 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $slt.i32(out_$i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb30:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $M.34 := out_$i24;
    call {:si_unique_call 1072} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i23, 1);
    goto corral_source_split_4978;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    out_$i23 := $M.34;
    goto corral_source_split_4977;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1071} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4976;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} vfio_pci_remove(out_$p22);
    goto corral_source_split_4975;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    out_$p22 := $M.37;
    goto corral_source_split_4974;

  $bb29:
    assume out_$i21 == 1;
    goto corral_source_split_4973;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 2);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    out_$i20 := $M.33;
    goto corral_source_split_4952;

  $bb17:
    assume out_$i9 == 1;
    goto corral_source_split_4951;

  $bb16:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb19;

  $bb36:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb47;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb47;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$i33 := $M.34;
    goto corral_source_split_4992;

  $bb45:
    assume out_$i32 == 1;
    goto corral_source_split_4991;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 3);
    goto corral_source_split_4989;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    out_$i31 := $M.35;
    goto corral_source_split_4988;

  $bb43:
    assume out_$i30 == 1;
    goto corral_source_split_4987;

  $bb38:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i27, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i27, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4981:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1073} out_$i27 := __VERIFIER_nondet_int();
    call {:si_unique_call 1074} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i27);
    call {:si_unique_call 1075} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i27);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i26 == 1;
    goto corral_source_split_4981;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    out_$i25 := $M.35;
    goto corral_source_split_4938;

  $bb5:
    assume out_$i2 == 1;
    goto corral_source_split_4937;

  $bb4:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb54:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_5013;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i40 := $M.40;
    goto corral_source_split_5012;

  $bb56:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1083} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5010;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1082} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5009;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1081} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5008;

  $bb55:
    assume out_$i39 == 1;
    goto corral_source_split_5007;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 0);
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    out_$i38 := $M.40;
    goto corral_source_split_5004;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $M.40 := out_$i37;
    call {:si_unique_call 1080} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} out_$i37 := vfio_pci_init();
    goto corral_source_split_5002;

  $bb53:
    assume out_$i36 == 1;
    goto corral_source_split_5001;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 1);
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    out_$i35 := $M.35;
    goto corral_source_split_4984;

  $bb40:
    assume out_$i29 == 1;
    goto corral_source_split_4983;

  $bb39:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i27, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb42;

  $bb44:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb42;

  $bb65:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb86:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1091} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5057;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} out_vslice_dummy_var_88 := vfio_pci_mmap(out_$p59, out_$p60);
    goto corral_source_split_5056;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    out_$p60 := $M.42;
    goto corral_source_split_5055;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    out_$p59 := $M.41;
    goto corral_source_split_5054;

  $bb85:
    assume out_$i58 == 1;
    goto corral_source_split_5053;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 2);
    goto corral_source_split_5051;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i57 := $M.36;
    goto corral_source_split_5050;

  $bb83:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1089} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5048;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} out_vslice_dummy_var_87 := vfio_pci_mmap(out_$p54, out_$p55);
    goto corral_source_split_5047;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    out_$p55 := $M.42;
    goto corral_source_split_5046;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    out_$p54 := $M.41;
    goto corral_source_split_5045;

  $bb82:
    assume out_$i53 == 1;
    goto corral_source_split_5044;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 1);
    goto corral_source_split_5042;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    out_$i52 := $M.36;
    goto corral_source_split_5041;

  $bb80:
    assume out_$i51 == 1;
    goto corral_source_split_5040;

  $bb76:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb67:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_5018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1085} out_$i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 1086} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i44);
    call {:si_unique_call 1087} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i44);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i43 == 1;
    goto corral_source_split_5018;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_4943;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$i42 := $M.36;
    goto corral_source_split_4942;

  $bb7:
    assume out_$i3 == 1;
    goto corral_source_split_4941;

  $bb6:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb90:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1093} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5065;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} out_vslice_dummy_var_89 := vfio_pci_write(out_$p64, out_$p65, out_$i66, out_$p67);
    goto corral_source_split_5064;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    out_$p67 := $M.46;
    goto corral_source_split_5063;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    out_$i66 := $M.45;
    goto corral_source_split_5062;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    out_$p65 := $M.44;
    goto corral_source_split_5061;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    out_$p64 := $M.43;
    goto corral_source_split_5060;

  $bb89:
    assume out_$i63 == 1;
    goto corral_source_split_5059;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 2);
    goto corral_source_split_5034;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    out_$i62 := $M.36;
    goto corral_source_split_5033;

  $bb78:
    assume out_$i50 == 1;
    goto corral_source_split_5032;

  $bb77:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i44, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb93:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $M.34 := out_$i73;
    call {:si_unique_call 1096} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_5073;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i72, 1);
    goto corral_source_split_5072;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    out_$i72 := $M.34;
    goto corral_source_split_5071;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1095} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5070;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vfio_pci_release(out_$p71);
    goto corral_source_split_5069;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    out_$p71 := $M.47;
    goto corral_source_split_5068;

  $bb92:
    assume out_$i70 == 1;
    goto corral_source_split_5067;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 2);
    goto corral_source_split_5038;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    out_$i69 := $M.36;
    goto corral_source_split_5037;

  $bb79:
    assume !(out_$i50 == 1);
    goto corral_source_split_5036;

  $bb99:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1100} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5090;

  SeqInstr_30:
    goto corral_source_split_5089;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} out_vslice_dummy_var_91 := vfio_pci_ioctl(out_$p82, out_$i83, out_$i84);
    goto SeqInstr_29;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    out_$i84 := $M.50;
    goto corral_source_split_5088;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    out_$i83 := $M.49;
    goto corral_source_split_5087;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    out_$p82 := $M.48;
    goto corral_source_split_5086;

  $bb98:
    assume out_$i81 == 1;
    goto corral_source_split_5085;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 2);
    goto corral_source_split_5083;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i80 := $M.36;
    goto corral_source_split_5082;

  $bb96:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1098} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5080;

  SeqInstr_27:
    goto corral_source_split_5079;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} out_vslice_dummy_var_90 := vfio_pci_ioctl(out_$p76, out_$i77, out_$i78);
    goto SeqInstr_26;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    out_$i78 := $M.50;
    goto corral_source_split_5078;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    out_$i77 := $M.49;
    goto corral_source_split_5077;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    out_$p76 := $M.48;
    goto corral_source_split_5076;

  $bb95:
    assume out_$i75 == 1;
    goto corral_source_split_5075;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 1);
    goto corral_source_split_5022;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    out_$i74 := $M.36;
    goto corral_source_split_5021;

  $bb69:
    assume out_$i46 == 1;
    goto corral_source_split_5020;

  $bb68:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i44, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb102:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1102} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5098;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} out_vslice_dummy_var_92 := vfio_pci_read(out_$p88, out_$p89, out_$i90, out_$p91);
    goto corral_source_split_5097;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    out_$p91 := $M.54;
    goto corral_source_split_5096;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    out_$i90 := $M.53;
    goto corral_source_split_5095;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    out_$p89 := $M.52;
    goto corral_source_split_5094;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    out_$p88 := $M.51;
    goto corral_source_split_5093;

  $bb101:
    assume out_$i87 == 1;
    goto corral_source_split_5092;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 2);
    goto corral_source_split_5026;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    out_$i86 := $M.36;
    goto corral_source_split_5025;

  $bb71:
    assume out_$i47 == 1;
    goto corral_source_split_5024;

  $bb70:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i44, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb105:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb107:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $M.34 := out_$i100;
    call {:si_unique_call 1106} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_5111;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i32(out_$i99, 1);
    goto corral_source_split_5110;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    out_$i99 := $M.34;
    goto corral_source_split_5109;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1105} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5108;

  $bb106:
    assume out_$i98 == 1;
    goto corral_source_split_5107;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 0);
    goto corral_source_split_5105;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    out_$i97 := $M.56;
    goto corral_source_split_5104;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $M.56 := out_$i96;
    call {:si_unique_call 1104} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_5103;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} out_$i96 := vfio_pci_open(out_$p95);
    goto corral_source_split_5102;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    out_$p95 := $M.55;
    goto corral_source_split_5101;

  $bb104:
    assume out_$i94 == 1;
    goto corral_source_split_5100;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 1);
    goto corral_source_split_5030;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    out_$i93 := $M.36;
    goto corral_source_split_5029;

  $bb73:
    assume out_$i48 == 1;
    goto corral_source_split_5028;

  $bb72:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i44, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb75;

  $bb81:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb75;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i3 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i4 == 1);
    goto $bb9;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i57, out_$i58, out_$p59, out_$p60, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$p91, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92 := main_loop_$bb1(out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i57, out_$i58, out_$p59, out_$p60, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$p91, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$i78: i64, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$p91: ref, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i64, in_vslice_dummy_var_90: i64, in_vslice_dummy_var_91: i64, in_vslice_dummy_var_92: i64) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$i78: i64, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$p91: ref, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i64, out_vslice_dummy_var_90: i64, out_vslice_dummy_var_91: i64, out_vslice_dummy_var_92: i64);
  modifies $M.34, $M.33, $M.39, $M.1, $CurrAddr, $M.36, $M.35, $M.40, $M.7, $M.3, $M.10, $M.0, $M.2, $M.9, $M.27, $M.31, $M.28, $M.6, assertsPassed, $M.56, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.5, $M.20, $M.26, $M.25;



implementation {:SIextraRecBound 3} vfio_bar_fixup_loop_$bb1(in_$p2: ref, in_$i9: i64, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i17: i64, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$i15: i32, in_$p16: ref, in_$i64: i32, in_$p65: ref, in_$i66: i1, in_$p7: ref, in_$i8: i32) returns (out_$i9: i64, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i17: i64, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$i15: i32, out_$p16: ref, out_$i64: i32, out_$p65: ref, out_$i66: i1, out_$p7: ref, out_$i8: i32)
{

  entry:
    out_$i9, out_$p12, out_$i13, out_$i14, out_$i17, out_$p20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i15, out_$p16, out_$i64, out_$p65, out_$i66, out_$p7, out_$i8 := in_$i9, in_$p12, in_$i13, in_$i14, in_$i17, in_$p20, in_$i21, in_$i22, in_$i23, in_$p26, in_$i27, in_$i28, in_$p31, in_$i32, in_$i33, in_$i34, in_$p37, in_$i38, in_$i39, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i15, in_$p16, in_$i64, in_$p65, in_$i66, in_$p7, in_$i8;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5569;

  $bb16:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$p7, out_$i8 := out_$p65, out_$i64;
    goto $bb16_dummy;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$i66 := $sle.i32(out_$i64, 5);
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p16, $mul.ref(1, 4));
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i15, 1);
    call {:si_unique_call 1253} {:cexpr "i"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_5580;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5579;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    out_$i15, out_$p16 := out_$i62, out_$p63;
    goto $bb5;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$i15, out_$p16 := out_$i8, out_$p7;
    goto $bb5;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p7, 0);
    goto corral_source_split_5577;

  $bb3:
    assume out_$i14 == 1;
    goto corral_source_split_5576;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i64(out_$i13, 0);
    goto corral_source_split_5574;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.1, out_$p12);
    goto corral_source_split_5573;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i9, 56)), $mul.ref(0, 1));
    goto corral_source_split_5572;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5571;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5629;

  $bb14:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i62, out_$p63 := out_$i8, out_$p7;
    goto $bb15;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$i62, out_$p63 := out_$i61, out_$p56;
    goto $bb15;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1257} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_5627;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p56, out_$i60);
    goto corral_source_split_5626;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i32(out_$i57, out_$i59);
    goto corral_source_split_5625;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i64.i32(out_$i58);
    goto corral_source_split_5624;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    out_$i58 := $lshr.i64(out_$i46, 32);
    goto corral_source_split_5623;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.1, out_$p56);
    goto corral_source_split_5622;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p7, $mul.ref(1, 4));
    goto corral_source_split_5621;

  $bb13:
    assume out_$i55 == 1;
    goto corral_source_split_5620;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_5618;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    out_$i54 := $and.i32(out_$i53, 4);
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.1, out_$p7);
    goto corral_source_split_5616;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p7, out_$i52);
    goto corral_source_split_5615;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    out_$i52 := $or.i32(out_$i51, out_$i50);
    goto corral_source_split_5614;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.1, out_$p7);
    goto corral_source_split_5613;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} out_$i50 := vfio_generate_bar_flags(in_$p2, out_$i8);
    call {:si_unique_call 1256} {:cexpr "tmp"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_5612;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p7, out_$i49);
    goto corral_source_split_5611;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    out_$i49 := $and.i32(out_$i47, out_$i48);
    goto corral_source_split_5610;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i64.i32(out_$i46);
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.1, out_$p7);
    goto corral_source_split_5608;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5607;

  $bb11:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := 0;
    goto $bb12;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i45;
    goto $bb12;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    out_$i45 := $xor.i64(out_$i44, $sub.i64(0, 1));
    call {:si_unique_call 1254} {:cexpr "mask"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_5596;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i64(out_$i38, out_$i43);
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.1, out_$p42);
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i39, 56)), $mul.ref(0, 1));
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.1, out_$p37);
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i34, 56)), $mul.ref(8, 1));
    goto corral_source_split_5590;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5589;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb8;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_5587;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.1, out_$p20);
    goto corral_source_split_5586;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i17, 56)), $mul.ref(0, 1));
    goto corral_source_split_5585;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5584;

  $bb4:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i27, out_$i32);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.1, out_$p31);
    goto corral_source_split_5604;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i28, 56)), $mul.ref(0, 1));
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.1, out_$p26);
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 2696)), $mul.ref(1304, 1)), $mul.ref(out_$i23, 56)), $mul.ref(8, 1));
    goto corral_source_split_5600;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5599;

  $bb9:
    assume !(out_$i22 == 1);
    goto corral_source_split_5598;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i9, out_$p12, out_$i13, out_$i14, out_$i17, out_$p20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i15, out_$p16, out_$i64, out_$p65, out_$i66, out_$p7, out_$i8 := vfio_bar_fixup_loop_$bb1(in_$p2, out_$i9, out_$p12, out_$i13, out_$i14, out_$i17, out_$p20, out_$i21, out_$i22, out_$i23, out_$p26, out_$i27, out_$i28, out_$p31, out_$i32, out_$i33, out_$i34, out_$p37, out_$i38, out_$i39, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i15, out_$p16, out_$i64, out_$p65, out_$i66, out_$p7, out_$i8);
    return;

  exit:
    return;
}



procedure vfio_bar_fixup_loop_$bb1(in_$p2: ref, in_$i9: i64, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$i17: i64, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i34: i64, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i64, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$i15: i32, in_$p16: ref, in_$i64: i32, in_$p65: ref, in_$i66: i1, in_$p7: ref, in_$i8: i32) returns (out_$i9: i64, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$i17: i64, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i34: i64, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i64, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$i15: i32, out_$p16: ref, out_$i64: i32, out_$p65: ref, out_$i66: i1, out_$p7: ref, out_$i8: i32);
  modifies $M.1;


