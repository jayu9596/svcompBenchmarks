var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: [ref]i8;

var $M.4: [ref]ref;

var $M.5: [ref]i32;

var $M.6: [ref]i32;

var $M.7: [ref]i32;

var $M.8: [ref]i8;

var $M.9: [ref]i32;

var $M.10: [ref]i32;

var $M.11: [ref]i32;

var $M.12: [ref]i32;

var $M.13: [ref]i32;

var $M.14: [ref]i32;

var $M.15: [ref]i32;

var $M.16: [ref]i32;

var $M.17: [ref]i32;

var $M.18: [ref]i32;

var $M.19: [ref]ref;

var $M.20: i32;

var $M.21: [ref]i8;

var $M.22: [ref]i32;

var $M.23: [ref]i32;

var $M.24: i8;

var $M.25: [ref]i8;

var $M.26: [ref]ref;

var $M.27: [ref]i16;

var $M.28: [ref]i64;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]i32;

var $M.34: [ref]i32;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: ref;

var $M.39: ref;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: ref;

var $M.53: ref;

var $M.54: ref;

var $M.55: ref;

var $M.56: ref;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: i32;

var $M.67: ref;

var $M.68: ref;

var $M.69: ref;

var $M.70: ref;

var $M.71: i32;

var $M.75: [ref]i8;

var $M.78: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]ref;

var $M.83: [ref]ref;

var $M.84: [ref]i32;

var $M.85: [ref]i16;

var $M.86: [ref]ref;

var $M.87: [ref]ref;

var $M.88: [ref]ref;

var $M.89: [ref]ref;

var $M.90: [ref]ref;

var $M.130: [ref]i8;

var $M.131: [ref]i8;

var $M.136: [ref]i8;

var $M.137: [ref]i8;

var $M.142: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 562733);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const {:count 512} unix_socket_table: ref;

axiom unix_socket_table == $sub.ref(0, 6148);

const __ksymtab_unix_socket_table: ref;

axiom __ksymtab_unix_socket_table == $sub.ref(0, 7188);

const {:count 18} __kstrtab_unix_socket_table: ref;

axiom __kstrtab_unix_socket_table == $sub.ref(0, 8230);

const unix_table_lock: ref;

axiom unix_table_lock == $sub.ref(0, 9326);

const .str: ref;

axiom .str == $sub.ref(0, 10366);

const __ksymtab_unix_table_lock: ref;

axiom __ksymtab_unix_table_lock == $sub.ref(0, 11406);

const {:count 16} __kstrtab_unix_table_lock: ref;

axiom __kstrtab_unix_table_lock == $sub.ref(0, 12446);

const __ksymtab_unix_peer_get: ref;

axiom __ksymtab_unix_peer_get == $sub.ref(0, 13486);

const {:count 14} __kstrtab_unix_peer_get: ref;

axiom __kstrtab_unix_peer_get == $sub.ref(0, 14524);

const {:count 2} unix_table: ref;

axiom unix_table == $sub.ref(0, 15676);

const gc_candidates: ref;

axiom gc_candidates == $sub.ref(0, 16716);

const unix_gc_wait: ref;

axiom unix_gc_wait == $sub.ref(0, 17828);

const gc_in_progress: ref;

axiom gc_in_progress == $sub.ref(0, 18853);

const gc_inflight_list: ref;

axiom gc_inflight_list == $sub.ref(0, 19893);

const unix_gc_lock: ref;

axiom unix_gc_lock == $sub.ref(0, 20989);

const unix_family_ops: ref;

axiom unix_family_ops == $sub.ref(0, 22037);

const unix_net_ops: ref;

axiom unix_net_ops == $sub.ref(0, 23117);

const unix_seq_fops: ref;

axiom unix_seq_fops == $sub.ref(0, 24373);

const unix_seqpacket_ops: ref;

axiom unix_seqpacket_ops == $sub.ref(0, 25581);

const unix_dgram_ops: ref;

axiom unix_dgram_ops == $sub.ref(0, 26789);

const unix_stream_ops: ref;

axiom unix_stream_ops == $sub.ref(0, 27997);

const af_unix_sk_receive_queue_lock_key: ref;

axiom af_unix_sk_receive_queue_lock_key == $sub.ref(0, 29029);

const unix_proto: ref;

axiom unix_proto == $sub.ref(0, 30461);

const unix_nr_socks: ref;

axiom unix_nr_socks == $sub.ref(0, 31493);

const unix_seq_ops: ref;

axiom unix_seq_ops == $sub.ref(0, 32549);

const {:count 14} __kstrtab_unix_outq_len: ref;

axiom __kstrtab_unix_outq_len == $sub.ref(0, 33587);

const {:count 13} __kstrtab_unix_inq_len: ref;

axiom __kstrtab_unix_inq_len == $sub.ref(0, 34624);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 35656);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 36684);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 37716);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 38744);

const unix_tot_inflight: ref;

axiom unix_tot_inflight == $sub.ref(0, 39772);

const unix_stream_ops_group2: ref;

axiom unix_stream_ops_group2 == $sub.ref(0, 40804);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 41832);

const unix_dgram_ops_group2: ref;

axiom unix_dgram_ops_group2 == $sub.ref(0, 42864);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 43892);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 44920);

const unix_seq_fops_group1: ref;

axiom unix_seq_fops_group1 == $sub.ref(0, 45952);

const unix_seq_ops_group2: ref;

axiom unix_seq_ops_group2 == $sub.ref(0, 46984);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 48012);

const unix_dgram_ops_group1: ref;

axiom unix_dgram_ops_group1 == $sub.ref(0, 49044);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 50072);

const unix_seq_ops_group3: ref;

axiom unix_seq_ops_group3 == $sub.ref(0, 51104);

const unix_seq_ops_group1: ref;

axiom unix_seq_ops_group1 == $sub.ref(0, 52136);

const unix_dgram_ops_group4: ref;

axiom unix_dgram_ops_group4 == $sub.ref(0, 53168);

const unix_seqpacket_ops_group3: ref;

axiom unix_seqpacket_ops_group3 == $sub.ref(0, 54200);

const unix_net_ops_group0: ref;

axiom unix_net_ops_group0 == $sub.ref(0, 55232);

const unix_seqpacket_ops_group0: ref;

axiom unix_seqpacket_ops_group0 == $sub.ref(0, 56264);

const unix_stream_ops_group5: ref;

axiom unix_stream_ops_group5 == $sub.ref(0, 57296);

const unix_stream_ops_group0: ref;

axiom unix_stream_ops_group0 == $sub.ref(0, 58328);

const unix_dgram_ops_group0: ref;

axiom unix_dgram_ops_group0 == $sub.ref(0, 59360);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 60388);

const unix_dgram_ops_group3: ref;

axiom unix_dgram_ops_group3 == $sub.ref(0, 61420);

const unix_seqpacket_ops_group1: ref;

axiom unix_seqpacket_ops_group1 == $sub.ref(0, 62452);

const unix_seq_fops_group2: ref;

axiom unix_seq_fops_group2 == $sub.ref(0, 63484);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 64512);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 65540);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 66568);

const unix_stream_ops_group4: ref;

axiom unix_stream_ops_group4 == $sub.ref(0, 67600);

const unix_stream_ops_group1: ref;

axiom unix_stream_ops_group1 == $sub.ref(0, 68632);

const unix_seqpacket_ops_group4: ref;

axiom unix_seqpacket_ops_group4 == $sub.ref(0, 69664);

const unix_dgram_ops_group5: ref;

axiom unix_dgram_ops_group5 == $sub.ref(0, 70696);

const unix_seqpacket_ops_group5: ref;

axiom unix_seqpacket_ops_group5 == $sub.ref(0, 71728);

const unix_stream_ops_group3: ref;

axiom unix_stream_ops_group3 == $sub.ref(0, 72760);

const unix_seqpacket_ops_group2: ref;

axiom unix_seqpacket_ops_group2 == $sub.ref(0, 73792);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 74820);

const __ksymtab_unix_outq_len: ref;

axiom __ksymtab_unix_outq_len == $sub.ref(0, 75860);

const __ksymtab_unix_inq_len: ref;

axiom __ksymtab_unix_inq_len == $sub.ref(0, 76900);

const {:count 57} .str.18: ref;

axiom .str.18 == $sub.ref(0, 77981);

const {:count 35} .str.19: ref;

axiom .str.19 == $sub.ref(0, 79040);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 205} .str.1: ref;

axiom .str.1 == $sub.ref(0, 80269);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 24} .str.7: ref;

axiom .str.7 == $sub.ref(0, 81317);

const system_freezing_cnt: ref;

axiom system_freezing_cnt == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 22} .str.24: ref;

axiom .str.24 == $sub.ref(0, 82363);

const {:count 21} .str.6: ref;

axiom .str.6 == $sub.ref(0, 83408);

const {:count 19} .str.5: ref;

axiom .str.5 == $sub.ref(0, 84451);

const {:count 35} .str.8: ref;

axiom .str.8 == $sub.ref(0, 85510);

const {:count 19} .str.9: ref;

axiom .str.9 == $sub.ref(0, 86553);

const {:count 13} .str.10: ref;

axiom .str.10 == $sub.ref(0, 87590);

const {:count 14} .str.11: ref;

axiom .str.11 == $sub.ref(0, 88628);

const {:count 205} .str.4: ref;

axiom .str.4 == $sub.ref(0, 89857);

const {:count 49} .str.16: ref;

axiom .str.16 == $sub.ref(0, 90930);

const {:count 41} .str.12: ref;

axiom .str.12 == $sub.ref(0, 91995);

const {:count 25} .str.13: ref;

axiom .str.13 == $sub.ref(0, 93044);

const {:count 44} .str.15: ref;

axiom .str.15 == $sub.ref(0, 94112);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 42} .str.14: ref;

axiom .str.14 == $sub.ref(0, 95178);

const {:count 5} .str.3: ref;

axiom .str.3 == $sub.ref(0, 96207);

const {:count 5} .str.17: ref;

axiom .str.17 == $sub.ref(0, 97236);

const init_user_ns: ref;

axiom init_user_ns == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 9} .str.2: ref;

axiom .str.2 == $sub.ref(0, 98269);

const {:count 13} .str.22: ref;

axiom .str.22 == $sub.ref(0, 99306);

const {:count 18} .str.23: ref;

axiom .str.23 == $sub.ref(0, 100348);

const {:count 15} .str.25: ref;

axiom .str.25 == $sub.ref(0, 101387);

const init_net: ref;

axiom init_net == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 48} .str.20: ref;

axiom .str.20 == $sub.ref(0, 102459);

const {:count 13} .str.21: ref;

axiom .str.21 == $sub.ref(0, 103496);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 104528);

const {:count 3} .str.1.66: ref;

axiom .str.1.66 == $sub.ref(0, 105555);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 106593);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 107621);

const unix_peer_get: ref;

axiom unix_peer_get == $sub.ref(0, 108653);

procedure unix_peer_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation unix_peer_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} spin_lock($p2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} spin_unlock($p9);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} sock_hold($p5);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 109685);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 110717);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} ldv_spin_lock();
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} ldv_spin_lock_1($p0);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    return;
}



const sock_hold: ref;

axiom sock_hold == $sub.ref(0, 111749);

procedure sock_hold($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation sock_hold($p0: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} atomic_inc($p2);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 112781);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} ldv_spin_unlock();
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} ldv_spin_unlock_5($p0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 113813);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $M.1 := 0;
    call {:si_unique_call 8} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 114845);

procedure ldv_spin_unlock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} _raw_spin_unlock($p2);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 115877);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 116909);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 10} devirtbounce(0, $p1, $p1);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 117941);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.1 := 1;
    call {:si_unique_call 11} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 118973);

procedure ldv_spin_lock_1($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} _raw_spin_lock($p2);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 120005);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    return;
}



const unix_inq_len: ref;

axiom unix_inq_len == $sub.ref(0, 121037);

procedure unix_inq_len($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1;



implementation unix_inq_len($p0: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i26: i64;
  var $p27: ref;
  var $i35: i64;
  var $i25: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i36: i64;
  var $p46: ref;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 10);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} spin_lock($p8);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 5);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p38 := skb_peek($p37);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i36 := $i44;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} spin_unlock($p46);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i6 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p38, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    call {:si_unique_call 19} {:cexpr "amount"} boogie_si_record_i64($i43);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb21;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(0, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p19);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i22, $i23);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i25 := 0;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i36 := $i25;
    goto $bb18;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i26, $p27 := 0, $p19;
    goto $bb13;

  $bb13:
    call $i28, $i29, $i30, $p31, $p32, $i33, $i34, $i26, $p27, $i35 := unix_inq_len_loop_$bb13($i22, $i28, $i29, $i30, $p31, $p32, $i33, $i34, $i26, $p27, $i35);
    goto $bb13_last;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i28 := unix_skb_len($p27);
    call {:si_unique_call 16} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, $i26);
    call {:si_unique_call 17} {:cexpr "amount"} boogie_si_record_i64($i30);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i22, $i33);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i35 := $i30;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i25 := $i35;
    goto $bb12;

  $bb15:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i26, $p27 := $i30, $p32;
    goto $bb15_dummy;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64(0, 22);
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_92;
}



const unix_skb_len: ref;

axiom unix_skb_len == $sub.ref(0, 122069);

procedure unix_skb_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unix_skb_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i2, $i6);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const skb_peek: ref;

axiom skb_peek == $sub.ref(0, 123101);

procedure skb_peek($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_peek($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p7 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const unix_outq_len: ref;

axiom unix_outq_len == $sub.ref(0, 124133);

procedure unix_outq_len($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation unix_outq_len($p0: ref) returns ($r: i64)
{
  var $i1: i32;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i1 := sk_wmem_alloc_get($p0);
    call {:si_unique_call 21} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sk_wmem_alloc_get: ref;

axiom sk_wmem_alloc_get == $sub.ref(0, 125165);

procedure sk_wmem_alloc_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sk_wmem_alloc_get($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(600, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i2 := atomic_read($p1);
    call {:si_unique_call 23} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 126197);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const unix_seq_start: ref;

axiom unix_seq_start == $sub.ref(0, 127229);

procedure unix_seq_start($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation unix_seq_start($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} spin_lock(unix_table_lock);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p1);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i64($i5, 54);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i64($i6, 511);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p8 := unix_next_socket($p0, $0.ref, $p1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p4 := $p8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref(1);
    goto $bb3;
}



const unix_seq_stop: ref;

axiom unix_seq_stop == $sub.ref(0, 128261);

procedure unix_seq_stop($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation unix_seq_stop($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} spin_unlock(unix_table_lock);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    return;
}



const unix_seq_next: ref;

axiom unix_seq_next == $sub.ref(0, 129293);

procedure unix_seq_next($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation unix_seq_next($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, 1);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i4);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p6 := unix_next_socket($p0, $p5, $p2);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const unix_seq_show: ref;

axiom unix_seq_show == $sub.ref(0, 130325);

procedure unix_seq_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation unix_seq_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i32: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i60: i32;
  var $i57: i32;
  var $i58: i32;
  var $i61: i1;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i8;
  var $i74: i32;
  var $i75: i1;
  var $i62: i32;
  var $p76: ref;
  var $p77: ref;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 1);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} spin_lock($p8);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i9 := sock_i_ino($p5);
    call {:si_unique_call 31} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i12 := atomic_read($p11);
    call {:si_unique_call 33} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 10);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i18 := (if $i17 == 1 then 65536 else 0);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i38 := (if $i37 == 1 then 2 else 4);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i32 := $i38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} vslice_dummy_var_65 := seq_printf.ref.ref.ref.i32.i32.i32.i32.i32.i64($p0, .str.19, $p5, $i12, 0, $i18, $i21, $i32, $i9);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p5);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} spin_unlock($p77);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_69 := seq_putc($p0, 10);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i43 == 1;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_66 := seq_putc($p0, 32);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.2, $p47);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32($i48, 2);
    call {:si_unique_call 36} {:cexpr "len"} boogie_si_record_i32($i49);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p5);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.2, $p53);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i55 := $ugt.i32($i54, 255);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i55 == 1);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_67 := seq_putc($p0, 64);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i60 := $add.i32(0, 1);
    call {:si_unique_call 39} {:cexpr "i"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    $i57, $i58 := $i60, $i49;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i57, $i58);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i61 == 1;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i62 := $i57;
    goto $bb15;

  $bb15:
    call $i63, $p64, $p65, $p66, $p67, $p69, $i70, $i71, $i72, $i74, $i75, $i62, vslice_dummy_var_68 := unix_seq_show_loop_$bb15($p0, $p6, $i58, $i63, $p64, $p65, $p66, $p67, $p69, $i70, $i71, $i72, $i74, $i75, $i62, vslice_dummy_var_68);
    goto $bb15_last;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p67, $mul.ref(0, 110)), $mul.ref(2, 1)), $mul.ref($i63, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.2, $p69);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i71 := $sext.i8.i32($i70);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} vslice_dummy_var_68 := seq_putc($p0, $i72);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i62, 1);
    call {:si_unique_call 41} {:cexpr "i"} boogie_si_record_i32($i74);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, $i58);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i75 == 1);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i62 := $i74;
    goto $bb17_dummy;

  $bb9:
    assume $i55 == 1;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i49, 1);
    call {:si_unique_call 37} {:cexpr "len"} boogie_si_record_i32($i56);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i57, $i58 := 0, $i56;
    goto $bb11;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 3 else 1);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} vslice_dummy_var_64 := seq_puts($p0, .str.18);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_251;
}



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 131357);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_puts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 1} true;
    call {:si_unique_call 44} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 45} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sock_i_ino: ref;

axiom sock_i_ino == $sub.ref(0, 132389);

procedure sock_i_ino($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation sock_i_ino($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 46} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 47} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 133421);

procedure seq_printf.ref.ref.ref.i32.i32.i32.i32.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i64) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref.i32.i32.i32.i32.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 48} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 49} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_putc: ref;

axiom seq_putc == $sub.ref(0, 134453);

procedure seq_putc($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation seq_putc($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 50} {:cexpr "seq_putc:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 51} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 52} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const unix_next_socket: ref;

axiom unix_next_socket == $sub.ref(0, 135485);

procedure unix_next_socket($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation unix_next_socket($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i16: i64;
  var $i17: i1;
  var $p5: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p15: ref;

  $bb0#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_284#12;

  corral_source_split_284#12:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_285#12;

  corral_source_split_285#12:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i64($i3, 1);
    goto corral_source_split_286#12;

  corral_source_split_286#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1#12, $bb2#12;

  $bb2#12:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3#12;

  $bb1#12:
    assume $i4 == 1;
    goto corral_source_split_288#12;

  corral_source_split_288#12:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb4#12;

  $bb4#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#12;

  corral_source_split_290#12:
    assume {:verifier.code 0} true;
    goto $bb5#12;

  $bb5#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#12;

  corral_source_split_292#12:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#12;

  corral_source_split_293#12:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#12;

  corral_source_split_294#12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#12;

  $bb7#12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#12;

  $bb9#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#12;

  corral_source_split_306#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#12;

  corral_source_split_307#12:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#12;

  corral_source_split_308#12:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#12;

  corral_source_split_309#12:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#12;

  corral_source_split_310#12:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#12;

  $bb11#12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#12;

  $bb13#12:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#12;

  corral_source_split_316#12:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#12;

  corral_source_split_317#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#12, $bb15#12;

  $bb14#12:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#11;

  $bb4#11:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#11;

  corral_source_split_290#11:
    assume {:verifier.code 0} true;
    goto $bb5#11;

  $bb5#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#11;

  corral_source_split_292#11:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#11;

  corral_source_split_293#11:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#11;

  corral_source_split_294#11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#11;

  $bb7#11:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#11;

  $bb9#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#11;

  corral_source_split_306#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#11;

  corral_source_split_307#11:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#11;

  corral_source_split_308#11:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#11;

  corral_source_split_309#11:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#11;

  corral_source_split_310#11:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#11;

  $bb11#11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#11;

  $bb13#11:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#11;

  corral_source_split_316#11:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#11;

  corral_source_split_317#11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#11, $bb15#12;

  $bb14#11:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#10;

  $bb4#10:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#10;

  corral_source_split_290#10:
    assume {:verifier.code 0} true;
    goto $bb5#10;

  $bb5#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#10;

  corral_source_split_292#10:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#10;

  corral_source_split_293#10:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#10;

  corral_source_split_294#10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#10;

  $bb7#10:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#10;

  $bb9#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#10;

  corral_source_split_306#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#10;

  corral_source_split_307#10:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#10;

  corral_source_split_308#10:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#10;

  corral_source_split_309#10:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#10;

  corral_source_split_310#10:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#10;

  $bb11#10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#10;

  $bb13#10:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#10;

  corral_source_split_316#10:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#10;

  corral_source_split_317#10:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#10, $bb15#12;

  $bb14#10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#9;

  $bb4#9:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#9;

  corral_source_split_290#9:
    assume {:verifier.code 0} true;
    goto $bb5#9;

  $bb5#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#9;

  corral_source_split_292#9:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#9;

  corral_source_split_293#9:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#9;

  corral_source_split_294#9:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#9;

  $bb7#9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#9;

  $bb9#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#9;

  corral_source_split_306#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#9;

  corral_source_split_307#9:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#9;

  corral_source_split_308#9:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#9;

  corral_source_split_309#9:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#9;

  corral_source_split_310#9:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#9;

  $bb11#9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#9;

  $bb13#9:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#9;

  corral_source_split_316#9:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#9;

  corral_source_split_317#9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#9, $bb15#12;

  $bb14#9:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#8;

  $bb4#8:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#8;

  corral_source_split_290#8:
    assume {:verifier.code 0} true;
    goto $bb5#8;

  $bb5#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#8;

  corral_source_split_292#8:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#8;

  corral_source_split_293#8:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#8;

  corral_source_split_294#8:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#8;

  $bb7#8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#8;

  $bb9#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#8;

  corral_source_split_306#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#8;

  corral_source_split_307#8:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#8;

  corral_source_split_308#8:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#8;

  corral_source_split_309#8:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#8;

  corral_source_split_310#8:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#8;

  $bb11#8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#8;

  $bb13#8:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#8;

  corral_source_split_316#8:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#8;

  corral_source_split_317#8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#8, $bb15#12;

  $bb14#8:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#7;

  $bb4#7:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#7;

  corral_source_split_290#7:
    assume {:verifier.code 0} true;
    goto $bb5#7;

  $bb5#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#7;

  corral_source_split_292#7:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#7;

  corral_source_split_293#7:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#7;

  corral_source_split_294#7:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#7;

  $bb7#7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#7;

  $bb9#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#7;

  corral_source_split_306#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#7;

  corral_source_split_307#7:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#7;

  corral_source_split_308#7:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#7;

  corral_source_split_309#7:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#7;

  corral_source_split_310#7:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#7;

  $bb11#7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#7;

  $bb13#7:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#7;

  corral_source_split_316#7:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#7;

  corral_source_split_317#7:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#7, $bb15#12;

  $bb14#7:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#6;

  $bb4#6:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#6;

  corral_source_split_290#6:
    assume {:verifier.code 0} true;
    goto $bb5#6;

  $bb5#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#6;

  corral_source_split_292#6:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#6;

  corral_source_split_293#6:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#6;

  corral_source_split_294#6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#6;

  $bb7#6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#6;

  $bb9#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#6;

  corral_source_split_306#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#6;

  corral_source_split_307#6:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#6;

  corral_source_split_308#6:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#6;

  corral_source_split_309#6:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#6;

  corral_source_split_310#6:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#6;

  $bb11#6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#6;

  $bb13#6:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#6;

  corral_source_split_316#6:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#6;

  corral_source_split_317#6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#6, $bb15#12;

  $bb14#6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#5;

  $bb4#5:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#5;

  corral_source_split_290#5:
    assume {:verifier.code 0} true;
    goto $bb5#5;

  $bb5#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#5;

  corral_source_split_292#5:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#5;

  corral_source_split_293#5:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#5;

  corral_source_split_294#5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#5;

  $bb7#5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#5;

  $bb9#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#5;

  corral_source_split_306#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#5;

  corral_source_split_307#5:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#5;

  corral_source_split_308#5:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#5;

  corral_source_split_309#5:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#5;

  corral_source_split_310#5:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#5;

  $bb11#5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#5;

  $bb13#5:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#5;

  corral_source_split_316#5:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#5;

  corral_source_split_317#5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#5, $bb15#12;

  $bb14#5:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#4;

  $bb4#4:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#4;

  corral_source_split_290#4:
    assume {:verifier.code 0} true;
    goto $bb5#4;

  $bb5#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#4;

  corral_source_split_292#4:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#4;

  corral_source_split_293#4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#4;

  corral_source_split_294#4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#4;

  $bb7#4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#4;

  $bb9#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#4;

  corral_source_split_306#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#4;

  corral_source_split_307#4:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#4;

  corral_source_split_308#4:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#4;

  corral_source_split_309#4:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#4;

  corral_source_split_310#4:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#4;

  $bb11#4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#4;

  $bb13#4:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#4;

  corral_source_split_316#4:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#4;

  corral_source_split_317#4:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#4, $bb15#12;

  $bb14#4:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#3;

  $bb4#3:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#3;

  corral_source_split_290#3:
    assume {:verifier.code 0} true;
    goto $bb5#3;

  $bb5#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#3;

  corral_source_split_292#3:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#3;

  corral_source_split_293#3:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#3;

  corral_source_split_294#3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#3;

  $bb7#3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#3;

  $bb9#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#3;

  corral_source_split_306#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#3;

  corral_source_split_307#3:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#3;

  corral_source_split_308#3:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#3;

  corral_source_split_309#3:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#3;

  corral_source_split_310#3:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#3;

  $bb11#3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#3;

  $bb13#3:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#3;

  corral_source_split_316#3:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#3;

  corral_source_split_317#3:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#3, $bb15#12;

  $bb14#3:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#2;

  $bb4#2:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#2;

  corral_source_split_290#2:
    assume {:verifier.code 0} true;
    goto $bb5#2;

  $bb5#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#2;

  corral_source_split_292#2:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#2;

  corral_source_split_293#2:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#2;

  corral_source_split_294#2:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#2;

  $bb7#2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#2;

  $bb9#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#2;

  corral_source_split_306#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#2;

  corral_source_split_307#2:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#2;

  corral_source_split_308#2:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#2;

  corral_source_split_309#2:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#2;

  corral_source_split_310#2:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#2;

  $bb11#2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#2;

  $bb13#2:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#2;

  corral_source_split_316#2:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#2;

  corral_source_split_317#2:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#2, $bb15#12;

  $bb14#2:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#1;

  $bb4#1:
    assume {:verifier.code 0} true;
    goto corral_source_split_290#1;

  corral_source_split_290#1:
    assume {:verifier.code 0} true;
    goto $bb5#1;

  $bb5#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p6 := sk_next($p5);
    goto corral_source_split_292#1;

  corral_source_split_292#1:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_293#1;

  corral_source_split_293#1:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_294#1;

  corral_source_split_294#1:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6#12, $bb7#1;

  $bb7#1:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9#1;

  $bb9#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p9 := sock_net($p6);
    goto corral_source_split_306#1;

  corral_source_split_306#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p10 := seq_file_net($p0);
    goto corral_source_split_307#1;

  corral_source_split_307#1:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_308#1;

  corral_source_split_308#1:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p10);
    goto corral_source_split_309#1;

  corral_source_split_309#1:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_310#1;

  corral_source_split_310#1:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    assume {:branchcond $i13} true;
    goto $bb10#12, $bb11#1;

  $bb11#1:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13#1;

  $bb13#1:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p6);
    goto corral_source_split_316#1;

  corral_source_split_316#1:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i16, 1);
    goto corral_source_split_317#1;

  corral_source_split_317#1:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14#1, $bb15#12;

  $bb15#12:
    assume !($i17 == 1);
    goto corral_source_split_319#12;

  corral_source_split_319#12:
    assume {:verifier.code 0} true;
    goto $bb3#12;

  $bb3#12:
    assume {:verifier.code 0} true;
    goto $bb16#12;

  $bb16#12:
    assume {:verifier.code 0} true;
    goto $bb17#12;

  $bb14#1:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p6;
    goto $bb4#0;

  $bb4#0:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb10#12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_312#12;

  corral_source_split_312#12:
    assume {:verifier.code 0} true;
    $p15 := $p14;
    goto $bb12#12;

  $bb6#12:
    assume $i8 == 1;
    goto corral_source_split_296#12;

  corral_source_split_296#12:
    assume {:verifier.code 0} true;
    goto $bb8#12;

  $bb8#12:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#12;

  corral_source_split_298#12:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#12;

  corral_source_split_299#12:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#12;

  corral_source_split_300#12:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#12;

  corral_source_split_301#12:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#12;

  corral_source_split_302#12:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#12;

  corral_source_split_303#12:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#12;

  corral_source_split_304#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#12, $bb22#12;

  $bb21#12:
    assume $i26 == 1;
    goto corral_source_split_327#12;

  corral_source_split_327#12:
    assume {:verifier.code 0} true;
    goto $bb17#12;

  $bb17#12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#12;

  corral_source_split_321#12:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#12;

  corral_source_split_322#12:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#12;

  corral_source_split_323#12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#12;

  $bb19#12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#12;

  $bb20#12:
    assume {:verifier.code 0} true;
    goto $bb8#11;

  $bb8#11:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#11;

  corral_source_split_298#11:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#11;

  corral_source_split_299#11:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#11;

  corral_source_split_300#11:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#11;

  corral_source_split_301#11:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#11;

  corral_source_split_302#11:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#11;

  corral_source_split_303#11:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#11;

  corral_source_split_304#11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#11, $bb22#12;

  $bb21#11:
    assume $i26 == 1;
    goto corral_source_split_327#11;

  corral_source_split_327#11:
    assume {:verifier.code 0} true;
    goto $bb17#11;

  $bb17#11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#11;

  corral_source_split_321#11:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#11;

  corral_source_split_322#11:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#11;

  corral_source_split_323#11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#11;

  $bb19#11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#11;

  $bb20#11:
    assume {:verifier.code 0} true;
    goto $bb8#10;

  $bb8#10:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#10;

  corral_source_split_298#10:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#10;

  corral_source_split_299#10:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#10;

  corral_source_split_300#10:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#10;

  corral_source_split_301#10:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#10;

  corral_source_split_302#10:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#10;

  corral_source_split_303#10:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#10;

  corral_source_split_304#10:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#10, $bb22#12;

  $bb21#10:
    assume $i26 == 1;
    goto corral_source_split_327#10;

  corral_source_split_327#10:
    assume {:verifier.code 0} true;
    goto $bb17#10;

  $bb17#10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#10;

  corral_source_split_321#10:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#10;

  corral_source_split_322#10:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#10;

  corral_source_split_323#10:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#10;

  $bb19#10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#10;

  $bb20#10:
    assume {:verifier.code 0} true;
    goto $bb8#9;

  $bb8#9:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#9;

  corral_source_split_298#9:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#9;

  corral_source_split_299#9:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#9;

  corral_source_split_300#9:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#9;

  corral_source_split_301#9:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#9;

  corral_source_split_302#9:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#9;

  corral_source_split_303#9:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#9;

  corral_source_split_304#9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#9, $bb22#12;

  $bb21#9:
    assume $i26 == 1;
    goto corral_source_split_327#9;

  corral_source_split_327#9:
    assume {:verifier.code 0} true;
    goto $bb17#9;

  $bb17#9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#9;

  corral_source_split_321#9:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#9;

  corral_source_split_322#9:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#9;

  corral_source_split_323#9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#9;

  $bb19#9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#9;

  $bb20#9:
    assume {:verifier.code 0} true;
    goto $bb8#8;

  $bb8#8:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#8;

  corral_source_split_298#8:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#8;

  corral_source_split_299#8:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#8;

  corral_source_split_300#8:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#8;

  corral_source_split_301#8:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#8;

  corral_source_split_302#8:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#8;

  corral_source_split_303#8:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#8;

  corral_source_split_304#8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#8, $bb22#12;

  $bb21#8:
    assume $i26 == 1;
    goto corral_source_split_327#8;

  corral_source_split_327#8:
    assume {:verifier.code 0} true;
    goto $bb17#8;

  $bb17#8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#8;

  corral_source_split_321#8:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#8;

  corral_source_split_322#8:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#8;

  corral_source_split_323#8:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#8;

  $bb19#8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#8;

  $bb20#8:
    assume {:verifier.code 0} true;
    goto $bb8#7;

  $bb8#7:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#7;

  corral_source_split_298#7:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#7;

  corral_source_split_299#7:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#7;

  corral_source_split_300#7:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#7;

  corral_source_split_301#7:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#7;

  corral_source_split_302#7:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#7;

  corral_source_split_303#7:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#7;

  corral_source_split_304#7:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#7, $bb22#12;

  $bb21#7:
    assume $i26 == 1;
    goto corral_source_split_327#7;

  corral_source_split_327#7:
    assume {:verifier.code 0} true;
    goto $bb17#7;

  $bb17#7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#7;

  corral_source_split_321#7:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#7;

  corral_source_split_322#7:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#7;

  corral_source_split_323#7:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#7;

  $bb19#7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#7;

  $bb20#7:
    assume {:verifier.code 0} true;
    goto $bb8#6;

  $bb8#6:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#6;

  corral_source_split_298#6:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#6;

  corral_source_split_299#6:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#6;

  corral_source_split_300#6:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#6;

  corral_source_split_301#6:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#6;

  corral_source_split_302#6:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#6;

  corral_source_split_303#6:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#6;

  corral_source_split_304#6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#6, $bb22#12;

  $bb21#6:
    assume $i26 == 1;
    goto corral_source_split_327#6;

  corral_source_split_327#6:
    assume {:verifier.code 0} true;
    goto $bb17#6;

  $bb17#6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#6;

  corral_source_split_321#6:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#6;

  corral_source_split_322#6:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#6;

  corral_source_split_323#6:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#6;

  $bb19#6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#6;

  $bb20#6:
    assume {:verifier.code 0} true;
    goto $bb8#5;

  $bb8#5:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#5;

  corral_source_split_298#5:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#5;

  corral_source_split_299#5:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#5;

  corral_source_split_300#5:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#5;

  corral_source_split_301#5:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#5;

  corral_source_split_302#5:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#5;

  corral_source_split_303#5:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#5;

  corral_source_split_304#5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#5, $bb22#12;

  $bb21#5:
    assume $i26 == 1;
    goto corral_source_split_327#5;

  corral_source_split_327#5:
    assume {:verifier.code 0} true;
    goto $bb17#5;

  $bb17#5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#5;

  corral_source_split_321#5:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#5;

  corral_source_split_322#5:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#5;

  corral_source_split_323#5:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#5;

  $bb19#5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#5;

  $bb20#5:
    assume {:verifier.code 0} true;
    goto $bb8#4;

  $bb8#4:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#4;

  corral_source_split_298#4:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#4;

  corral_source_split_299#4:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#4;

  corral_source_split_300#4:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#4;

  corral_source_split_301#4:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#4;

  corral_source_split_302#4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#4;

  corral_source_split_303#4:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#4;

  corral_source_split_304#4:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#4, $bb22#12;

  $bb21#4:
    assume $i26 == 1;
    goto corral_source_split_327#4;

  corral_source_split_327#4:
    assume {:verifier.code 0} true;
    goto $bb17#4;

  $bb17#4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#4;

  corral_source_split_321#4:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#4;

  corral_source_split_322#4:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#4;

  corral_source_split_323#4:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#4;

  $bb19#4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#4;

  $bb20#4:
    assume {:verifier.code 0} true;
    goto $bb8#3;

  $bb8#3:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#3;

  corral_source_split_298#3:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#3;

  corral_source_split_299#3:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#3;

  corral_source_split_300#3:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#3;

  corral_source_split_301#3:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#3;

  corral_source_split_302#3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#3;

  corral_source_split_303#3:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#3;

  corral_source_split_304#3:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#3, $bb22#12;

  $bb21#3:
    assume $i26 == 1;
    goto corral_source_split_327#3;

  corral_source_split_327#3:
    assume {:verifier.code 0} true;
    goto $bb17#3;

  $bb17#3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#3;

  corral_source_split_321#3:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#3;

  corral_source_split_322#3:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#3;

  corral_source_split_323#3:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#3;

  $bb19#3:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#3;

  $bb20#3:
    assume {:verifier.code 0} true;
    goto $bb8#2;

  $bb8#2:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#2;

  corral_source_split_298#2:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#2;

  corral_source_split_299#2:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#2;

  corral_source_split_300#2:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#2;

  corral_source_split_301#2:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#2;

  corral_source_split_302#2:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#2;

  corral_source_split_303#2:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#2;

  corral_source_split_304#2:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#2, $bb22#12;

  $bb21#2:
    assume $i26 == 1;
    goto corral_source_split_327#2;

  corral_source_split_327#2:
    assume {:verifier.code 0} true;
    goto $bb17#2;

  $bb17#2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#2;

  corral_source_split_321#2:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#2;

  corral_source_split_322#2:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#2;

  corral_source_split_323#2:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#2;

  $bb19#2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#2;

  $bb20#2:
    assume {:verifier.code 0} true;
    goto $bb8#1;

  $bb8#1:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_298#1;

  corral_source_split_298#1:
    assume {:verifier.code 0} true;
    $i22 := $ashr.i64($i21, 54);
    goto corral_source_split_299#1;

  corral_source_split_299#1:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    call {:si_unique_call 54} {:cexpr "bucket"} boogie_si_record_i64($i23);
    goto corral_source_split_300#1;

  corral_source_split_300#1:
    assume {:verifier.code 0} true;
    $i24 := $shl.i64($i23, 54);
    goto corral_source_split_301#1;

  corral_source_split_301#1:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i24, 1);
    goto corral_source_split_302#1;

  corral_source_split_302#1:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i25);
    goto corral_source_split_303#1;

  corral_source_split_303#1:
    assume {:verifier.code 0} true;
    $i26 := $ule.i64($i23, 511);
    goto corral_source_split_304#1;

  corral_source_split_304#1:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21#1, $bb22#12;

  $bb22#12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb23#12;

  $bb23#12:
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb12#12;

  $bb21#1:
    assume $i26 == 1;
    goto corral_source_split_327#1;

  corral_source_split_327#1:
    assume {:verifier.code 0} true;
    goto $bb17#1;

  $bb17#1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $p18 := unix_from_bucket($p0, $p2);
    goto corral_source_split_321#1;

  corral_source_split_321#1:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_322#1;

  corral_source_split_322#1:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_323#1;

  corral_source_split_323#1:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18#12, $bb19#1;

  $bb19#1:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20#1;

  $bb20#1:
    assume {:verifier.code 0} true;
    goto $bb8#0;

  $bb8#0:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb18#12:
    assume $i20 == 1;
    goto corral_source_split_325#12;

  corral_source_split_325#12:
    assume {:verifier.code 0} true;
    $p15 := $p18;
    goto $bb12#12;

  $bb12#12:
    assume {:verifier.code 0} true;
    goto corral_source_split_314#12;

  corral_source_split_314#12:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;
}



const sk_next: ref;

axiom sk_next == $sub.ref(0, 136517);

procedure sk_next($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sk_next($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 88), 1272));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p15 := $p14;
    goto $bb3;
}



const sock_net: ref;

axiom sock_net == $sub.ref(0, 137549);

procedure sock_net($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sock_net($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p3 := read_pnet($p2);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const seq_file_net: ref;

axiom seq_file_net == $sub.ref(0, 138581);

procedure seq_file_net($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation seq_file_net($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(256, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.4, $p4);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const unix_from_bucket: ref;

axiom unix_from_bucket == $sub.ref(0, 139613);

procedure unix_from_bucket($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation unix_from_bucket($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i18: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i11: i64;
  var $p12: ref;
  var $p26: ref;
  var $p10: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 18014398509481983);
    call {:si_unique_call 59} {:cexpr "offset"} boogie_si_record_i64($i3);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p1);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i5 := $ashr.i64($i4, 54);
    call {:si_unique_call 60} {:cexpr "bucket"} boogie_si_record_i64($i5);
    $p6 := $add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref($i5, 8));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p7 := sk_head($p6);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p10 := $p7;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p22 := $p10;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $r := $p22;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i11, $p12 := 0, $p7;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $i16, $i17, $i19, $i20, $p21, $i18, $p23, $i24, $i25, $i11, $p12, $p26 := unix_from_bucket_loop_$bb4($p0, $i3, $p13, $p14, $i15, $i16, $i17, $i19, $i20, $p21, $i18, $p23, $i24, $i25, $i11, $p12, $p26);
    goto $bb4_last;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p13 := sock_net($p12);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p14 := seq_file_net($p0);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p13);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p14);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i15, $i16);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i11, 1);
    call {:si_unique_call 65} {:cexpr "count"} boogie_si_record_i64($i19);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, $i3);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p21 := $p12;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p23 := sk_next($p12);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p26 := $p23;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p10 := $p26;
    goto $bb3;

  $bb14:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i11, $p12 := $i18, $p23;
    goto $bb14_dummy;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb12;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i18 := $i11;
    goto $bb8;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_369;
}



const sk_head: ref;

axiom sk_head == $sub.ref(0, 140645);

procedure sk_head($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sk_head($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i1 := hlist_empty($p0);
    call {:si_unique_call 67} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p3 := __sk_head($p0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p4 := $p3;
    goto $bb3;
}



const hlist_empty: ref;

axiom hlist_empty == $sub.ref(0, 141677);

procedure hlist_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hlist_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __sk_head: ref;

axiom __sk_head == $sub.ref(0, 142709);

procedure __sk_head($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __sk_head($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 88), 1272));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const read_pnet: ref;

axiom read_pnet == $sub.ref(0, 143741);

procedure read_pnet($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation read_pnet($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $p0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const unix_release: ref;

axiom unix_release == $sub.ref(0, 144773);

procedure unix_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.1, $CurrAddr, $M.20;



implementation unix_release($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} unix_release_sock($p2, 0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unix_bind: ref;

axiom unix_bind == $sub.ref(0, 145805);

procedure unix_bind($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.1, $CurrAddr, assertsPassed;



implementation unix_bind($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i1;
  var $i65: i1;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $p94: ref;
  var $p82: ref;
  var $p95: ref;
  var $i90: i32;
  var $i28: i32;
  var $p96: ref;
  var $i16: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 72} {:cexpr "unix_bind:arg:addr_len"} boogie_si_record_i32($i2);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $p7 := sock_net($p6);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p6);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 110)), $mul.ref(2, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 110)), $mul.ref(0, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 1);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i2, 2);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i19 := unix_mkname($p9, $i2, $p3);
    call {:si_unique_call 77} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i22 := mutex_lock_interruptible_nested($p21, 0);
    call {:si_unique_call 79} {:cexpr "err"} boogie_si_record_i32($i22);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i19);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, 12);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $p31 := kmalloc($i30, 208);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i19);
    call {:si_unique_call 82} {:cexpr "__len"} boogie_si_record_i64($i35);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p32, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p9);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 83} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p37, $p38, $i35, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p32, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i19);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.5, $p3);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i44 := $xor.i32($i42, $i43);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p32, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p32, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} atomic_set($p46, 1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p11);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i48 := $sext.i8.i32($i47);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i49 == 1);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} spin_lock(unix_table_lock);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.5, $p3);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p87 := __unix_find_socket_byname($p7, $p9, $i19, $i85, $i86);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p32, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i93 := $zext.i32.i64($i92);
    $p94 := $add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref($i93, 8));
    assume {:verifier.code 0} true;
    $p82 := $p94;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} __unix_remove_socket($p6);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $p31);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} __unix_insert_socket($p82, $p6);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} spin_unlock(unix_table_lock);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i28 := $i90;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} mutex_unlock($p96);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i16 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb30:
    assume $i89 == 1;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} unix_release_addr($p32);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32(0, 98);
    goto $bb32;

  $bb21:
    assume $i49 == 1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p50 := SOCK_INODE($p0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i51 := current_umask();
    call {:si_unique_call 87} {:cexpr "tmp___2"} boogie_si_record_i32($i51);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p50, $mul.ref(0, 1032)), $mul.ref(0, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i54 := $sext.i16.i32($i53);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i51);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i56 := $sext.i16.i32($i55);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i57 := $xor.i32($i56, $sub.i32(0, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i54, $i57);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, $sub.i32(0, 16384));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    call {:si_unique_call 88} {:cexpr "mode"} boogie_si_record_i16($i60);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i63 := unix_mknod($p11, $i62, $p4);
    call {:si_unique_call 90} {:cexpr "err"} boogie_si_record_i32($i63);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p32, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 256);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 320)), $mul.ref(104, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 1032)), $mul.ref(64, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.0, $p72);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i64.i32($i73);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 255);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p3, $i75);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} spin_lock(unix_table_lock);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(1280, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p4);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 95} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p77, $p78, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.5, $p3);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    $p81 := $add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref($i80, 8));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p82 := $p81;
    goto $bb29;

  $bb23:
    assume $i64 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i63, $sub.i32(0, 17));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i63;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} unix_release_addr($p32);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i28 := $i66;
    goto $bb16;

  $bb25:
    assume $i65 == 1;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32(0, 98);
    goto $bb27;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 12);
    goto $bb16;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb16;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i16 := $i22;
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i16 := $i19;
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i18 := unix_autobind($p0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 75} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;
}



const unix_stream_connect: ref;

axiom unix_stream_connect == $sub.ref(0, 146837);

procedure unix_stream_connect($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.1, $M.0, $M.5, $M.24, $CurrAddr, $M.20, assertsPassed;



implementation unix_stream_connect($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $p45: ref;
  var $p51: ref;
  var $p50: ref;
  var $p48: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i1;
  var $p83: ref;
  var $i84: i64;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $i103: i1;
  var $p101: ref;
  var $i102: i32;
  var $i105: i1;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p112: ref;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i16;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p161: ref;
  var $p162: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p71: ref;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i174: i64;
  var $i175: i1;
  var $i176: i64;
  var $i177: i1;
  var $i178: i32;
  var $i169: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 102} {:cexpr "unix_stream_connect:arg:addr_len"} boogie_si_record_i32($i2);
    call {:si_unique_call 103} {:cexpr "unix_stream_connect:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p9 := sock_net($p8);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i11 := unix_mkname($p6, $i2, $p4);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i11);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p5);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p5);
    call {:si_unique_call 107} {:cexpr "addr_len"} boogie_si_record_i32($i17);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i19 := constant_test_bit(3, $p18);
    call {:si_unique_call 109} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i3, 2048);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i30 := sock_sndtimeo($p8, $i29);
    call {:si_unique_call 112} {:cexpr "timeo"} boogie_si_record_i64($i30);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $sub.i32(0, 12));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p31 := sock_net($p8);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p32 := unix_create1($p31, $0.ref);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p35 := sock_wmalloc($p32, 1, 0, 208);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.5, $p4);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p42 := unix_find_other($p9, $p6, $i17, $i40, $i41, $p5);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p45 := $p42;
    assume {:branchcond $i44} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i44 == 1);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p46, $i47 := $p42, $i30;
    goto $bb23;

  $bb23:
    call $p46, $i47, $p49, $p51, $p48, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $i59, $i60, $i61, $p62, $i63, $i64, $p66, $i67, $i68, $i69, $p70, $p72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $p81, $i82, $p83, $i84, $i85, $p86, $i87, $i88, $p89, $i90, $i91, $i92, $p93, $i94, $i95, $p97, $i98, $i99, $i100, $i103, $p101, $i102, $p104, $p108, $i109, $i110, $i111, $p113, $p114, $p115, $p116, $p112 := unix_stream_connect_loop_$bb23($p4, $p5, $p6, $p8, $p9, $i17, $p38, $p46, $i47, $p49, $p51, $p48, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $i59, $i60, $i61, $p62, $i63, $i64, $p66, $i67, $i68, $i69, $p70, $p72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $p81, $i82, $p83, $i84, $i85, $p86, $i87, $i88, $p89, $i90, $i91, $i92, $p93, $i94, $i95, $p97, $i98, $i99, $i100, $i103, $p101, $i102, $p104, $p108, $i109, $i110, $i111, $p113, $p114, $p115, $p116, $p112);
    goto $bb23_last;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p48 := $p46;
    goto $bb24;

  $bb24:
    call $p51, $p48, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $i59, $i60, $i61, $p62, $i63, $i64, $p66, $i67, $i68, $i69, $p70, $p72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $p81, $p97, $i98, $i99, $i100, $i103, $p101, $i102, $p104, $p108, $i109, $i110, $i111, $p113, $p114, $p115, $p116, $p112 := unix_stream_connect_loop_$bb24($p4, $p5, $p6, $p8, $p9, $i17, $p38, $p51, $p48, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $i59, $i60, $i61, $p62, $i63, $i64, $p66, $i67, $i68, $i69, $p70, $p72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $p81, $p97, $i98, $i99, $i100, $i103, $p101, $i102, $p104, $p108, $i109, $i110, $i111, $p113, $p114, $p115, $p116, $p112);
    goto $bb24_last;

  $bb28:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p48);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} spin_lock($p53);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i54 := sock_flag($p48, 0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 119} {:cexpr "tmp___2"} boogie_si_record_i8($i55);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $sub.i32(0, 111));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 10);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p70 := $p48;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p48, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i74 := $and.i8($i73, 3);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p78 := $p48;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i79 := unix_recvq_full($p48);
    call {:si_unique_call 124} {:cexpr "tmp___5"} boogie_si_record_i32($i79);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p81 := $p48;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    call {:si_unique_call 133} {:cexpr "st"} boogie_si_record_i32($i99);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 7);
    assume {:verifier.code 0} true;
    $p101, $i102 := $p48, $i99;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i99, 7);
    assume {:verifier.code 0} true;
    $p104 := $p48;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p106 := $p104;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $sub.i32(0, 22));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p71 := $p106;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p71);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p14, $p15, $p16 := $p32, $p71, $p35;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} kfree_skb($p16);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p14);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p15);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.6, $p5);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i169 := $i178;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $r := $i169;
    return;

  $bb80:
    assume $i177 == 1;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} sock_put($p15);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i175 == 1;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} unix_release_sock($p14, 0);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i171 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p71);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p172, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} spin_unlock($p173);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb54:
    assume $i103 == 1;
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ldv_spin_lock();
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, $i99);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p112 := $p48;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i117 := security_unix_stream_connect($p8, $p112, $p32);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i117);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.6, $p5);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} sock_hold($p8);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p32);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p123, $p8);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, 1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.0, $p126);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p32, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p128, $i127);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} init_peercred($p32);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p32);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 1696)), $mul.ref(1584, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p32, $mul.ref(0, 1272)), $mul.ref(480, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p131, $p130);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p112);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p132, $mul.ref(0, 1696)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} copy_peercred($p8, $p112);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, 3);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p155, 1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} sock_hold($p32);
    call {:si_unique_call 147} devirtbounce.1(0);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p8);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p156, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p157, $p32);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p8);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} spin_unlock($p159);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} spin_lock($p161);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p112, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} __skb_queue_tail($p162, $p35);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} spin_unlock($p164);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p112);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} spin_unlock($p166);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p112, $mul.ref(0, 1272)), $mul.ref(1232, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    call {:si_unique_call 153} devirtbounce.2($p168, $p112);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} sock_put($p112);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i169 := 0;
    goto $bb73;

  $bb70:
    assume $i147 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p132, $mul.ref(0, 1696)), $mul.ref(1280, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} path_get($p148);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p129, $mul.ref(0, 1696)), $mul.ref(1280, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p132, $mul.ref(0, 1696)), $mul.ref(1280, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p149);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p150);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 144} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p151, $p152, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume $i136 == 1;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p132, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} atomic_inc($p139);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p132, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p129, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p142, $p141);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume $i119 == 1;
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p8);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} spin_unlock($p121);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p71 := $p112;
    goto $bb36;

  $bb61:
    assume $i111 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p8);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} spin_unlock($p114);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p48);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} spin_unlock($p116);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} sock_put($p48);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $p38);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.5, $p4);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p62 := unix_find_other($p9, $p6, $i17, $i60, $i61, $p5);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p51 := $p62;
    assume true;
    goto $bb27, $bb32;

  $bb32:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $p48 := $p62;
    goto $bb32_dummy;

  $bb27:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p50 := $p51;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p14, $p15, $p16 := $p32, $p50, $p35;
    goto $bb3;

  $bb52:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i102, 1);
    assume {:verifier.code 0} true;
    $p106 := $p101;
    assume {:branchcond $i105} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb58;

  $bb56:
    assume $i105 == 1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $sub.i32(0, 106));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p71 := $p101;
    goto $bb36;

  $bb41:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $sub.i32(0, 11));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i47, 0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p83 := $p81;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i84 := unix_wait_for_peer($p81, $i47);
    call {:si_unique_call 126} {:cexpr "timeo"} boogie_si_record_i64($i84);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i85 := sock_intr_errno($i84);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i85);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p86 := get_current();
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i87 := signal_pending($p86);
    call {:si_unique_call 130} {:cexpr "tmp___4"} boogie_si_record_i32($i87);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p89 := $p81;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} sock_put($p81);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.0, $p38);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.5, $p4);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $p93 := unix_find_other($p9, $p6, $i17, $i91, $i92, $p5);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i94, 0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p49 := $p93;
    assume true;
    goto $bb25, $bb49;

  $bb49:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $p46, $i47 := $p93, $i84;
    goto $bb49_dummy;

  $bb25:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p45 := $p49;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p50 := $p45;
    goto $bb26;

  $bb46:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p14, $p15, $p16 := $p32, $p89, $p35;
    goto $bb3;

  $bb43:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p71 := $p83;
    goto $bb36;

  $bb38:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p71 := $p78;
    goto $bb36;

  $bb34:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p71 := $p70;
    goto $bb36;

  $bb29:
    assume $i56 == 1;
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p48);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} spin_unlock($p58);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} sock_put($p48);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb21;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p14, $p15, $p16 := $p32, $0.ref, $p35;
    goto $bb3;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p14, $p15, $p16 := $p32, $0.ref, $0.ref;
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb7;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i25 := unix_autobind($p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i25);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p5);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p14, $p15, $p16 := $0.ref, $0.ref, $0.ref;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p14, $p15, $p16 := $0.ref, $0.ref, $0.ref;
    goto $bb3;

  $bb32_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb49_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_638;
}



const unix_socketpair: ref;

axiom unix_socketpair == $sub.ref(0, 147869);

procedure unix_socketpair($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation unix_socketpair($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} sock_hold($p3);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} sock_hold($p5);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p5);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p5);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} init_peercred($p3);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} init_peercred($p5);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 2);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 1);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 1);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 3);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 3);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unix_accept: ref;

axiom unix_accept == $sub.ref(0, 148901);

procedure unix_accept($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.0, $M.1, $CurrAddr;



implementation unix_accept($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i36: i32;
  var $i35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 163} {:cexpr "unix_accept:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p3, $sub.i32(0, 95));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p3, $sub.i32(0, 22));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 10);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i2, 2048);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p20 := skb_recv_datagram($p5, 0, $i19, $p3);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} skb_free_datagram($p5, $p20);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 1696)), $mul.ref(1584, 1)), $mul.ref(0, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} __wake_up($p29, 1, 1, $0.ref);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p26);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} spin_lock($p31);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 3);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} unix_sock_inherit_flags($p0, $p1);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} sock_graft($p26, $p1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p26);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} spin_unlock($p34);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.7, $p3);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.7, $p3);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i35 := $i36;
    goto $bb17;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p3, $sub.i32(0, 22));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i12 := $sext.i16.i32($i11);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 5);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const unix_getname: ref;

axiom unix_getname == $sub.ref(0, 149933);

procedure unix_getname($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation unix_getname($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i11: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} {:cexpr "unix_getname:arg:peer"} boogie_si_record_i32($i3);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i3, 0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} sock_hold($p5);
    assume {:verifier.code 0} true;
    $p12 := $p5;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p12);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} spin_lock($p15);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i26);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p2);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    call {:si_unique_call 175} {:cexpr "__len"} boogie_si_record_i64($i28);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p6);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 176} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p29, $p31, $i28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p12);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} spin_unlock($p33);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} sock_put($p12);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 110)), $mul.ref(0, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 1);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 110)), $mul.ref(2, 1)), $mul.ref(0, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 2);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p8 := unix_peer_get($p5);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    goto $bb7;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 107);
    goto $bb5;
}



const unix_poll: ref;

axiom unix_poll == $sub.ref(0, 150965);

procedure unix_poll($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unix_poll($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $p5 := sk_sleep($p4);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} sock_poll_wait($p0, $p5, $p2);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(952, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p4);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(712, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 3);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i10;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, 3);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 1);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i17;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i27 := skb_queue_empty($p26);
    call {:si_unique_call 185} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i25;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 5);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i45 := $i30;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i46 := unix_writable($p4);
    call {:si_unique_call 189} {:cexpr "tmp___1"} boogie_si_record_i32($i46);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i45;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i45, 772);
    call {:si_unique_call 190} {:cexpr "mask"} boogie_si_record_i32($i48);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb24;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 7);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb18;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i30, 16);
    call {:si_unique_call 187} {:cexpr "mask"} boogie_si_record_i32($i44);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb21;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb14;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i25, 65);
    call {:si_unique_call 186} {:cexpr "mask"} boogie_si_record_i32($i29);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb12;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i17, 8257);
    call {:si_unique_call 183} {:cexpr "mask"} boogie_si_record_i32($i24);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb9;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i10, 16);
    call {:si_unique_call 182} {:cexpr "mask"} boogie_si_record_i32($i16);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i9 := $or.i32(0, 8);
    call {:si_unique_call 181} {:cexpr "mask"} boogie_si_record_i32($i9);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const unix_ioctl: ref;

axiom unix_ioctl == $sub.ref(0, 151997);

procedure unix_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation unix_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i16: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} {:cexpr "unix_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 192} {:cexpr "unix_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 21531);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 21531);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 515);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i13 := unix_inq_len($p4);
    call {:si_unique_call 194} {:cexpr "amount"} boogie_si_record_i64($i13);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i14 := $slt.i64($i13, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} might_fault();
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i13);
    call {:si_unique_call 203} {:cexpr "__pu_val___0"} boogie_si_record_i32($i17);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i2);
    call {:si_unique_call 204} $i19 := devirtbounce.3(0, $i17, $p18);
    call {:si_unique_call 205} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i19);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i16 := $i19;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i12 := $i16;
    goto $bb10;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i13);
    call {:si_unique_call 201} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb13;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 21521);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb7:
    assume $i7 == 1;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i8 := unix_outq_len($p4);
    call {:si_unique_call 196} {:cexpr "amount"} boogie_si_record_i64($i8);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} might_fault();
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 198} {:cexpr "__pu_val"} boogie_si_record_i32($i9);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i2);
    call {:si_unique_call 199} $i11 := devirtbounce.3(0, $i9, $p10);
    call {:si_unique_call 200} {:cexpr "__ret_pu"} boogie_si_record_i32($i11);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb10;
}



const unix_listen: ref;

axiom unix_listen == $sub.ref(0, 153029);

procedure unix_listen($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation unix_listen($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i16;
  var $p38: ref;
  var $p40: ref;
  var $i30: i32;
  var $p41: ref;
  var $p42: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} {:cexpr "unix_listen:arg:backlog"} boogie_si_record_i32($i1);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i7 := $sext.i16.i32($i6);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 1);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p3);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} spin_lock($p19);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 7);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(962, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, $i1);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i1);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(962, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, $i37);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 10);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} init_peercred($p3);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p3);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} spin_unlock($p42);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} put_pid($0.ref);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i13 := $i30;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1584, 1)), $mul.ref(0, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} __wake_up($p36, 1, 0, $0.ref);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 10);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb13;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb16;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i11 := $sext.i16.i32($i10);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 5);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 95);
    goto $bb6;
}



const unix_shutdown: ref;

axiom unix_shutdown == $sub.ref(0, 154061);

procedure unix_shutdown($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.20, $CurrAddr;



implementation unix_shutdown($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i8;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $i61: i8;
  var $i62: i8;
  var $i63: i8;
  var $i64: i8;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i64;
  var $i73: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} {:cexpr "unix_shutdown:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i1, 2);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i1, 1);
    call {:si_unique_call 213} {:cexpr "mode"} boogie_si_record_i32($i7);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} spin_lock($p9);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i11, 3);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i7);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i13, $i15);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i17, 3);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i19, $sub.i8(0, 4));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i22 := $or.i8($i21, $i20);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i22);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p3);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} spin_unlock($p29);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(1224, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 217} devirtbounce.2($p31, $p3);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p25);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p25);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb32:
    assume $i73 == 1;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} sock_put($p25);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i37 == 1);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 5);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb13;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i7, 1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i7, 2);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i45;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p25);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} spin_lock($p51);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p25, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i54 := $and.i8($i53, 3);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i55 := $sext.i8.i32($i54);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i49);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i57 := $sext.i8.i32($i56);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i55, $i57);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p25, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i62 := $and.i8($i59, 3);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i63 := $and.i8($i61, $sub.i8(0, 4));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i64 := $or.i8($i63, $i62);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $i64);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p25);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} spin_unlock($p66);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p25, $mul.ref(0, 1272)), $mul.ref(1224, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    call {:si_unique_call 222} devirtbounce.2($p68, $p25);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i49, 3);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i69 == 1);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i49, 1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i71 == 1;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} sk_wake_async($p25, 1, 131073);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i69 == 1;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} sk_wake_async($p25, 1, 131078);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i45, 1);
    call {:si_unique_call 219} {:cexpr "peer_mode"} boogie_si_record_i32($i48);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb24;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i44 := $or.i32(0, 2);
    call {:si_unique_call 218} {:cexpr "peer_mode"} boogie_si_record_i32($i44);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb15;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} sock_hold($p25);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const sock_no_setsockopt: ref;

axiom sock_no_setsockopt == $sub.ref(0, 155093);

procedure sock_no_setsockopt($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sock_no_setsockopt($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 226} {:cexpr "sock_no_setsockopt:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 227} {:cexpr "sock_no_setsockopt:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 228} {:cexpr "sock_no_setsockopt:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 1} true;
    call {:si_unique_call 229} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 230} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const sock_no_getsockopt: ref;

axiom sock_no_getsockopt == $sub.ref(0, 156125);

procedure sock_no_getsockopt($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sock_no_getsockopt($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} {:cexpr "sock_no_getsockopt:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 232} {:cexpr "sock_no_getsockopt:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 233} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const unix_stream_sendmsg: ref;

axiom unix_stream_sendmsg == $sub.ref(0, 157157);

procedure unix_stream_sendmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.6, $M.0, $M.1, $CurrAddr, $M.24, $M.20;



implementation unix_stream_sendmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i47: i1;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $i67: i64;
  var $i68: i1;
  var $i69: i64;
  var $i70: i32;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i1;
  var $i108: i8;
  var $i109: i1;
  var $p112: ref;
  var $i113: i8;
  var $i114: i8;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i110: i32;
  var $p111: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $i124: i8;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $i132: i64;
  var $i133: i1;
  var $i49: i8;
  var $i50: i32;
  var $i134: i32;
  var $i48: i32;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i46: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i25: i32;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i1;
  var $i151: i1;
  var $i152: i32;
  var $i154: i32;
  var $i153: i32;
  var $i20: i32;
  var vslice_dummy_var_70: ref;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 237} {:cexpr "unix_stream_sendmsg:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p6 := kiocb_to_siocb($p0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.8, $p9);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} wait_for_unix_gc();
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.8, $p14);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i16 := scm_send($p1, $p2, $p15, 0);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i16);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p4);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 95));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 1);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 107));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p8);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i42 := $and.i8($i41, 3);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 2);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i47 := $ult.i64(0, $i3);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i48 := 0;
    assume {:branchcond $i47} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.8, $p135);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} scm_destroy($p136);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p137, $0.ref);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i20 := $i48;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i49, $i50 := 0, 0;
    goto $bb25;

  $bb25:
    call $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, $p77, $i78, $i79, $i80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $p96, $p97, $p98, $p99, $i100, $i101, $i102, $i103, $p104, $p105, $p106, $i107, $i108, $i109, $p112, $i113, $i114, $i115, $i116, $i117, $i110, $p111, $p118, $p119, $p120, $i121, $i122, $i123, $i124, $p125, $p126, $p127, $p128, $p129, $p130, $i131, $i132, $i133, $i49, $i50, $i134, vslice_dummy_var_70 := unix_stream_sendmsg_loop_$bb25($p1, $p2, $i3, $p4, $p6, $p8, $p37, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, $p77, $i78, $i79, $i80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $p96, $p97, $p98, $p99, $i100, $i101, $i102, $i103, $p104, $p105, $p106, $i107, $i108, $i109, $p112, $i113, $i114, $i115, $i116, $i117, $i110, $p111, $p118, $p119, $p120, $i121, $i122, $i123, $i124, $p125, $p126, $p127, $p128, $p129, $p130, $i131, $i132, $i133, $i49, $i50, $i134, vslice_dummy_var_70);
    goto $bb25_last;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i3);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i51, $i50);
    call {:si_unique_call 242} {:cexpr "size"} boogie_si_record_i32($i52);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(608, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i55 := $ashr.i32($i54, 1);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, $sub.i32(0, 64));
    call {:si_unique_call 243} {:cexpr "__min2"} boogie_si_record_i32($i56);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i52, $i56);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i57 == 1);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i58 := $i56;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 36544);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i59 == 1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i60 := 36544;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i60, 3776);
    call {:si_unique_call 244} {:cexpr "__max2"} boogie_si_record_i32($i61);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32(0, $i61);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i62 == 1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i63 := $i61;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i60);
    call {:si_unique_call 245} {:cexpr "__min1___1"} boogie_si_record_i64($i64);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i63, 4095);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, $sub.i32(0, 4096));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    call {:si_unique_call 246} {:cexpr "__min2___1"} boogie_si_record_i64($i67);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i68 := $ult.i64($i64, $i67);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i68 == 1);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i64.i32($i69);
    call {:si_unique_call 247} {:cexpr "data_len"} boogie_si_record_i32($i70);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32($i60, $i70);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i70);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 64);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p77 := sock_alloc_send_pskb($p8, $i72, $i73, $i76, $p4, 3);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i80 := $i50;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.8, $p81);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i49);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i86 := $xor.i1($i85, 1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i87 := unix_scm_to_skb($p82, $p77, $i86);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i87);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.6, $p4);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i88, 0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i90, $p91 := $i50, $p77;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.6, $p4);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, 1);
    call {:si_unique_call 251} {:cexpr "max_level"} boogie_si_record_i32($i93);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i60, $i70);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} vslice_dummy_var_70 := skb_put($p77, $i94);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p77, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i70);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p77, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $i60);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i100 := skb_copy_datagram_from_iovec($p77, 0, $p99, $i50, $i60);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i100);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.6, $p4);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i103, $p104 := $i50, $p77;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p37);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} spin_lock($p106);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i107 := sock_flag($p37, 0);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i108 := $zext.i1.i8($i107);
    call {:si_unique_call 257} {:cexpr "tmp___0"} boogie_si_record_i8($i108);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i8.i1($i108);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i110, $p111 := $i50, $p77;
    assume true;
    goto $bb48, $bb50;

  $bb50:
    assume !($i109 == 1);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p37, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i114 := $and.i8($i113, 3);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i32($i114);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 1);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i110, $p111 := $i50, $p77;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} maybe_add_creds($p77, $p1, $p37);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p37, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} skb_queue_tail($p118, $p77);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p37);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 1696)), $mul.ref(1568, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i122, $i93);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p37);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} spin_unlock($p128);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p37, $mul.ref(0, 1272)), $mul.ref(1232, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    call {:si_unique_call 263} devirtbounce.2($p130, $p37);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i50, $i60);
    call {:si_unique_call 264} {:cexpr "sent"} boogie_si_record_i32($i131);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i131);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i133 := $ult.i64($i132, $i3);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i134 := $i131;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i48 := $i134;
    goto $bb24;

  $bb58:
    assume $i133 == 1;
    assume {:verifier.code 0} true;
    $i49, $i50 := 1, $i131;
    goto $bb58_dummy;

  $bb55:
    assume $i123 == 1;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i8($i93);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p37);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 1696)), $mul.ref(1568, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, $i124);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p37);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p138, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} spin_unlock($p139);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} kfree_skb($p111);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i46 := $i110;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i46, 0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 32));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i25 := $i46;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.8, $p147);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} scm_destroy($p148);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p149, $0.ref);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i25, 0);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i150 == 1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.6, $p4);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i153 := $i154;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i20 := $i153;
    goto $bb6;

  $bb67:
    assume $i150 == 1;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i25, 0);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i152 := $zext.i1.i32($i151);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i153 := $i152;
    goto $bb69;

  $bb61:
    assume $i140 == 1;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 16384);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb63;

  $bb64:
    assume $i144 == 1;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p145 := get_current();
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_71 := send_sig(13, $p145, 0);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb49;

  $bb45:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} kfree_skb($p104);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i25 := $i103;
    goto $bb10;

  $bb42:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} kfree_skb($p91);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i25 := $i90;
    goto $bb10;

  $bb39:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i25 := $i80;
    goto $bb10;

  $bb36:
    assume $i68 == 1;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i69 := $i64;
    goto $bb38;

  $bb33:
    assume $i62 == 1;
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb35;

  $bb30:
    assume $i59 == 1;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i60 := $i58;
    goto $bb32;

  $bb27:
    assume $i57 == 1;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i58 := $i52;
    goto $bb29;

  $bb18:
    assume $i45 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb20;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb10;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i34 := (if $i33 == 1 then $sub.i32(0, 106) else $sub.i32(0, 95));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i34);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb10;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb10;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p4);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p13, $p5);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb58_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1331;
}



const unix_stream_recvmsg: ref;

axiom unix_stream_recvmsg == $sub.ref(0, 158189);

procedure unix_stream_recvmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.1, $M.13, $M.14, $M.15, $M.9, $M.10, $M.11, $M.12, $CurrAddr, $M.16, $M.17, $M.23, $M.22, $M.20;



implementation unix_stream_recvmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p57: ref;
  var $p55: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $i70: i8;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i1;
  var $i80: i32;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i64;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $i96: i32;
  var $i63: i32;
  var $i64: i32;
  var $p103: ref;
  var $p104: ref;
  var $p56: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $p110: ref;
  var $i111: i32;
  var $i108: i32;
  var $p109: ref;
  var $i124: i32;
  var $p125: ref;
  var $i126: i32;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $p147: ref;
  var $p148: ref;
  var $p151: ref;
  var $i152: i32;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $i156: i8;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $p166: ref;
  var $p169: ref;
  var $i170: i32;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $i174: i8;
  var $i175: i1;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i32;
  var $p181: ref;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $p194: ref;
  var $p196: ref;
  var $i197: i32;
  var $p198: ref;
  var $i199: i32;
  var $i200: i32;
  var $i180: i32;
  var $i201: i64;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i32;
  var $i225: i64;
  var $i226: i64;
  var $i227: i32;
  var $i228: i1;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i32;
  var $i237: i32;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i64;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i32;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i64;
  var $i259: i1;
  var $i260: i32;
  var $i261: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $p232: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $i266: i64;
  var $i267: i1;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $i97: i32;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i64;
  var $i102: i64;
  var $i276: i1;
  var $i277: i32;
  var $i278: i32;
  var $i81: i32;
  var $i82: i32;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $i19: i32;
  var $i20: i32;
  var $i282: i1;
  var $i283: i1;
  var $i284: i32;
  var $i285: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 269} {:cexpr "unix_stream_recvmsg:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 270} {:cexpr "unix_stream_recvmsg:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p6 := kiocb_to_siocb($p0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i4, 64);
    call {:si_unique_call 272} {:cexpr "noblock"} boogie_si_record_i32($i13);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 1);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i4, 1);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i4, 256);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i3);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i25 := sock_rcvlowat($p8, $i23, $i24);
    call {:si_unique_call 274} {:cexpr "target"} boogie_si_record_i32($i25);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i13, 0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i27 := sock_rcvtimeo($p8, $i26);
    call {:si_unique_call 276} {:cexpr "timeo"} boogie_si_record_i64($i27);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.8, $p28);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i35 := mutex_lock_interruptible_nested($p34, 0);
    call {:si_unique_call 279} {:cexpr "err"} boogie_si_record_i32($i35);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 281} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i43, $p44, $i45, $i46, $i47, $i48 := 0, $p11, 0, $i35, $i27, $i3;
    goto $bb14;

  $bb14:
    call $i43, $p44, $i45, $i46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $i54, $p57, $p55, $p58, $p59, $i60, $i61, $i62, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $p78, $i79, $i80, $p83, $i84, $p85, $i86, $i87, $i88, $i89, $p91, $i92, $i93, $i94, $i95, $p56, $i105, $i106, $i107, $i112, $i113, $p114, $p115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $i123, $p110, $i111, $i108, $p109, $i124, $p125, $i126, $p127, $p128, $p129, $i130, $p131, $p132, $p133, $p134, $i135, $p136, $p137, $p138, $p139, $i140, $i141, $i142, $i143, $p144, $p145, $p147, $p148, $p151, $i152, $p153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $p162, $p163, $p165, $p166, $p169, $i170, $p171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $p181, $i182, $i183, $p184, $p185, $p186, $p187, $p188, $p189, $p190, $p191, $p193, $p194, $p196, $i197, $p198, $i199, $i200, $i180, $i201, $i202, $p203, $p204, $p205, $i206, $i207, $i208, $i209, $i210, $p211, $p212, $p213, $i214, $i215, $p216, $p217, $i218, $i219, $i220, $i221, $i224, $i225, $i226, $i227, $i228, $p233, $p234, $p235, $i236, $i237, $p238, $p239, $p240, $p241, $p242, $p243, $p244, $i245, $i246, $p247, $p248, $i249, $i250, $i251, $i252, $p253, $p254, $p255, $p256, $p257, $i258, $i259, $i260, $i261, $i229, $i230, $i231, $p232, $i97, $p98, $i99, $i100, $i101, $i102, $i276, $i277, $i278 := unix_stream_recvmsg_loop_$bb14($p1, $p2, $i4, $p6, $p8, $p9, $i25, $i43, $p44, $i45, $i46, $i47, $i48, $p49, $p50, $p51, $p52, $i53, $i54, $p57, $p55, $p58, $p59, $i60, $i61, $i62, $i65, $i66, $i67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $p78, $i79, $i80, $p83, $i84, $p85, $i86, $i87, $i88, $i89, $p91, $i92, $i93, $i94, $i95, $p56, $i105, $i106, $i107, $i112, $i113, $p114, $p115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $i123, $p110, $i111, $i108, $p109, $i124, $p125, $i126, $p127, $p128, $p129, $i130, $p131, $p132, $p133, $p134, $i135, $p136, $p137, $p138, $p139, $i140, $i141, $i142, $i143, $p144, $p145, $p147, $p148, $p151, $i152, $p153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $p162, $p163, $p165, $p166, $p169, $i170, $p171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $p181, $i182, $i183, $p184, $p185, $p186, $p187, $p188, $p189, $p190, $p191, $p193, $p194, $p196, $i197, $p198, $i199, $i200, $i180, $i201, $i202, $p203, $p204, $p205, $i206, $i207, $i208, $i209, $i210, $p211, $p212, $p213, $i214, $i215, $p216, $p217, $i218, $i219, $i220, $i221, $i224, $i225, $i226, $i227, $i228, $p233, $p234, $p235, $i236, $i237, $p238, $p239, $p240, $p241, $p242, $p243, $p244, $i245, $i246, $p247, $p248, $i249, $i250, $i251, $i252, $p253, $p254, $p255, $p256, $p257, $i258, $i259, $i260, $i261, $i229, $i230, $i231, $p232, $i97, $p98, $i99, $i100, $i101, $i102, $i276, $i277, $i278);
    goto $bb14_last;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p8);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} spin_lock($p50);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p52 := skb_peek($p51);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p55 := $p52;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i54 == 1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p56 := $p52;
    goto $bb18;

  $bb18:
    call $p57, $p56, $i105, $i106, $i107, $i112, $i113, $p114, $p115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $i123, $p110, $i111, $i108, $p109, $i124, $p125 := unix_stream_recvmsg_loop_$bb18($i4, $p8, $p57, $p56, $i105, $i106, $i107, $i112, $i113, $p114, $p115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $i123, $p110, $i111, $i108, $p109, $i124, $p125);
    goto $bb18_last;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i105 := sk_peek_offset($p8, $i4);
    call {:si_unique_call 304} {:cexpr "skip"} boogie_si_record_i32($i105);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i106 := unix_skb_len($p56);
    call {:si_unique_call 306} {:cexpr "tmp___5"} boogie_si_record_i32($i106);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i107 := $uge.i32($i105, $i106);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i108, $p109 := $i105, $p56;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i126, $p127 := $i108, $p109;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p8);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} spin_unlock($p129);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i45, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i130 == 1);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i182 := constant_test_bit(3, $p181);
    call {:si_unique_call 315} {:cexpr "tmp___10"} boogie_si_record_i32($i182);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    $i200 := $i45;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i180 := $i200;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p44);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i202 := $ne.i64($i201, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    $p205 := $p44;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i206 := unix_skb_len($p127);
    call {:si_unique_call 323} {:cexpr "tmp___11"} boogie_si_record_i32($i206);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i207 := $sub.i32($i206, $i126);
    call {:si_unique_call 324} {:cexpr "__min1"} boogie_si_record_i32($i207);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i64.i32($i48);
    call {:si_unique_call 325} {:cexpr "__min2"} boogie_si_record_i32($i208);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i209 := $ult.i32($i207, $i208);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i209 == 1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i210 := $i208;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p211);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i215 := $add.i32($i214, $i126);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i218 := skb_copy_datagram_iovec($p127, $i215, $p217, $i210);
    call {:si_unique_call 327} {:cexpr "tmp___12"} boogie_si_record_i32($i218);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i220, $i221 := $i43, $i46;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i224 := $add.i32($i43, $i210);
    call {:si_unique_call 328} {:cexpr "copied"} boogie_si_record_i32($i224);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i225 := $sext.i32.i64($i210);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i226 := $sub.i64($i48, $i225);
    call {:si_unique_call 329} {:cexpr "size"} boogie_si_record_i64($i226);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i227 := $and.i32($i4, 2);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i229, $i230, $i231, $p232 := $i46, $i210, $i224, $p127;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p232, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p262);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p263, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.0, $p264);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i266 := $p2i.ref.i64($p265);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i267 := $ne.i64($i266, 0);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} sk_peek_offset_fwd($p8, $i230);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i231, $i229;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p9, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} mutex_unlock($p279);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p281 := $load.ref($M.8, $p280);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} scm_recv($p1, $p2, $p281, $i4);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i81, $i82;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i282 := $ne.i32($i19, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i282 == 1);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i285 := $i20;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $r := $i285;
    return;

  $bb105:
    assume $i282 == 1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i283 := $ne.i32($i19, 0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i284 := $zext.i1.i32($i283);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i285 := $i284;
    goto $bb107;

  $bb99:
    assume $i267 == 1;
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p232, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p268);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p269, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.0, $p270);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p272 := scm_fp_dup($p271);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.8, $p273);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p274, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p275, $p272);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb87:
    assume $i228 == 1;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p234 := $bitcast.ref.ref($p233);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p234, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.0, $p235);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i237 := $add.i32($i236, $i210);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p238);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p240, $i237);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} sk_peek_offset_bwd($p8, $i210);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p241);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p242, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p244);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i246 := $ne.i64($i245, 0);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i249 := unix_skb_len($p127);
    call {:si_unique_call 333} {:cexpr "tmp___13"} boogie_si_record_i32($i249);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i251, $i252 := $i46, $i224;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} skb_unlink($p127, $p253);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} consume_skb($p127);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.8, $p254);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p255, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i258 := $p2i.ref.i64($p257);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i258, 0);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i260, $i261 := $i46, $i224;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i97, $p98, $i99, $i100, $i101, $i102 := $i224, $p205, $i180, $i46, $i47, $i226;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i276 := $ne.i64($i102, 0);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i277, $i278 := $i97, $i100;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i277, $i278;
    goto $bb32;

  $bb102:
    assume $i276 == 1;
    assume {:verifier.code 0} true;
    $i43, $p44, $i45, $i46, $i47, $i48 := $i97, $p98, $i99, $i100, $i101, $i102;
    goto $bb102_dummy;

  $bb95:
    assume $i259 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i261, $i260;
    goto $bb32;

  $bb92:
    assume $i250 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i252, $i251;
    goto $bb32;

  $bb89:
    assume $i246 == 1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.8, $p247);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} unix_detach_fds($p248, $p127);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb81:
    assume $i219 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i220, 0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    $i223 := $i220;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i223, $i221;
    goto $bb32;

  $bb83:
    assume $i222 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i223 := $sub.i32(0, 14);
    goto $bb85;

  $bb78:
    assume $i209 == 1;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i210 := $i207;
    goto $bb80;

  $bb75:
    assume $i202 == 1;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} unix_copy_addr($p2, $p204);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p205 := $0.ref;
    goto $bb77;

  $bb72:
    assume $i183 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.8, $p184);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p196);
    $p198 := $add.ref($add.ref($add.ref($p194, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} scm_set_cred($p185, $p189, $i197, $i199);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i200 := 1;
    goto $bb74;

  $bb54:
    assume $i130 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.8, $p136);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i135, $i140);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i142, $i143 := $i43, $i46;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i141 == 1);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.8, $p147);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p145, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    $p153 := $add.ref($add.ref($add.ref($add.ref($p148, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i155 := uid_eq($i152, $i154);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i156 := $zext.i1.i8($i155);
    call {:si_unique_call 317} {:cexpr "tmp___6"} boogie_si_record_i8($i156);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i8.i1($i156);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    $i158 := 1;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i160, $i161 := $i43, $i46;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i159 == 1);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.8, $p165);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p163, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    $p171 := $add.ref($add.ref($add.ref($add.ref($p166, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i173 := gid_eq($i170, $i172);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i174 := $zext.i1.i8($i173);
    call {:si_unique_call 319} {:cexpr "tmp___8"} boogie_si_record_i8($i174);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i8.i1($i174);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    $i176 := 1;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i178, $i179 := $i43, $i46;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i180 := $i45;
    goto $bb71;

  $bb66:
    assume $i177 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i178, $i179;
    goto $bb32;

  $bb63:
    assume $i175 == 1;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i176 := 0;
    goto $bb65;

  $bb61:
    assume $i159 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i160, $i161;
    goto $bb32;

  $bb58:
    assume $i157 == 1;
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i158 := 0;
    goto $bb60;

  $bb56:
    assume $i141 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i142, $i143;
    goto $bb32;

  $bb42:
    assume $i107 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p110, $i111 := $p56, $i105;
    goto $bb44;

  $bb44:
    call $i112, $i113, $p114, $p115, $i116, $i117, $p118, $p119, $i122, $i123, $p110, $i111, $i124, $p125 := unix_stream_recvmsg_loop_$bb44($p8, $i112, $i113, $p114, $p115, $i116, $i117, $p118, $p119, $i122, $i123, $p110, $i111, $i124, $p125);
    goto $bb44_last;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i112 := unix_skb_len($p110);
    call {:si_unique_call 308} {:cexpr "tmp___4"} boogie_si_record_i32($i112);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i113 := $sub.i32($i111, $i112);
    call {:si_unique_call 309} {:cexpr "skip"} boogie_si_record_i32($i113);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p115 := skb_peek_next($p110, $p114);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i117 := $eq.i64($i116, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p118, $p119 := $p110, $p115;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i122 := unix_skb_len($p115);
    call {:si_unique_call 312} {:cexpr "tmp___5"} boogie_si_record_i32($i122);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i123 := $uge.i32($i113, $i122);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i124, $p125 := $i113, $p115;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i126, $p127 := $i124, $p125;
    goto $bb52;

  $bb50:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $p110, $i111 := $p115, $i113;
    goto $bb50_dummy;

  $bb46:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i121 := $eq.i64($i120, 0);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p57 := $p118;
    assume true;
    goto $bb19, $bb48;

  $bb48:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $p56 := $p119;
    goto $bb48_dummy;

  $bb19:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p55 := $p57;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p8);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 1696)), $mul.ref(1568, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, 0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i60 := $sge.i32($i43, $i25);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i61, $i62 := $i43, $i46;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i65 := sock_error($p8);
    call {:si_unique_call 287} {:cexpr "err"} boogie_si_record_i32($i65);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i67, $i68 := $i43, $i65;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i71 := $and.i8($i70, 3);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i75, $i76 := $i43, $i65;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p8);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} spin_unlock($p78);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i47, 0);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i80 := $i43;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p9, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} mutex_unlock($p83);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i84 := unix_stream_data_wait($p8, $i47, $p55);
    call {:si_unique_call 293} {:cexpr "timeo"} boogie_si_record_i64($i84);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p85 := get_current();
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i86 := signal_pending($p85);
    call {:si_unique_call 296} {:cexpr "tmp___2"} boogie_si_record_i32($i86);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i88, $i89 := $i43, $i84;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p9, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i92 := mutex_lock_interruptible_nested($p91, 0);
    call {:si_unique_call 300} {:cexpr "tmp___3"} boogie_si_record_i32($i92);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i94, $i95 := $i43, $i84;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i97, $p98, $i99, $i100, $i101, $i102 := $i43, $p44, $i45, $sub.i32(0, 11), $i84, $i48;
    goto $bb40;

  $bb36:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i96 := sock_intr_errno($i95);
    call {:si_unique_call 302} {:cexpr "err"} boogie_si_record_i32($i96);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i94, $i96;
    goto $bb3;

  $bb34:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $i90 := sock_intr_errno($i89);
    call {:si_unique_call 298} {:cexpr "err"} boogie_si_record_i32($i90);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i88, $i90;
    goto $bb3;

  $bb30:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i80, $sub.i32(0, 11);
    goto $bb32;

  $bb27:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i63, $i64 := $i75, $i76;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p8);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} spin_unlock($p104);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i63, $i64;
    goto $bb32;

  $bb24:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i63, $i64 := $i67, $i68;
    goto $bb22;

  $bb20:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i63, $i64 := $i61, $i62;
    goto $bb22;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb16;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i13, 0);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i42 := (if $i41 == 1 then $sub.i32(0, 11) else $sub.i32(0, 512));
    call {:si_unique_call 282} {:cexpr "err"} boogie_si_record_i32($i42);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, $i42;
    goto $bb3;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p32, $p5);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p5);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 277} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p33, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, $sub.i32(0, 95);
    goto $bb3;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, $sub.i32(0, 22);
    goto $bb3;

  $bb50_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1627;

  $bb48_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb102_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1544;
}



const sock_no_mmap: ref;

axiom sock_no_mmap == $sub.ref(0, 159221);

procedure sock_no_mmap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sock_no_mmap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 338} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 339} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sock_no_sendpage: ref;

axiom sock_no_sendpage == $sub.ref(0, 160253);

procedure sock_no_sendpage($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation sock_no_sendpage($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $i5: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 340} {:cexpr "sock_no_sendpage:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 341} {:cexpr "sock_no_sendpage:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 342} {:cexpr "sock_no_sendpage:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 1} true;
    call {:si_unique_call 343} $i5 := __VERIFIER_nondet_long();
    call {:si_unique_call 344} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i5);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const unix_set_peek_off: ref;

axiom unix_set_peek_off == $sub.ref(0, 161285);

procedure unix_set_peek_off($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation unix_set_peek_off($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} {:cexpr "unix_set_peek_off:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i4 := mutex_lock_interruptible_nested($p3, 0);
    call {:si_unique_call 347} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i1);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} mutex_unlock($p8);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 4);
    goto $bb3;
}



const mutex_lock_interruptible_nested: ref;

axiom mutex_lock_interruptible_nested == $sub.ref(0, 162317);

procedure mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 349} {:cexpr "mutex_lock_interruptible_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 1} true;
    call {:si_unique_call 350} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 351} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 163349);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    return;
}



const kiocb_to_siocb: ref;

axiom kiocb_to_siocb == $sub.ref(0, 164381);

procedure kiocb_to_siocb($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kiocb_to_siocb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const sock_rcvlowat: ref;

axiom sock_rcvlowat == $sub.ref(0, 165413);

procedure sock_rcvlowat($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sock_rcvlowat($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} {:cexpr "sock_rcvlowat:arg:waitall"} boogie_si_record_i32($i1);
    call {:si_unique_call 353} {:cexpr "sock_rcvlowat:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    call {:si_unique_call 356} {:cexpr "sock_rcvlowat:arg:tmp"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i8 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i8, 0);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(764, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 354} {:cexpr "__min1"} boogie_si_record_i32($i5);
    call {:si_unique_call 355} {:cexpr "sock_rcvlowat:arg:__min2"} boogie_si_record_i32($i2);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, $i2);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb5;
}



const sock_rcvtimeo: ref;

axiom sock_rcvtimeo == $sub.ref(0, 166445);

procedure sock_rcvtimeo($p0: ref, $i1: i1) returns ($r: i64);
  free requires assertsPassed;



implementation sock_rcvtimeo($p0: ref, $i1: i1) returns ($r: i64)
{
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 357} {:cexpr "sock_rcvtimeo:arg:noblock"} boogie_si_record_i1($i1);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(992, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 167477);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 168509);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 359} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const sock_error: ref;

axiom sock_error == $sub.ref(0, 169541);

procedure sock_error($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sock_error($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(952, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 361} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(952, 1));
    call {:si_unique_call 362} $i10 := devirtbounce.4(0, $p9, 0, $p9);
    call {:si_unique_call 363} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, $i10);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const unix_stream_data_wait: ref;

axiom unix_stream_data_wait == $sub.ref(0, 170573);

procedure unix_stream_data_wait($p0: ref, $i1: i64, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation unix_stream_data_wait($p0: ref, $i1: i64, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i64;
  var $i28: i64;
  var $i36: i64;
  var $i23: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $i42: i1;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $i37: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 365} {:cexpr "unix_stream_data_wait:arg:timeo"} boogie_si_record_i64($i1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p4 := get_current();
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p4);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, autoremove_wake_function);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p9);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p12);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} spin_lock($p16);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p17 := sk_sleep($p0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} prepare_to_wait($p17, $p3, 1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p19 := skb_peek_tail($p18);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p2);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i20, $i21);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i23 := $i1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i22 == 1);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i24 := $i1;
    goto $bb4;

  $bb4:
    call $i24, $p25, $i26, $i27, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i28, $i36, $p38, $i39, $i40, $i41, $i42, $i43, $p44, $p45, $p46, $p47, $p48, $i49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $i57, $i58 := unix_stream_data_wait_loop_$bb4($p0, $p3, $p18, $i21, $i24, $p25, $i26, $i27, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i28, $i36, $p38, $i39, $i40, $i41, $i42, $i43, $p44, $p45, $p46, $p47, $p48, $i49, $p50, $p51, $p52, $p53, $p54, $p55, $p56, $i57, $i58);
    goto $bb4_last;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(952, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i28 := $i24;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, 3);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i35 := $i24;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $p38 := get_current();
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i39 := signal_pending($p38);
    call {:si_unique_call 373} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i41 := $i24;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i24, 0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i43 := $i24;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} set_bit(1, $p46);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} spin_unlock($p48);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i49 := freezable_schedule_timeout($i24);
    call {:si_unique_call 380} {:cexpr "timeo"} boogie_si_record_i64($i49);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} spin_lock($p51);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} clear_bit(1, $p54);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p55 := sk_sleep($p0);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} prepare_to_wait($p55, $p3, 1);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p56 := skb_peek_tail($p18);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, $i21);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i36 := $i49;
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i49;
    goto $bb18_dummy;

  $bb9:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i23 := $i36;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i37 := $i23;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $p59 := sk_sleep($p0);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} finish_wait($p59, $p3);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} spin_unlock($p61);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb13:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i37 := $i43;
    goto $bb10;

  $bb11:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i37 := $i41;
    goto $bb10;

  $bb7:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i23 := $i35;
    goto $bb2;

  $bb5:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i23 := $i28;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 171605);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p0 := devirtbounce.5(0, current_task);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 172637);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 388} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 390} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const sock_intr_errno: ref;

axiom sock_intr_errno == $sub.ref(0, 173669);

procedure sock_intr_errno($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation sock_intr_errno($i0: i64) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} {:cexpr "sock_intr_errno:arg:timeo"} boogie_si_record_i64($i0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i1 := $eq.i64($i0, 9223372036854775807);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i2 := (if $i1 == 1 then $sub.i32(0, 512) else $sub.i32(0, 4));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sk_peek_offset: ref;

axiom sk_peek_offset == $sub.ref(0, 174701);

procedure sk_peek_offset($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sk_peek_offset($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "sk_peek_offset:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 2);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i6 := $sge.i32($i5, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb6;
}



const skb_peek_next: ref;

axiom skb_peek_next == $sub.ref(0, 175733);

procedure skb_peek_next($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_peek_next($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i4, $i6);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const uid_eq: ref;

axiom uid_eq == $sub.ref(0, 176765);

procedure uid_eq($i0: i32, $i1: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.23, $CurrAddr;



implementation uid_eq($i0: i32, $i1: i32) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p4, $i0);
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.10 := $store.i32($M.10, $p5, $i1);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.9, $p6);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i8 := __kuid_val($i7);
    call {:si_unique_call 396} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.10, $p9);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i11 := __kuid_val($i10);
    call {:si_unique_call 398} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, $i11);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const gid_eq: ref;

axiom gid_eq == $sub.ref(0, 177797);

procedure gid_eq($i0: i32, $i1: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.22, $CurrAddr;



implementation gid_eq($i0: i32, $i1: i32) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p4, $i0);
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p5, $i1);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.11, $p6);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i8 := __kgid_val($i7);
    call {:si_unique_call 402} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.12, $p9);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i11 := __kgid_val($i10);
    call {:si_unique_call 404} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, $i11);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 178829);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const scm_set_cred: ref;

axiom scm_set_cred == $sub.ref(0, 179861);

procedure scm_set_cred($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1;



implementation scm_set_cred($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i2);
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i3);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p8 := get_pid($p1);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p8);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i10 := pid_vnr($p1);
    call {:si_unique_call 410} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i10);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p4);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 411} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p15, $p16, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p5);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 412} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p19, $p20, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    return;
}



const unix_copy_addr: ref;

axiom unix_copy_addr == $sub.ref(0, 180893);

procedure unix_copy_addr($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation unix_copy_addr($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    call {:si_unique_call 413} {:cexpr "__len"} boogie_si_record_i64($i16);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 414} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p18, $p22, $i16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_copy_datagram_iovec: ref;

axiom skb_copy_datagram_iovec == $sub.ref(0, 181925);

procedure skb_copy_datagram_iovec($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_copy_datagram_iovec($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 415} {:cexpr "skb_copy_datagram_iovec:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 416} {:cexpr "skb_copy_datagram_iovec:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 417} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 418} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sk_peek_offset_bwd: ref;

axiom sk_peek_offset_bwd == $sub.ref(0, 182957);

procedure sk_peek_offset_bwd($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sk_peek_offset_bwd($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} {:cexpr "sk_peek_offset_bwd:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i7 := $sge.i32($i6, $i1);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i9, $i1);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const unix_detach_fds: ref;

axiom unix_detach_fds == $sub.ref(0, 183989);

procedure unix_detach_fds($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.1, $CurrAddr;



implementation unix_detach_fds($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2032)), $mul.ref(0, 1));
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i32($i13);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, $sub.i32(0, 1));
    call {:si_unique_call 420} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i16 := $sge.i32($i15, 0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb4;

  $bb4:
    call $i18, $p19, $p20, $p22, $p23, $i24, $i25, $i17 := unix_detach_fds_loop_$bb4($p0, $i18, $p19, $p20, $p22, $p23, $i24, $i25, $i17);
    goto $bb4_last;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 2032)), $mul.ref(8, 1)), $mul.ref($i18, 8));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} unix_notinflight($p23);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i17, 1);
    call {:si_unique_call 422} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i25 := $sge.i32($i24, 0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i24;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2171;
}



const skb_unlink: ref;

axiom skb_unlink == $sub.ref(0, 185021);

procedure skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_unlink($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    return;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 186053);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    return;
}



const scm_fp_dup: ref;

axiom scm_fp_dup == $sub.ref(0, 187085);

procedure scm_fp_dup($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation scm_fp_dup($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p1 := external_alloc();
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sk_peek_offset_fwd: ref;

axiom sk_peek_offset_fwd == $sub.ref(0, 188117);

procedure sk_peek_offset_fwd($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation sk_peek_offset_fwd($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} {:cexpr "sk_peek_offset_fwd:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i1);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1192, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const scm_recv: ref;

axiom scm_recv == $sub.ref(0, 189149);

procedure scm_recv($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.1;



implementation scm_recv($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p4 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 426} {:cexpr "scm_recv:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i21 := constant_test_bit(3, $p20);
    call {:si_unique_call 431} {:cexpr "tmp___4"} boogie_si_record_i32($i21);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} scm_destroy_cred($p2);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} scm_passec($p0, $p1, $p2);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} scm_detach_fds($p1, $p2);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i23 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 433} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p24 := get_current();
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 10656)), $mul.ref(2448, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 176)), $mul.ref(144, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i33 := from_kuid_munged($p28, $i32);
    call {:si_unique_call 436} {:cexpr "tmp___2"} boogie_si_record_i32($i33);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i38 := from_kgid_munged($p28, $i37);
    call {:si_unique_call 438} {:cexpr "tmp___3"} boogie_si_record_i32($i38);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p42, $i41);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p43, $i33);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p44, $i38);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p4);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vslice_dummy_var_72 := put_cmsg($p1, 1, 2, 12, $p45);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i10 := constant_test_bit(3, $p9);
    call {:si_unique_call 428} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} scm_destroy($p2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 8);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb4;
}



const scm_destroy: ref;

axiom scm_destroy == $sub.ref(0, 190181);

procedure scm_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation scm_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} scm_destroy_cred($p0);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} __scm_destroy($p0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 191213);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 445} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const from_kuid_munged: ref;

axiom from_kuid_munged == $sub.ref(0, 192245);

procedure from_kuid_munged($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $CurrAddr;



implementation from_kuid_munged($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p3, $i1);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 448} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 449} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const from_kgid_munged: ref;

axiom from_kgid_munged == $sub.ref(0, 193277);

procedure from_kgid_munged($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $CurrAddr;



implementation from_kgid_munged($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p3, $i1);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 451} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 452} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const put_cmsg: ref;

axiom put_cmsg == $sub.ref(0, 194309);

procedure put_cmsg($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation put_cmsg($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 453} {:cexpr "put_cmsg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 454} {:cexpr "put_cmsg:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 455} {:cexpr "put_cmsg:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 1} true;
    call {:si_unique_call 456} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 457} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const scm_destroy_cred: ref;

axiom scm_destroy_cred == $sub.ref(0, 195341);

procedure scm_destroy_cred($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation scm_destroy_cred($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} put_pid($p2);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    return;
}



const scm_passec: ref;

axiom scm_passec == $sub.ref(0, 196373);

procedure scm_passec($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation scm_passec($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i6 := constant_test_bit(4, $p5);
    call {:si_unique_call 462} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i10 := security_secid_to_secctx($i9, $p3, $p4);
    call {:si_unique_call 464} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.18, $p4);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.19, $p3);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_73 := put_cmsg($p1, 1, 3, $i12, $p13);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.19, $p3);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.18, $p4);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} security_release_secctx($p15, $i16);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const scm_detach_fds: ref;

axiom scm_detach_fds == $sub.ref(0, 197405);

procedure scm_detach_fds($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation scm_detach_fds($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    return;
}



const security_secid_to_secctx: ref;

axiom security_secid_to_secctx == $sub.ref(0, 198437);

procedure security_secid_to_secctx($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation security_secid_to_secctx($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} {:cexpr "security_secid_to_secctx:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 468} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 469} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const security_release_secctx: ref;

axiom security_release_secctx == $sub.ref(0, 199469);

procedure security_release_secctx($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation security_release_secctx($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} {:cexpr "security_release_secctx:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    return;
}



const put_pid: ref;

axiom put_pid == $sub.ref(0, 200501);

procedure put_pid($p0: ref);
  free requires assertsPassed;



implementation put_pid($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    return;
}



const __scm_destroy: ref;

axiom __scm_destroy == $sub.ref(0, 201533);

procedure __scm_destroy($p0: ref);
  free requires assertsPassed;



implementation __scm_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 202565);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 471} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 472} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const unix_notinflight: ref;

axiom unix_notinflight == $sub.ref(0, 203597);

procedure unix_notinflight($p0: ref);
  free requires assertsPassed;
  modifies $M.20, $M.1, $M.0, $CurrAddr;



implementation unix_notinflight($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p1 := unix_get_socket($p0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} spin_lock(unix_gc_lock);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i6 := list_empty($p5);
    call {:si_unique_call 476} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 478} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1488, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i13 := atomic_long_dec_and_test($p12);
    call {:si_unique_call 481} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $M.20;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i16, 1);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.20 := $i17;
    call {:si_unique_call 483} {:cexpr "unix_tot_inflight"} boogie_si_record_i32($i17);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} spin_unlock(unix_gc_lock);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} list_del_init($p15);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i11 == 1;
    call {:si_unique_call 479} devirtbounce.6(0, .str.1, 207, 12);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call unix_notinflight_loop_$bb5();
    goto $bb5_last;

  $bb5_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;
}



const unix_get_socket: ref;

axiom unix_get_socket == $sub.ref(0, 204629);

procedure unix_get_socket($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation unix_get_socket($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p1 := file_inode($p0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1032)), $mul.ref(0, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 61440);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 49152);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $0.ref;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $r := $p26;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(132, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 16384);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p11 := SOCKET_I($p1);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p26 := $p25;
    goto $bb14;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb8;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb8;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p25 := $p13;
    goto $bb13;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 205661);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const atomic_long_dec_and_test: ref;

axiom atomic_long_dec_and_test == $sub.ref(0, 206693);

procedure atomic_long_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_long_dec_and_test($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $i1 := atomic64_dec_and_test($p0);
    call {:si_unique_call 488} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 207725);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} __list_del_entry($p0);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} INIT_LIST_HEAD($p0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 208757);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 209789);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    return;
}



const atomic64_dec_and_test: ref;

axiom atomic64_dec_and_test == $sub.ref(0, 210821);

procedure atomic64_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic64_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    call {:si_unique_call 492} devirtbounce.7(0, $p2, $p1, $p2);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.21, $p1);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const file_inode: ref;

axiom file_inode == $sub.ref(0, 211853);

procedure file_inode($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation file_inode($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(32, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const SOCKET_I: ref;

axiom SOCKET_I == $sub.ref(0, 212885);

procedure SOCKET_I($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation SOCKET_I($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 48), 1080)), $mul.ref(0, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 213917);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const get_pid: ref;

axiom get_pid == $sub.ref(0, 214949);

procedure get_pid($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation get_pid($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} atomic_inc($p3);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pid_vnr: ref;

axiom pid_vnr == $sub.ref(0, 215981);

procedure pid_vnr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pid_vnr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 494} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 495} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __kgid_val: ref;

axiom __kgid_val == $sub.ref(0, 217013);

procedure __kgid_val($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $CurrAddr;



implementation __kgid_val($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.22 := $store.i32($M.22, $p2, $i0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.22, $p3);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __kuid_val: ref;

axiom __kuid_val == $sub.ref(0, 218045);

procedure __kuid_val($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $CurrAddr;



implementation __kuid_val($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.23 := $store.i32($M.23, $p2, $i0);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.23, $p3);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 219077);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 10656)), $mul.ref(8, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 500} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 220109);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 503} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 221141);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 505} $i2 := devirtbounce.8(0, $p1, $i0);
    call {:si_unique_call 506} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 222173);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const sk_sleep: ref;

axiom sk_sleep == $sub.ref(0, 223205);

procedure sk_sleep($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sk_sleep($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $p7: ref;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(480, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i3 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 508} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($u0);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_74 := rcu_read_lock_held();
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb3;
}



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 224237);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    return;
}



const skb_peek_tail: ref;

axiom skb_peek_tail == $sub.ref(0, 225269);

procedure skb_peek_tail($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_peek_tail($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p7 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 226301);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 512} devirtbounce.9(0, $p1, $i0, $p1);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    return;
}



const freezable_schedule_timeout: ref;

axiom freezable_schedule_timeout == $sub.ref(0, 227333);

procedure freezable_schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation freezable_schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} {:cexpr "freezable_schedule_timeout:arg:timeout"} boogie_si_record_i64($i0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} freezer_do_not_count();
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i1 := schedule_timeout($i0);
    call {:si_unique_call 516} {:cexpr "__retval"} boogie_si_record_i64($i1);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} freezer_count();
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 228365);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 519} devirtbounce.9(0, $p1, $i0, $p1);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 229397);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    return;
}



const freezer_do_not_count: ref;

axiom freezer_do_not_count == $sub.ref(0, 230429);

procedure freezer_do_not_count();
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation freezer_do_not_count()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p0 := get_current();
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10656)), $mul.ref(20, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 1073741824);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 10656)), $mul.ref(20, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 231461);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 521} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 522} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 523} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const freezer_count: ref;

axiom freezer_count == $sub.ref(0, 232493);

procedure freezer_count();
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation freezer_count()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var vslice_dummy_var_75: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $p0 := get_current();
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10656)), $mul.ref(20, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 1073741825));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 10656)), $mul.ref(20, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    call {:si_unique_call 525} devirtbounce.1(0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} vslice_dummy_var_75 := try_to_freeze();
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    return;
}



const try_to_freeze: ref;

axiom try_to_freeze == $sub.ref(0, 233525);

procedure try_to_freeze() returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1;



implementation try_to_freeze() returns ($r: i1)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p0 := get_current();
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10656)), $mul.ref(20, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 32768);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i5 := try_to_freeze_unsafe();
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 530} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} debug_check_no_locks_held();
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const debug_check_no_locks_held: ref;

axiom debug_check_no_locks_held == $sub.ref(0, 234557);

procedure debug_check_no_locks_held();
  free requires assertsPassed;



implementation debug_check_no_locks_held()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    return;
}



const try_to_freeze_unsafe: ref;

axiom try_to_freeze_unsafe == $sub.ref(0, 235589);

procedure try_to_freeze_unsafe() returns ($r: i1);
  free requires assertsPassed;
  modifies $M.1;



implementation try_to_freeze_unsafe() returns ($r: i1)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} __might_sleep(.str.7, 56, 0);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p0 := get_current();
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i1 := freezing($p0);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 534} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 536} {:cexpr "tmp___2"} boogie_si_record_i64($i6);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i9 := __refrigerator(0);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 538} {:cexpr "tmp___3"} boogie_si_record_i8($i10);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 236621);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 540} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    return;
}



const freezing: ref;

axiom freezing == $sub.ref(0, 237653);

procedure freezing($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation freezing($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i1 := atomic_read(system_freezing_cnt);
    call {:si_unique_call 542} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i5 := ldv__builtin_expect($i4, 1);
    call {:si_unique_call 544} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i8 := freezing_slow_path($p0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 546} {:cexpr "tmp___1"} boogie_si_record_i8($i9);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const __refrigerator: ref;

axiom __refrigerator == $sub.ref(0, 238685);

procedure __refrigerator($i0: i1) returns ($r: i1);
  free requires assertsPassed;



implementation __refrigerator($i0: i1) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 547} {:cexpr "__refrigerator:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 1} true;
    call {:si_unique_call 548} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 549} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const freezing_slow_path: ref;

axiom freezing_slow_path == $sub.ref(0, 239717);

procedure freezing_slow_path($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation freezing_slow_path($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 550} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 551} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 240749);

procedure rcu_read_lock_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_held() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 553} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i3 := rcu_is_watching();
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 555} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $i8 := rcu_lockdep_current_cpu_online();
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 557} {:cexpr "tmp___2"} boogie_si_record_i8($i9);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i13 := lock_is_held(rcu_lock_map);
    call {:si_unique_call 559} {:cexpr "tmp___4"} boogie_si_record_i32($i13);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i2 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb14:
    assume $i12 == 1;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb13;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb7;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;
}



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 241781);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 1} true;
    call {:si_unique_call 560} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 561} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_lockdep_current_cpu_online: ref;

axiom rcu_lockdep_current_cpu_online == $sub.ref(0, 242813);

procedure rcu_lockdep_current_cpu_online() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_lockdep_current_cpu_online() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 1} true;
    call {:si_unique_call 562} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 563} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lock_is_held: ref;

axiom lock_is_held == $sub.ref(0, 243845);

procedure lock_is_held($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lock_is_held($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 1} true;
    call {:si_unique_call 564} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 565} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const wait_for_unix_gc: ref;

axiom wait_for_unix_gc == $sub.ref(0, 244877);

procedure wait_for_unix_gc();
  free requires assertsPassed;
  modifies $M.0, $M.24, $CurrAddr, $M.1, $M.20;



implementation wait_for_unix_gc()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i8;
  var $i11: i1;
  var $i12: i64;
  var $i13: i8;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i1 := $M.20;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 16000);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i5 := $M.24;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i6 == 1);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} INIT_LIST_HEAD($p7);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $i9 := prepare_to_wait_event(unix_gc_wait, $p0, 2);
    call {:si_unique_call 570} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i10 := $M.24;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} finish_wait(unix_gc_wait, $p0);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call $i12, $i13, $i14 := wait_for_unix_gc_loop_$bb14($p0, $i12, $i13, $i14);
    goto $bb14_last;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} schedule();
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i12 := prepare_to_wait_event(unix_gc_wait, $p0, 2);
    call {:si_unique_call 574} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i13 := $M.24;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb15;

  $bb15:
    assume !($i14 == 1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb18_dummy;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i3 := $M.24;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} unix_gc();
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const scm_send: ref;

axiom scm_send == $sub.ref(0, 245909);

procedure scm_send($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1;



implementation scm_send($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i39: i32;
  var $i38: i32;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i3);
    call {:si_unique_call 577} {:cexpr "scm_send:arg:forcecreds"} boogie_si_record_i1($i3);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 578} cmdloc_dummy_var_24 := $memset.i8(cmdloc_dummy_var_23, $p7, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $sub.i32(0, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 579} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p11, $p12, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $sub.i32(0, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p5);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 580} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p16, $p17, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i6);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} unix_get_peersec_dgram($p0, $p2);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i39 := __scm_send($p0, $p1, $p2);
    call {:si_unique_call 592} {:cexpr "tmp___5"} boogie_si_record_i32($i39);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i38 := $i39;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i19 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 582} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p20 := get_current();
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i21 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 585} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p22 := get_current();
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $p23 := get_current();
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p24 := task_tgid($p23);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(0, 10656)), $mul.ref(2448, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p20, $mul.ref(0, 10656)), $mul.ref(2448, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 176)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    $p33 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 176)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} scm_set_cred($p2, $p24, $i32, $i34);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sock_alloc_send_pskb: ref;

axiom sock_alloc_send_pskb == $sub.ref(0, 246941);

procedure sock_alloc_send_pskb($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation sock_alloc_send_pskb($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} {:cexpr "sock_alloc_send_pskb:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 594} {:cexpr "sock_alloc_send_pskb:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 595} {:cexpr "sock_alloc_send_pskb:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 596} {:cexpr "sock_alloc_send_pskb:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p6 := external_alloc();
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const unix_scm_to_skb: ref;

axiom unix_scm_to_skb == $sub.ref(0, 247973);

procedure unix_scm_to_skb($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.20;



implementation unix_scm_to_skb($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 598} {:cexpr "unix_scm_to_skb:arg:send_fds"} boogie_si_record_i1($i2);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p6 := get_pid($p5);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p6);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p12);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 600} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p15, $p16, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p19);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p21);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 601} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p22, $p23, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $0.ref);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, unix_destruct_scm);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i3);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb3;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i32 := unix_attach_fds($p0, $p1);
    call {:si_unique_call 603} {:cexpr "err"} boogie_si_record_i32($i32);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb6;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 249005);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 250037);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p2 := external_alloc();
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_copy_datagram_from_iovec: ref;

axiom skb_copy_datagram_from_iovec == $sub.ref(0, 251069);

procedure skb_copy_datagram_from_iovec($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_copy_datagram_from_iovec($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 606} {:cexpr "skb_copy_datagram_from_iovec:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 607} {:cexpr "skb_copy_datagram_from_iovec:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 608} {:cexpr "skb_copy_datagram_from_iovec:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 609} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 610} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const sock_flag: ref;

axiom sock_flag == $sub.ref(0, 252101);

procedure sock_flag($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation sock_flag($p0: ref, $i1: i32) returns ($r: i1)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} {:cexpr "sock_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(504, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i4 := variable_test_bit($i2, $p3);
    call {:si_unique_call 613} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const maybe_add_creds: ref;

axiom maybe_add_creds == $sub.ref(0, 253133);

procedure maybe_add_creds($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation maybe_add_creds($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i10 := constant_test_bit(3, $p9);
    call {:si_unique_call 615} {:cexpr "tmp___3"} boogie_si_record_i32($i10);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i19 := constant_test_bit(3, $p18);
    call {:si_unique_call 617} {:cexpr "tmp___4"} boogie_si_record_i32($i19);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p21 := get_current();
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p22 := task_tgid($p21);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $p23 := get_pid($p22);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p23);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i27 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 622} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $p28 := get_current();
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 10656)), $mul.ref(2448, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p30, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p33);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p34);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 624} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p35, $p36, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p30, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p39);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p40);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.0;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 625} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p41, $p42, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_queue_tail: ref;

axiom skb_queue_tail == $sub.ref(0, 254165);

procedure skb_queue_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_queue_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    return;
}



const send_sig: ref;

axiom send_sig == $sub.ref(0, 255197);

procedure send_sig($i0: i32, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation send_sig($i0: i32, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 626} {:cexpr "send_sig:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 627} {:cexpr "send_sig:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 1} true;
    call {:si_unique_call 628} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 629} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const task_tgid: ref;

axiom task_tgid == $sub.ref(0, 256229);

procedure task_tgid($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation task_tgid($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10656)), $mul.ref(2080, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 10656)), $mul.ref(2120, 1)), $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const unix_attach_fds: ref;

axiom unix_attach_fds == $sub.ref(0, 257261);

procedure unix_attach_fds($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.1;



implementation unix_attach_fds($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i32: i32;
  var $i31: i32;
  var $i33: i8;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i38: i8;
  var $i39: i32;
  var $i9: i8;
  var $i10: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i67: i32;
  var $i76: i32;
  var $i46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2032)), $mul.ref(0, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i6 := $sext.i16.i32($i5);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $sub.i32(0, 1));
    call {:si_unique_call 630} {:cexpr "i"} boogie_si_record_i32($i7);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i8 := $sge.i32($i7, 0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i9, $i10 := 0, 0;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i9);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i40, 4);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 637} {:cexpr "tmp___0"} boogie_si_record_i64($i44);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p49 := scm_fp_dup($p48);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p49);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i10, 0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i9);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i46 := $i76;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb22:
    assume $i59 == 1;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2032)), $mul.ref(0, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i64 := $sext.i16.i32($i63);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, $sub.i32(0, 1));
    call {:si_unique_call 639} {:cexpr "i"} boogie_si_record_i32($i65);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i66 := $sge.i32($i65, 0);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i66 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i67 := $i65;
    goto $bb27;

  $bb27:
    call $i68, $p69, $p70, $p72, $p73, $i74, $i75, $i67 := unix_attach_fds_loop_$bb27($p0, $i68, $p69, $p70, $p72, $p73, $i74, $i75, $i67);
    goto $bb27_last;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p70, $mul.ref(0, 2032)), $mul.ref(8, 1)), $mul.ref($i68, 8));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} unix_inflight($p73);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32($i67, 1);
    call {:si_unique_call 641} {:cexpr "i"} boogie_si_record_i32($i74);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i75 := $sge.i32($i74, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i75 == 1);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i67 := $i74;
    goto $bb29_dummy;

  $bb19:
    assume $i58 == 1;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 12);
    goto $bb17;

  $bb15:
    assume $i45 == 1;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 109);
    goto $bb17;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i11, $i12, $i13 := 0, 0, $i7;
    goto $bb4;

  $bb4:
    call $i14, $p15, $p16, $p18, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $i26, $i27, $i28, $i29, $i30, $i32, $i31, $i33, $i34, $i35, $i36, $i37, $i11, $i12, $i13, $i38, $i39 := unix_attach_fds_loop_$bb4($p0, $i14, $p15, $p16, $p18, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $i26, $i27, $i28, $i29, $i30, $i32, $i31, $i33, $i34, $i35, $i36, $i37, $i11, $i12, $i13, $i38, $i39);
    goto $bb4_last;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2032)), $mul.ref(8, 1)), $mul.ref($i14, 8));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p20 := unix_get_socket($p19);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i34, $i35 := $i12, $i11;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i13, 1);
    call {:si_unique_call 635} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i37 := $sge.i32($i36, 0);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i38, $i39 := $i34, $i35;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i38, $i39;
    goto $bb3;

  $bb12:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i11, $i12, $i13 := $i35, $i34, $i36;
    goto $bb12_dummy;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i11, 1);
    call {:si_unique_call 632} {:cexpr "unix_sock_count"} boogie_si_record_i32($i23);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p20);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1696)), $mul.ref(1568, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    call {:si_unique_call 633} {:cexpr "_max2"} boogie_si_record_i8($i26);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i12);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i26);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i27, $i28);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i26);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i31 := $i32;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i31);
    call {:si_unique_call 634} {:cexpr "max_level"} boogie_si_record_i8($i33);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i34, $i35 := $i33, $i23;
    goto $bb11;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i12);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb10;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2926;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2851;
}



const unix_destruct_scm: ref;

axiom unix_destruct_scm == $sub.ref(0, 258293);

procedure unix_destruct_scm($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $CurrAddr, $M.1;



implementation unix_destruct_scm($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 643} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p2, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} scm_destroy($p1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} sock_wfree($p0);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} unix_detach_fds($p1, $p0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sock_wfree: ref;

axiom sock_wfree == $sub.ref(0, 259325);

procedure sock_wfree($p0: ref);
  free requires assertsPassed;



implementation sock_wfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    return;
}



const unix_inflight: ref;

axiom unix_inflight == $sub.ref(0, 260357);

procedure unix_inflight($p0: ref);
  free requires assertsPassed;
  modifies $M.20, $M.1;



implementation unix_inflight($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p1 := unix_get_socket($p0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} spin_lock(unix_gc_lock);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1488, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i6 := atomic_long_inc_return($p5);
    call {:si_unique_call 650} {:cexpr "tmp___4"} boogie_si_record_i64($i6);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i17 := list_empty($p16);
    call {:si_unique_call 656} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 658} {:cexpr "tmp___3"} boogie_si_record_i64($i21);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $M.20;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $M.20 := $i24;
    call {:si_unique_call 661} {:cexpr "unix_tot_inflight"} boogie_si_record_i32($i24);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} spin_unlock(unix_gc_lock);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i22 == 1;
    call {:si_unique_call 663} devirtbounce.6(0, .str.1, 194, 12);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call unix_inflight_loop_$bb12();
    goto $bb12_last;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i9 := list_empty($p8);
    call {:si_unique_call 652} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 654} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} list_add_tail($p15, gc_inflight_list);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i14 == 1;
    call {:si_unique_call 659} devirtbounce.6(0, .str.1, 191, 12);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call unix_inflight_loop_$bb7();
    goto $bb7_last;

  $bb12_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;
}



const atomic_long_inc_return: ref;

axiom atomic_long_inc_return == $sub.ref(0, 261389);

procedure atomic_long_inc_return($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic_long_inc_return($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i1 := atomic64_add_return(1, $p0);
    call {:si_unique_call 665} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 262421);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} __list_add($p0, $p3, $p1);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 263453);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    return;
}



const atomic64_add_return: ref;

axiom atomic64_add_return == $sub.ref(0, 264485);

procedure atomic64_add_return($i0: i64, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic64_add_return($i0: i64, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} {:cexpr "atomic64_add_return:arg:i"} boogie_si_record_i64($i0);
    call {:si_unique_call 668} {:cexpr "atomic64_add_return:arg:__ret"} boogie_si_record_i64($i0);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    call {:si_unique_call 669} $i3 := devirtbounce.10(0, $p2, $i0, $p2);
    call {:si_unique_call 670} {:cexpr "__ret"} boogie_si_record_i64($i3);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $i0);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const unix_get_peersec_dgram: ref;

axiom unix_get_peersec_dgram == $sub.ref(0, 265517);

procedure unix_get_peersec_dgram($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation unix_get_peersec_dgram($p0: ref, $p1: ref)
{
  var $p2: ref;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_76 := security_socket_getpeersec_dgram($p0, $0.ref, $p2);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    return;
}



const __scm_send: ref;

axiom __scm_send == $sub.ref(0, 266549);

procedure __scm_send($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __scm_send($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 1} true;
    call {:si_unique_call 672} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 673} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const security_socket_getpeersec_dgram: ref;

axiom security_socket_getpeersec_dgram == $sub.ref(0, 267581);

procedure security_socket_getpeersec_dgram($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation security_socket_getpeersec_dgram($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 674} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 675} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const unix_gc: ref;

axiom unix_gc == $sub.ref(0, 268613);

procedure unix_gc();
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.1, $CurrAddr, $M.20;



implementation unix_gc()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p18: ref;
  var $p19: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p57: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p102: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $p101: ref;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i64;
  var $i115: i64;
  var $i116: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p0 := $alloc($mul.ref(96, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p2);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} spin_lock(unix_gc_lock);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i5 := $M.24;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 681} {:cexpr "gc_in_progress"} boogie_si_record_i8(1);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, gc_inflight_list);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 1472), 1696));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1)), $mul.ref(0, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 1472), 1696));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, $p2i.ref.i64(gc_inflight_list));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, gc_candidates);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref($sub.ref(0, 1472), 1696));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p52, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, $p2i.ref.i64(gc_candidates));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} list_add($p1, gc_candidates);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, $p2i.ref.i64(gc_candidates));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} list_del($p1);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i85 := list_empty($p2);
    call {:si_unique_call 705} {:cexpr "tmp___2"} boogie_si_record_i32($i85);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} skb_queue_head_init($p0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, gc_candidates);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p96, $mul.ref($sub.ref(0, 1472), 1696));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p96, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, $p2i.ref.i64(gc_candidates));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} spin_unlock(unix_gc_lock);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} __skb_queue_purge($p0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} spin_lock(unix_gc_lock);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i111 := list_empty(gc_candidates);
    call {:si_unique_call 716} {:cexpr "tmp___3"} boogie_si_record_i32($i111);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i113 := $zext.i1.i32($i112);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i115 := ldv__builtin_expect($i114, 0);
    call {:si_unique_call 718} {:cexpr "tmp___4"} boogie_si_record_i64($i115);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 720} {:cexpr "gc_in_progress"} boogie_si_record_i8(0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} __wake_up(unix_gc_wait, 3, 1, $0.ref);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} spin_unlock(unix_gc_lock);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    return;

  $bb59:
    assume $i116 == 1;
    call {:si_unique_call 719} devirtbounce.6(0, .str.1, 439, 12);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    call unix_gc_loop_$bb61();
    goto $bb61_last;

  $bb51:
    assume $i100 == 1;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p101 := $p97;
    goto $bb54;

  $bb54:
    call $p102, $p104, $p105, $p106, $p107, $p108, $i109, $i110, $p101 := unix_gc_loop_$bb54($p0, $p102, $p104, $p105, $p106, $p107, $p108, $i109, $i110, $p101);
    goto $bb54_last;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 1696)), $mul.ref(0, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} scan_children($p102, inc_inflight, $p0);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p101, $mul.ref(0, 1696)), $mul.ref(1472, 1)), $mul.ref(0, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref($sub.ref(0, 1472), 1696));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p106, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, $p2i.ref.i64(gc_candidates));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i110 == 1);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb56:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $p101 := $p107;
    goto $bb56_dummy;

  $bb43:
    assume $i86 == 1;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    call $p87, $p88, $p89, $p91, $p92, $i93, $i94 := unix_gc_loop_$bb46($p2, $p87, $p88, $p89, $p91, $p92, $i93, $i94);
    goto $bb46_last;

  $bb47:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p89, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} __clear_bit(0, $p91);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p89, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} list_move_tail($p92, gc_inflight_list);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i93 := list_empty($p2);
    call {:si_unique_call 709} {:cexpr "tmp___2"} boogie_si_record_i32($i93);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i94 == 1);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb48_dummy;

  $bb32:
    assume $i70 == 1;
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    call $p71, $p72, $p73, $p75, $p76, $i77, $i78, $p79, $p80, $p81, $p82, $i83, $i84 := unix_gc_loop_$bb35($p1, $p2, $p67, $p71, $p72, $p73, $p75, $p76, $i77, $i78, $p79, $p80, $p81, $p82, $i83, $i84);
    goto $bb35_last;

  $bb36:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p73, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} list_move($p1, $p75);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p73, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1488, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i77 := atomic_long_read($p76);
    call {:si_unique_call 699} {:cexpr "tmp___1"} boogie_si_record_i64($i77);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i64($i77, 0);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p67);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, $p2i.ref.i64(gc_candidates));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i84 == 1);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb40_dummy;

  $bb37:
    assume $i78 == 1;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p73, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} list_move_tail($p79, $p2);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p73, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} __clear_bit(1, $p80);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p73, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} scan_children($p81, inc_inflight_move_tail, $0.ref);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb24:
    assume $i56 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p57 := $p53;
    goto $bb27;

  $bb27:
    call $p58, $p60, $p61, $p62, $p63, $p64, $i65, $i66, $p57 := unix_gc_loop_$bb27($p58, $p60, $p61, $p62, $p63, $p64, $i65, $i66, $p57);
    goto $bb27_last;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 1696)), $mul.ref(0, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} scan_children($p58, dec_inflight, $0.ref);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 1696)), $mul.ref(1472, 1)), $mul.ref(0, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref($sub.ref(0, 1472), 1696));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p62, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, $p2i.ref.i64(gc_candidates));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i66 == 1);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $p57 := $p63;
    goto $bb29_dummy;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p18, $p19 := $p9, $p14;
    goto $bb8;

  $bb8:
    call $p21, $p22, $p23, $p24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $p42, $p44, $p45, $p46, $p47, $p48, $i49, $i50, $p18, $p19 := unix_gc_loop_$bb8($p21, $p22, $p23, $p24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $p40, $p41, $p42, $p44, $p45, $p46, $p47, $p48, $i49, $i50, $p18, $p19);
    goto $bb8_last;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1696)), $mul.ref(0, 1)), $mul.ref(1152, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 512)), $mul.ref(120, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i26 := atomic_long_read($p25);
    call {:si_unique_call 683} {:cexpr "total_refs"} boogie_si_record_i64($i26);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 1696)), $mul.ref(1488, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i28 := atomic_long_read($p27);
    call {:si_unique_call 685} {:cexpr "inflight_refs"} boogie_si_record_i64($i28);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i29 := $sle.i64($i28, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 687} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $slt.i64($i26, $i28);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 690} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i26, $i28);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 1696)), $mul.ref(1472, 1)), $mul.ref(0, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref($sub.ref(0, 1472), 1696));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p19, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, $p2i.ref.i64(gc_inflight_list));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i50 == 1);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb21:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p18, $p19 := $p19, $p47;
    goto $bb21_dummy;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p18, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} list_move_tail($p40, gc_candidates);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p18, $mul.ref(0, 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} __set_bit(0, $p41);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p18, $mul.ref(0, 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} __set_bit(1, $p42);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i38 == 1;
    call {:si_unique_call 691} devirtbounce.6(0, .str.1, 374, 12);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call unix_gc_loop_$bb16();
    goto $bb16_last;

  $bb10:
    assume $i33 == 1;
    call {:si_unique_call 688} devirtbounce.6(0, .str.1, 373, 12);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    call unix_gc_loop_$bb12();
    goto $bb12_last;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb61_dummy:
    assume false;
    return;

  $bb61_last:
    assume {:verifier.code 0} true;
    goto $bb61_dummy;

  $bb56_dummy:
    assume false;
    return;

  $bb54_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3189;

  $bb48_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb40_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3114;

  $bb16_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;

  $bb12_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb21_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3059;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 269645);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 722} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 724} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 270677);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    return;
}



const atomic_long_read: ref;

axiom atomic_long_read == $sub.ref(0, 271709);

procedure atomic_long_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic_long_read($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i1 := atomic64_read($p0);
    call {:si_unique_call 726} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_move_tail: ref;

axiom list_move_tail == $sub.ref(0, 272741);

procedure list_move_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} __list_del_entry($p0);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} list_add_tail($p0, $p1);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    return;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 273773);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 730} devirtbounce.9(0, $p1, $i0, $p1);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    return;
}



const dec_inflight: ref;

axiom dec_inflight == $sub.ref(0, 274805);

procedure dec_inflight($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation dec_inflight($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(1488, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} atomic_long_dec($p1);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    return;
}



const scan_children: ref;

axiom scan_children == $sub.ref(0, 275837);

procedure scan_children($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.20;



implementation scan_children($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p23: ref;
  var $p24: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 10);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} spin_lock($p12);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(0, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p15);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i20, $i21);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} spin_unlock($p41);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i42 := list_empty($p3);
    call {:si_unique_call 743} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i43 == 1;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call $p44, $p45, $p46, $p48, $p49, $i50, $i51 := scan_children_loop_$bb19($p1, $p2, $p3, $p44, $p45, $p46, $p48, $p49, $i50, $i51);
    goto $bb19_last;

  $bb20:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p46, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(0, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} scan_inflight($p48, $p1, $p2);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p46, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} list_del_init($p49);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i50 := list_empty($p3);
    call {:si_unique_call 747} {:cexpr "tmp___1"} boogie_si_record_i32($i50);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb21_dummy;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p17, $p15;
    goto $bb7;

  $bb7:
    call $p25, $p26, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p23, $p24 := scan_children_loop_$bb7($p3, $i20, $p25, $p26, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p23, $p24);
    goto $bb7_last;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i29 := list_empty($p28);
    call {:si_unique_call 736} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 738} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p27, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} list_add_tail($p35, $p3);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p23, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p23);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i20, $i38);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $p23, $p24 := $p37, $p23;
    goto $bb13_dummy;

  $bb9:
    assume $i34 == 1;
    call {:si_unique_call 739} devirtbounce.6(0, .str.1, 285, 12);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call scan_children_loop_$bb11();
    goto $bb11_last;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} scan_inflight($p0, $p1, $p2);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb13_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3264;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 276869);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} __list_add($p0, $p1, $p3);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    return;
}



const list_move: ref;

axiom list_move == $sub.ref(0, 277901);

procedure list_move($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} __list_del_entry($p0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} list_add($p0, $p1);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    return;
}



const __clear_bit: ref;

axiom __clear_bit == $sub.ref(0, 278933);

procedure __clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} {:cexpr "__clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 752} devirtbounce.9(0, $p1, $i0, $p1);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    return;
}



const inc_inflight_move_tail: ref;

axiom inc_inflight_move_tail == $sub.ref(0, 279965);

procedure inc_inflight_move_tail($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation inc_inflight_move_tail($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(1488, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} atomic_long_inc($p1);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i3 := constant_test_bit(1, $p2);
    call {:si_unique_call 755} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} list_move_tail($p5, gc_candidates);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 280997);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_head_init: ref;

axiom skb_queue_head_init == $sub.ref(0, 282029);

procedure skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_77: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_77 := spinlock_check($p2);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} __raw_spin_lock_init($p6, .str.24, $p1);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} __skb_queue_head_init($p0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    return;
}



const inc_inflight: ref;

axiom inc_inflight == $sub.ref(0, 283061);

procedure inc_inflight($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation inc_inflight($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1696)), $mul.ref(1488, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} atomic_long_inc($p1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_purge: ref;

axiom __skb_queue_purge == $sub.ref(0, 284093);

procedure __skb_queue_purge($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_purge($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $p1 := __skb_dequeue($p0);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb4;

  $bb4:
    call $p5, $i6, $i7, $p4 := __skb_queue_purge_loop_$bb4($p0, $p5, $i6, $i7, $p4);
    goto $bb4_last;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} kfree_skb($p4);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p5 := __skb_dequeue($p0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p5;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3351;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 285125);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 766} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    return;
}



const __skb_dequeue: ref;

axiom __skb_dequeue == $sub.ref(0, 286157);

procedure __skb_dequeue($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_dequeue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $p1 := skb_peek($p0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} __skb_unlink($p1, $p0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __skb_unlink: ref;

axiom __skb_unlink == $sub.ref(0, 287189);

procedure __skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_unlink($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p9);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p7);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    return;
}



const atomic_long_inc: ref;

axiom atomic_long_inc == $sub.ref(0, 288221);

procedure atomic_long_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_long_inc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} atomic64_inc($p0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    return;
}



const atomic64_inc: ref;

axiom atomic64_inc == $sub.ref(0, 289253);

procedure atomic64_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic64_inc($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    call {:si_unique_call 770} devirtbounce.11(0, $p1, $p2);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 290285);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 291317);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_head_init: ref;

axiom __skb_queue_head_init == $sub.ref(0, 292349);

procedure __skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_head_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    return;
}



const scan_inflight: ref;

axiom scan_inflight == $sub.ref(0, 293381);

procedure scan_inflight($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.20, $CurrAddr;



implementation scan_inflight($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i8;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i39: i32;
  var $p40: ref;
  var $i41: i8;
  var $i55: i8;
  var $i38: i8;
  var $i56: i1;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p15: ref;
  var $p16: ref;
  var $p65: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} spin_lock($p4);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(0, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p7);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i12, $i13);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} spin_unlock($p65);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p7, $p9;
    goto $bb4;

  $bb4:
    call $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $i36, $i37, $p42, $p43, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i39, $p40, $i41, $i55, $i38, $i56, $i57, $i58, $p59, $p60, $p61, $i62, $i63, $p15, $p16 := scan_inflight_loop_$bb4($p0, $p1, $p2, $i12, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $i36, $i37, $p42, $p43, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i39, $p40, $i41, $i55, $i38, $i56, $i57, $i58, $p59, $p60, $p61, $i62, $i63, $p15, $p16);
    goto $bb4_last;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p16, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p16);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i12, $i62);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i63 == 1);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb29:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16 := $p16, $p61;
    goto $bb29_dummy;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p15, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2032)), $mul.ref(0, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i29 := $sext.i16.i32($i28);
    call {:si_unique_call 772} {:cexpr "nfd"} boogie_si_record_i32($i29);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p15, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2032)), $mul.ref(8, 1));
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i29, 1);
    call {:si_unique_call 773} {:cexpr "nfd"} boogie_si_record_i32($i36);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i29, 0);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i38 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i38);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i56 == 1;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p2);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb24;

  $bb25:
    assume $i58 == 1;
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} __skb_unlink($p15, $p59);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} __skb_queue_tail($p2, $p15);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41 := $i36, $p34, 0;
    goto $bb11;

  $bb11:
    call $p42, $p43, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i39, $p40, $i41, $i55 := scan_inflight_loop_$bb11($p1, $p42, $p43, $p44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i39, $p40, $i41, $i55);
    goto $bb11_last;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p40, $mul.ref(1, 8));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p40);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p44 := unix_get_socket($p43);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i41;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i39, 1);
    call {:si_unique_call 778} {:cexpr "nfd"} boogie_si_record_i32($i53);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i39, 0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i55 := $i52;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i38 := $i55;
    goto $bb10;

  $bb19:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i39, $p40, $i41 := $i53, $p42, $i52;
    goto $bb19_dummy;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p44);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i49 := constant_test_bit(0, $p48);
    call {:si_unique_call 776} {:cexpr "tmp___1"} boogie_si_record_i32($i49);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i41;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb18;

  $bb15:
    assume $i50 == 1;
    call {:si_unique_call 777} devirtbounce.12($p1, $p47);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i51 := 1;
    goto $bb17;

  $bb19_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3454;

  $bb29_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3426;
}



const __skb_queue_tail: ref;

axiom __skb_queue_tail == $sub.ref(0, 294413);

procedure __skb_queue_tail($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_tail($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} __skb_queue_before($p0, $p2, $p1);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_before: ref;

axiom __skb_queue_before == $sub.ref(0, 295445);

procedure __skb_queue_before($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_before($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} __skb_insert($p2, $p4, $p1, $p0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    return;
}



const __skb_insert: ref;

axiom __skb_insert == $sub.ref(0, 296477);

procedure __skb_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p1);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p0);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    return;
}



const atomic_long_dec: ref;

axiom atomic_long_dec == $sub.ref(0, 297509);

procedure atomic_long_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_long_dec($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} atomic64_dec($p0);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    return;
}



const atomic64_dec: ref;

axiom atomic64_dec == $sub.ref(0, 298541);

procedure atomic64_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic64_dec($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    call {:si_unique_call 785} devirtbounce.11(0, $p1, $p2);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    return;
}



const atomic64_read: ref;

axiom atomic64_read == $sub.ref(0, 299573);

procedure atomic64_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic64_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sk_wake_async: ref;

axiom sk_wake_async == $sub.ref(0, 300605);

procedure sk_wake_async($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation sk_wake_async($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} {:cexpr "sk_wake_async:arg:how"} boogie_si_record_i32($i1);
    call {:si_unique_call 787} {:cexpr "sk_wake_async:arg:band"} boogie_si_record_i32($i2);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i3 := sock_flag($p0, 23);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 789} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_78 := sock_wake_async($p7, $i1, $i2);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sock_put: ref;

axiom sock_put == $sub.ref(0, 301637);

procedure sock_put($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation sock_put($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i3 := atomic_dec_and_test($p2);
    call {:si_unique_call 792} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} sk_free($p0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 302669);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 795} devirtbounce.13(0, $p2, $p1, $p2);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.25, $p1);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const sk_free: ref;

axiom sk_free == $sub.ref(0, 303701);

procedure sk_free($p0: ref);
  free requires assertsPassed;



implementation sk_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    return;
}



const sock_wake_async: ref;

axiom sock_wake_async == $sub.ref(0, 304733);

procedure sock_wake_async($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sock_wake_async($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 796} {:cexpr "sock_wake_async:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 797} {:cexpr "sock_wake_async:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 798} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 799} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const init_peercred: ref;

axiom init_peercred == $sub.ref(0, 305765);

procedure init_peercred($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation init_peercred($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(976, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} put_pid($p2);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(984, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p9 := get_current();
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $p10 := task_tgid($p9);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p11 := get_pid($p10);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(976, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p11);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i13 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 806} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p14 := get_current();
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 10656)), $mul.ref(2448, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p17 := get_cred($p16);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(984, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p17);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(984, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} put_cred($p8);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const put_cred: ref;

axiom put_cred == $sub.ref(0, 306797);

procedure put_cred($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation put_cred($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} __validate_creds($p0, .str.6, 247);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 811} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} __put_cred($p0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_cred: ref;

axiom get_cred == $sub.ref(0, 307829);

procedure get_cred($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation get_cred($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} __validate_creds($p0, .str.6, 228);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p1 := get_new_cred($p0);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __validate_creds: ref;

axiom __validate_creds == $sub.ref(0, 308861);

procedure __validate_creds($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation __validate_creds($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} {:cexpr "__validate_creds:arg:line"} boogie_si_record_i32($i2);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i3 := creds_are_invalid($p0);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 817} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i64($i5);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 819} {:cexpr "tmp___0"} boogie_si_record_i64($i7);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} __invalid_creds($p0, $p1, $i2);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_new_cred: ref;

axiom get_new_cred == $sub.ref(0, 309893);

procedure get_new_cred($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation get_new_cred($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} atomic_inc($p1);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const creds_are_invalid: ref;

axiom creds_are_invalid == $sub.ref(0, 310925);

procedure creds_are_invalid($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation creds_are_invalid($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 823} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __invalid_creds: ref;

axiom __invalid_creds == $sub.ref(0, 311957);

procedure __invalid_creds($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation __invalid_creds($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} {:cexpr "__invalid_creds:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    return;
}



const __put_cred: ref;

axiom __put_cred == $sub.ref(0, 312989);

procedure __put_cred($p0: ref);
  free requires assertsPassed;



implementation __put_cred($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 314021);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    return;
}



const sock_poll_wait: ref;

axiom sock_poll_wait == $sub.ref(0, 315053);

procedure sock_poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation sock_poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i3 := poll_does_not_wait($p2);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 826} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} poll_wait($p0, $p1, $p2);
    call {:si_unique_call 828} devirtbounce.1(0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const skb_queue_empty: ref;

axiom skb_queue_empty == $sub.ref(0, 316085);

procedure skb_queue_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const unix_writable: ref;

axiom unix_writable == $sub.ref(0, 317117);

procedure unix_writable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unix_writable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(600, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i2 := atomic_read($p1);
    call {:si_unique_call 830} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i2, 2);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(608, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i6 := $sle.i32($i3, $i5);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const poll_does_not_wait: ref;

axiom poll_does_not_wait == $sub.ref(0, 318149);

procedure poll_does_not_wait($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation poll_does_not_wait($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i3 := 1;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i3 := $i7;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 319181);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 831} devirtbounce.14($p12, $p0, $p1, $p2);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const skb_recv_datagram: ref;

axiom skb_recv_datagram == $sub.ref(0, 320213);

procedure skb_recv_datagram($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_recv_datagram($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} {:cexpr "skb_recv_datagram:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 833} {:cexpr "skb_recv_datagram:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p4 := external_alloc();
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const skb_free_datagram: ref;

axiom skb_free_datagram == $sub.ref(0, 321245);

procedure skb_free_datagram($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_free_datagram($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    return;
}



const unix_sock_inherit_flags: ref;

axiom unix_sock_inherit_flags == $sub.ref(0, 322277);

procedure unix_sock_inherit_flags($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation unix_sock_inherit_flags($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i3 := constant_test_bit(3, $p2);
    call {:si_unique_call 836} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i7 := constant_test_bit(4, $p6);
    call {:si_unique_call 839} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} set_bit(4, $p9);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} set_bit(3, $p5);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sock_graft: ref;

axiom sock_graft == $sub.ref(0, 323309);

procedure sock_graft($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sock_graft($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(880, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} _raw_write_lock_bh($p2);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(480, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} sk_set_socket($p0, $p1);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} security_sock_graft($p0, $p1);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(880, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} _raw_write_unlock_bh($p7);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    return;
}



const _raw_write_lock_bh: ref;

axiom _raw_write_lock_bh == $sub.ref(0, 324341);

procedure _raw_write_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_write_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    return;
}



const sk_set_socket: ref;

axiom sk_set_socket == $sub.ref(0, 325373);

procedure sk_set_socket($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sk_set_socket($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} sk_tx_queue_clear($p0);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    return;
}



const security_sock_graft: ref;

axiom security_sock_graft == $sub.ref(0, 326405);

procedure security_sock_graft($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation security_sock_graft($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    return;
}



const _raw_write_unlock_bh: ref;

axiom _raw_write_unlock_bh == $sub.ref(0, 327437);

procedure _raw_write_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_write_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    return;
}



const sk_tx_queue_clear: ref;

axiom sk_tx_queue_clear == $sub.ref(0, 328469);

procedure sk_tx_queue_clear($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sk_tx_queue_clear($p0: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $sub.i32(0, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    return;
}



const unix_mkname: ref;

axiom unix_mkname == $sub.ref(0, 329501);

procedure unix_mkname($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5;



implementation unix_mkname($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} {:cexpr "unix_mkname:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i1, 2);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i1, 110);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i7 == 1);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 110)), $mul.ref(0, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 110)), $mul.ref(2, 1)), $mul.ref(0, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i14);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $i26 := csum_partial($p25, $i1, 0);
    call {:si_unique_call 851} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i27 := unix_hash_fold($i26);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.5 := $store.i32($M.5, $p2, $i27);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i1);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 110)), $mul.ref(2, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i22 := strlen($p21);
    call {:si_unique_call 848} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 3);
    call {:si_unique_call 849} {:cexpr "len"} boogie_si_record_i32($i24);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i5 := $i24;
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const unix_autobind: ref;

axiom unix_autobind == $sub.ref(0, 330533);

procedure unix_autobind($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, assertsPassed;



implementation unix_autobind($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i13: i32;
  var $p69: ref;
  var $i8: i32;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p3 := sock_net($p2);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i6 := mutex_lock_interruptible_nested($p5, 0);
    call {:si_unique_call 855} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p14 := kzalloc(30, 208);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 110)), $mul.ref(0, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 1);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} atomic_set($p21, 1);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i22, $i23 := 1, 0;
    goto $bb12;

  $bb12:
    call $i22, $i23, $p24, $p25, $p26, $p27, $p28, $i29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $p41, $p42, $p43, $i44, $p45, $i46, $i47, $p48, $i49, $p50, $i51, $i52, $i54, $i55, vslice_dummy_var_79 := unix_autobind_loop_$bb12($p0, $p3, $p15, $i22, $i23, $p24, $p25, $p26, $p27, $p28, $i29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $p41, $p42, $p43, $i44, $p45, $i46, $i47, $p48, $i49, $p50, $i51, $i52, $i54, $i55, vslice_dummy_var_79);
    goto $bb12_last;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 110)), $mul.ref(2, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(1, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i29 := sprintf.ref.ref.i32($p28, .str.3, $i22);
    call {:si_unique_call 860} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 3);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i36 := csum_partial($p33, $i35, 0);
    call {:si_unique_call 862} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i37 := unix_hash_fold($i36);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} spin_lock(unix_table_lock);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i22, 1);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 1048575);
    call {:si_unique_call 865} {:cexpr "ordernum"} boogie_si_record_i32($i40);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i47 := $sext.i16.i32($i46);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p50 := __unix_find_socket_byname($p3, $p42, $i44, $i47, $i49);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i62 := $xor.i32($i58, $i61);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} __unix_remove_socket($p2);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p14);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    $p68 := $add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref($i67, 8));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} __unix_insert_socket($p68, $p2);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} spin_unlock(unix_table_lock);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} mutex_unlock($p69);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i8 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb13:
    assume $i52 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} spin_unlock(unix_table_lock);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} __might_sleep(.str.4, 812, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_79 := _cond_resched();
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i23, 1);
    call {:si_unique_call 870} {:cexpr "retries"} boogie_si_record_i32($i54);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i23, 1048575);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i22, $i23 := $i40, $i54;
    goto $bb17_dummy;

  $bb15:
    assume $i55 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p15);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} kfree($p56);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 28);
    goto $bb7;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb7;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3821;
}



const sock_sndtimeo: ref;

axiom sock_sndtimeo == $sub.ref(0, 331565);

procedure sock_sndtimeo($p0: ref, $i1: i1) returns ($r: i64);
  free requires assertsPassed;



implementation sock_sndtimeo($p0: ref, $i1: i1) returns ($r: i64)
{
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 875} {:cexpr "sock_sndtimeo:arg:noblock"} boogie_si_record_i1($i1);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1000, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const unix_create1: ref;

axiom unix_create1 == $sub.ref(0, 332597);

procedure unix_create1($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1;



implementation unix_create1($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p9: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var vslice_dummy_var_80: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} atomic_long_inc(unix_nr_socks);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i5 := atomic_long_read(unix_nr_socks);
    call {:si_unique_call 881} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i6 := get_max_files();
    call {:si_unique_call 883} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i64($i5, $i7);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p10 := sk_alloc($p0, 1, 208, unix_proto);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} sock_init_data($p1, $p10);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p10, $mul.ref(0, 1272)), $mul.ref(328, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} lockdep_init_map($p17, .str.8, af_unix_sk_receive_queue_lock_key, 0);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref(0, 1272)), $mul.ref(1240, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, unix_write_space);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(648, 1)), $mul.ref(0, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 1272)), $mul.ref(962, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p23, $i22);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref(0, 1272)), $mul.ref(1264, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, unix_sock_destructor);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p10);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 1696)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $0.ref);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 1696)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p25, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} vslice_dummy_var_80 := spinlock_check($p30);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 1696)), $mul.ref(1496, 1)), $mul.ref(0, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} __raw_spin_lock_init($p34, .str.9, $p2);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p25, $mul.ref(0, 1696)), $mul.ref(1488, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} atomic_long_set($p35, 0);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p25, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} INIT_LIST_HEAD($p36);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p25, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} __mutex_init($p37, .str.10, $p3);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 1696)), $mul.ref(1584, 1)), $mul.ref(0, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} __init_waitqueue_head($p39, .str.11, $p4);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p10);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p41 := unix_sockets_unbound($p40);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} unix_insert_socket($p41, $p10);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p9 := $p10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p9);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} local_bh_disable();
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p44 := sock_net($p9);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} sock_prot_inuse_add($p44, $p47, 1);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} local_bh_enable();
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} atomic_long_dec(unix_nr_socks);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p9 := $p10;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;
}



const sock_wmalloc: ref;

axiom sock_wmalloc == $sub.ref(0, 333629);

procedure sock_wmalloc($p0: ref, $i1: i64, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation sock_wmalloc($p0: ref, $i1: i64, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} {:cexpr "sock_wmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 901} {:cexpr "sock_wmalloc:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 902} {:cexpr "sock_wmalloc:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p4 := external_alloc();
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const unix_find_other: ref;

axiom unix_find_other == $sub.ref(0, 334661);

procedure unix_find_other($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, $M.1;



implementation unix_find_other($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: ref)
{
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p40: ref;
  var $i23: i32;
  var $i16: i32;
  var $p52: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 905} {:cexpr "unix_find_other:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 906} {:cexpr "unix_find_other:arg:type"} boogie_si_record_i32($i3);
    call {:si_unique_call 907} {:cexpr "unix_find_other:arg:hash"} boogie_si_record_i32($i4);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 110)), $mul.ref(2, 1)), $mul.ref(0, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p41 := unix_find_socket_byname($p0, $p1, $i2, $i3, $i4);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i43 == 1);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 111);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i16);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p52 := $0.ref;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $r := $p52;
    return;

  $bb24:
    assume $i43 == 1;
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p41);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 1696)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p40 := $p41;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p52 := $p40;
    goto $bb30;

  $bb26:
    assume $i49 == 1;
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p41);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1696)), $mul.ref(1280, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} touch_atime($p51);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 110)), $mul.ref(2, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i14 := kern_path($p13, 1, $p6);
    call {:si_unique_call 909} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 320)), $mul.ref(104, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.26, $p19);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i21 := inode_permission($p20, 2);
    call {:si_unique_call 912} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 1032)), $mul.ref(0, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.27, $p24);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 61440);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 49152);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p29 := unix_find_socket_byinode($p20);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, $i3);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} path_put($p6);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p29, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, $i3);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p40 := $p29;
    goto $bb23;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} sock_put($p29);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 91);
    goto $bb5;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} touch_atime($p6);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 111);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} path_put($p6);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i16 := $i23;
    goto $bb5;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 111);
    goto $bb9;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb9;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb5;
}



const unix_recvq_full: ref;

axiom unix_recvq_full == $sub.ref(0, 335693);

procedure unix_recvq_full($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unix_recvq_full($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i2 := skb_queue_len($p1);
    call {:si_unique_call 920} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(962, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i2, $i5);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const unix_wait_for_peer: ref;

axiom unix_wait_for_peer == $sub.ref(0, 336725);

procedure unix_wait_for_peer($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation unix_wait_for_peer($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 922} {:cexpr "unix_wait_for_peer:arg:timeo"} boogie_si_record_i64($i1);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p4 := get_current();
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p4);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, autoremove_wake_function);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p9);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p12);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(1584, 1)), $mul.ref(0, 1));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} prepare_to_wait_exclusive($p16, $p2, 1);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $i17 := sock_flag($p0, 0);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 926} {:cexpr "tmp___0"} boogie_si_record_i8($i18);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} spin_unlock($p33);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i31, 0);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(1584, 1)), $mul.ref(0, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} finish_wait($p38, $p2);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i35 := schedule_timeout($i1);
    call {:si_unique_call 931} {:cexpr "timeo"} boogie_si_record_i64($i35);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb15;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i23, 3);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb6;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $i28 := unix_recvq_full($p0);
    call {:si_unique_call 928} {:cexpr "tmp___2"} boogie_si_record_i32($i28);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb12;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb11;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;
}



const security_unix_stream_connect: ref;

axiom security_unix_stream_connect == $sub.ref(0, 337757);

procedure security_unix_stream_connect($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation security_unix_stream_connect($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 933} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 934} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const path_get: ref;

axiom path_get == $sub.ref(0, 338789);

procedure path_get($p0: ref);
  free requires assertsPassed;



implementation path_get($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    return;
}



const copy_peercred: ref;

axiom copy_peercred == $sub.ref(0, 339821);

procedure copy_peercred($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1;



implementation copy_peercred($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(976, 1));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} put_pid($p3);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(984, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 1272)), $mul.ref(976, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p12 := get_pid($p11);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(976, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 1272)), $mul.ref(984, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $p16 := get_cred($p15);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(984, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(984, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} put_cred($p9);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unix_release_sock: ref;

axiom unix_release_sock == $sub.ref(0, 340853);

procedure unix_release_sock($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.1, $CurrAddr, $M.20;



implementation unix_release_sock($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i8;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i8;
  var $i45: i8;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p61: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 940} {:cexpr "unix_release_sock:arg:embrion"} boogie_si_record_i32($i1);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} unix_remove_socket($p0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} spin_lock($p5);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} sock_orphan($p0);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, $sub.i8(0, 4));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i9 := $or.i8($i8, 3);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i9);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(1280, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p10);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 944} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p11, $p12, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(1280, 1)), $mul.ref(0, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    call {:si_unique_call 945} {:cexpr "state"} boogie_si_record_i32($i20);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 7);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p0);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} spin_unlock($p24);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1696)), $mul.ref(1584, 1)), $mul.ref(0, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} __wake_up($p26, 1, 0, $0.ref);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $p58 := skb_dequeue($p57);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} sock_put($p0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i72 := $M.20;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i73 == 1;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} unix_gc();
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i71 == 1;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} path_put($p2);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb16:
    assume $i60 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p61 := $p58;
    goto $bb19;

  $bb19:
    call $i62, $p63, $p64, $p65, $i66, $i67, $p61 := unix_release_sock_loop_$bb19($i20, $p57, $i62, $p63, $p64, $p65, $i66, $i67, $p61);
    goto $bb19_last;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i20, 10);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} kfree_skb($p61);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} $p65 := skb_dequeue($p57);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i67 == 1);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb24:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $p61 := $p65;
    goto $bb24_dummy;

  $bb21:
    assume $i62 == 1;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p61, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} unix_release_sock($p64, 1);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb1:
    assume $i31 == 1;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i35 == 1);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 5);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} sock_put($p29);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $0.ref);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p29);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} spin_lock($p41);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p29, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i44 := $and.i8($i43, $sub.i8(0, 4));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i45 := $or.i8($i44, 3);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i45);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i47 := skb_queue_empty($p46);
    call {:si_unique_call 950} {:cexpr "tmp"} boogie_si_record_i32($i47);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i48 == 1);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i1, 0);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p29);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} spin_unlock($p52);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p29, $mul.ref(0, 1272)), $mul.ref(1224, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    call {:si_unique_call 952} devirtbounce.2($p54, $p29);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} sk_wake_async($p29, 1, 131078);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p29, $mul.ref(0, 1272)), $mul.ref(952, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 104);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb9;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb4;

  $bb24_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4226;
}



const unix_remove_socket: ref;

axiom unix_remove_socket == $sub.ref(0, 341885);

procedure unix_remove_socket($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation unix_remove_socket($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} spin_lock(unix_table_lock);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} __unix_remove_socket($p0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} spin_unlock(unix_table_lock);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    return;
}



const sock_orphan: ref;

axiom sock_orphan == $sub.ref(0, 342917);

procedure sock_orphan($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sock_orphan($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(880, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} _raw_write_lock_bh($p1);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} sock_set_flag($p0, 0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} sk_set_socket($p0, $0.ref);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(480, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(880, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} _raw_write_unlock_bh($p3);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    return;
}



const skb_dequeue: ref;

axiom skb_dequeue == $sub.ref(0, 343949);

procedure skb_dequeue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_dequeue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p1 := external_alloc();
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const path_put: ref;

axiom path_put == $sub.ref(0, 344981);

procedure path_put($p0: ref);
  free requires assertsPassed;



implementation path_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    return;
}



const sock_set_flag: ref;

axiom sock_set_flag == $sub.ref(0, 346013);

procedure sock_set_flag($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation sock_set_flag($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} {:cexpr "sock_set_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(504, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} __set_bit($i2, $p3);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    return;
}



const __unix_remove_socket: ref;

axiom __unix_remove_socket == $sub.ref(0, 347045);

procedure __unix_remove_socket($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation __unix_remove_socket($p0: ref)
{
  var vslice_dummy_var_81: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_81 := sk_del_node_init($p0);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    return;
}



const sk_del_node_init: ref;

axiom sk_del_node_init == $sub.ref(0, 348077);

procedure sk_del_node_init($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation sk_del_node_init($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i20: i1;
  var vslice_dummy_var_82: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i1 := __sk_del_node_init($p0);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 974} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 975} {:cexpr "rc"} boogie_si_record_i8($i4);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i4);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $i8 := atomic_read($p7);
    call {:si_unique_call 977} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 978} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i10);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 980} {:cexpr "tmp___1"} boogie_si_record_i64($i14);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} vslice_dummy_var_82 := ldv__builtin_expect($i18, 0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} __sock_put($p0);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} warn_slowpath_null(.str.5, 574);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __sk_del_node_init: ref;

axiom __sk_del_node_init == $sub.ref(0, 349109);

procedure __sk_del_node_init($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation __sk_del_node_init($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i1 := sk_hashed($p0);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 985} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} __sk_del_node($p0);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} sk_node_init($p6);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 350141);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    return;
}



const __sock_put: ref;

axiom __sock_put == $sub.ref(0, 351173);

procedure __sock_put($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation __sock_put($p0: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(108, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} atomic_dec($p2);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 352205);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 990} devirtbounce(0, $p1, $p1);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    return;
}



const sk_hashed: ref;

axiom sk_hashed == $sub.ref(0, 353237);

procedure sk_hashed($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation sk_hashed($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i1 := sk_unhashed($p0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 992} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const __sk_del_node: ref;

axiom __sk_del_node == $sub.ref(0, 354269);

procedure __sk_del_node($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __sk_del_node($p0: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} __hlist_del($p3);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    return;
}



const sk_node_init: ref;

axiom sk_node_init == $sub.ref(0, 355301);

procedure sk_node_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation sk_node_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $0.ref);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    return;
}



const __hlist_del: ref;

axiom __hlist_del == $sub.ref(0, 356333);

procedure __hlist_del($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __hlist_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p4);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sk_unhashed: ref;

axiom sk_unhashed == $sub.ref(0, 357365);

procedure sk_unhashed($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation sk_unhashed($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i4 := hlist_unhashed($p3);
    call {:si_unique_call 995} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const hlist_unhashed: ref;

axiom hlist_unhashed == $sub.ref(0, 358397);

procedure hlist_unhashed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hlist_unhashed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const prepare_to_wait_exclusive: ref;

axiom prepare_to_wait_exclusive == $sub.ref(0, 359429);

procedure prepare_to_wait_exclusive($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait_exclusive($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} {:cexpr "prepare_to_wait_exclusive:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_len: ref;

axiom skb_queue_len == $sub.ref(0, 360461);

procedure skb_queue_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kern_path: ref;

axiom kern_path == $sub.ref(0, 361493);

procedure kern_path($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kern_path($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 997} {:cexpr "kern_path:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 998} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 999} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const inode_permission: ref;

axiom inode_permission == $sub.ref(0, 362525);

procedure inode_permission($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation inode_permission($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1000} {:cexpr "inode_permission:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1001} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1002} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const unix_find_socket_byinode: ref;

axiom unix_find_socket_byinode == $sub.ref(0, 363557);

procedure unix_find_socket_byinode($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation unix_find_socket_byinode($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p14: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} spin_lock(unix_table_lock);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1032)), $mul.ref(64, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.28, $p1);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 255);
    $p5 := $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref($i3, 8)), $mul.ref(0, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} spin_unlock(unix_table_lock);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $r := $p27;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p14 := $p11;
    goto $bb7;

  $bb7:
    call $p15, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $p26, $p29, $p30, $p31, $p32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p14 := unix_find_socket_byinode_loop_$bb7($p0, $p15, $p17, $p18, $i19, $i20, $p21, $p22, $i23, $i24, $i25, $p26, $p29, $p30, $p31, $p32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p14);
    goto $bb7_last;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 1696)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $p37 := $0.ref;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb19:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p37;
    goto $bb19_dummy;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p32);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref($sub.ref(0, 88), 1272));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p37 := $p36;
    goto $bb18;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 320)), $mul.ref(104, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i23, $i24);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p26 := $p14;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb11;

  $bb12:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} sock_hold($p26);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p27 := $p26;
    goto $bb14;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p6);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 88), 1272));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4415;
}



const touch_atime: ref;

axiom touch_atime == $sub.ref(0, 364589);

procedure touch_atime($p0: ref);
  free requires assertsPassed;



implementation touch_atime($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    return;
}



const unix_find_socket_byname: ref;

axiom unix_find_socket_byname == $sub.ref(0, 365621);

procedure unix_find_socket_byname($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation unix_find_socket_byname($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} {:cexpr "unix_find_socket_byname:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1007} {:cexpr "unix_find_socket_byname:arg:type"} boogie_si_record_i32($i3);
    call {:si_unique_call 1008} {:cexpr "unix_find_socket_byname:arg:hash"} boogie_si_record_i32($i4);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} spin_lock(unix_table_lock);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $p5 := __unix_find_socket_byname($p0, $p1, $i2, $i3, $i4);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} spin_unlock(unix_table_lock);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} sock_hold($p5);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __unix_find_socket_byname: ref;

axiom __unix_find_socket_byname == $sub.ref(0, 366653);

procedure __unix_find_socket_byname($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __unix_find_socket_byname($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: ref)
{
  var $i5: i32;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p17: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} {:cexpr "__unix_find_socket_byname:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1014} {:cexpr "__unix_find_socket_byname:arg:type"} boogie_si_record_i32($i3);
    call {:si_unique_call 1015} {:cexpr "__unix_find_socket_byname:arg:hash"} boogie_si_record_i32($i4);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i5 := $xor.i32($i4, $i3);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    $p8 := $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref($i6, 8)), $mul.ref(0, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $r := $p36;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p17 := $p14;
    goto $bb7;

  $bb7:
    call $p18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $i34, $p35, $p38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $p17 := __unix_find_socket_byname_loop_$bb7($p0, $p1, $i2, $p18, $p19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $i34, $p35, $p38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $p17);
    goto $bb7_last;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $p19 := sock_net($p17);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i20 := net_eq($p19, $p0);
    call {:si_unique_call 1018} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, $i2);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $p46 := $0.ref;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i48 == 1);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb23:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $p17 := $p46;
    goto $bb23_dummy;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p41);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref($sub.ref(0, 88), 1272));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p46 := $p45;
    goto $bb22;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p1);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i2);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i33 := memcmp($p30, $p31, $i32);
    call {:si_unique_call 1020} {:cexpr "tmp___2"} boogie_si_record_i32($i33);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p35 := $p17;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb15:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p36 := $p35;
    goto $bb17;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p9);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 88), 1272));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4483;
}



const net_eq: ref;

axiom net_eq == $sub.ref(0, 367685);

procedure net_eq($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation net_eq($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 368717);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const get_max_files: ref;

axiom get_max_files == $sub.ref(0, 369749);

procedure get_max_files() returns ($r: i64);
  free requires assertsPassed;



implementation get_max_files() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1021} $i0 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1022} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i0);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const sk_alloc: ref;

axiom sk_alloc == $sub.ref(0, 370781);

procedure sk_alloc($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sk_alloc($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} {:cexpr "sk_alloc:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1024} {:cexpr "sk_alloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $p4 := external_alloc();
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const sock_init_data: ref;

axiom sock_init_data == $sub.ref(0, 371813);

procedure sock_init_data($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sock_init_data($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 372845);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    return;
}



const unix_write_space: ref;

axiom unix_write_space == $sub.ref(0, 373877);

procedure unix_write_space($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation unix_write_space($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} rcu_read_lock();
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i1 := unix_writable($p0);
    call {:si_unique_call 1029} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} rcu_read_unlock();
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(480, 1));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i5 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1031} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i10 := wq_has_sleeper($p4);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 1036} {:cexpr "tmp___1"} boogie_si_record_i8($i11);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} sk_wake_async($p0, 2, 131074);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} __wake_up_sync_key($p13, 1, 1, $i2p.i64.ref(772));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(1);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i8 := rcu_read_lock_held();
    call {:si_unique_call 1033} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} lockdep_rcu_suspicious(.str.4, 390, .str.12);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;
}



const unix_sock_destructor: ref;

axiom unix_sock_destructor == $sub.ref(0, 374909);

procedure unix_sock_destructor($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr, $M.1;



implementation unix_sock_destructor($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var vslice_dummy_var_83: i64;
  var vslice_dummy_var_84: i64;
  var vslice_dummy_var_85: i64;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} skb_queue_purge($p2);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(600, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i4 := atomic_read($p3);
    call {:si_unique_call 1042} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 1043} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1045} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_83 := ldv__builtin_expect($i14, 0);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i16 := sk_unhashed($p0);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 1049} {:cexpr "tmp___1"} boogie_si_record_i8($i17);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 1051} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i19, 0);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_84 := ldv__builtin_expect($i27, 0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 1054} {:cexpr "__ret_warn_on___1"} boogie_si_record_i32($i33);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 1056} {:cexpr "tmp___4"} boogie_si_record_i64($i37);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i33, 0);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} vslice_dummy_var_85 := ldv__builtin_expect($i41, 0);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i43 := sock_flag($p0, 0);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    call {:si_unique_call 1060} {:cexpr "tmp___5"} boogie_si_record_i8($i44);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} atomic_long_dec(unix_nr_socks);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} local_bh_disable();
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $p55 := sock_net($p0);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} sock_prot_inuse_add($p55, $p58, $sub.i32(0, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} local_bh_enable();
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} unix_release_addr($p54);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} vslice_dummy_var_86 := printk.ref.ref(.str.16, $p0);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i45 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb15;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} warn_slowpath_null(.str.4, 428);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} warn_slowpath_null(.str.4, 427);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} warn_slowpath_null(.str.4, 426);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_long_set: ref;

axiom atomic_long_set == $sub.ref(0, 375941);

procedure atomic_long_set($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_long_set($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} {:cexpr "atomic_long_set:arg:i"} boogie_si_record_i64($i1);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} atomic64_set($p0, $i1);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 376973);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 378005);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    return;
}



const unix_sockets_unbound: ref;

axiom unix_sockets_unbound == $sub.ref(0, 379037);

procedure unix_sockets_unbound($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation unix_sockets_unbound($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    call {:si_unique_call 1070} {:cexpr "hash"} boogie_si_record_i64($i1);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i64($i1, 16);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i3 := $xor.i64($i2, $i1);
    call {:si_unique_call 1071} {:cexpr "hash"} boogie_si_record_i64($i3);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i64($i3, 8);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i5 := $xor.i64($i4, $i3);
    call {:si_unique_call 1072} {:cexpr "hash"} boogie_si_record_i64($i5);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 255);
    call {:si_unique_call 1073} {:cexpr "hash"} boogie_si_record_i64($i6);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 256);
    $p8 := $add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref($i7, 8));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const unix_insert_socket: ref;

axiom unix_insert_socket == $sub.ref(0, 380069);

procedure unix_insert_socket($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0;



implementation unix_insert_socket($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} spin_lock(unix_table_lock);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} __unix_insert_socket($p0, $p1);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} spin_unlock(unix_table_lock);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    return;
}



const local_bh_disable: ref;

axiom local_bh_disable == $sub.ref(0, 381101);

procedure local_bh_disable();
  free requires assertsPassed;



implementation local_bh_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} __local_bh_disable_ip(0, 512);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    return;
}



const sock_prot_inuse_add: ref;

axiom sock_prot_inuse_add == $sub.ref(0, 382133);

procedure sock_prot_inuse_add($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation sock_prot_inuse_add($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} {:cexpr "sock_prot_inuse_add:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    return;
}



const local_bh_enable: ref;

axiom local_bh_enable == $sub.ref(0, 383165);

procedure local_bh_enable();
  free requires assertsPassed;



implementation local_bh_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} __local_bh_enable_ip(0, 512);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    return;
}



const __local_bh_enable_ip: ref;

axiom __local_bh_enable_ip == $sub.ref(0, 384197);

procedure __local_bh_enable_ip($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation __local_bh_enable_ip($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} {:cexpr "__local_bh_enable_ip:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1081} {:cexpr "__local_bh_enable_ip:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    return;
}



const __local_bh_disable_ip: ref;

axiom __local_bh_disable_ip == $sub.ref(0, 385229);

procedure __local_bh_disable_ip($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation __local_bh_disable_ip($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} {:cexpr "__local_bh_disable_ip:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1083} {:cexpr "__local_bh_disable_ip:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    return;
}



const __unix_insert_socket: ref;

axiom __unix_insert_socket == $sub.ref(0, 386261);

procedure __unix_insert_socket($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation __unix_insert_socket($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var vslice_dummy_var_87: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i2 := sk_unhashed($p1);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1085} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1087} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} vslice_dummy_var_87 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} sk_add_node($p1, $p0);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} warn_slowpath_null(.str.4, 305);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const sk_add_node: ref;

axiom sk_add_node == $sub.ref(0, 387293);

procedure sk_add_node($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1;



implementation sk_add_node($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} sock_hold($p0);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} __sk_add_node($p0, $p1);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    return;
}



const __sk_add_node: ref;

axiom __sk_add_node == $sub.ref(0, 388325);

procedure __sk_add_node($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __sk_add_node($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} hlist_add_head($p4, $p1);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    return;
}



const hlist_add_head: ref;

axiom hlist_add_head == $sub.ref(0, 389357);

procedure hlist_add_head($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_add_head($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p0);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p1);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p0);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic64_set: ref;

axiom atomic64_set == $sub.ref(0, 390389);

procedure atomic64_set($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic64_set($p0: ref, $i1: i64)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} {:cexpr "atomic64_set:arg:i"} boogie_si_record_i64($i1);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i1);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_purge: ref;

axiom skb_queue_purge == $sub.ref(0, 391421);

procedure skb_queue_purge($p0: ref);
  free requires assertsPassed;



implementation skb_queue_purge($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 392453);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1095} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1096} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const unix_release_addr: ref;

axiom unix_release_addr == $sub.ref(0, 393485);

procedure unix_release_addr($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation unix_release_addr($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 1098} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} kfree($p4);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 394517);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} free_($p0);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 395549);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1101} $free($p0);
    return;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 396581);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.1;



implementation rcu_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} __rcu_read_lock();
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1105} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i3 := rcu_is_watching();
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1107} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} lockdep_rcu_suspicious(.str.13, 871, .str.14);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 397613);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    return;
}



const wq_has_sleeper: ref;

axiom wq_has_sleeper == $sub.ref(0, 398645);

procedure wq_has_sleeper($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation wq_has_sleeper($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} devirtbounce.1(0);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $i4 := waitqueue_active($p3);
    call {:si_unique_call 1112} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb5;
}



const __wake_up_sync_key: ref;

axiom __wake_up_sync_key == $sub.ref(0, 399677);

procedure __wake_up_sync_key($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up_sync_key($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} {:cexpr "__wake_up_sync_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1114} {:cexpr "__wake_up_sync_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    return;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 400709);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.1;



implementation rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1116} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} __rcu_read_unlock();
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i3 := rcu_is_watching();
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1118} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} lockdep_rcu_suspicious(.str.13, 892, .str.15);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 401741);

procedure rcu_lock_release($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} lock_release($p0, 1, 0);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_unlock: ref;

axiom __rcu_read_unlock == $sub.ref(0, 402773);

procedure __rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.1;



implementation __rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} devirtbounce.1(0);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} __preempt_count_sub(1);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 403805);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 1128} devirtbounce.15(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 1127} devirtbounce(0, __preempt_count, __preempt_count);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 1126} devirtbounce(0, __preempt_count, __preempt_count);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 404837);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1130} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    return;
}



const waitqueue_active: ref;

axiom waitqueue_active == $sub.ref(0, 405869);

procedure waitqueue_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation waitqueue_active($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i2 := list_empty($p1);
    call {:si_unique_call 1132} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 406901);

procedure __rcu_read_lock();
  free requires assertsPassed;
  modifies $M.1;



implementation __rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __preempt_count_add(1);
    call {:si_unique_call 1134} devirtbounce.1(0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 407933);

procedure rcu_lock_acquire($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_acquire($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} lock_acquire($p0, 0, 0, 2, 0, $0.ref, 0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 408965);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1137} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1138} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1139} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1140} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 409997);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 1144} devirtbounce.15(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 1143} devirtbounce(0, __preempt_count, __preempt_count);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 1142} devirtbounce(0, __preempt_count, __preempt_count);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 411029);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1146} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} ldv_check_alloc_flags($i1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 412061);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 413093);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const csum_partial: ref;

axiom csum_partial == $sub.ref(0, 414125);

procedure csum_partial($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation csum_partial($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1149} {:cexpr "csum_partial:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1150} {:cexpr "csum_partial:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1151} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1152} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const unix_hash_fold: ref;

axiom unix_hash_fold == $sub.ref(0, 415157);

procedure unix_hash_fold($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation unix_hash_fold($i0: i32) returns ($r: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} {:cexpr "unix_hash_fold:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $i1 := csum_fold($i0);
    call {:si_unique_call 1155} {:cexpr "tmp"} boogie_si_record_i16($i1);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    call {:si_unique_call 1156} {:cexpr "hash"} boogie_si_record_i32($i2);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 8);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i4 := $xor.i32($i3, $i2);
    call {:si_unique_call 1157} {:cexpr "hash"} boogie_si_record_i32($i4);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 255);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const _cond_resched: ref;

axiom _cond_resched == $sub.ref(0, 416189);

procedure _cond_resched() returns ($r: i32);
  free requires assertsPassed;



implementation _cond_resched() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1158} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1159} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const csum_fold: ref;

axiom csum_fold == $sub.ref(0, 417221);

procedure csum_fold($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_fold($i0: i32) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} {:cexpr "csum_fold:arg:sum"} boogie_si_record_i32($i0);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i1 := $shl.i32($i0, 16);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i0, $sub.i32(0, 65536));
    call {:si_unique_call 1161} $i3 := devirtbounce.16(0, $i1, $i2);
    call {:si_unique_call 1162} {:cexpr "sum"} boogie_si_record_i32($i3);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i4 := $xor.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 16);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 418253);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 419285);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1165} __VERIFIER_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 420317);

procedure strlen($p0: ref) returns ($r: i64);



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 421349);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var vslice_dummy_var_88: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1167} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} ldv_check_alloc_flags($i1);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} vslice_dummy_var_88 := ldv_kmalloc_12($i0, $i1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const SOCK_INODE: ref;

axiom SOCK_INODE == $sub.ref(0, 422381);

procedure SOCK_INODE($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation SOCK_INODE($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1080)), $mul.ref(48, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const current_umask: ref;

axiom current_umask == $sub.ref(0, 423413);

procedure current_umask() returns ($r: i32);
  free requires assertsPassed;



implementation current_umask() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1170} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1171} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const unix_mknod: ref;

axiom unix_mknod == $sub.ref(0, 424445);

procedure unix_mknod($p0: ref, $i1: i16, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation unix_mknod($p0: ref, $i1: i16, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1173} {:cexpr "unix_mknod:arg:mode"} boogie_si_record_i16($i1);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $p4 := kern_path_create($sub.i32(0, 100), $p0, $p3, 0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i6 := PTR_ERR($p5);
    call {:si_unique_call 1176} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    call {:si_unique_call 1177} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i9 := IS_ERR($p8);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1179} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i1);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i15 := security_path_mknod($p3, $p4, $i14, 0);
    call {:si_unique_call 1181} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i15;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} done_path_create($p3, $p4);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i12 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.30, $p17);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 320)), $mul.ref(104, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.31, $p19);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i1);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i23 := vfs_mknod($p20, $p4, $i22, 0);
    call {:si_unique_call 1183} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $i23;
    goto $bb10;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.32, $p25);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p27 := mntget($p26);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p27);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p29 := dget($p4);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p29);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i12 := $i7;
    goto $bb3;
}



const kern_path_create: ref;

axiom kern_path_create == $sub.ref(0, 425477);

procedure kern_path_create($i0: i32, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kern_path_create($i0: i32, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} {:cexpr "kern_path_create:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1188} {:cexpr "kern_path_create:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p4 := external_alloc();
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 426509);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 427541);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1191} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const security_path_mknod: ref;

axiom security_path_mknod == $sub.ref(0, 428573);

procedure security_path_mknod($p0: ref, $p1: ref, $i2: i16, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation security_path_mknod($p0: ref, $p1: ref, $i2: i16, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1192} {:cexpr "security_path_mknod:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 1193} {:cexpr "security_path_mknod:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1194} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1195} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vfs_mknod: ref;

axiom vfs_mknod == $sub.ref(0, 429605);

procedure vfs_mknod($p0: ref, $p1: ref, $i2: i16, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vfs_mknod($p0: ref, $p1: ref, $i2: i16, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1196} {:cexpr "vfs_mknod:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 1197} {:cexpr "vfs_mknod:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1198} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1199} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const mntget: ref;

axiom mntget == $sub.ref(0, 430637);

procedure mntget($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation mntget($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p1 := external_alloc();
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dget: ref;

axiom dget == $sub.ref(0, 431669);

procedure dget($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dget($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(144, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} lockref_get($p3);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const done_path_create: ref;

axiom done_path_create == $sub.ref(0, 432701);

procedure done_path_create($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation done_path_create($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    return;
}



const lockref_get: ref;

axiom lockref_get == $sub.ref(0, 433733);

procedure lockref_get($p0: ref);
  free requires assertsPassed;



implementation lockref_get($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kmalloc_12: ref;

axiom ldv_kmalloc_12 == $sub.ref(0, 434765);

procedure ldv_kmalloc_12($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_kmalloc_12($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} {:cexpr "ldv_kmalloc_12:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1203} {:cexpr "ldv_kmalloc_12:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 435797);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1206} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $p2 := ldv_malloc($i0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 436829);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1208} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1209} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1210} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1211} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $p4 := malloc($i0);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1213} __VERIFIER_assume($i7);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 437861);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1214} $r := $malloc($i0);
    return;
}



const unix_dgram_connect: ref;

axiom unix_dgram_connect == $sub.ref(0, 438893);

procedure unix_dgram_connect($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.6, $M.1, $CurrAddr, $M.20, assertsPassed;



implementation unix_dgram_connect($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p40: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i73: i32;
  var $i72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1217} {:cexpr "unix_dgram_connect:arg:alen"} boogie_si_record_i32($i2);
    call {:si_unique_call 1218} {:cexpr "unix_dgram_connect:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $p8 := sock_net($p7);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} unix_state_double_lock($p7, $0.ref);
    assume {:verifier.code 0} true;
    $p56 := $0.ref;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p7);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i61 == 1);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p7);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $p56);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} unix_state_double_unlock($p7, $p56);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $r := $i72;
    return;

  $bb34:
    assume $i61 == 1;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p7);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p7);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p56);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} unix_state_double_unlock($p7, $p56);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p56);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p64);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i67, $i68);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} sock_put($p64);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i69 == 1;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} unix_dgram_disconnected($p7, $p64);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $i14 := unix_mkname($p9, $i2, $p4);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i14);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p5);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p5);
    call {:si_unique_call 1222} {:cexpr "alen"} boogie_si_record_i32($i17);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} $i19 := constant_test_bit(3, $p18);
    call {:si_unique_call 1224} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i31 := $sext.i16.i32($i30);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.5, $p4);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p33 := unix_find_other($p8, $p9, $i17, $i31, $i32, $p5);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i35 == 1);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p36 := $p33;
    goto $bb19;

  $bb19:
    call $p36, $i37, $i38, $i39, $i41, $i42, $i43, $p44, $i45, $i46, $p40 := unix_dgram_connect_loop_$bb19($p4, $p5, $p7, $p8, $p9, $i17, $p29, $p36, $i37, $i38, $i39, $i41, $i42, $i43, $p44, $i45, $i46, $p40);
    goto $bb19_last;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} unix_state_double_lock($p7, $p36);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i37 := sock_flag($p36, 0);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 1229} {:cexpr "tmp___1"} boogie_si_record_i8($i38);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p40 := $p36;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $sub.i32(0, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $i47 := unix_may_send($p7, $p40);
    call {:si_unique_call 1234} {:cexpr "tmp___2"} boogie_si_record_i32($i47);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p40, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i53 := security_unix_may_send($p50, $p52);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i53);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.6, $p5);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p56 := $p40;
    goto $bb33;

  $bb30:
    assume $i55 == 1;
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} unix_state_double_unlock($p7, $p40);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} sock_put($p40);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.6, $p5);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i72 := $i73;
    goto $bb40;

  $bb26:
    assume $i48 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} unix_state_double_unlock($p7, $p36);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} sock_put($p36);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p29);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i42 := $sext.i16.i32($i41);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.5, $p4);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $p44 := unix_find_other($p8, $p9, $i17, $i42, $i43, $p5);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $p36 := $p44;
    goto $bb24_dummy;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb17;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p7);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb9;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i26 := unix_autobind($p0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i26);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p5);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;
}



const sock_no_accept: ref;

axiom sock_no_accept == $sub.ref(0, 439925);

procedure sock_no_accept($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sock_no_accept($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1242} {:cexpr "sock_no_accept:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1243} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const unix_dgram_poll: ref;

axiom unix_dgram_poll == $sub.ref(0, 440957);

procedure unix_dgram_poll($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation unix_dgram_poll($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i14: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i32;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i85: i32;
  var $i60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p5 := sk_sleep($p4);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} sock_poll_wait($p0, $p5, $p2);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(952, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(776, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i16 := skb_queue_empty($p15);
    call {:si_unique_call 1251} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i14 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i26 := $and.i8($i25, 3);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 1);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i14;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p4);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(712, 1));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 3);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i31;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i40 := skb_queue_empty($p39);
    call {:si_unique_call 1258} {:cexpr "tmp___2"} boogie_si_record_i32($i40);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i38;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 5);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i43;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i62 := poll_requested_events($p2);
    call {:si_unique_call 1262} {:cexpr "tmp___3"} boogie_si_record_i64($i62);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 772);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i65 := unix_writable($p4);
    call {:si_unique_call 1264} {:cexpr "tmp___4"} boogie_si_record_i32($i65);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $p66 := unix_peer_get($p4);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i82 := $i65;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i83 == 1);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} set_bit(0, $p88);
    assume {:verifier.code 0} true;
    $i85 := $i61;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i60 := $i85;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $r := $i60;
    return;

  $bb38:
    assume $i83 == 1;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i84 := $or.i32($i61, 772);
    call {:si_unique_call 1270} {:cexpr "mask"} boogie_si_record_i32($i84);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb40;

  $bb29:
    assume $i68 == 1;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p66);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p4);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i72, $i73);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i81 := $i65;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} sock_put($p66);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb37;

  $bb31:
    assume $i74 == 1;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p66);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 1696)), $mul.ref(1584, 1)), $mul.ref(0, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} sock_poll_wait($p0, $p77, $p2);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i78 := unix_recvq_full($p66);
    call {:si_unique_call 1268} {:cexpr "tmp___5"} boogie_si_record_i32($i78);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $i65;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb36;

  $bb33:
    assume $i79 == 1;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i80 := 0;
    goto $bb35;

  $bb26:
    assume $i64 == 1;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i60 := $i61;
    goto $bb23;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 7);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i43;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 2);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i61 := $i54;
    goto $bb25;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i60 := $i54;
    goto $bb23;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i43, 16);
    call {:si_unique_call 1260} {:cexpr "mask"} boogie_si_record_i32($i53);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb20;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i38, 65);
    call {:si_unique_call 1259} {:cexpr "mask"} boogie_si_record_i32($i42);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb15;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i31, 16);
    call {:si_unique_call 1256} {:cexpr "mask"} boogie_si_record_i32($i37);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb12;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i14, 8257);
    call {:si_unique_call 1255} {:cexpr "mask"} boogie_si_record_i32($i30);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb9;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i18 := sock_flag($p4, 29);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 1253} {:cexpr "tmp___0"} boogie_si_record_i8($i19);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i21 := (if $i20 == 1 then 10 else 8);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 0);
    call {:si_unique_call 1254} {:cexpr "mask"} boogie_si_record_i32($i22);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i9 := sock_flag($p4, 29);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1248} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i12 := (if $i11 == 1 then 10 else 8);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 0);
    call {:si_unique_call 1249} {:cexpr "mask"} boogie_si_record_i32($i13);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const sock_no_listen: ref;

axiom sock_no_listen == $sub.ref(0, 441989);

procedure sock_no_listen($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation sock_no_listen($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1272} {:cexpr "sock_no_listen:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1273} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1274} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const unix_dgram_sendmsg: ref;

axiom unix_dgram_sendmsg == $sub.ref(0, 443021);

procedure unix_dgram_sendmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.6, $M.5, $M.24, $M.1, $CurrAddr, $M.20, assertsPassed;



implementation unix_dgram_sendmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i64;
  var $i61: i1;
  var $i62: i1;
  var $i63: i64;
  var $i64: i1;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i64;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $i115: i16;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i133: i1;
  var $i134: i8;
  var $i135: i1;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i1;
  var $p136: ref;
  var $p155: ref;
  var $i156: i8;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $i163: i16;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $i178: i64;
  var $i179: i1;
  var $i181: i32;
  var $i182: i1;
  var $i184: i1;
  var $p185: ref;
  var $i186: i64;
  var $i187: i32;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $p183: ref;
  var $p180: ref;
  var $p192: ref;
  var $i193: i1;
  var $i194: i8;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i8;
  var $i200: i32;
  var $i201: i1;
  var $i202: i8;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i32;
  var $p132: ref;
  var $p212: ref;
  var $p213: ref;
  var $p84: ref;
  var $p31: ref;
  var $i214: i64;
  var $i215: i1;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $i26: i32;
  var vslice_dummy_var_89: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p6 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 1278} {:cexpr "unix_dgram_sendmsg:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p7 := kiocb_to_siocb($p0);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $p10 := sock_net($p9);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.8, $p15);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} wait_for_unix_gc();
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.8, $p20);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i22 := scm_send($p1, $p2, $p21, 0);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i22);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p4);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 95));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 107));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p44 := unix_peer_get($p9);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p41, $p42, $i43 := $0.ref, $p44, 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i48 := constant_test_bit(3, $p47);
    call {:si_unique_call 1287} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 90));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p9, $mul.ref(0, 1272)), $mul.ref(608, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, $sub.i32(0, 32));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i61 := $ult.i64($i60, $i3);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i64($i3, 16064);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i71 := $sub.i64($i3, $i70);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i69);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 64);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p76 := sock_alloc_send_pskb($p9, $i71, $i72, $i75, $p4, 3);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.8, $p79);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $i81 := unix_scm_to_skb($p80, $p76, 1);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i81);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.6, $p4);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, 0);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.6, $p4);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, 1);
    call {:si_unique_call 1295} {:cexpr "max_level"} boogie_si_record_i32($i86);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.8, $p87);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} unix_get_secdata($p88, $p76);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i64.i32($i3);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32($i89, $i69);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} vslice_dummy_var_89 := skb_put($p76, $i90);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p76, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i69);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i64.i32($i3);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p76, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i64.i32($i3);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $i98 := skb_copy_datagram_from_iovec($p76, 0, $p96, 0, $i97);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i98);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.6, $p4);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 64);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $i105 := sock_sndtimeo($p9, $i104);
    call {:si_unique_call 1300} {:cexpr "timeo"} boogie_si_record_i64($i105);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p106, $i107 := $p42, $i105;
    goto $bb49;

  $bb49:
    call $p106, $i107, $p108, $i109, $i110, $i111, $i112, $p113, $p114, $i115, $i116, $i117, $p118, $i119, $i120, $p121, $p122, $i123, $i124, $p125, $p127, $p128, $i129, $i130, $p131, $i133, $i134, $i135, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $p149, $p150, $p151, $p152, $i153, $i154, $p136, $p155, $i156, $i157, $i158, $i159, $i160, $p161, $p162, $i163, $i164, $i165, $p166, $p167, $p168, $p169, $i170, $i171, $i172, $p173, $p174, $p175, $p176, $i177, $i178, $i179, $i181, $i182, $i184, $p185, $i186, $i187, $p188, $i189, $i190, $p191, $p183, $p180 := unix_dgram_sendmsg_loop_$bb49($p4, $p5, $p9, $p10, $p41, $i43, $p76, $p106, $i107, $p108, $i109, $i110, $i111, $i112, $p113, $p114, $i115, $i116, $i117, $p118, $i119, $i120, $p121, $p122, $i123, $i124, $p125, $p127, $p128, $i129, $i130, $p131, $i133, $i134, $i135, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $p149, $p150, $p151, $p152, $i153, $i154, $p136, $p155, $i156, $i157, $i158, $i159, $i160, $p161, $p162, $i163, $i164, $i165, $p166, $p167, $p168, $p169, $i170, $i171, $i172, $p173, $p174, $p175, $p176, $i177, $i178, $i179, $i181, $i182, $i184, $p185, $i186, $i187, $p188, $i189, $i190, $p191, $p183, $p180);
    goto $bb49_last;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p108 := $p106;
    goto $bb50;

  $bb50:
    call $p108, $i109, $i110, $i111, $i112, $p113, $p114, $i115, $i116, $i117, $p118, $i119, $i120, $p121, $p122, $i123, $i124, $p125, $p127, $p128, $i129, $i130, $p131, $i133, $i134, $i135, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $p149, $p150, $p151, $p152, $i153, $i154, $p136 := unix_dgram_sendmsg_loop_$bb50($p4, $p5, $p9, $p10, $p41, $i43, $p76, $p108, $i109, $i110, $i111, $i112, $p113, $p114, $i115, $i116, $i117, $p118, $i119, $i120, $p121, $p122, $i123, $i124, $p125, $p127, $p128, $i129, $i130, $p131, $i133, $i134, $i135, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $p149, $p150, $p151, $p152, $i153, $i154, $p136);
    goto $bb50_last;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i109, 0);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $p122 := $p108;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $i123 := sk_filter($p122, $p76);
    call {:si_unique_call 1303} {:cexpr "tmp___2"} boogie_si_record_i32($i123);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p125 := $p122;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p122);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} spin_lock($p128);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 1));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $i129 := unix_may_send($p9, $p122);
    call {:si_unique_call 1306} {:cexpr "tmp___3"} boogie_si_record_i32($i129);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 0);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p131 := $p122;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i133 := sock_flag($p122, 0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i134 := $zext.i1.i8($i133);
    call {:si_unique_call 1309} {:cexpr "tmp___4"} boogie_si_record_i8($i134);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i8.i1($i134);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p136 := $p122;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 32));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p136, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i157 := $and.i8($i156, 3);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 1);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p161 := $p136;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p9, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i163 := $load.i16($M.0, $p162);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i164 := $zext.i16.i32($i163);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 5);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p136);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p9);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i179 := $ne.i64($i177, $i178);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p180 := $p136;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p192 := $p180;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i193 := sock_flag($p192, 11);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i194 := $zext.i1.i8($i193);
    call {:si_unique_call 1327} {:cexpr "tmp___8"} boogie_si_record_i8($i194);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i8.i1($i194);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} maybe_add_creds($p76, $p1, $p192);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p192, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} skb_queue_tail($p196, $p76);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p192);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p197, $mul.ref(0, 1696)), $mul.ref(1568, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.0, $p198);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i199);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i201 := $slt.i32($i200, $i86);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p192);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p205, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} spin_unlock($p206);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p192, $mul.ref(0, 1272)), $mul.ref(1232, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    call {:si_unique_call 1332} devirtbounce.2($p208, $p192);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} sock_put($p192);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.8, $p209);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} scm_destroy($p210);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i64.i32($i3);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i26 := $i211;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb100:
    assume $i201 == 1;
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i8($i86);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p192);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p203, $mul.ref(0, 1696)), $mul.ref(1568, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p204, $i202);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i195 == 1;
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} __net_timestamp($p76);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb85:
    assume $i179 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i181 := unix_recvq_full($p136);
    call {:si_unique_call 1319} {:cexpr "tmp___7"} boogie_si_record_i32($i181);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i181, 0);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p183 := $p136;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p192 := $p183;
    goto $bb96;

  $bb87:
    assume $i182 == 1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i184 := $eq.i64($i107, 0);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p185 := $p136;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i186 := unix_wait_for_peer($p136, $i107);
    call {:si_unique_call 1321} {:cexpr "timeo"} boogie_si_record_i64($i186);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i187 := sock_intr_errno($i186);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i187);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $p188 := get_current();
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i189 := signal_pending($p188);
    call {:si_unique_call 1325} {:cexpr "tmp___6"} boogie_si_record_i32($i189);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 0);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p191 := $p136;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p106, $i107 := $p136, $i186;
    goto $bb94_dummy;

  $bb92:
    assume $i190 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p84 := $p191;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} kfree_skb($p76);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p31 := $p84;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i214 := $p2i.ref.i64($p31);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i215 := $ne.i64($i214, 0);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.8, $p216);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} scm_destroy($p217);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.6, $p4);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i26 := $i218;
    goto $bb6;

  $bb103:
    assume $i215 == 1;
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} sock_put($p31);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb89:
    assume $i184 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 11));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p132 := $p185;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p132);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} spin_unlock($p213);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p84 := $p132;
    goto $bb44;

  $bb79:
    assume $i165 == 1;
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p9, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p136, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i170 := security_unix_may_send($p167, $p169);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i170);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.6, $p4);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p173 := $p136;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume $i172 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p132 := $p173;
    goto $bb65;

  $bb76:
    assume $i160 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p132 := $p161;
    goto $bb65;

  $bb67:
    assume $i135 == 1;
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p122);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} spin_unlock($p138);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} sock_put($p122);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, 0);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p9);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} spin_lock($p140);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p9);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p122);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i146 := $eq.i64($i144, $i145);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i146 == 1);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p9);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} spin_unlock($p152);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.6, $p4);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p108 := $0.ref;
    goto $bb74_dummy;

  $bb72:
    assume $i154 == 1;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p84 := $0.ref;
    goto $bb44;

  $bb69:
    assume $i146 == 1;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p9);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p148, $0.ref);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p9);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} spin_unlock($p150);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} unix_dgram_disconnected($p9, $p122);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} sock_put($p122);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 111));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb63:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p132 := $p131;
    goto $bb65;

  $bb60:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i64.i32($i3);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i126);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p84 := $p125;
    goto $bb44;

  $bb51:
    assume $i110 == 1;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $sub.i32(0, 104));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p41);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i111, 0);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p113 := $p108;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p9, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.0, $p114);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.5, $p5);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $p118 := unix_find_other($p10, $p41, $i43, $i116, $i117, $p4);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i120 := $eq.i64($i119, 0);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p121 := $p118;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p122 := $p118;
    goto $bb59;

  $bb56:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $p84 := $p121;
    goto $bb44;

  $bb53:
    assume $i112 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p84 := $p113;
    goto $bb44;

  $bb46:
    assume $i100 == 1;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p84 := $p42;
    goto $bb44;

  $bb42:
    assume $i83 == 1;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p84 := $p42;
    goto $bb44;

  $bb39:
    assume $i78 == 1;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p31 := $p42;
    goto $bb10;

  $bb33:
    assume $i62 == 1;
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i63 := $sub.i64($i3, 16064);
    call {:si_unique_call 1289} {:cexpr "__min1"} boogie_si_record_i64($i63);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i64 := $ult.i64($i63, 69632);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i64 == 1);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i65 := 69632;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    call {:si_unique_call 1290} {:cexpr "data_len"} boogie_si_record_i32($i66);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 4095);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, $sub.i32(0, 4096));
    call {:si_unique_call 1291} {:cexpr "data_len"} boogie_si_record_i32($i68);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb38;

  $bb35:
    assume $i64 == 1;
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i65 := $i63;
    goto $bb37;

  $bb30:
    assume $i61 == 1;
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $p31 := $p42;
    goto $bb10;

  $bb21:
    assume $i49 == 1;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p11, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb23;

  $bb24:
    assume $i53 == 1;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i54 := unix_autobind($p1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i54);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.6, $p4);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p31 := $p42;
    goto $bb10;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i46 == 1;
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p31 := $p44;
    goto $bb10;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $i37 := unix_mkname($p14, $i36, $p5);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i37);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p4);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.6, $p4);
    call {:si_unique_call 1285} {:cexpr "namelen"} boogie_si_record_i32($i40);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p41, $p42, $i43 := $p13, $0.ref, $i40;
    goto $bb17;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p31 := $0.ref;
    goto $bb10;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p31 := $0.ref;
    goto $bb10;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p4);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p19, $p6);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb74_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5455;

  $bb94_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5453;
}



const unix_dgram_recvmsg: ref;

axiom unix_dgram_recvmsg == $sub.ref(0, 444053);

procedure unix_dgram_recvmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.0, $M.8, $M.13, $M.14, $M.15, $M.1, $M.20, $M.16, $M.17, $CurrAddr;



implementation unix_dgram_recvmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i65: i64;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i1;
  var $i84: i8;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i144: i32;
  var $i143: i32;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1341} {:cexpr "unix_dgram_recvmsg:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 1342} {:cexpr "unix_dgram_recvmsg:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $p9 := kiocb_to_siocb($p0);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i4, 64);
    call {:si_unique_call 1344} {:cexpr "noblock"} boogie_si_record_i32($i13);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p6, $sub.i32(0, 95));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i4, 1);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p12, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i17 := mutex_lock_interruptible_nested($p16, 0);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p6, $i17);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.33, $p6);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1347} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $i26 := sk_peek_offset($p11, $i4);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p8, $i26);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $p27 := __skb_recv_datagram($p11, $i4, $p7, $p8, $p6);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 1696)), $mul.ref(1584, 1)), $mul.ref(0, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} __wake_up_sync_key($p47, 1, 1, $i2p.i64.ref(772));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.34, $p8);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i55, $i56);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i59 := $ult.i64($i58, $i3);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i59 == 1);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.34, $p8);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i67, $i68);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i71 := $ugt.i64($i70, $i3);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i65 := $i3;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.34, $p8);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i64.i32($i65);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i80 := skb_copy_datagram_iovec($p27, $i76, $p78, $i79);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p6, $i80);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.33, $p6);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i83 := sock_flag($p11, 11);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i8($i83);
    call {:si_unique_call 1359} {:cexpr "tmp___1"} boogie_si_record_i8($i84);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i84);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.8, $p86);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.8, $p92);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    $p106 := $add.ref($add.ref($add.ref($p102, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} scm_set_cred($p93, $p97, $i105, $i107);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.8, $p108);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} unix_set_secdata($p109, $p27);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i4, 2);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 0);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i111 == 1);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i64.i32($i65);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} sk_peek_offset_fwd($p11, $i122);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i4, 32);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i138 == 1);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i64.i32($i65);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i143 := $i144;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p6, $i143);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.8, $p145);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} scm_recv($p1, $p2, $p146, $i4);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} skb_free_datagram($p11, $p27);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p12, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} mutex_unlock($p147);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.33, $p6);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $r := $i148;
    return;

  $bb48:
    assume $i138 == 1;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.34, $p8);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i142 := $sub.i32($i140, $i141);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i143 := $i142;
    goto $bb50;

  $bb45:
    assume $i128 == 1;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p133 := scm_fp_dup($p132);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.8, $p134);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p136, $p133);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume $i111 == 1;
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} sk_peek_offset_bwd($p11, $i121);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i117 == 1;
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.8, $p118);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} unix_detach_fds($p119, $p27);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb36:
    assume $i89 == 1;
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p9, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p90, $p5);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p5);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 1361} cmdloc_dummy_var_49 := $memset.i8(cmdloc_dummy_var_48, $p91, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i85 == 1;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} __sock_recv_timestamp($p2, $p11, $p27);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume $i82 == 1;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i71 == 1;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 32);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i59 == 1;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.34, $p8);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32($i61, $i62);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    call {:si_unique_call 1355} {:cexpr "size"} boogie_si_record_i64($i64);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb25;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} unix_copy_addr($p2, $p53);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p11);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} spin_lock($p31);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 5);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p11);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} spin_unlock($p45);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.33, $p6);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, $sub.i32(0, 11));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb12;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p11, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i40 := $and.i8($i39, 3);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 1);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb12;

  $bb15:
    assume $i43 == 1;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p6, 0);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i13, 0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then $sub.i32(0, 11) else $sub.i32(0, 512));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p6, $i25);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __skb_recv_datagram: ref;

axiom __skb_recv_datagram == $sub.ref(0, 445085);

procedure __skb_recv_datagram($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __skb_recv_datagram($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} {:cexpr "__skb_recv_datagram:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $p5 := external_alloc();
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __sock_recv_timestamp: ref;

axiom __sock_recv_timestamp == $sub.ref(0, 446117);

procedure __sock_recv_timestamp($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __sock_recv_timestamp($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    return;
}



const unix_set_secdata: ref;

axiom unix_set_secdata == $sub.ref(0, 447149);

procedure unix_set_secdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation unix_set_secdata($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    return;
}



const unix_get_secdata: ref;

axiom unix_get_secdata == $sub.ref(0, 448181);

procedure unix_get_secdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation unix_get_secdata($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64(4, 63);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 1372} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p12, $p14, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 1371} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p6, $p8, 4, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sk_filter: ref;

axiom sk_filter == $sub.ref(0, 449213);

procedure sk_filter($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sk_filter($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1373} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1374} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const unix_may_send: ref;

axiom unix_may_send == $sub.ref(0, 450245);

procedure unix_may_send($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unix_may_send($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $i8 := unix_our_peer($p0, $p1);
    call {:si_unique_call 1376} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const unix_dgram_disconnected: ref;

axiom unix_dgram_disconnected == $sub.ref(0, 451277);

procedure unix_dgram_disconnected($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $CurrAddr, $M.1;



implementation unix_dgram_disconnected($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $i3 := skb_queue_empty($p2);
    call {:si_unique_call 1378} {:cexpr "tmp___1"} boogie_si_record_i32($i3);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} skb_queue_purge($p5);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1696)), $mul.ref(1584, 1)), $mul.ref(0, 1));
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} __wake_up($p8, 1, 0, $0.ref);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i9 := sock_flag($p1, 0);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1382} {:cexpr "tmp"} boogie_si_record_i8($i10);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i17, $i18);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb8;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 1272)), $mul.ref(952, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 104);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 1272)), $mul.ref(1248, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    call {:si_unique_call 1383} devirtbounce.2($p22, $p1);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;
}



const security_unix_may_send: ref;

axiom security_unix_may_send == $sub.ref(0, 452309);

procedure security_unix_may_send($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation security_unix_may_send($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1384} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1385} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __net_timestamp: ref;

axiom __net_timestamp == $sub.ref(0, 453341);

procedure __net_timestamp($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __net_timestamp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(16, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $i4 := ktime_get_real();
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i4);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 1388} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p6, $p7, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    return;
}



const ktime_get_real: ref;

axiom ktime_get_real == $sub.ref(0, 454373);

procedure ktime_get_real() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ktime_get_real() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $p1 := external_alloc();
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 1} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1391} __VERIFIER_assume($i4);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 1392} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const unix_our_peer: ref;

axiom unix_our_peer == $sub.ref(0, 455405);

procedure unix_our_peer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unix_our_peer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i5, $i6);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const poll_requested_events: ref;

axiom poll_requested_events == $sub.ref(0, 456437);

procedure poll_requested_events($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation poll_requested_events($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const unix_state_double_lock: ref;

axiom unix_state_double_lock == $sub.ref(0, 457469);

procedure unix_state_double_lock($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation unix_state_double_lock($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1394} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i15 := $ult.i64($i13, $i14);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} spin_lock($p19);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_spin_lock();
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} spin_lock($p17);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} ldv_spin_lock();
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} spin_lock($p12);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const unix_state_double_unlock: ref;

axiom unix_state_double_unlock == $sub.ref(0, 458501);

procedure unix_state_double_unlock($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation unix_state_double_unlock($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1401} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} spin_unlock($p14);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} spin_unlock($p16);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} spin_unlock($p12);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const unix_seqpacket_sendmsg: ref;

axiom unix_seqpacket_sendmsg == $sub.ref(0, 459533);

procedure unix_seqpacket_sendmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.6, $M.5, $M.24, $M.1, $CurrAddr, $M.20, assertsPassed;



implementation unix_seqpacket_sendmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} {:cexpr "unix_seqpacket_sendmsg:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} $i6 := sock_error($p5);
    call {:si_unique_call 1407} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 1);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} $i18 := unix_dgram_sendmsg($p0, $p1, $p2, $i3);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 1409} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i8 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 107);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const unix_seqpacket_recvmsg: ref;

axiom unix_seqpacket_recvmsg == $sub.ref(0, 460565);

procedure unix_seqpacket_recvmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.0, $M.8, $M.13, $M.14, $M.15, $M.1, $M.20, $M.16, $M.17, $CurrAddr;



implementation unix_seqpacket_recvmsg($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} {:cexpr "unix_seqpacket_recvmsg:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 1411} {:cexpr "unix_seqpacket_recvmsg:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i13 := unix_dgram_recvmsg($p0, $p1, $p2, $i3, $i4);
    call {:si_unique_call 1413} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 107);
    goto $bb3;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 461597);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1414} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1415} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1416} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1417} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 462629);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1418} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1419} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1420} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const unix_seq_open: ref;

axiom unix_seq_open == $sub.ref(0, 463661);

procedure unix_seq_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unix_seq_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $i2 := seq_open_net($p0, $p1, unix_seq_ops, 8);
    call {:si_unique_call 1422} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_release_net: ref;

axiom seq_release_net == $sub.ref(0, 464693);

procedure seq_release_net($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_release_net($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1423} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1424} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_open_net: ref;

axiom seq_open_net == $sub.ref(0, 465725);

procedure seq_open_net($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_open_net($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1425} {:cexpr "seq_open_net:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1426} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1427} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const unix_net_init: ref;

axiom unix_net_init == $sub.ref(0, 466757);

procedure unix_net_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation unix_net_init($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(648, 1)), $mul.ref(0, 1));
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 10);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i3 := unix_sysctl_register($p0);
    call {:si_unique_call 1429} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(144, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $p8 := proc_create(.str.17, 0, $p7, unix_seq_fops);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} unix_sysctl_unregister($p0);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const unix_net_exit: ref;

axiom unix_net_exit == $sub.ref(0, 467789);

procedure unix_net_exit($p0: ref);
  free requires assertsPassed;



implementation unix_net_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} unix_sysctl_unregister($p0);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(144, 1));
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} remove_proc_entry(.str.17, $p2);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    return;
}



const unix_sysctl_unregister: ref;

axiom unix_sysctl_unregister == $sub.ref(0, 468821);

procedure unix_sysctl_unregister($p0: ref);
  free requires assertsPassed;



implementation unix_sysctl_unregister($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(648, 1)), $mul.ref(8, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(648, 1)), $mul.ref(8, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} unregister_net_sysctl_table($p8);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p5);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} kfree($p9);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    return;
}



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 469853);

procedure remove_proc_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_proc_entry($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    return;
}



const unregister_net_sysctl_table: ref;

axiom unregister_net_sysctl_table == $sub.ref(0, 470885);

procedure unregister_net_sysctl_table($p0: ref);
  free requires assertsPassed;



implementation unregister_net_sysctl_table($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    return;
}



const unix_sysctl_register: ref;

axiom unix_sysctl_register == $sub.ref(0, 471917);

procedure unix_sysctl_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation unix_sysctl_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $p1 := kmemdup(unix_table, 128, 208);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(128, 1));
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, $p2i.ref.i64(init_user_ns));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(648, 1)), $mul.ref(0, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p11);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $p14 := register_net_sysctl($p0, .str.2, $p2);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(648, 1)), $mul.ref(8, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p14);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6384)), $mul.ref(648, 1)), $mul.ref(8, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} kfree($p23);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb12;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const proc_create: ref;

axiom proc_create == $sub.ref(0, 472949);

procedure proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} {:cexpr "proc_create:arg:mode"} boogie_si_record_i16($i1);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $p6 := proc_create_data($p0, $i5, $p2, $p3, $0.ref);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 473981);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} {:cexpr "proc_create_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $p5 := external_alloc();
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 475013);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} {:cexpr "kmemdup:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1444} {:cexpr "kmemdup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $p3 := external_alloc();
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const register_net_sysctl: ref;

axiom register_net_sysctl == $sub.ref(0, 476045);

procedure register_net_sysctl($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation register_net_sysctl($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $p3 := external_alloc();
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const unix_create: ref;

axiom unix_create == $sub.ref(0, 477077);

procedure unix_create($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1;



implementation unix_create($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i1;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} {:cexpr "unix_create:arg:protocol"} boogie_si_record_i32($i2);
    call {:si_unique_call 1448} {:cexpr "unix_create:arg:kern"} boogie_si_record_i32($i3);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i2, 0);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 1);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i10 := $sext.i16.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 94);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, unix_seqpacket_ops);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $p21 := unix_create1($p0, $p1);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i24 := (if $i23 == 1 then 0 else $sub.i32(0, 12));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i6 := $i24;
    goto $bb6;

  $bb11:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb15;

  $bb16:
    assume $i14 == 1;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, 2);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, unix_dgram_ops);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb9:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb20;

  $bb18:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb21:
    assume $i16 == 1;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, unix_stream_ops);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 1);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 93);
    goto $bb6;
}



const proc_dointvec: ref;

axiom proc_dointvec == $sub.ref(0, 478109);

procedure proc_dointvec($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 479141);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1450} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1451} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1452} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1453} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $p4 := calloc(1, $i0);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1455} __VERIFIER_assume($i7);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_initialize_pernet_operations_1: ref;

axiom ldv_initialize_pernet_operations_1 == $sub.ref(0, 480173);

procedure ldv_initialize_pernet_operations_1();
  free requires assertsPassed;
  modifies $M.35, $M.0, $CurrAddr;



implementation ldv_initialize_pernet_operations_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $p0 := ldv_zalloc(7168);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $M.35 := $p0;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_3: ref;

axiom ldv_file_operations_3 == $sub.ref(0, 481205);

procedure ldv_file_operations_3();
  free requires assertsPassed;
  modifies $M.36, $M.37, $M.0, $CurrAddr;



implementation ldv_file_operations_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $p0 := ldv_zalloc(1032);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $M.36 := $p0;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $p2 := ldv_zalloc(512);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $M.37 := $p2;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_proto_ops_7: ref;

axiom ldv_initialize_proto_ops_7 == $sub.ref(0, 482237);

procedure ldv_initialize_proto_ops_7();
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.0, $CurrAddr;



implementation ldv_initialize_proto_ops_7()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $p0 := ldv_zalloc(512);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $M.38 := $p0;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $p2 := ldv_zalloc(56);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $M.39 := $p2;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $p4 := ldv_zalloc(88);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $M.40 := $p4;
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $p6 := ldv_zalloc(48);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $M.41 := $p6;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $p8 := ldv_zalloc(16);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $M.42 := $p8;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $p10 := ldv_zalloc(48);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $M.43 := $p10;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_proto_ops_6: ref;

axiom ldv_initialize_proto_ops_6 == $sub.ref(0, 483269);

procedure ldv_initialize_proto_ops_6();
  free requires assertsPassed;
  modifies $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.0, $CurrAddr;



implementation ldv_initialize_proto_ops_6()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p0 := ldv_zalloc(512);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $M.44 := $p0;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $p2 := ldv_zalloc(56);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.45 := $p2;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $p4 := ldv_zalloc(88);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $M.46 := $p4;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $p6 := ldv_zalloc(48);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $M.47 := $p6;
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p8 := ldv_zalloc(16);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $M.48 := $p8;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $p10 := ldv_zalloc(48);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.49 := $p10;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_proto_ops_5: ref;

axiom ldv_initialize_proto_ops_5 == $sub.ref(0, 484301);

procedure ldv_initialize_proto_ops_5();
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.0, $CurrAddr;



implementation ldv_initialize_proto_ops_5()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p0 := ldv_zalloc(512);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $p2 := ldv_zalloc(56);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.51 := $p2;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $p4 := ldv_zalloc(88);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $M.52 := $p4;
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p6 := ldv_zalloc(48);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $M.53 := $p6;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $p8 := ldv_zalloc(16);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $M.54 := $p8;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $p10 := ldv_zalloc(48);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $M.55 := $p10;
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    return;
}



const ldv_seq_operations_4: ref;

axiom ldv_seq_operations_4 == $sub.ref(0, 485333);

procedure ldv_seq_operations_4();
  free requires assertsPassed;
  modifies $M.56, $M.0, $CurrAddr;



implementation ldv_seq_operations_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $p0 := ldv_zalloc(264);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $M.56 := $p0;
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 486365);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.33, $M.34, $M.0, $M.8, $M.13, $M.14, $M.15, $M.6, $M.5, $M.66, $M.7, $M.1, $M.68, $M.70, $M.71, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.36, $M.37, $M.35, $M.56, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.75, $M.78, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.24, $M.130, $M.131, $M.136, $M.137, $M.20, $M.69, $M.67, $M.142, $CurrAddr, $M.16, $M.17, $M.9, $M.10, $M.11, $M.12, $M.23, $M.22, assertsPassed;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $p206: ref;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $p219: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $p224: ref;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i1;
  var $i230: i1;
  var $i231: i1;
  var $i232: i1;
  var $i233: i1;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $i241: i32;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $p246: ref;
  var $i248: i32;
  var $i249: i32;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $i258: i32;
  var $i259: i1;
  var $i260: i32;
  var $i261: i1;
  var $i262: i1;
  var $i263: i1;
  var $i264: i1;
  var $i265: i1;
  var $i266: i1;
  var $i267: i1;
  var $i268: i1;
  var $i269: i1;
  var $i270: i1;
  var $i271: i1;
  var $i272: i1;
  var $i273: i1;
  var $i274: i1;
  var $i275: i1;
  var $i276: i1;
  var $i277: i1;
  var $i278: i1;
  var $i279: i32;
  var $i280: i1;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i285: i32;
  var $i286: i1;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $i292: i32;
  var $i293: i1;
  var $p294: ref;
  var $p295: ref;
  var $i297: i32;
  var $i298: i1;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $i303: i32;
  var $i304: i1;
  var $p305: ref;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $p310: ref;
  var $i312: i32;
  var $i313: i1;
  var $p314: ref;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i320: i32;
  var $i321: i1;
  var $p322: ref;
  var $p323: ref;
  var $i325: i32;
  var $i326: i1;
  var $p327: ref;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $p332: ref;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $p337: ref;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $i343: i32;
  var $i344: i1;
  var $p345: ref;
  var $p346: ref;
  var $i348: i32;
  var $i349: i1;
  var $p350: ref;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $p355: ref;
  var $i357: i32;
  var $i358: i1;
  var $i359: i32;
  var $i360: i1;
  var $i361: i32;
  var $i362: i1;
  var $i364: i32;
  var $i365: i1;
  var $i366: i32;
  var $i367: i1;
  var $i368: i1;
  var $i369: i1;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $i374: i32;
  var $i375: i1;
  var $p376: ref;
  var $i377: i32;
  var $i378: i1;
  var $i379: i32;
  var $i380: i1;
  var $i381: i1;
  var $i382: i1;
  var $i383: i1;
  var $i384: i1;
  var $i385: i32;
  var $i386: i1;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $i391: i64;
  var $i392: i1;
  var $i393: i32;
  var $i394: i32;
  var $p395: ref;
  var $i396: i64;
  var $i397: i1;
  var $i398: i32;
  var $i399: i32;
  var $i400: i32;
  var $i401: i1;
  var $p402: ref;
  var $p403: ref;
  var $i404: i32;
  var $i405: i32;
  var $i406: i32;
  var $i407: i1;
  var $p408: ref;
  var $p409: ref;
  var $i410: i32;
  var $i411: i32;
  var $i412: i32;
  var $i413: i1;
  var $p414: ref;
  var $p415: ref;
  var $p416: ref;
  var $i418: i32;
  var $i419: i1;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $i425: i64;
  var $i426: i1;
  var $i427: i32;
  var $i428: i32;
  var $p429: ref;
  var $i430: i64;
  var $i431: i1;
  var $i432: i32;
  var $i433: i32;
  var $i434: i32;
  var $i435: i1;
  var $i436: i32;
  var $i437: i1;
  var $i438: i1;
  var $i439: i1;
  var $i440: i32;
  var $i441: i1;
  var $i442: i32;
  var $i443: i1;
  var $i444: i32;
  var $i445: i1;
  var $i446: i32;
  var $i447: i32;
  var $i448: i1;
  var $i449: i32;
  var $i450: i1;
  var $i451: i32;
  var $i452: i1;
  var $i453: i32;
  var $i454: i1;
  var $i455: i1;
  var $i456: i1;
  var $i457: i1;
  var $i458: i1;
  var $i459: i1;
  var $i460: i1;
  var $i461: i1;
  var $i462: i1;
  var $i463: i1;
  var $i464: i1;
  var $i465: i1;
  var $i466: i1;
  var $i467: i1;
  var $i468: i1;
  var $i469: i1;
  var $i470: i1;
  var $i471: i1;
  var $i472: i32;
  var $i473: i1;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $i478: i32;
  var $i479: i1;
  var $i481: i32;
  var $i482: i1;
  var $p483: ref;
  var $i485: i32;
  var $i486: i1;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $i491: i32;
  var $i492: i1;
  var $p493: ref;
  var $p494: ref;
  var $i496: i32;
  var $i497: i1;
  var $p498: ref;
  var $i500: i32;
  var $i501: i1;
  var $p502: ref;
  var $i504: i32;
  var $i505: i1;
  var $p506: ref;
  var $p507: ref;
  var $i509: i32;
  var $i510: i1;
  var $p511: ref;
  var $i513: i32;
  var $i514: i1;
  var $p515: ref;
  var $p516: ref;
  var $i518: i32;
  var $i519: i1;
  var $p520: ref;
  var $i522: i32;
  var $i523: i1;
  var $p524: ref;
  var $p525: ref;
  var $i527: i32;
  var $i528: i1;
  var $p529: ref;
  var $p530: ref;
  var $i532: i32;
  var $i533: i1;
  var $p534: ref;
  var $i536: i32;
  var $i537: i1;
  var $p538: ref;
  var $i540: i32;
  var $i541: i1;
  var $p542: ref;
  var $p543: ref;
  var $i545: i32;
  var $i546: i1;
  var $p547: ref;
  var $p548: ref;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i64;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i64;
  var vslice_dummy_var_109: i64;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i64;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i64;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;

  $bb0:
    call {:si_unique_call 1478} $initialize();
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1479} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1480} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1481} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1482} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1483} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1484} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1485} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1486} $i2 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1487} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i2);
    call {:si_unique_call 1488} {:cexpr "tmp___1"} boogie_si_record_i64($i2);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p3 := ldv_zalloc(1);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1490} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1491} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1492} {:cexpr "tmp___3"} boogie_si_record_i32($i4);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1493} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1494} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1495} {:cexpr "tmp___4"} boogie_si_record_i32($i5);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1496} $i6 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1497} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i6);
    call {:si_unique_call 1498} {:cexpr "tmp___5"} boogie_si_record_i64($i6);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1499} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 1500} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    call {:si_unique_call 1501} {:cexpr "tmp___6"} boogie_si_record_i32($i7);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1502} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1503} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 1504} {:cexpr "tmp___7"} boogie_si_record_i32($i8);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1505} $i9 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1506} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i9);
    call {:si_unique_call 1507} {:cexpr "tmp___8"} boogie_si_record_i32($i9);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p10 := ldv_zalloc(4);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1509} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 1510} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 1511} {:cexpr "tmp___10"} boogie_si_record_i32($i12);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1512} $i13 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1513} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i13);
    call {:si_unique_call 1514} {:cexpr "tmp___11"} boogie_si_record_i32($i13);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1515} $i14 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1516} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i14);
    call {:si_unique_call 1517} {:cexpr "tmp___12"} boogie_si_record_i64($i14);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1518} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 1519} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 1520} {:cexpr "tmp___13"} boogie_si_record_i32($i15);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $p16 := ldv_zalloc(16);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1522} $i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 1523} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i18);
    call {:si_unique_call 1524} {:cexpr "tmp___15"} boogie_si_record_i32($i18);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1525} $i19 := __VERIFIER_nondet_int();
    call {:si_unique_call 1526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i19);
    call {:si_unique_call 1527} {:cexpr "tmp___16"} boogie_si_record_i32($i19);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1528} $i20 := __VERIFIER_nondet_int();
    call {:si_unique_call 1529} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i20);
    call {:si_unique_call 1530} {:cexpr "tmp___17"} boogie_si_record_i32($i20);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1531} $i21 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1532} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i21);
    call {:si_unique_call 1533} {:cexpr "tmp___18"} boogie_si_record_i64($i21);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $p22 := ldv_zalloc(1);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} $p23 := ldv_zalloc(1272);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $p25 := ldv_zalloc(64);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $p27 := ldv_zalloc(4);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1538} $i29 := __VERIFIER_nondet_int();
    call {:si_unique_call 1539} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i29);
    call {:si_unique_call 1540} {:cexpr "tmp___23"} boogie_si_record_i32($i29);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1541} $i30 := __VERIFIER_nondet_int();
    call {:si_unique_call 1542} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i30);
    call {:si_unique_call 1543} {:cexpr "tmp___24"} boogie_si_record_i32($i30);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $p31 := ldv_zalloc(184);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1545} $i33 := __VERIFIER_nondet_int();
    call {:si_unique_call 1546} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i33);
    call {:si_unique_call 1547} {:cexpr "tmp___26"} boogie_si_record_i32($i33);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1548} $i34 := __VERIFIER_nondet_int();
    call {:si_unique_call 1549} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i34);
    call {:si_unique_call 1550} {:cexpr "tmp___27"} boogie_si_record_i32($i34);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1551} $i35 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1552} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i35);
    call {:si_unique_call 1553} {:cexpr "tmp___28"} boogie_si_record_i64($i35);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p36 := ldv_zalloc(8);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1555} $i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 1556} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i38);
    call {:si_unique_call 1557} {:cexpr "tmp___30"} boogie_si_record_i32($i38);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} $p39 := ldv_zalloc(1);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1559} $i40 := __VERIFIER_nondet_loff_t();
    call {:si_unique_call 1560} {:cexpr "smack:ext:__VERIFIER_nondet_loff_t"} boogie_si_record_i64($i40);
    call {:si_unique_call 1561} {:cexpr "tmp___32"} boogie_si_record_i64($i40);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1562} $i41 := __VERIFIER_nondet_int();
    call {:si_unique_call 1563} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i41);
    call {:si_unique_call 1564} {:cexpr "tmp___33"} boogie_si_record_i32($i41);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1565} $i42 := __VERIFIER_nondet_int();
    call {:si_unique_call 1566} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i42);
    call {:si_unique_call 1567} {:cexpr "tmp___34"} boogie_si_record_i32($i42);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1568} $i43 := __VERIFIER_nondet_int();
    call {:si_unique_call 1569} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i43);
    call {:si_unique_call 1570} {:cexpr "tmp___35"} boogie_si_record_i32($i43);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} $p44 := ldv_zalloc(1);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1572} $i45 := __VERIFIER_nondet_int();
    call {:si_unique_call 1573} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i45);
    call {:si_unique_call 1574} {:cexpr "tmp___37"} boogie_si_record_i32($i45);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1575} $i46 := __VERIFIER_nondet_int();
    call {:si_unique_call 1576} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i46);
    call {:si_unique_call 1577} {:cexpr "tmp___38"} boogie_si_record_i32($i46);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $p47 := ldv_zalloc(1272);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1579} $i49 := __VERIFIER_nondet_int();
    call {:si_unique_call 1580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i49);
    call {:si_unique_call 1581} {:cexpr "tmp___40"} boogie_si_record_i32($i49);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $p50 := ldv_zalloc(1);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1583} $i51 := __VERIFIER_nondet_int();
    call {:si_unique_call 1584} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i51);
    call {:si_unique_call 1585} {:cexpr "tmp___42"} boogie_si_record_i32($i51);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1586} $i52 := __VERIFIER_nondet_int();
    call {:si_unique_call 1587} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i52);
    call {:si_unique_call 1588} {:cexpr "tmp___43"} boogie_si_record_i32($i52);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1589} $i53 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1590} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i53);
    call {:si_unique_call 1591} {:cexpr "tmp___44"} boogie_si_record_i64($i53);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p54 := ldv_zalloc(64);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1593} $i56 := __VERIFIER_nondet_int();
    call {:si_unique_call 1594} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i56);
    call {:si_unique_call 1595} {:cexpr "tmp___46"} boogie_si_record_i32($i56);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1596} $i57 := __VERIFIER_nondet_int();
    call {:si_unique_call 1597} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i57);
    call {:si_unique_call 1598} {:cexpr "tmp___47"} boogie_si_record_i32($i57);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1599} $i58 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1600} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i58);
    call {:si_unique_call 1601} {:cexpr "tmp___48"} boogie_si_record_i64($i58);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1602} $i59 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1603} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i59);
    call {:si_unique_call 1604} {:cexpr "tmp___49"} boogie_si_record_i64($i59);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1605} $i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 1606} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i60);
    call {:si_unique_call 1607} {:cexpr "tmp___50"} boogie_si_record_i32($i60);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1608} $i61 := __VERIFIER_nondet_int();
    call {:si_unique_call 1609} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i61);
    call {:si_unique_call 1610} {:cexpr "tmp___51"} boogie_si_record_i32($i61);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $p62 := ldv_zalloc(4);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1612} $i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 1613} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i64);
    call {:si_unique_call 1614} {:cexpr "tmp___53"} boogie_si_record_i32($i64);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} $p65 := ldv_zalloc(16);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $p67 := ldv_zalloc(4);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1617} $i69 := __VERIFIER_nondet_int();
    call {:si_unique_call 1618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i69);
    call {:si_unique_call 1619} {:cexpr "tmp___56"} boogie_si_record_i32($i69);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $p70 := ldv_zalloc(184);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1621} $i72 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1622} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i72);
    call {:si_unique_call 1623} {:cexpr "tmp___58"} boogie_si_record_i64($i72);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1624} $i73 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1625} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i73);
    call {:si_unique_call 1626} {:cexpr "tmp___59"} boogie_si_record_i32($i73);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1627} $i74 := __VERIFIER_nondet_int();
    call {:si_unique_call 1628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i74);
    call {:si_unique_call 1629} {:cexpr "tmp___60"} boogie_si_record_i32($i74);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1630} $i75 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1631} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i75);
    call {:si_unique_call 1632} {:cexpr "tmp___61"} boogie_si_record_i32($i75);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1633} $i76 := __VERIFIER_nondet_int();
    call {:si_unique_call 1634} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i76);
    call {:si_unique_call 1635} {:cexpr "tmp___62"} boogie_si_record_i32($i76);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1636} $i77 := __VERIFIER_nondet_int();
    call {:si_unique_call 1637} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i77);
    call {:si_unique_call 1638} {:cexpr "tmp___63"} boogie_si_record_i32($i77);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p78 := ldv_zalloc(48);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $p80 := ldv_zalloc(7168);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $p82 := ldv_zalloc(4);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $p84 := ldv_zalloc(64);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1643} $i86 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1644} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i86);
    call {:si_unique_call 1645} {:cexpr "tmp___68"} boogie_si_record_i64($i86);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1646} $i87 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1647} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i87);
    call {:si_unique_call 1648} {:cexpr "tmp___69"} boogie_si_record_i32($i87);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $p88 := ldv_zalloc(16);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1650} $i90 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1651} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i90);
    call {:si_unique_call 1652} {:cexpr "tmp___71"} boogie_si_record_i32($i90);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1653} $i91 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1654} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i91);
    call {:si_unique_call 1655} {:cexpr "tmp___72"} boogie_si_record_i64($i91);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $p92 := ldv_zalloc(4);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p94 := ldv_zalloc(184);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1658} $i96 := __VERIFIER_nondet_int();
    call {:si_unique_call 1659} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i96);
    call {:si_unique_call 1660} {:cexpr "tmp___75"} boogie_si_record_i32($i96);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1661} $i97 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1662} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i97);
    call {:si_unique_call 1663} {:cexpr "tmp___76"} boogie_si_record_i64($i97);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1664} $i98 := __VERIFIER_nondet_int();
    call {:si_unique_call 1665} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i98);
    call {:si_unique_call 1666} {:cexpr "tmp___77"} boogie_si_record_i32($i98);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1667} $i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 1668} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i99);
    call {:si_unique_call 1669} {:cexpr "tmp___78"} boogie_si_record_i32($i99);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1670} $i100 := __VERIFIER_nondet_int();
    call {:si_unique_call 1671} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i100);
    call {:si_unique_call 1672} {:cexpr "tmp___79"} boogie_si_record_i32($i100);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1673} $i101 := __VERIFIER_nondet_int();
    call {:si_unique_call 1674} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i101);
    call {:si_unique_call 1675} {:cexpr "tmp___80"} boogie_si_record_i32($i101);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1676} $i102 := __VERIFIER_nondet_int();
    call {:si_unique_call 1677} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i102);
    call {:si_unique_call 1678} {:cexpr "tmp___81"} boogie_si_record_i32($i102);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $p103 := ldv_zalloc(1);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1680} $i104 := __VERIFIER_nondet_int();
    call {:si_unique_call 1681} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i104);
    call {:si_unique_call 1682} {:cexpr "tmp___83"} boogie_si_record_i32($i104);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1683} $i105 := __VERIFIER_nondet_int();
    call {:si_unique_call 1684} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i105);
    call {:si_unique_call 1685} {:cexpr "tmp___84"} boogie_si_record_i32($i105);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1686} $i106 := __VERIFIER_nondet_int();
    call {:si_unique_call 1687} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i106);
    call {:si_unique_call 1688} {:cexpr "tmp___85"} boogie_si_record_i32($i106);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1689} $i107 := __VERIFIER_nondet_int();
    call {:si_unique_call 1690} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i107);
    call {:si_unique_call 1691} {:cexpr "tmp___86"} boogie_si_record_i32($i107);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} $i108 := __VERIFIER_nondet_int();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i108);
    call {:si_unique_call 1694} {:cexpr "tmp___87"} boogie_si_record_i32($i108);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1695} $i109 := __VERIFIER_nondet_int();
    call {:si_unique_call 1696} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i109);
    call {:si_unique_call 1697} {:cexpr "tmp___88"} boogie_si_record_i32($i109);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $p110 := ldv_zalloc(1272);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1699} $i112 := __VERIFIER_nondet_int();
    call {:si_unique_call 1700} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i112);
    call {:si_unique_call 1701} {:cexpr "tmp___90"} boogie_si_record_i32($i112);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} $p113 := ldv_zalloc(1);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1703} $i114 := __VERIFIER_nondet_int();
    call {:si_unique_call 1704} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i114);
    call {:si_unique_call 1705} {:cexpr "tmp___92"} boogie_si_record_i32($i114);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1706} $i115 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 1707} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i115);
    call {:si_unique_call 1708} {:cexpr "tmp___93"} boogie_si_record_i64($i115);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1709} $i116 := __VERIFIER_nondet_int();
    call {:si_unique_call 1710} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i116);
    call {:si_unique_call 1711} {:cexpr "tmp___94"} boogie_si_record_i32($i116);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} ldv_initialize();
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $M.57 := 0;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 1714} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $M.59 := 0;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.60 := 0;
    call {:si_unique_call 1716} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $M.61 := 0;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $M.63 := 0;
    call {:si_unique_call 1719} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 1721} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $p150, $p151, $p152, $i154, $i155, $i157, $i158, $p159, $i161, $i162, $p163, $p164, $p165, $i167, $i168, $p169, $p170, $i172, $i173, $p174, $i176, $i177, $p178, $i180, $i181, $p182, $p183, $i185, $i186, $p187, $i189, $i190, $p191, $p192, $i194, $i195, $p196, $i198, $i199, $p200, $p201, $i203, $i204, $p205, $p206, $i208, $i209, $p210, $i212, $i213, $p214, $i216, $i217, $p218, $p219, $i221, $i222, $p223, $p224, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $p236, $p237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $p245, $p246, $i248, $i249, $i250, $i251, $p252, $i254, $i255, $p256, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $p281, $p282, $p283, $i285, $i286, $i288, $i289, $p290, $i292, $i293, $p294, $p295, $i297, $i298, $p299, $p300, $p301, $i303, $i304, $p305, $i307, $i308, $p309, $p310, $i312, $i313, $p314, $i316, $i317, $p318, $i320, $i321, $p322, $p323, $i325, $i326, $p327, $i329, $i330, $p331, $p332, $i334, $i335, $p336, $p337, $i339, $i340, $p341, $i343, $i344, $p345, $p346, $i348, $i349, $p350, $i352, $i353, $p354, $p355, $i357, $i358, $i359, $i360, $i361, $i362, $i364, $i365, $i366, $i367, $i368, $i369, $i370, $i371, $p372, $i374, $i375, $p376, $i377, $i378, $i379, $i380, $i381, $i382, $i383, $i384, $i385, $i386, $p387, $p388, $p389, $p390, $i391, $i392, $i393, $i394, $p395, $i396, $i397, $i398, $i399, $i400, $i401, $p402, $p403, $i404, $i405, $i406, $i407, $p408, $p409, $i410, $i411, $i412, $i413, $p414, $p415, $p416, $i418, $i419, $p420, $p421, $p422, $p423, $p424, $i425, $i426, $i427, $i428, $p429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $p474, $p475, $p476, $i478, $i479, $i481, $i482, $p483, $i485, $i486, $p487, $p488, $p489, $i491, $i492, $p493, $p494, $i496, $i497, $p498, $i500, $i501, $p502, $i504, $i505, $p506, $p507, $i509, $i510, $p511, $i513, $i514, $p515, $p516, $i518, $i519, $p520, $i522, $i523, $p524, $p525, $i527, $i528, $p529, $p530, $i532, $i533, $p534, $i536, $i537, $p538, $i540, $i541, $p542, $p543, $i545, $i546, $p547, $p548, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146 := main_loop_$bb1($i0, $i1, $i2, $p3, $i4, $i5, $i6, $i7, $i8, $i9, $p11, $i12, $i13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $p22, $p24, $p26, $p28, $i29, $i30, $p32, $i33, $i34, $i35, $p37, $i38, $p39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $p48, $i49, $p50, $i51, $i52, $i53, $p55, $i56, $i57, $i58, $i59, $i60, $i61, $p63, $i64, $p66, $p68, $i69, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $p79, $p81, $p83, $p85, $i86, $i87, $p89, $i90, $i91, $p93, $p95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $p111, $i112, $p113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $p150, $p151, $p152, $i154, $i155, $i157, $i158, $p159, $i161, $i162, $p163, $p164, $p165, $i167, $i168, $p169, $p170, $i172, $i173, $p174, $i176, $i177, $p178, $i180, $i181, $p182, $p183, $i185, $i186, $p187, $i189, $i190, $p191, $p192, $i194, $i195, $p196, $i198, $i199, $p200, $p201, $i203, $i204, $p205, $p206, $i208, $i209, $p210, $i212, $i213, $p214, $i216, $i217, $p218, $p219, $i221, $i222, $p223, $p224, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $p236, $p237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $p245, $p246, $i248, $i249, $i250, $i251, $p252, $i254, $i255, $p256, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $p281, $p282, $p283, $i285, $i286, $i288, $i289, $p290, $i292, $i293, $p294, $p295, $i297, $i298, $p299, $p300, $p301, $i303, $i304, $p305, $i307, $i308, $p309, $p310, $i312, $i313, $p314, $i316, $i317, $p318, $i320, $i321, $p322, $p323, $i325, $i326, $p327, $i329, $i330, $p331, $p332, $i334, $i335, $p336, $p337, $i339, $i340, $p341, $i343, $i344, $p345, $p346, $i348, $i349, $p350, $i352, $i353, $p354, $p355, $i357, $i358, $i359, $i360, $i361, $i362, $i364, $i365, $i366, $i367, $i368, $i369, $i370, $i371, $p372, $i374, $i375, $p376, $i377, $i378, $i379, $i380, $i381, $i382, $i383, $i384, $i385, $i386, $p387, $p388, $p389, $p390, $i391, $i392, $i393, $i394, $p395, $i396, $i397, $i398, $i399, $i400, $i401, $p402, $p403, $i404, $i405, $i406, $i407, $p408, $p409, $i410, $i411, $i412, $i413, $p414, $p415, $p416, $i418, $i419, $p420, $p421, $p422, $p423, $p424, $i425, $i426, $i427, $i428, $p429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $i463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $p474, $p475, $p476, $i478, $i479, $i481, $i482, $p483, $i485, $i486, $p487, $p488, $p489, $i491, $i492, $p493, $p494, $i496, $i497, $p498, $i500, $i501, $p502, $i504, $i505, $p506, $p507, $i509, $i510, $p511, $i513, $i514, $p515, $p516, $i518, $i519, $p520, $i522, $i523, $p524, $p525, $i527, $i528, $p529, $p530, $i532, $i533, $p534, $i536, $i537, $p538, $i540, $i541, $p542, $p543, $i545, $i546, $p547, $p548, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i117, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i117, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i117, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i117, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} ldv_stop();
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb117_dummy;

  $bb9:
    assume $i121 == 1;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i451 := $M.65;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i452 := $ne.i32($i451, 0);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb353:
    assume $i452 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1876} $i453 := __VERIFIER_nondet_int();
    call {:si_unique_call 1877} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i453);
    call {:si_unique_call 1878} {:cexpr "tmp___103"} boogie_si_record_i32($i453);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $i454 := $slt.i32($i453, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    $i455 := $slt.i32($i453, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    $i456 := $slt.i32($i453, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    $i457 := $slt.i32($i453, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    $i458 := $slt.i32($i453, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    $i459 := $eq.i32($i453, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    assume !($i459 == 1);
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} ldv_stop();
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb366:
    assume $i459 == 1;
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i545 := $M.65;
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i546 := $eq.i32($i545, 1);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  $bb443:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb442:
    assume $i546 == 1;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p547 := $M.53;
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p548 := $M.55;
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} vslice_dummy_var_146 := unix_socketpair($p547, $p548);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1912} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb364:
    assume $i458 == 1;
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i540 := $M.65;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i541 := $eq.i32($i540, 1);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb439:
    assume $i541 == 1;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p542 := $M.50;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p543 := $M.53;
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} vslice_dummy_var_145 := unix_dgram_poll($p542, $p543, $p89);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1910} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb362:
    assume $i457 == 1;
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i536 := $M.65;
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i537 := $eq.i32($i536, 1);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb436:
    assume $i537 == 1;
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $p538 := $M.53;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} vslice_dummy_var_144 := unix_listen($p538, $i107);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1908} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb360:
    assume $i456 == 1;
    assume {:verifier.code 0} true;
    $i460 := $slt.i32($i453, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i460 == 1);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i532 := $M.65;
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i533 := $eq.i32($i532, 1);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  $bb434:
    assume !($i533 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb433:
    assume $i533 == 1;
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p534 := $M.53;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} vslice_dummy_var_143 := unix_shutdown($p534, $i108);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1906} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb369:
    assume $i460 == 1;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i527 := $M.65;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i528 := $eq.i32($i527, 1);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb430, $bb431;

  $bb431:
    assume !($i528 == 1);
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb430:
    assume $i528 == 1;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p529 := $M.53;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $p530 := $M.54;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} vslice_dummy_var_142 := unix_getname($p529, $p530, $p93, $i104);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1904} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb358:
    assume $i455 == 1;
    assume {:verifier.code 0} true;
    $i461 := $slt.i32($i453, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    $i462 := $slt.i32($i453, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i462 == 1);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i522 := $M.65;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i523 := $eq.i32($i522, 1);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  $bb428:
    assume !($i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb427:
    assume $i523 == 1;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p524 := $M.53;
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p525 := $M.54;
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} vslice_dummy_var_141 := unix_stream_connect($p524, $p525, $i102, $i96);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1902} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    goto $bb429;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb373:
    assume $i462 == 1;
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i518 := $M.65;
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i519 := $eq.i32($i518, 1);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i519 == 1);
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb424:
    assume $i519 == 1;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $p520 := $M.53;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} vslice_dummy_var_140 := sock_no_getsockopt($p520, $i114, $i116, $p113, $p83);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1900} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb371:
    assume $i461 == 1;
    assume {:verifier.code 0} true;
    $i463 := $slt.i32($i453, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i463 == 1);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i513 := $M.65;
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i514 := $eq.i32($i513, 1);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb421:
    assume $i514 == 1;
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p515 := $M.53;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p516 := $M.55;
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} vslice_dummy_var_139 := unix_accept($p515, $p516, $i105);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1898} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb375:
    assume $i463 == 1;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i509 := $M.65;
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i510 := $eq.i32($i509, 1);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  $bb419:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb418:
    assume $i510 == 1;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p511 := $M.53;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} vslice_dummy_var_138 := unix_ioctl($p511, $i90, $i97);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1896} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb356:
    assume $i454 == 1;
    assume {:verifier.code 0} true;
    $i464 := $slt.i32($i453, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i464 == 1);
    assume {:verifier.code 0} true;
    $i465 := $slt.i32($i453, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    $i466 := $slt.i32($i453, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i466 == 1);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i504 := $M.65;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i505 := $eq.i32($i504, 1);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i505 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb415:
    assume $i505 == 1;
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p506 := $M.53;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $p507 := $M.54;
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} vslice_dummy_var_137 := unix_bind($p506, $p507, $i99);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1894} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    goto $bb417;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb381:
    assume $i466 == 1;
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i500 := $M.65;
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i501 := $eq.i32($i500, 1);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb412:
    assume $i501 == 1;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p502 := $M.53;
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} vslice_dummy_var_136 := unix_release($p502);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1892} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb379:
    assume $i465 == 1;
    assume {:verifier.code 0} true;
    $i467 := $slt.i32($i453, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i467 == 1);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i496 := $M.65;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i496, 1);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i497 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb409:
    assume $i497 == 1;
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p498 := $M.53;
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} vslice_dummy_var_135 := sock_no_sendpage($p498, $p85, $i98, $i115, $i101);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1890} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb383:
    assume $i467 == 1;
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i491 := $M.65;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i492 := $eq.i32($i491, 1);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  $bb407:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb406:
    assume $i492 == 1;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $p493 := $M.50;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p494 := $M.53;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} vslice_dummy_var_134 := sock_no_mmap($p493, $p494, $p95);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1888} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb377:
    assume $i464 == 1;
    assume {:verifier.code 0} true;
    $i468 := $slt.i32($i453, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i468 == 1);
    assume {:verifier.code 0} true;
    $i469 := $slt.i32($i453, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i469 == 1);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i485 := $M.65;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i485, 1);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb403:
    assume $i486 == 1;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p487 := $M.52;
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p488 := $M.53;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p489 := $M.51;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} vslice_dummy_var_133 := unix_seqpacket_sendmsg($p487, $p488, $p489, $i91);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1886} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    goto $bb405;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb387:
    assume $i469 == 1;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i481 := $M.65;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i481, 1);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb400:
    assume $i482 == 1;
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p483 := $M.53;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} vslice_dummy_var_132 := sock_no_setsockopt($p483, $i106, $i112, $p103, $i87);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1884} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb385:
    assume $i468 == 1;
    assume {:verifier.code 0} true;
    $i470 := $slt.i32($i453, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i470 == 1);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i478 := $M.65;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i478, 1);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb397:
    assume $i479 == 1;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} vslice_dummy_var_131 := unix_set_peek_off($p111, $i109);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1882} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb389:
    assume $i470 == 1;
    assume {:verifier.code 0} true;
    $i471 := $eq.i32($i453, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    assume !($i471 == 1);
    goto $bb368;

  $bb391:
    assume $i471 == 1;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i472 := $M.65;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i473 := $eq.i32($i472, 1);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb393:
    assume $i473 == 1;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $p474 := $M.52;
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p475 := $M.53;
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p476 := $M.51;
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} vslice_dummy_var_130 := unix_seqpacket_recvmsg($p474, $p475, $p476, $i86, $i100);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1880} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb7:
    assume $i120 == 1;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i434 := $M.64;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i435 := $ne.i32($i434, 0);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb323:
    assume $i435 == 1;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1852} $i436 := __VERIFIER_nondet_int();
    call {:si_unique_call 1853} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i436);
    call {:si_unique_call 1854} {:cexpr "tmp___102"} boogie_si_record_i32($i436);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    $i437 := $slt.i32($i436, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i436, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    assume !($i438 == 1);
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} ldv_stop();
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb328:
    assume $i438 == 1;
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i444 := $M.64;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i445 := $eq.i32($i444, 1);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb341:
    assume $i445 == 1;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} $i446 := af_unix_init();
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $M.71 := $i446;
    call {:si_unique_call 1859} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i446);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i447 := $M.71;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i447, 0);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $i449 := $M.71;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i450 := $ne.i32($i449, 0);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb346:
    assume $i450 == 1;
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1874} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} ldv_check_final_state();
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb343:
    assume $i448 == 1;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $M.64 := 3;
    call {:si_unique_call 1860} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} ldv_initialize_proto_ops_5();
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1864} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} ldv_initialize_proto_ops_7();
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1866} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} ldv_file_operations_3();
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1868} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} ldv_initialize_pernet_operations_1();
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1870} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} ldv_seq_operations_4();
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1872} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} ldv_initialize_proto_ops_6();
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb326:
    assume $i437 == 1;
    assume {:verifier.code 0} true;
    $i439 := $eq.i32($i436, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    assume !($i439 == 1);
    goto $bb330;

  $bb331:
    assume $i439 == 1;
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i440 := $M.64;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i440, 3);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    assume !($i441 == 1);
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb333:
    assume $i441 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i442 := $M.63;
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i442, 0);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    assume !($i443 == 1);
    goto $bb335;

  $bb336:
    assume $i443 == 1;
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} af_unix_exit();
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $M.64 := 2;
    call {:si_unique_call 1856} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb5:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i117, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i122 == 1);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i377 := $M.62;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i378 := $ne.i32($i377, 0);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb278:
    assume $i378 == 1;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1830} $i379 := __VERIFIER_nondet_int();
    call {:si_unique_call 1831} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i379);
    call {:si_unique_call 1832} {:cexpr "tmp___101"} boogie_si_record_i32($i379);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $i380 := $slt.i32($i379, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    $i381 := $slt.i32($i379, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i379, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    assume !($i382 == 1);
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} ldv_stop();
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb285:
    assume $i382 == 1;
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i418 := $M.62;
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i419 := $eq.i32($i418, 2);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb311:
    assume $i419 == 1;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p420 := $M.56;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p421 := $M.69;
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p422 := $M.67;
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} $p423 := unix_seq_next($p420, $p421, $p422);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $M.70 := $p423;
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p424 := $M.70;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i425 := $p2i.ref.i64($p424);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i426 := $eq.i64($i425, 0);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p429 := $M.70;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i430 := $p2i.ref.i64($p429);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i431 := $ne.i64($i430, 0);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i431 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb316:
    assume $i431 == 1;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i432 := $M.63;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i433 := $add.i32($i432, 1);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $M.63 := $i433;
    call {:si_unique_call 1850} {:cexpr "ref_cnt"} boogie_si_record_i32($i433);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb313:
    assume $i426 == 1;
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i427 := $M.63;
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i428 := $add.i32($i427, 1);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $M.63 := $i428;
    call {:si_unique_call 1848} {:cexpr "ref_cnt"} boogie_si_record_i32($i428);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb283:
    assume $i381 == 1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i412 := $M.62;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i412, 2);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb308:
    assume $i413 == 1;
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p414 := $M.56;
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p415 := $M.67;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p416 := $bitcast.ref.ref($p415);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} vslice_dummy_var_129 := unix_seq_show($p414, $p416);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb281:
    assume $i380 == 1;
    assume {:verifier.code 0} true;
    $i383 := $slt.i32($i379, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i383 == 1);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i400 := $M.62;
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i400, 3);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $i406 := $M.62;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i406, 2);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb305:
    assume $i407 == 1;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p408 := $M.56;
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p409 := $M.69;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} unix_seq_stop($p408, $p409);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1842} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i410 := $M.63;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i411 := $sub.i32($i410, 1);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $M.63 := $i411;
    call {:si_unique_call 1843} {:cexpr "ref_cnt"} boogie_si_record_i32($i411);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb302:
    assume $i401 == 1;
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p402 := $M.56;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p403 := $M.69;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} unix_seq_stop($p402, $p403);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i404 := $M.63;
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i405 := $sub.i32($i404, 1);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $M.63 := $i405;
    call {:si_unique_call 1840} {:cexpr "ref_cnt"} boogie_si_record_i32($i405);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb288:
    assume $i383 == 1;
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i379, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    assume !($i384 == 1);
    goto $bb287;

  $bb290:
    assume $i384 == 1;
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i385 := $M.62;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i385, 1);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb292:
    assume $i386 == 1;
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p387 := $M.56;
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $p388 := $M.67;
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $p389 := unix_seq_start($p387, $p388);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $M.68 := $p389;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p390 := $M.68;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i391 := $p2i.ref.i64($p390);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i392 := $ne.i64($i391, 0);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $p395 := $M.68;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i396 := $p2i.ref.i64($p395);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i397 := $eq.i64($i396, 0);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb297:
    assume $i397 == 1;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i398 := $M.63;
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i399 := $add.i32($i398, 1);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $M.63 := $i399;
    call {:si_unique_call 1837} {:cexpr "ref_cnt"} boogie_si_record_i32($i399);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb294:
    assume $i392 == 1;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1834} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i393 := $M.63;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i394 := $add.i32($i393, 1);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $M.63 := $i394;
    call {:si_unique_call 1835} {:cexpr "ref_cnt"} boogie_si_record_i32($i394);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb12:
    assume $i122 == 1;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i364 := $M.61;
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i364, 0);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb258:
    assume $i365 == 1;
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1822} $i366 := __VERIFIER_nondet_int();
    call {:si_unique_call 1823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i366);
    call {:si_unique_call 1824} {:cexpr "tmp___100"} boogie_si_record_i32($i366);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $i367 := $slt.i32($i366, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i366, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    assume !($i368 == 1);
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} ldv_stop();
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb263:
    assume $i368 == 1;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i374 := $M.61;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i375 := $eq.i32($i374, 1);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb272:
    assume $i375 == 1;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p376 := $M.35;
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} unix_net_exit($p376);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1828} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb261:
    assume $i367 == 1;
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i366, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    assume !($i369 == 1);
    goto $bb265;

  $bb266:
    assume $i369 == 1;
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i370 := $M.61;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 1);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb268:
    assume $i371 == 1;
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p372 := $M.35;
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} vslice_dummy_var_128 := unix_net_init($p372);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb3:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i117, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i117, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i124 == 1);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i357 := $M.60;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 0);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb246:
    assume $i358 == 1;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1816} $i359 := __VERIFIER_nondet_int();
    call {:si_unique_call 1817} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i359);
    call {:si_unique_call 1818} {:cexpr "tmp___99"} boogie_si_record_i32($i359);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} ldv_stop();
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb249:
    assume $i360 == 1;
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i361 := $M.60;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 1);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb251:
    assume $i362 == 1;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} vslice_dummy_var_127 := unix_create($p81, $p79, $i76, $i77);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb16:
    assume $i124 == 1;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i258 := $M.59;
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i259 := $ne.i32($i258, 0);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb151:
    assume $i259 == 1;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1778} $i260 := __VERIFIER_nondet_int();
    call {:si_unique_call 1779} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i260);
    call {:si_unique_call 1780} {:cexpr "tmp___98"} boogie_si_record_i32($i260);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i261 := $slt.i32($i260, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    $i262 := $slt.i32($i260, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    $i263 := $slt.i32($i260, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    $i264 := $slt.i32($i260, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    $i265 := $slt.i32($i260, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i260, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} ldv_stop();
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb164:
    assume $i266 == 1;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i352 := $M.59;
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 1);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb240:
    assume $i353 == 1;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p354 := $M.41;
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p355 := $M.43;
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} vslice_dummy_var_126 := unix_socketpair($p354, $p355);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb162:
    assume $i265 == 1;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i348 := $M.59;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i349 := $eq.i32($i348, 1);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb237:
    assume $i349 == 1;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p350 := $M.41;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} vslice_dummy_var_125 := unix_listen($p350, $i74);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb160:
    assume $i264 == 1;
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i343 := $M.59;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 1);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb234:
    assume $i344 == 1;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p345 := $M.38;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p346 := $M.41;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} vslice_dummy_var_124 := unix_poll($p345, $p346, $p66);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb158:
    assume $i263 == 1;
    assume {:verifier.code 0} true;
    $i267 := $slt.i32($i260, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i267 == 1);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i339 := $M.59;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 1);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb231:
    assume $i340 == 1;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $p341 := $M.41;
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} vslice_dummy_var_123 := unix_shutdown($p341, $i60);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb167:
    assume $i267 == 1;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i334 := $M.59;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i334, 1);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb228:
    assume $i335 == 1;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p336 := $M.41;
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p337 := $M.42;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} vslice_dummy_var_122 := unix_getname($p336, $p337, $p68, $i57);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb156:
    assume $i262 == 1;
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i260, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    $i269 := $slt.i32($i260, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i269 == 1);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i329 := $M.59;
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 1);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb225:
    assume $i330 == 1;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p331 := $M.41;
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $p332 := $M.42;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} vslice_dummy_var_121 := unix_stream_connect($p331, $p332, $i61, $i41);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb227;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb171:
    assume $i269 == 1;
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i325 := $M.59;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 1);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb222:
    assume $i326 == 1;
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p327 := $M.41;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} vslice_dummy_var_120 := sock_no_getsockopt($p327, $i45, $i46, $p44, $p63);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb169:
    assume $i268 == 1;
    assume {:verifier.code 0} true;
    $i270 := $slt.i32($i260, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i270 == 1);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i320 := $M.59;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i321 := $eq.i32($i320, 1);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb219:
    assume $i321 == 1;
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p322 := $M.41;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p323 := $M.43;
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} vslice_dummy_var_119 := unix_accept($p322, $p323, $i64);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb173:
    assume $i270 == 1;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i316 := $M.59;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 1);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb216:
    assume $i317 == 1;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p318 := $M.41;
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} vslice_dummy_var_118 := unix_ioctl($p318, $i75, $i53);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb154:
    assume $i261 == 1;
    assume {:verifier.code 0} true;
    $i271 := $slt.i32($i260, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    $i272 := $slt.i32($i260, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    $i273 := $slt.i32($i260, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i273 == 1);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i312 := $M.59;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i312, 1);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb213:
    assume $i313 == 1;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p314 := $M.41;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} vslice_dummy_var_117 := unix_release($p314);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1796} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb179:
    assume $i273 == 1;
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i307 := $M.59;
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 1);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb210:
    assume $i308 == 1;
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p309 := $M.41;
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $p310 := $M.42;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} vslice_dummy_var_116 := unix_bind($p309, $p310, $i69);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1794} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto $bb212;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb177:
    assume $i272 == 1;
    assume {:verifier.code 0} true;
    $i274 := $slt.i32($i260, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i274 == 1);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i303 := $M.59;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 1);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb207:
    assume $i304 == 1;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p305 := $M.41;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} vslice_dummy_var_115 := sock_no_setsockopt($p305, $i42, $i52, $p50, $i73);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1792} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb181:
    assume $i274 == 1;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i297 := $M.59;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, 1);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb204:
    assume $i298 == 1;
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p299 := $M.40;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p300 := $M.41;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p301 := $M.39;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} vslice_dummy_var_114 := unix_stream_sendmsg($p299, $p300, $p301, $i58);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb175:
    assume $i271 == 1;
    assume {:verifier.code 0} true;
    $i275 := $slt.i32($i260, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    $i276 := $slt.i32($i260, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i276 == 1);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i292 := $M.59;
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 1);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb201:
    assume $i293 == 1;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p294 := $M.38;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p295 := $M.41;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} vslice_dummy_var_113 := sock_no_mmap($p294, $p295, $p71);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1788} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb185:
    assume $i276 == 1;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i288 := $M.59;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 1);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb198:
    assume $i289 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p290 := $M.41;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} vslice_dummy_var_112 := sock_no_sendpage($p290, $p55, $i49, $i59, $i56);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb183:
    assume $i275 == 1;
    assume {:verifier.code 0} true;
    $i277 := $slt.i32($i260, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i277 == 1);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i285 := $M.59;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, 1);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb195:
    assume $i286 == 1;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} vslice_dummy_var_111 := unix_set_peek_off($p48, $i43);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1784} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb187:
    assume $i277 == 1;
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i260, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i278 == 1);
    goto $bb166;

  $bb189:
    assume $i278 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i279 := $M.59;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 1);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb191:
    assume $i280 == 1;
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p281 := $M.40;
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p282 := $M.41;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p283 := $M.39;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} vslice_dummy_var_110 := unix_stream_recvmsg($p281, $p282, $p283, $i72, $i51);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb14:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i117, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i125 == 1);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i226 := $M.58;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, 0);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb118:
    assume $i227 == 1;
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1763} $i228 := __VERIFIER_nondet_int();
    call {:si_unique_call 1764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i228);
    call {:si_unique_call 1765} {:cexpr "tmp___97"} boogie_si_record_i32($i228);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i229 := $slt.i32($i228, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    $i230 := $slt.i32($i228, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i228, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i231 == 1);
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} ldv_stop();
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb125:
    assume $i231 == 1;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i254 := $M.58;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 2);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb145:
    assume $i255 == 1;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p256 := $M.37;
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} vslice_dummy_var_109 := seq_lseek($p256, $i40, $i38);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1776} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb123:
    assume $i230 == 1;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i250 := $M.58;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 2);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb142:
    assume $i251 == 1;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p252 := $M.37;
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} vslice_dummy_var_108 := seq_read($p252, $p39, $i35, $p37);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1774} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb121:
    assume $i229 == 1;
    assume {:verifier.code 0} true;
    $i232 := $slt.i32($i228, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i232 == 1);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i243 := $M.58;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 2);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb139:
    assume $i244 == 1;
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p245 := $M.36;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p246 := $M.37;
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} vslice_dummy_var_107 := seq_release_net($p245, $p246);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i248 := $M.63;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i249 := $sub.i32($i248, 1);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $M.63 := $i249;
    call {:si_unique_call 1772} {:cexpr "ref_cnt"} boogie_si_record_i32($i249);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb128:
    assume $i232 == 1;
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i228, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i233 == 1);
    goto $bb127;

  $bb130:
    assume $i233 == 1;
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i234 := $M.58;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 1);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb132:
    assume $i235 == 1;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p236 := $M.36;
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p237 := $M.37;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $i238 := unix_seq_open($p236, $p237);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $M.66 := $i238;
    call {:si_unique_call 1767} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i238);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i239 := $M.66;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 0);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb134:
    assume $i240 == 1;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1768} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i241 := $M.63;
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i242 := $add.i32($i241, 1);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $M.63 := $i242;
    call {:si_unique_call 1769} {:cexpr "ref_cnt"} boogie_si_record_i32($i242);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb18:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i117, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb11;

  $bb20:
    assume $i126 == 1;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i127 := $M.57;
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb22:
    assume $i128 == 1;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1725} $i129 := __VERIFIER_nondet_int();
    call {:si_unique_call 1726} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i129);
    call {:si_unique_call 1727} {:cexpr "tmp___96"} boogie_si_record_i32($i129);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i129, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i129, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i129, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i129, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i129, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i129, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} ldv_stop();
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb35:
    assume $i135 == 1;
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i221 := $M.57;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 1);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb111:
    assume $i222 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $p223 := $M.47;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p224 := $M.49;
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} vslice_dummy_var_106 := unix_socketpair($p223, $p224);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb33:
    assume $i134 == 1;
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i216 := $M.57;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 1);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb108:
    assume $i217 == 1;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p218 := $M.44;
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p219 := $M.47;
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} vslice_dummy_var_105 := unix_dgram_poll($p218, $p219, $p17);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb31:
    assume $i133 == 1;
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i212 := $M.57;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb105:
    assume $i213 == 1;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p214 := $M.47;
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} vslice_dummy_var_104 := sock_no_listen($p214, $i8);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb29:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i129, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i136 == 1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i208 := $M.57;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 1);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb102:
    assume $i209 == 1;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p210 := $M.47;
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} vslice_dummy_var_103 := unix_shutdown($p210, $i34);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb38:
    assume $i136 == 1;
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i203 := $M.57;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 1);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb99:
    assume $i204 == 1;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $p205 := $M.47;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p206 := $M.48;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} vslice_dummy_var_102 := unix_getname($p205, $p206, $p28, $i5);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb27:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i129, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i129, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i138 == 1);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i198 := $M.57;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 1);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb96:
    assume $i199 == 1;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p200 := $M.47;
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p201 := $M.48;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} vslice_dummy_var_101 := unix_dgram_connect($p200, $p201, $i20, $i18);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1751} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i138 == 1;
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i194 := $M.57;
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb93:
    assume $i195 == 1;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p196 := $M.47;
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} vslice_dummy_var_100 := sock_no_getsockopt($p196, $i12, $i7, $p3, $p11);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb40:
    assume $i137 == 1;
    assume {:verifier.code 0} true;
    $i139 := $slt.i32($i129, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i139 == 1);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i189 := $M.57;
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 1);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb90:
    assume $i190 == 1;
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p191 := $M.47;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p192 := $M.49;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} vslice_dummy_var_99 := sock_no_accept($p191, $p192, $i1);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb44:
    assume $i139 == 1;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i185 := $M.57;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 1);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb87:
    assume $i186 == 1;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p187 := $M.47;
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} vslice_dummy_var_98 := unix_ioctl($p187, $i9, $i6);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb25:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i129, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i129, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i129, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i142 == 1);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i180 := $M.57;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 1);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb84:
    assume $i181 == 1;
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p182 := $M.47;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p183 := $M.48;
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} vslice_dummy_var_97 := unix_bind($p182, $p183, $i29);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    goto $bb86;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i142 == 1;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i176 := $M.57;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb81:
    assume $i177 == 1;
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p178 := $M.47;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} vslice_dummy_var_96 := unix_release($p178);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb48:
    assume $i141 == 1;
    assume {:verifier.code 0} true;
    $i143 := $slt.i32($i129, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i143 == 1);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i172 := $M.57;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 1);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb78:
    assume $i173 == 1;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p174 := $M.47;
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} vslice_dummy_var_95 := sock_no_sendpage($p174, $p26, $i19, $i21, $i0);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb52:
    assume $i143 == 1;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i167 := $M.57;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 1);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb75:
    assume $i168 == 1;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p169 := $M.44;
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p170 := $M.47;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} vslice_dummy_var_94 := sock_no_mmap($p169, $p170, $p32);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb46:
    assume $i140 == 1;
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i129, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i129, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i145 == 1);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i161 := $M.57;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 1);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb72:
    assume $i162 == 1;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p163 := $M.46;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p164 := $M.47;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p165 := $M.45;
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} vslice_dummy_var_93 := unix_dgram_sendmsg($p163, $p164, $p165, $i2);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i145 == 1;
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i157 := $M.57;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 1);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb69:
    assume $i158 == 1;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p159 := $M.47;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} vslice_dummy_var_92 := sock_no_setsockopt($p159, $i4, $i30, $p22, $i13);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb54:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i129, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i146 == 1);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i154 := $M.57;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 1);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66:
    assume $i155 == 1;
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} vslice_dummy_var_91 := unix_set_peek_off($p24, $i15);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb58:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i129, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb37;

  $bb60:
    assume $i147 == 1;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i148 := $M.57;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 1);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb62:
    assume $i149 == 1;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p150 := $M.46;
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p151 := $M.47;
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p152 := $M.45;
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} vslice_dummy_var_90 := unix_dgram_recvmsg($p150, $p151, $p152, $i14, $i33);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb117_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1722} $i117 := __VERIFIER_nondet_int();
    call {:si_unique_call 1723} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i117);
    call {:si_unique_call 1724} {:cexpr "tmp___95"} boogie_si_record_i32($i117);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 487397);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const __VERIFIER_nondet_loff_t: ref;

axiom __VERIFIER_nondet_loff_t == $sub.ref(0, 488429);

procedure __VERIFIER_nondet_loff_t() returns ($r: i64);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 489461);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 490493);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const af_unix_exit: ref;

axiom af_unix_exit == $sub.ref(0, 491525);

procedure af_unix_exit();
  free requires assertsPassed;



implementation af_unix_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} sock_unregister(1);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} proto_unregister(unix_proto);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} unregister_pernet_subsys(unix_net_ops);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    return;
}



const af_unix_init: ref;

axiom af_unix_init == $sub.ref(0, 492557);

procedure af_unix_init() returns ($r: i32);
  free requires assertsPassed;



implementation af_unix_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $i0 := proto_register(unix_proto, 1);
    call {:si_unique_call 1919} {:cexpr "rc"} boogie_si_record_i32($i0);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} vslice_dummy_var_148 := sock_register(unix_family_ops);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} vslice_dummy_var_149 := register_pernet_subsys(unix_net_ops);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} vslice_dummy_var_147 := printk.ref.ref(.str.20, .str.21);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 493589);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    return;
}



const proto_register: ref;

axiom proto_register == $sub.ref(0, 494621);

procedure proto_register($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation proto_register($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1923} {:cexpr "proto_register:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1924} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1925} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sock_register: ref;

axiom sock_register == $sub.ref(0, 495653);

procedure sock_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sock_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1926} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1927} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const register_pernet_subsys: ref;

axiom register_pernet_subsys == $sub.ref(0, 496685);

procedure register_pernet_subsys($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_pernet_subsys($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1928} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1929} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const sock_unregister: ref;

axiom sock_unregister == $sub.ref(0, 497717);

procedure sock_unregister($i0: i32);
  free requires assertsPassed;



implementation sock_unregister($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} {:cexpr "sock_unregister:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    return;
}



const proto_unregister: ref;

axiom proto_unregister == $sub.ref(0, 498749);

procedure proto_unregister($p0: ref);
  free requires assertsPassed;



implementation proto_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    return;
}



const unregister_pernet_subsys: ref;

axiom unregister_pernet_subsys == $sub.ref(0, 499781);

procedure unregister_pernet_subsys($p0: ref);
  free requires assertsPassed;



implementation unregister_pernet_subsys($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 500813);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1931} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 1} true;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 501845);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 502877);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 503909);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 504941);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 505973);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 507005);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 508037);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 509069);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 510101);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 511133);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 512165);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 513197);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 514229);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1932} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1933} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1934} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1935} __VERIFIER_assume($i4);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 515261);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 516293);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 517325);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 518357);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1936} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1937} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1938} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1939} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1940} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1941} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1942} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1943} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1944} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1945} __VERIFIER_assume($i7);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1946} __VERIFIER_assume($i11);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 519389);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 520421);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1947} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1948} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1949} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1950} __VERIFIER_assume($i4);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 521453);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 522485);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 523517);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 524549);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 525581);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1951} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1952} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1953} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1954} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1955} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1956} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1957} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1958} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1959} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1960} __VERIFIER_assume($i7);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1961} __VERIFIER_assume($i11);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 526613);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 527645);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 528677);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 529709);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 530741);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 531773);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 532805);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 533837);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 534869);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1962} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1963} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1964} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1965} __VERIFIER_assume($i10);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 535901);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1966} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1967} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1968} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 536933);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1969} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1970} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1971} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 537965);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1972} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1973} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 538997);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 540029);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1974} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1975} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 541061);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 542093);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 543125);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1976} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1977} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1978} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1979} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $p6 := malloc($i5);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    call {:si_unique_call 1981} cmdloc_dummy_var_63 := $memset.i8(cmdloc_dummy_var_62, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_63;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 544157);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 545189);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.0, $M.75, $M.78, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.24, $M.130, $M.131, $M.136, $M.137, $M.68, $M.71, $M.70, $M.66, $M.20, $M.43, $M.62, $M.49, $M.59, $M.61, $M.36, $M.69, $M.63, $M.48, $M.58, $M.67, $M.56, $M.46, $M.50, $M.35, $M.51, $M.41, $M.39, $M.45, $M.60, $M.44, $M.54, $M.37, $M.65, $M.64, $M.57, $M.40, $M.42, $M.52, $M.47, $M.53, $M.38, $M.55, $M.1, $M.142;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1982} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.0 := $store.ref($M.0, unix_socket_table, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(1, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(2, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(3, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(4, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(5, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(6, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(7, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(8, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(9, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(10, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(11, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(12, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(13, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(14, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(15, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(16, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(17, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(18, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(19, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(20, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(21, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(22, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(23, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(24, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(25, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(26, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(27, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(28, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(29, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(30, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(31, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(32, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(33, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(34, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(35, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(36, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(37, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(38, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(39, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(40, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(41, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(42, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(43, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(44, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(45, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(46, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(47, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(48, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(49, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(50, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(51, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(52, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(53, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(54, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(55, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(56, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(57, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(58, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(59, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(60, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(61, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(62, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(63, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(64, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(65, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(66, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(67, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(68, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(69, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(70, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(71, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(72, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(73, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(74, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(75, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(76, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(77, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(78, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(79, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(80, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(81, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(82, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(83, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(84, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(85, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(86, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(87, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(88, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(89, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(90, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(91, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(92, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(93, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(94, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(95, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(96, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(97, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(98, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(99, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(100, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(101, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(102, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(103, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(104, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(105, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(106, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(107, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(108, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(109, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(110, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(111, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(112, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(113, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(114, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(115, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(116, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(117, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(118, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(119, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(120, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(121, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(122, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(123, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(124, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(125, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(126, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(127, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(128, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(129, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(130, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(131, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(132, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(133, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(134, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(135, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(136, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(137, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(138, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(139, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(140, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(141, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(142, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(143, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(144, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(145, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(146, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(147, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(148, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(149, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(150, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(151, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(152, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(153, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(154, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(155, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(156, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(157, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(158, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(159, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(160, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(161, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(162, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(163, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(164, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(165, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(166, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(167, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(168, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(169, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(170, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(171, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(172, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(173, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(174, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(175, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(176, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(177, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(178, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(179, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(180, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(181, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(182, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(183, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(184, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(185, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(186, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(187, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(188, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(189, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(190, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(191, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(192, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(193, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(194, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(195, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(196, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(197, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(198, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(199, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(200, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(201, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(202, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(203, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(204, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(205, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(206, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(207, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(208, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(209, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(210, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(211, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(212, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(213, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(214, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(215, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(216, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(217, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(218, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(219, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(220, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(221, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(222, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(223, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(224, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(225, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(226, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(227, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(228, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(229, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(230, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(231, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(232, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(233, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(234, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(235, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(236, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(237, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(238, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(239, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(240, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(241, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(242, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(243, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(244, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(245, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(246, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(247, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(248, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(249, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(250, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(251, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(252, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(253, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(254, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(255, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(256, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(257, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(258, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(259, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(260, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(261, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(262, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(263, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(264, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(265, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(266, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(267, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(268, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(269, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(270, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(271, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(272, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(273, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(274, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(275, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(276, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(277, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(278, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(279, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(280, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(281, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(282, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(283, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(284, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(285, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(286, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(287, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(288, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(289, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(290, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(291, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(292, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(293, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(294, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(295, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(296, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(297, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(298, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(299, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(300, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(301, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(302, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(303, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(304, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(305, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(306, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(307, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(308, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(309, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(310, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(311, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(312, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(313, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(314, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(315, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(316, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(317, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(318, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(319, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(320, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(321, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(322, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(323, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(324, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(325, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(326, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(327, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(328, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(329, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(330, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(331, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(332, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(333, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(334, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(335, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(336, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(337, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(338, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(339, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(340, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(341, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(342, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(343, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(344, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(345, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(346, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(347, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(348, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(349, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(350, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(351, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(352, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(353, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(354, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(355, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(356, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(357, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(358, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(359, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(360, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(361, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(362, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(363, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(364, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(365, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(366, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(367, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(368, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(369, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(370, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(371, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(372, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(373, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(374, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(375, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(376, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(377, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(378, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(379, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(380, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(381, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(382, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(383, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(384, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(385, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(386, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(387, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(388, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(389, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(390, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(391, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(392, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(393, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(394, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(395, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(396, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(397, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(398, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(399, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(400, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(401, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(402, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(403, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(404, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(405, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(406, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(407, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(408, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(409, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(410, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(411, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(412, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(413, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(414, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(415, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(416, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(417, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(418, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(419, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(420, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(421, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(422, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(423, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(424, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(425, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(426, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(427, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(428, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(429, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(430, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(431, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(432, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(433, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(434, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(435, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(436, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(437, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(438, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(439, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(440, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(441, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(442, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(443, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(444, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(445, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(446, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(447, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(448, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(449, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(450, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(451, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(452, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(453, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(454, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(455, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(456, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(457, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(458, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(459, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(460, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(461, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(462, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(463, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(464, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(465, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(466, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(467, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(468, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(469, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(470, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(471, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(472, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(473, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(474, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(475, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(476, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(477, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(478, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(479, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(480, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(481, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(482, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(483, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(484, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(485, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(486, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(487, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(488, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(489, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(490, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(491, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(492, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(493, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(494, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(495, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(496, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(497, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(498, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(499, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(500, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(501, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(502, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(503, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(504, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(505, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(506, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(507, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(508, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(509, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(510, 8)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_socket_table, $mul.ref(0, 4096)), $mul.ref(511, 8)), $mul.ref(0, 1)), $0.ref);
    $M.75 := $store.i8($M.75, __kstrtab_unix_socket_table, 117);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(1, 1)), 110);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(2, 1)), 105);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(3, 1)), 120);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(5, 1)), 115);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(6, 1)), 111);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(7, 1)), 99);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(8, 1)), 107);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(11, 1)), 95);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(12, 1)), 116);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(13, 1)), 97);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(14, 1)), 98);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(15, 1)), 108);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(__kstrtab_unix_socket_table, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i32($M.0, unix_table_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(unix_table_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(unix_table_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(unix_table_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_table_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(unix_table_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(unix_table_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_table_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_table_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_table_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(3, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(14, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.78 := $store.i8($M.78, __kstrtab_unix_table_lock, 117);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(2, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(3, 1)), 120);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(5, 1)), 116);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(6, 1)), 97);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(7, 1)), 98);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(8, 1)), 108);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(14, 1)), 107);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(__kstrtab_unix_table_lock, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.81 := $store.i8($M.81, __kstrtab_unix_peer_get, 117);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(2, 1)), 105);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(3, 1)), 120);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(5, 1)), 112);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(6, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(8, 1)), 114);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(10, 1)), 103);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(12, 1)), 116);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_unix_peer_get, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.82 := $store.ref($M.82, unix_table, .str.25);
    $M.83 := $store.ref($M.83, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(8, 1)), $add.ref(init_net, $mul.ref(648, 1)));
    $M.84 := $store.i32($M.84, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(16, 1)), 4);
    $M.85 := $store.i16($M.85, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(20, 1)), 420);
    $M.86 := $store.ref($M.86, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(24, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(32, 1)), proc_dointvec);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(48, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(0, 64)), $mul.ref(56, 1)), $0.ref);
    $M.82 := $store.ref($M.82, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(0, 1)), $0.ref);
    $M.83 := $store.ref($M.83, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(8, 1)), $0.ref);
    $M.84 := $store.i32($M.84, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(16, 1)), 0);
    $M.85 := $store.i16($M.85, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.86 := $store.ref($M.86, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(24, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(32, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(40, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(48, 1)), $0.ref);
    $M.90 := $store.ref($M.90, $add.ref($add.ref($add.ref(unix_table, $mul.ref(0, 128)), $mul.ref(1, 64)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, gc_candidates, gc_candidates);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gc_candidates, $mul.ref(0, 16)), $mul.ref(8, 1)), gc_candidates);
    $M.0 := $store.i32($M.0, unix_gc_wait, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.23);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(unix_gc_wait, $mul.ref(72, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(unix_gc_wait, $mul.ref(0, 88)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(unix_gc_wait, $mul.ref(72, 1)));
    $M.24 := 0;
    call {:si_unique_call 1983} {:cexpr "gc_in_progress"} boogie_si_record_i8(0);
    $M.0 := $store.ref($M.0, gc_inflight_list, gc_inflight_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gc_inflight_list, $mul.ref(0, 16)), $mul.ref(8, 1)), gc_inflight_list);
    $M.0 := $store.i32($M.0, unix_gc_lock, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(unix_gc_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(unix_gc_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(unix_gc_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.22);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(unix_gc_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, unix_seqpacket_ops, 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(16, 1)), unix_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(24, 1)), unix_bind);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(32, 1)), unix_stream_connect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(40, 1)), unix_socketpair);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(48, 1)), unix_accept);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(56, 1)), unix_getname);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(64, 1)), unix_dgram_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(72, 1)), unix_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(88, 1)), unix_listen);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(96, 1)), unix_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(104, 1)), sock_no_setsockopt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(112, 1)), sock_no_getsockopt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(136, 1)), unix_seqpacket_sendmsg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(144, 1)), unix_seqpacket_recvmsg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(152, 1)), sock_no_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(160, 1)), sock_no_sendpage);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_seqpacket_ops, $mul.ref(0, 184)), $mul.ref(176, 1)), unix_set_peek_off);
    $M.0 := $store.i32($M.0, unix_dgram_ops, 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(16, 1)), unix_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(24, 1)), unix_bind);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(32, 1)), unix_dgram_connect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(40, 1)), unix_socketpair);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(48, 1)), sock_no_accept);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(56, 1)), unix_getname);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(64, 1)), unix_dgram_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(72, 1)), unix_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(88, 1)), sock_no_listen);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(96, 1)), unix_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(104, 1)), sock_no_setsockopt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(112, 1)), sock_no_getsockopt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(136, 1)), unix_dgram_sendmsg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(144, 1)), unix_dgram_recvmsg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(152, 1)), sock_no_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(160, 1)), sock_no_sendpage);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_dgram_ops, $mul.ref(0, 184)), $mul.ref(176, 1)), unix_set_peek_off);
    $M.0 := $store.i32($M.0, unix_stream_ops, 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(8, 1)), __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(16, 1)), unix_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(24, 1)), unix_bind);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(32, 1)), unix_stream_connect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(40, 1)), unix_socketpair);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(48, 1)), unix_accept);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(56, 1)), unix_getname);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(64, 1)), unix_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(72, 1)), unix_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(88, 1)), unix_listen);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(96, 1)), unix_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(104, 1)), sock_no_setsockopt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(112, 1)), sock_no_getsockopt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(136, 1)), unix_stream_sendmsg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(144, 1)), unix_stream_recvmsg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(152, 1)), sock_no_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(160, 1)), sock_no_sendpage);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(unix_stream_ops, $mul.ref(0, 184)), $mul.ref(176, 1)), unix_set_peek_off);
    $M.130 := $store.i8($M.130, af_unix_sk_receive_queue_lock_key, 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref($add.ref($add.ref(af_unix_sk_receive_queue_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref($add.ref($add.ref(af_unix_sk_receive_queue_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref($add.ref($add.ref(af_unix_sk_receive_queue_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref($add.ref($add.ref(af_unix_sk_receive_queue_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref($add.ref($add.ref(af_unix_sk_receive_queue_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref($add.ref($add.ref(af_unix_sk_receive_queue_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.130 := $store.i8($M.130, $add.ref($add.ref($add.ref($add.ref(af_unix_sk_receive_queue_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.131 := $store.ref($M.131, unix_proto, $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(8, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(16, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(24, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(32, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(40, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(48, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(56, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(64, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(72, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(80, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(88, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(96, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(104, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(112, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(120, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(128, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(136, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(144, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(152, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(160, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(168, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(176, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(184, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(192, 1)), $0.ref);
    $M.131 := $store.i32($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(200, 1)), 0);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(208, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(216, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(224, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(232, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(240, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(248, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(256, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(264, 1)), $0.ref);
    $M.131 := $store.i32($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(272, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(276, 1)), 0);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(280, 1)), $0.ref);
    $M.131 := $store.i32($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(288, 1)), 1728);
    $M.131 := $store.i32($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(292, 1)), 0);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(296, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(304, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(312, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(320, 1)), $mul.ref(0, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(328, 1)), __this_module);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(0, 1)), 85);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(1, 1)), 78);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(2, 1)), 73);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(3, 1)), 88);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(4, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(5, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(6, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(7, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(8, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(9, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(10, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(11, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(12, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(13, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(14, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(15, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(16, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(17, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(18, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(19, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(20, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(21, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(22, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(23, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(24, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(25, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(26, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(27, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(28, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(29, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(30, 1)), 0);
    $M.131 := $store.i8($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(336, 1)), $mul.ref(31, 1)), 0);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(368, 1)), $mul.ref(0, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(368, 1)), $mul.ref(8, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(384, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(392, 1)), $0.ref);
    $M.131 := $store.ref($M.131, $add.ref($add.ref(unix_proto, $mul.ref(0, 408)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.i64($M.0, unix_nr_socks, 0);
    $M.136 := $store.i8($M.136, __kstrtab_unix_outq_len, 117);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(2, 1)), 105);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(3, 1)), 120);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(5, 1)), 111);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(6, 1)), 117);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(7, 1)), 116);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(8, 1)), 113);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(10, 1)), 108);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(12, 1)), 110);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_unix_outq_len, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.137 := $store.i8($M.137, __kstrtab_unix_inq_len, 117);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(1, 1)), 110);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(2, 1)), 105);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(3, 1)), 120);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(5, 1)), 105);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(6, 1)), 110);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(7, 1)), 113);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(9, 1)), 108);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(11, 1)), 110);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_unix_inq_len, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.68 := $0.ref;
    $M.71 := 0;
    call {:si_unique_call 1984} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.70 := $0.ref;
    $M.66 := 0;
    call {:si_unique_call 1985} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.20 := 0;
    call {:si_unique_call 1986} {:cexpr "unix_tot_inflight"} boogie_si_record_i32(0);
    $M.43 := $0.ref;
    $M.62 := 0;
    call {:si_unique_call 1987} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.49 := $0.ref;
    $M.59 := 0;
    call {:si_unique_call 1988} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1989} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.69 := $0.ref;
    $M.63 := 0;
    call {:si_unique_call 1990} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.48 := $0.ref;
    $M.58 := 0;
    call {:si_unique_call 1991} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.67 := $0.ref;
    $M.56 := $0.ref;
    $M.46 := $0.ref;
    $M.50 := $0.ref;
    $M.35 := $0.ref;
    $M.51 := $0.ref;
    $M.41 := $0.ref;
    $M.39 := $0.ref;
    $M.45 := $0.ref;
    $M.60 := 0;
    call {:si_unique_call 1992} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.44 := $0.ref;
    $M.54 := $0.ref;
    $M.37 := $0.ref;
    $M.65 := 0;
    call {:si_unique_call 1993} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 1994} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1995} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.40 := $0.ref;
    $M.42 := $0.ref;
    $M.52 := $0.ref;
    $M.47 := $0.ref;
    $M.53 := $0.ref;
    $M.38 := $0.ref;
    $M.55 := $0.ref;
    $M.1 := 0;
    call {:si_unique_call 1996} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.142 := $store.i8($M.142, .str.3, 37);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(1, 1)), 48);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(2, 1)), 53);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(3, 1)), 120);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(.str.3, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.22, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(3, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(5, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(11, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.22, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.23, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(3, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(5, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(12, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.23, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    call {:si_unique_call 1997} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 546221);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(unix_seq_stop, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1998} unix_seq_stop($p1, $p2);
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 547253);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 548285);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $CurrAddr, $M.1;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(unix_net_exit, $p0);
    assume {:branchcond $i12} true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i12 == 1);
    $i11 := $eq.ref(unix_sock_destructor, $p0);
    assume {:branchcond $i11} true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i11 == 1);
    $i10 := $eq.ref(unix_write_space, $p0);
    assume {:branchcond $i10} true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i10 == 1);
    $i9 := $eq.ref(inc_inflight, $p0);
    assume {:branchcond $i9} true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i9 == 1);
    $i8 := $eq.ref(inc_inflight_move_tail, $p0);
    assume {:branchcond $i8} true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i8 == 1);
    $i7 := $eq.ref(dec_inflight, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i7 == 1);
    $i6 := $eq.ref(unix_destruct_scm, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1999} unix_destruct_scm($p1);
    return;

  $bb3:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2000} dec_inflight($p2);
    return;

  $bb4:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2001} inc_inflight_move_tail($p3);
    return;

  $bb5:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2002} inc_inflight($p4);
    return;

  $bb6:
    assume $i10 == 1;
    call {:si_unique_call 2003} unix_write_space(arg);
    return;

  $bb7:
    assume $i11 == 1;
    call {:si_unique_call 2004} unix_sock_destructor(arg);
    return;

  $bb8:
    assume $i12 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2005} unix_net_exit($p5);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 549317);

procedure devirtbounce.3(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 550349);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 551381);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(unix_peer_get, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2006} $p2 := unix_peer_get($p1);
    $r := $p2;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 552413);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 553445);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 554477);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 555509);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 556541);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 557573);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(unix_seq_stop, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2007} unix_seq_stop($p1, $p2);
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 558605);

procedure devirtbounce.12(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $CurrAddr, $M.1;



implementation devirtbounce.12(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i11 := $eq.ref(unix_net_exit, $p0);
    assume {:branchcond $i11} true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i11 == 1);
    $i10 := $eq.ref(unix_sock_destructor, $p0);
    assume {:branchcond $i10} true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i10 == 1);
    $i9 := $eq.ref(unix_write_space, $p0);
    assume {:branchcond $i9} true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i9 == 1);
    $i8 := $eq.ref(inc_inflight, $p0);
    assume {:branchcond $i8} true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i8 == 1);
    $i7 := $eq.ref(inc_inflight_move_tail, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i7 == 1);
    $i6 := $eq.ref(dec_inflight, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i6 == 1);
    $i5 := $eq.ref(unix_destruct_scm, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2008} unix_destruct_scm($p1);
    return;

  $bb3:
    assume $i6 == 1;
    call {:si_unique_call 2009} dec_inflight(arg);
    return;

  $bb4:
    assume $i7 == 1;
    call {:si_unique_call 2010} inc_inflight_move_tail(arg);
    return;

  $bb5:
    assume $i8 == 1;
    call {:si_unique_call 2011} inc_inflight(arg);
    return;

  $bb6:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2012} unix_write_space($p2);
    return;

  $bb7:
    assume $i10 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2013} unix_sock_destructor($p3);
    return;

  $bb8:
    assume $i11 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2014} unix_net_exit($p4);
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 559637);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 560669);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 561701);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 562733);

procedure devirtbounce.16(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i8;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.0, $M.75, $M.78, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.24, $M.130, $M.131, $M.136, $M.137, $M.68, $M.71, $M.70, $M.66, $M.20, $M.43, $M.62, $M.49, $M.59, $M.61, $M.36, $M.69, $M.63, $M.48, $M.58, $M.67, $M.56, $M.46, $M.50, $M.35, $M.51, $M.41, $M.39, $M.45, $M.60, $M.44, $M.54, $M.37, $M.65, $M.64, $M.57, $M.40, $M.42, $M.52, $M.47, $M.53, $M.38, $M.55, $M.1, $M.142, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2015} __SMACK_static_init();
    call {:si_unique_call 2016} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.33, $M.34, $M.0, $M.8, $M.13, $M.14, $M.15, $M.6, $M.5, $M.66, $M.7, $M.1, $M.68, $M.70, $M.71, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.36, $M.37, $M.35, $M.56, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.75, $M.78, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.24, $M.130, $M.131, $M.136, $M.137, $M.20, $M.69, $M.67, $M.142, $CurrAddr, $M.16, $M.17, $M.9, $M.10, $M.11, $M.12, $M.23, $M.22;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation unix_inq_len_loop_$bb13(in_$i22: i64, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i26: i64, in_$p27: ref, in_$i35: i64) returns (out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i26: i64, out_$p27: ref, out_$i35: i64)
{

  entry:
    out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i26, out_$p27, out_$i35 := in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i26, in_$p27, in_$i35;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_92;

  $bb15:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i26, out_$p27 := out_$i30, out_$p32;
    goto $bb15_dummy;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i30;
    assume true;
    goto $bb15;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(in_$i22, out_$i33);
    goto corral_source_split_100;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_99;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p27, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_97;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, out_$i26);
    call {:si_unique_call 17} {:cexpr "amount"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i32.i64(out_$i28);
    goto corral_source_split_95;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} out_$i28 := unix_skb_len(out_$p27);
    call {:si_unique_call 16} {:cexpr "tmp"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i26, out_$p27, out_$i35 := unix_inq_len_loop_$bb13(in_$i22, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i26, out_$p27, out_$i35);
    return;

  exit:
    return;
}



procedure unix_inq_len_loop_$bb13(in_$i22: i64, in_$i28: i32, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i26: i64, in_$p27: ref, in_$i35: i64) returns (out_$i28: i32, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i26: i64, out_$p27: ref, out_$i35: i64);



implementation unix_seq_show_loop_$bb15(in_$p0: ref, in_$p6: ref, in_$i58: i32, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$i70: i8, in_$i71: i32, in_$i72: i8, in_$i74: i32, in_$i75: i1, in_$i62: i32, in_vslice_dummy_var_68: i32) returns (out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$i70: i8, out_$i71: i32, out_$i72: i8, out_$i74: i32, out_$i75: i1, out_$i62: i32, out_vslice_dummy_var_68: i32)
{

  entry:
    out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$i72, out_$i74, out_$i75, out_$i62, out_vslice_dummy_var_68 := in_$i63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p69, in_$i70, in_$i71, in_$i72, in_$i74, in_$i75, in_$i62, in_vslice_dummy_var_68;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_251;

  $bb17:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i62 := out_$i74;
    goto $bb17_dummy;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i74, in_$i58);
    goto corral_source_split_264;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i62, 1);
    call {:si_unique_call 41} {:cexpr "i"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_263;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_vslice_dummy_var_68 := seq_putc(in_$p0, out_$i72);
    goto corral_source_split_262;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i32.i8(out_$i71);
    goto corral_source_split_261;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i8.i32(out_$i70);
    goto corral_source_split_260;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i8($M.2, out_$p69);
    goto corral_source_split_259;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(out_$p67, $mul.ref(0, 110)), $mul.ref(2, 1)), $mul.ref(out_$i63, 1));
    goto corral_source_split_258;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_257;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_256;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p6, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_254;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(out_$i62);
    goto corral_source_split_253;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$i72, out_$i74, out_$i75, out_$i62, out_vslice_dummy_var_68 := unix_seq_show_loop_$bb15(in_$p0, in_$p6, in_$i58, out_$i63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$i72, out_$i74, out_$i75, out_$i62, out_vslice_dummy_var_68);
    return;

  exit:
    return;
}



procedure unix_seq_show_loop_$bb15(in_$p0: ref, in_$p6: ref, in_$i58: i32, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$i70: i8, in_$i71: i32, in_$i72: i8, in_$i74: i32, in_$i75: i1, in_$i62: i32, in_vslice_dummy_var_68: i32) returns (out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$i70: i8, out_$i71: i32, out_$i72: i8, out_$i74: i32, out_$i75: i1, out_$i62: i32, out_vslice_dummy_var_68: i32);



implementation unix_from_bucket_loop_$bb4(in_$p0: ref, in_$i3: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i18: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i11: i64, in_$p12: ref, in_$p26: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i18: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i11: i64, out_$p12: ref, out_$p26: ref)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$p21, out_$i18, out_$p23, out_$i24, out_$i25, out_$i11, out_$p12, out_$p26 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i19, in_$i20, in_$p21, in_$i18, in_$p23, in_$i24, in_$i25, in_$i11, in_$p12, in_$p26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_369;

  $bb14:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$p12 := out_$i18, out_$p23;
    goto $bb14_dummy;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p23;
    assume true;
    goto $bb14;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} out_$p23 := sk_next(out_$p12);
    goto corral_source_split_380;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i19;
    goto $bb8;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i11;
    goto $bb8;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i15, out_$i16);
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} out_$p14 := seq_file_net(in_$p0);
    goto corral_source_split_372;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} out_$p13 := sock_net(out_$p12);
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p12;
    assume true;
    goto $bb11;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i19, in_$i3);
    goto corral_source_split_385;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i64(out_$i11, 1);
    call {:si_unique_call 65} {:cexpr "count"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_384;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$p21, out_$i18, out_$p23, out_$i24, out_$i25, out_$i11, out_$p12, out_$p26 := unix_from_bucket_loop_$bb4(in_$p0, in_$i3, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$p21, out_$i18, out_$p23, out_$i24, out_$i25, out_$i11, out_$p12, out_$p26);
    return;

  exit:
    return;
}



procedure unix_from_bucket_loop_$bb4(in_$p0: ref, in_$i3: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i18: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i11: i64, in_$p12: ref, in_$p26: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i18: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i11: i64, out_$p12: ref, out_$p26: ref);



implementation unix_stream_connect_loop_$bb24(in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$i17: i32, in_$p38: ref, in_$p51: ref, in_$p48: ref, in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$i59: i16, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p72: ref, in_$i73: i8, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$i103: i1, in_$p101: ref, in_$i102: i32, in_$p104: ref, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p112: ref) returns (out_$p51: ref, out_$p48: ref, out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$i59: i16, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p72: ref, out_$i73: i8, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$i103: i1, out_$p101: ref, out_$i102: i32, out_$p104: ref, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p112: ref)
{

  entry:
    out_$p51, out_$p48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$p101, out_$i102, out_$p104, out_$p108, out_$i109, out_$i110, out_$i111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p112 := in_$p51, in_$p48, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$p66, in_$i67, in_$i68, in_$i69, in_$p70, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p81, in_$p97, in_$i98, in_$i99, in_$i100, in_$i103, in_$p101, in_$i102, in_$p104, in_$p108, in_$i109, in_$i110, in_$i111, in_$p113, in_$p114, in_$p115, in_$p116, in_$p112;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb32:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$p48 := out_$p62;
    goto $bb32_dummy;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    out_$p51 := out_$p62;
    assume true;
    goto $bb32;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i64(out_$i63, 0);
    goto corral_source_split_664;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_663;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} out_$p62 := unix_find_other(in_$p9, in_$p6, in_$i17, out_$i60, out_$i61, in_$p5);
    goto corral_source_split_662;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.5, in_$p4);
    goto corral_source_split_661;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i16.i32(out_$i59);
    goto corral_source_split_660;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i16($M.0, in_$p38);
    goto corral_source_split_659;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} sock_put(out_$p48);
    goto corral_source_split_657;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} spin_unlock(out_$p58);
    goto corral_source_split_656;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_654;

  $bb29:
    assume out_$i56 == 1;
    goto corral_source_split_653;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i8.i1(out_$i55);
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i1.i8(out_$i54);
    call {:si_unique_call 119} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i55);
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} out_$i54 := sock_flag(out_$p48, 0);
    goto corral_source_split_649;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} spin_lock(out_$p53);
    goto corral_source_split_648;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_647;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_646;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} sock_put(out_$p48);
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} spin_unlock(out_$p116);
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p115, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} spin_unlock(out_$p114);
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p113, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_730;

  $bb61:
    assume out_$i111 == 1;
    goto corral_source_split_729;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$p112 := out_$p48;
    assume true;
    goto $bb61;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i32(out_$i110, out_$i99);
    goto corral_source_split_725;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i109);
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i8($M.0, out_$p108);
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_722;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ldv_spin_lock();
    goto corral_source_split_721;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume out_$i103 == 1;
    goto corral_source_split_716;

  $bb53:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i99, 7);
    assume {:verifier.code 0} true;
    out_$p104 := out_$p48;
    assume true;
    goto $bb54;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i99, 7);
    assume {:verifier.code 0} true;
    out_$p101, out_$i102 := out_$p48, out_$i99;
    assume true;
    goto $bb53;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i98);
    call {:si_unique_call 133} {:cexpr "st"} boogie_si_record_i32(out_$i99);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i8($M.0, out_$p97);
    goto corral_source_split_714;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_713;

  $bb42:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$p81 := out_$p48;
    assume true;
    goto $bb42;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_688;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} out_$i79 := unix_recvq_full(out_$p48);
    call {:si_unique_call 124} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_687;

  $bb39:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$p78 := out_$p48;
    assume true;
    goto $bb39;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$i76 := $and.i32(out_$i75, 1);
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$i74 := $and.i8(out_$i73, 3);
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i8($M.0, out_$p72);
    goto corral_source_split_679;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p48, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_678;

  $bb35:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$p70 := out_$p48;
    assume true;
    goto $bb35;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 10);
    goto corral_source_split_670;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i67);
    goto corral_source_split_669;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i8($M.0, out_$p66);
    goto corral_source_split_668;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_667;

  $bb33:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p5, $sub.i32(0, 111));
    goto corral_source_split_666;

  $bb30:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p51, out_$p48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$p101, out_$i102, out_$p104, out_$p108, out_$i109, out_$i110, out_$i111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p112 := unix_stream_connect_loop_$bb24(in_$p4, in_$p5, in_$p6, in_$p8, in_$p9, in_$i17, in_$p38, out_$p51, out_$p48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$p101, out_$i102, out_$p104, out_$p108, out_$i109, out_$i110, out_$i111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p112);
    return;

  exit:
    return;
}



procedure unix_stream_connect_loop_$bb24(in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$i17: i32, in_$p38: ref, in_$p51: ref, in_$p48: ref, in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$i59: i16, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p72: ref, in_$i73: i8, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$i103: i1, in_$p101: ref, in_$i102: i32, in_$p104: ref, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p112: ref) returns (out_$p51: ref, out_$p48: ref, out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$i59: i16, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p72: ref, out_$i73: i8, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$i103: i1, out_$p101: ref, out_$i102: i32, out_$p104: ref, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p112: ref);
  modifies $M.6, $CurrAddr, $M.1;



implementation unix_stream_connect_loop_$bb23(in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$i17: i32, in_$p38: ref, in_$p46: ref, in_$i47: i64, in_$p49: ref, in_$p51: ref, in_$p48: ref, in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$i59: i16, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p72: ref, in_$i73: i8, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i1, in_$p83: ref, in_$i84: i64, in_$i85: i32, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i16, in_$i91: i32, in_$i92: i32, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$i103: i1, in_$p101: ref, in_$i102: i32, in_$p104: ref, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p112: ref) returns (out_$p46: ref, out_$i47: i64, out_$p49: ref, out_$p51: ref, out_$p48: ref, out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$i59: i16, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p72: ref, out_$i73: i8, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i1, out_$p83: ref, out_$i84: i64, out_$i85: i32, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i16, out_$i91: i32, out_$i92: i32, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$i103: i1, out_$p101: ref, out_$i102: i32, out_$p104: ref, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p112: ref)
{

  entry:
    out_$p46, out_$i47, out_$p49, out_$p51, out_$p48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$p101, out_$i102, out_$p104, out_$p108, out_$i109, out_$i110, out_$i111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p112 := in_$p46, in_$i47, in_$p49, in_$p51, in_$p48, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$p66, in_$i67, in_$i68, in_$i69, in_$p70, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p81, in_$i82, in_$p83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$p97, in_$i98, in_$i99, in_$i100, in_$i103, in_$p101, in_$i102, in_$p104, in_$p108, in_$i109, in_$i110, in_$i111, in_$p113, in_$p114, in_$p115, in_$p116, in_$p112;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_638;

  $bb49:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$p46, out_$i47 := out_$p93, out_$i84;
    goto $bb49_dummy;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    out_$p49 := out_$p93;
    assume true;
    goto $bb49;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i64(out_$i94, 0);
    goto corral_source_split_711;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    out_$i94 := $p2i.ref.i64(out_$p93);
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} out_$p93 := unix_find_other(in_$p9, in_$p6, in_$i17, out_$i91, out_$i92, in_$p5);
    goto corral_source_split_709;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.5, in_$p4);
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i16.i32(out_$i90);
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i16($M.0, in_$p38);
    goto corral_source_split_706;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} sock_put(out_$p81);
    goto corral_source_split_705;

  $bb47:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    out_$p89 := out_$p81;
    assume true;
    goto $bb47;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} out_$i87 := signal_pending(out_$p86);
    call {:si_unique_call 130} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} out_$p86 := get_current();
    goto corral_source_split_699;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p5, out_$i85);
    goto corral_source_split_698;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} out_$i85 := sock_intr_errno(out_$i84);
    goto corral_source_split_697;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} out_$i84 := unix_wait_for_peer(out_$p81, out_$i47);
    call {:si_unique_call 126} {:cexpr "timeo"} boogie_si_record_i64(out_$i84);
    goto corral_source_split_696;

  $bb44:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$p83 := out_$p81;
    assume true;
    goto $bb44;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i64(out_$i47, 0);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p5, $sub.i32(0, 11));
    goto corral_source_split_691;

  $bb41:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_690;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    out_$p81 := out_$p48;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_688;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} out_$i79 := unix_recvq_full(out_$p48);
    call {:si_unique_call 124} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_687;

  $bb39:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    out_$p78 := out_$p48;
    assume true;
    goto $bb39;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_683;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    out_$i76 := $and.i32(out_$i75, 1);
    goto corral_source_split_682;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    goto corral_source_split_681;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    out_$i74 := $and.i8(out_$i73, 3);
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i8($M.0, out_$p72);
    goto corral_source_split_679;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p48, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_678;

  $bb35:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$p70 := out_$p48;
    assume true;
    goto $bb35;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 10);
    goto corral_source_split_670;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i67);
    goto corral_source_split_669;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i8($M.0, out_$p66);
    goto corral_source_split_668;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p48, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_667;

  $bb33:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p5, $sub.i32(0, 111));
    goto corral_source_split_666;

  $bb30:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i8.i1(out_$i55);
    goto corral_source_split_651;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i1.i8(out_$i54);
    call {:si_unique_call 119} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i55);
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} out_$i54 := sock_flag(out_$p48, 0);
    goto corral_source_split_649;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} spin_lock(out_$p53);
    goto corral_source_split_648;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_647;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_646;

  $bb24:
    call out_$p51, out_$p48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$p101, out_$i102, out_$p104, out_$p108, out_$i109, out_$i110, out_$i111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p112 := unix_stream_connect_loop_$bb24(in_$p4, in_$p5, in_$p6, in_$p8, in_$p9, in_$i17, in_$p38, out_$p51, out_$p48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$p101, out_$i102, out_$p104, out_$p108, out_$i109, out_$i110, out_$i111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p112);
    goto $bb24_last;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p46;
    goto $bb24;

  $bb32:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$p48 := out_$p62;
    assume false;
    return;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    out_$p51 := out_$p62;
    assume true;
    goto $bb32;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i64(out_$i63, 0);
    goto corral_source_split_664;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_663;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} out_$p62 := unix_find_other(in_$p9, in_$p6, in_$i17, out_$i60, out_$i61, in_$p5);
    goto corral_source_split_662;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.5, in_$p4);
    goto corral_source_split_661;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i16.i32(out_$i59);
    goto corral_source_split_660;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i16($M.0, in_$p38);
    goto corral_source_split_659;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} sock_put(out_$p48);
    goto corral_source_split_657;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} spin_unlock(out_$p58);
    goto corral_source_split_656;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_654;

  $bb29:
    assume out_$i56 == 1;
    goto corral_source_split_653;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} sock_put(out_$p48);
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} spin_unlock(out_$p116);
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p115, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} spin_unlock(out_$p114);
    goto corral_source_split_732;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p113, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$p113 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_730;

  $bb61:
    assume out_$i111 == 1;
    goto corral_source_split_729;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$p112 := out_$p48;
    assume true;
    goto $bb61;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i32(out_$i110, out_$i99);
    goto corral_source_split_725;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i8.i32(out_$i109);
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i8($M.0, out_$p108);
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_722;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ldv_spin_lock();
    goto corral_source_split_721;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume out_$i103 == 1;
    goto corral_source_split_716;

  $bb53:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i99, 7);
    assume {:verifier.code 0} true;
    out_$p104 := out_$p48;
    assume true;
    goto $bb54;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i99, 7);
    assume {:verifier.code 0} true;
    out_$p101, out_$i102 := out_$p48, out_$i99;
    assume true;
    goto $bb53;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i98);
    call {:si_unique_call 133} {:cexpr "st"} boogie_si_record_i32(out_$i99);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i8($M.0, out_$p97);
    goto corral_source_split_714;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(18, 1));
    goto corral_source_split_713;

  $bb42:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p46, out_$i47, out_$p49, out_$p51, out_$p48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$p101, out_$i102, out_$p104, out_$p108, out_$i109, out_$i110, out_$i111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p112 := unix_stream_connect_loop_$bb23(in_$p4, in_$p5, in_$p6, in_$p8, in_$p9, in_$i17, in_$p38, out_$p46, out_$i47, out_$p49, out_$p51, out_$p48, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$p97, out_$i98, out_$i99, out_$i100, out_$i103, out_$p101, out_$i102, out_$p104, out_$p108, out_$i109, out_$i110, out_$i111, out_$p113, out_$p114, out_$p115, out_$p116, out_$p112);
    return;

  exit:
    return;
}



procedure unix_stream_connect_loop_$bb23(in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$i17: i32, in_$p38: ref, in_$p46: ref, in_$i47: i64, in_$p49: ref, in_$p51: ref, in_$p48: ref, in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$i59: i16, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p72: ref, in_$i73: i8, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i1, in_$p83: ref, in_$i84: i64, in_$i85: i32, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i90: i16, in_$i91: i32, in_$i92: i32, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$i103: i1, in_$p101: ref, in_$i102: i32, in_$p104: ref, in_$p108: ref, in_$i109: i8, in_$i110: i32, in_$i111: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p112: ref) returns (out_$p46: ref, out_$i47: i64, out_$p49: ref, out_$p51: ref, out_$p48: ref, out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$i59: i16, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p72: ref, out_$i73: i8, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i1, out_$p83: ref, out_$i84: i64, out_$i85: i32, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i90: i16, out_$i91: i32, out_$i92: i32, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$i103: i1, out_$p101: ref, out_$i102: i32, out_$p104: ref, out_$p108: ref, out_$i109: i8, out_$i110: i32, out_$i111: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p112: ref);
  modifies $M.6, $CurrAddr, $M.1, $M.0;



implementation unix_stream_sendmsg_loop_$bb25(in_$p1: ref, in_$p2: ref, in_$i3: i64, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p37: ref, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i64, in_$i65: i32, in_$i66: i32, in_$i67: i64, in_$i68: i1, in_$i69: i64, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i80: i32, in_$p81: ref, in_$p82: ref, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i1, in_$i108: i8, in_$i109: i1, in_$p112: ref, in_$i113: i8, in_$i114: i8, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i110: i32, in_$p111: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i8, in_$i122: i32, in_$i123: i1, in_$i124: i8, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i32, in_$i132: i64, in_$i133: i1, in_$i49: i8, in_$i50: i32, in_$i134: i32, in_vslice_dummy_var_70: ref) returns (out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i64, out_$i65: i32, out_$i66: i32, out_$i67: i64, out_$i68: i1, out_$i69: i64, out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i80: i32, out_$p81: ref, out_$p82: ref, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i1, out_$i108: i8, out_$i109: i1, out_$p112: ref, out_$i113: i8, out_$i114: i8, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i110: i32, out_$p111: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i8, out_$i122: i32, out_$i123: i1, out_$i124: i8, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i32, out_$i132: i64, out_$i133: i1, out_$i49: i8, out_$i50: i32, out_$i134: i32, out_vslice_dummy_var_70: ref)
{

  entry:
    out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i110, out_$p111, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$i133, out_$i49, out_$i50, out_$i134, out_vslice_dummy_var_70 := in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$i109, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i110, in_$p111, in_$p118, in_$p119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$p125, in_$p126, in_$p127, in_$p128, in_$p129, in_$p130, in_$i131, in_$i132, in_$i133, in_$i49, in_$i50, in_$i134, in_vslice_dummy_var_70;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1331;

  $bb58:
    assume out_$i133 == 1;
    assume {:verifier.code 0} true;
    out_$i49, out_$i50 := 1, out_$i131;
    goto $bb58_dummy;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i131;
    assume true;
    goto $bb58;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$i133 := $ult.i64(out_$i132, in_$i3);
    goto corral_source_split_1461;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i131);
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$i131 := $add.i32(out_$i50, out_$i60);
    call {:si_unique_call 264} {:cexpr "sent"} boogie_si_record_i32(out_$i131);
    goto corral_source_split_1459;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.0, out_$p129);
    call {:si_unique_call 263} devirtbounce.2(out_$p130, in_$p37);
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p37, $mul.ref(0, 1272)), $mul.ref(1232, 1));
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} spin_unlock(out_$p128);
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p127, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1455;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p127 := $bitcast.ref.ref(in_$p37);
    goto corral_source_split_1454;

  $bb56:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p126, out_$i124);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(out_$p125, $mul.ref(0, 1696)), $mul.ref(1568, 1));
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(in_$p37);
    goto corral_source_split_1450;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    out_$i124 := $trunc.i32.i8(out_$i93);
    goto corral_source_split_1449;

  $bb55:
    assume out_$i123 == 1;
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i122, out_$i93);
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i8.i32(out_$i121);
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i8($M.0, out_$p120);
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p119, $mul.ref(0, 1696)), $mul.ref(1568, 1));
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$p119 := $bitcast.ref.ref(in_$p37);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} skb_queue_tail(out_$p118, out_$p77);
    goto corral_source_split_1441;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p37, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1440;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} maybe_add_creds(out_$p77, in_$p1, in_$p37);
    goto corral_source_split_1439;

  $bb52:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$i110, out_$p111 := out_$i50, out_$p77;
    assume true;
    goto $bb52;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$i116 := $and.i32(out_$i115, 1);
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i8.i32(out_$i114);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    out_$i114 := $and.i8(out_$i113, 3);
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i8($M.0, out_$p112);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p37, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1427;

  $bb50:
    assume !(out_$i109 == 1);
    goto corral_source_split_1426;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$i110, out_$p111 := out_$i50, out_$p77;
    assume true;
    goto $bb50;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i109 := $trunc.i8.i1(out_$i108);
    goto corral_source_split_1422;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i1.i8(out_$i107);
    call {:si_unique_call 257} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i108);
    goto corral_source_split_1421;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} out_$i107 := sock_flag(in_$p37, 0);
    goto corral_source_split_1420;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} spin_lock(out_$p106);
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1418;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(in_$p37);
    goto corral_source_split_1417;

  $bb46:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$i103, out_$p104 := out_$i50, out_$p77;
    assume true;
    goto $bb46;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.6, in_$p4);
    goto corral_source_split_1411;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, out_$i100);
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} out_$i100 := skb_copy_datagram_from_iovec(out_$p77, 0, out_$p99, out_$i50, out_$i60);
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_1408;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p97, out_$i60);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p77, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p96, out_$i70);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p77, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} out_vslice_dummy_var_70 := skb_put(out_$p77, out_$i94);
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i60, out_$i70);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i92, 1);
    call {:si_unique_call 251} {:cexpr "max_level"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_1400;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.6, in_$p4);
    goto corral_source_split_1399;

  $bb43:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    out_$i90, out_$p91 := out_$i50, out_$p77;
    assume true;
    goto $bb43;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i88, 0);
    goto corral_source_split_1394;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.6, in_$p4);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, out_$i87);
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} out_$i87 := unix_scm_to_skb(out_$p82, out_$p77, out_$i86);
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$i86 := $xor.i1(out_$i85, 1);
    goto corral_source_split_1390;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_1389;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i1.i32(out_$i83);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i8.i1(out_$i49);
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.8, out_$p81);
    goto corral_source_split_1386;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1385;

  $bb40:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i50;
    assume true;
    goto $bb40;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i64(out_$i78, 0);
    goto corral_source_split_1381;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_1380;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} out_$p77 := sock_alloc_send_pskb(in_$p8, out_$i72, out_$i73, out_$i76, in_$p4, 3);
    goto corral_source_split_1379;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    out_$i76 := $and.i32(out_$i75, 64);
    goto corral_source_split_1378;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, out_$p74);
    goto corral_source_split_1377;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p2, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_1376;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i70);
    goto corral_source_split_1375;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_1374;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    out_$i71 := $sub.i32(out_$i60, out_$i70);
    goto corral_source_split_1373;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i64.i32(out_$i69);
    call {:si_unique_call 247} {:cexpr "data_len"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_1372;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_1371;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i67;
    goto $bb38;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i64;
    goto $bb38;

  $bb36:
    assume out_$i68 == 1;
    goto corral_source_split_1367;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    out_$i68 := $ult.i64(out_$i64, out_$i67);
    goto corral_source_split_1365;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i66);
    call {:si_unique_call 246} {:cexpr "__min2___1"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_1364;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i65, $sub.i32(0, 4096));
    goto corral_source_split_1363;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i63, 4095);
    goto corral_source_split_1362;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i60);
    call {:si_unique_call 245} {:cexpr "__min1___1"} boogie_si_record_i64(out_$i64);
    goto corral_source_split_1361;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1360;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i61;
    goto $bb35;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    out_$i63 := 0;
    goto $bb35;

  $bb33:
    assume out_$i62 == 1;
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(0, out_$i61);
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i60, 3776);
    call {:si_unique_call 244} {:cexpr "__max2"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_1353;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1352;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$i60 := 36544;
    goto $bb32;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i58;
    goto $bb32;

  $bb30:
    assume out_$i59 == 1;
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i58, 36544);
    goto corral_source_split_1346;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i56;
    goto $bb29;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i52;
    goto $bb29;

  $bb27:
    assume out_$i57 == 1;
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i52, out_$i56);
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i55, $sub.i32(0, 64));
    call {:si_unique_call 243} {:cexpr "__min2"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_1338;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    out_$i55 := $ashr.i32(out_$i54, 1);
    goto corral_source_split_1337;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_1336;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(608, 1));
    goto corral_source_split_1335;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(out_$i51, out_$i50);
    call {:si_unique_call 242} {:cexpr "size"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_1334;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i64.i32(in_$i3);
    goto corral_source_split_1333;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb28:
    assume !(out_$i57 == 1);
    goto corral_source_split_1343;

  $bb31:
    assume !(out_$i59 == 1);
    goto corral_source_split_1350;

  $bb34:
    assume !(out_$i62 == 1);
    goto corral_source_split_1358;

  $bb37:
    assume !(out_$i68 == 1);
    goto corral_source_split_1369;

  $bb58_dummy:
    call {:si_unique_call 1} out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i110, out_$p111, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$i133, out_$i49, out_$i50, out_$i134, out_vslice_dummy_var_70 := unix_stream_sendmsg_loop_$bb25(in_$p1, in_$p2, in_$i3, in_$p4, in_$p6, in_$p8, in_$p37, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i110, out_$p111, out_$p118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$p125, out_$p126, out_$p127, out_$p128, out_$p129, out_$p130, out_$i131, out_$i132, out_$i133, out_$i49, out_$i50, out_$i134, out_vslice_dummy_var_70);
    return;

  exit:
    return;
}



procedure unix_stream_sendmsg_loop_$bb25(in_$p1: ref, in_$p2: ref, in_$i3: i64, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p37: ref, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i64, in_$i65: i32, in_$i66: i32, in_$i67: i64, in_$i68: i1, in_$i69: i64, in_$i70: i32, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i80: i32, in_$p81: ref, in_$p82: ref, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i1, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i1, in_$i108: i8, in_$i109: i1, in_$p112: ref, in_$i113: i8, in_$i114: i8, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$i110: i32, in_$p111: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$i121: i8, in_$i122: i32, in_$i123: i1, in_$i124: i8, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$i131: i32, in_$i132: i64, in_$i133: i1, in_$i49: i8, in_$i50: i32, in_$i134: i32, in_vslice_dummy_var_70: ref) returns (out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i64, out_$i65: i32, out_$i66: i32, out_$i67: i64, out_$i68: i1, out_$i69: i64, out_$i70: i32, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i80: i32, out_$p81: ref, out_$p82: ref, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i1, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i1, out_$i108: i8, out_$i109: i1, out_$p112: ref, out_$i113: i8, out_$i114: i8, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$i110: i32, out_$p111: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$i121: i8, out_$i122: i32, out_$i123: i1, out_$i124: i8, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$i131: i32, out_$i132: i64, out_$i133: i1, out_$i49: i8, out_$i50: i32, out_$i134: i32, out_vslice_dummy_var_70: ref);
  modifies $M.0, $M.20, $CurrAddr, $M.1, $M.6;



implementation unix_stream_recvmsg_loop_$bb44(in_$p8: ref, in_$i112: i32, in_$i113: i32, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$p118: ref, in_$p119: ref, in_$i122: i32, in_$i123: i1, in_$p110: ref, in_$i111: i32, in_$i124: i32, in_$p125: ref) returns (out_$i112: i32, out_$i113: i32, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$p118: ref, out_$p119: ref, out_$i122: i32, out_$i123: i1, out_$p110: ref, out_$i111: i32, out_$i124: i32, out_$p125: ref)
{

  entry:
    out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i122, out_$i123, out_$p110, out_$i111, out_$i124, out_$p125 := in_$i112, in_$i113, in_$p114, in_$p115, in_$i116, in_$i117, in_$p118, in_$p119, in_$i122, in_$i123, in_$p110, in_$i111, in_$i124, in_$p125;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1627;

  $bb50:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$p110, out_$i111 := out_$p115, out_$i113;
    goto $bb50_dummy;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$i124, out_$p125 := out_$i113, out_$p115;
    assume true;
    goto $bb50;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$i123 := $uge.i32(out_$i113, out_$i122);
    goto corral_source_split_1641;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} out_$i122 := unix_skb_len(out_$p115);
    call {:si_unique_call 312} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_1640;

  $bb47:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$p118, out_$p119 := out_$p110, out_$p115;
    assume true;
    goto $bb47;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i64(out_$i116, 0);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i116 := $p2i.ref.i64(out_$p115);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} out_$p115 := skb_peek_next(out_$p110, out_$p114);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$i113 := $sub.i32(out_$i111, out_$i112);
    call {:si_unique_call 309} {:cexpr "skip"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_1630;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} out_$i112 := unix_skb_len(out_$p110);
    call {:si_unique_call 308} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb50_dummy:
    call {:si_unique_call 1} out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i122, out_$i123, out_$p110, out_$i111, out_$i124, out_$p125 := unix_stream_recvmsg_loop_$bb44(in_$p8, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i122, out_$i123, out_$p110, out_$i111, out_$i124, out_$p125);
    return;

  exit:
    return;
}



procedure unix_stream_recvmsg_loop_$bb44(in_$p8: ref, in_$i112: i32, in_$i113: i32, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$p118: ref, in_$p119: ref, in_$i122: i32, in_$i123: i1, in_$p110: ref, in_$i111: i32, in_$i124: i32, in_$p125: ref) returns (out_$i112: i32, out_$i113: i32, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$p118: ref, out_$p119: ref, out_$i122: i32, out_$i123: i1, out_$p110: ref, out_$i111: i32, out_$i124: i32, out_$p125: ref);



implementation unix_stream_recvmsg_loop_$bb18(in_$i4: i32, in_$p8: ref, in_$p57: ref, in_$p56: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i112: i32, in_$i113: i32, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$p110: ref, in_$i111: i32, in_$i108: i32, in_$p109: ref, in_$i124: i32, in_$p125: ref) returns (out_$p57: ref, out_$p56: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i112: i32, out_$i113: i32, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$p110: ref, out_$i111: i32, out_$i108: i32, out_$p109: ref, out_$i124: i32, out_$p125: ref)
{

  entry:
    out_$p57, out_$p56, out_$i105, out_$i106, out_$i107, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p110, out_$i111, out_$i108, out_$p109, out_$i124, out_$p125 := in_$p57, in_$p56, in_$i105, in_$i106, in_$i107, in_$i112, in_$i113, in_$p114, in_$p115, in_$i116, in_$i117, in_$p118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p110, in_$i111, in_$i108, in_$p109, in_$i124, in_$p125;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb48:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$p56 := out_$p119;
    goto $bb48_dummy;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$p57 := out_$p118;
    assume true;
    goto $bb48;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i64(out_$i120, 0);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$i120 := $p2i.ref.i64(out_$p119);
    goto corral_source_split_1637;

  $bb46:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$p118, out_$p119 := out_$p110, out_$p115;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i64(out_$i116, 0);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i116 := $p2i.ref.i64(out_$p115);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} out_$p115 := skb_peek_next(out_$p110, out_$p114);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$i113 := $sub.i32(out_$i111, out_$i112);
    call {:si_unique_call 309} {:cexpr "skip"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_1630;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} out_$i112 := unix_skb_len(out_$p110);
    call {:si_unique_call 308} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    call out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i122, out_$i123, out_$p110, out_$i111, out_$i124, out_$p125 := unix_stream_recvmsg_loop_$bb44(in_$p8, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i122, out_$i123, out_$p110, out_$i111, out_$i124, out_$p125);
    goto $bb44_last;

  $bb44_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1627;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$p110, out_$i111 := out_$p56, out_$i105;
    goto $bb44;

  $bb50:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$p110, out_$i111 := out_$p115, out_$i113;
    assume false;
    return;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$i124, out_$p125 := out_$i113, out_$p115;
    assume true;
    goto $bb50;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$i123 := $uge.i32(out_$i113, out_$i122);
    goto corral_source_split_1641;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} out_$i122 := unix_skb_len(out_$p115);
    call {:si_unique_call 312} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_1640;

  $bb47:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb42:
    assume out_$i107 == 1;
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$i108, out_$p109 := out_$i105, out_$p56;
    assume true;
    goto $bb42;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i107 := $uge.i32(out_$i105, out_$i106);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} out_$i106 := unix_skb_len(out_$p56);
    call {:si_unique_call 306} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_1620;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} out_$i105 := sk_peek_offset(in_$p8, in_$i4);
    call {:si_unique_call 304} {:cexpr "skip"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_1619;

  $bb48_dummy:
    call {:si_unique_call 1} out_$p57, out_$p56, out_$i105, out_$i106, out_$i107, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p110, out_$i111, out_$i108, out_$p109, out_$i124, out_$p125 := unix_stream_recvmsg_loop_$bb18(in_$i4, in_$p8, out_$p57, out_$p56, out_$i105, out_$i106, out_$i107, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p110, out_$i111, out_$i108, out_$p109, out_$i124, out_$p125);
    return;

  exit:
    return;
}



procedure unix_stream_recvmsg_loop_$bb18(in_$i4: i32, in_$p8: ref, in_$p57: ref, in_$p56: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i112: i32, in_$i113: i32, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$p110: ref, in_$i111: i32, in_$i108: i32, in_$p109: ref, in_$i124: i32, in_$p125: ref) returns (out_$p57: ref, out_$p56: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i112: i32, out_$i113: i32, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$p110: ref, out_$i111: i32, out_$i108: i32, out_$p109: ref, out_$i124: i32, out_$p125: ref);



implementation unix_stream_recvmsg_loop_$bb14(in_$p1: ref, in_$p2: ref, in_$i4: i32, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$i25: i32, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p57: ref, in_$p55: ref, in_$p58: ref, in_$p59: ref, in_$i60: i1, in_$i61: i32, in_$i62: i32, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i32, in_$p69: ref, in_$i70: i8, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$p78: ref, in_$i79: i1, in_$i80: i32, in_$p83: ref, in_$i84: i64, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i64, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i64, in_$p56: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i112: i32, in_$i113: i32, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$p110: ref, in_$i111: i32, in_$i108: i32, in_$p109: ref, in_$i124: i32, in_$p125: ref, in_$i126: i32, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i64, in_$i141: i1, in_$i142: i32, in_$i143: i32, in_$p144: ref, in_$p145: ref, in_$p147: ref, in_$p148: ref, in_$p151: ref, in_$i152: i32, in_$p153: ref, in_$i154: i32, in_$i155: i1, in_$i156: i8, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i32, in_$p162: ref, in_$p163: ref, in_$p165: ref, in_$p166: ref, in_$p169: ref, in_$i170: i32, in_$p171: ref, in_$i172: i32, in_$i173: i1, in_$i174: i8, in_$i175: i1, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i32, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p193: ref, in_$p194: ref, in_$p196: ref, in_$i197: i32, in_$p198: ref, in_$i199: i32, in_$i200: i32, in_$i180: i32, in_$i201: i64, in_$i202: i1, in_$p203: ref, in_$p204: ref, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$p211: ref, in_$p212: ref, in_$p213: ref, in_$i214: i32, in_$i215: i32, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i32, in_$i224: i32, in_$i225: i64, in_$i226: i64, in_$i227: i32, in_$i228: i1, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$p241: ref, in_$p242: ref, in_$p243: ref, in_$p244: ref, in_$i245: i64, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i32, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$i258: i64, in_$i259: i1, in_$i260: i32, in_$i261: i32, in_$i229: i32, in_$i230: i32, in_$i231: i32, in_$p232: ref, in_$i97: i32, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i64, in_$i102: i64, in_$i276: i1, in_$i277: i32, in_$i278: i32) returns (out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p57: ref, out_$p55: ref, out_$p58: ref, out_$p59: ref, out_$i60: i1, out_$i61: i32, out_$i62: i32, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i32, out_$p69: ref, out_$i70: i8, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$p78: ref, out_$i79: i1, out_$i80: i32, out_$p83: ref, out_$i84: i64, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i64, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i64, out_$p56: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i112: i32, out_$i113: i32, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$p110: ref, out_$i111: i32, out_$i108: i32, out_$p109: ref, out_$i124: i32, out_$p125: ref, out_$i126: i32, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i64, out_$i141: i1, out_$i142: i32, out_$i143: i32, out_$p144: ref, out_$p145: ref, out_$p147: ref, out_$p148: ref, out_$p151: ref, out_$i152: i32, out_$p153: ref, out_$i154: i32, out_$i155: i1, out_$i156: i8, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i32, out_$p162: ref, out_$p163: ref, out_$p165: ref, out_$p166: ref, out_$p169: ref, out_$i170: i32, out_$p171: ref, out_$i172: i32, out_$i173: i1, out_$i174: i8, out_$i175: i1, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i32, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p193: ref, out_$p194: ref, out_$p196: ref, out_$i197: i32, out_$p198: ref, out_$i199: i32, out_$i200: i32, out_$i180: i32, out_$i201: i64, out_$i202: i1, out_$p203: ref, out_$p204: ref, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$p211: ref, out_$p212: ref, out_$p213: ref, out_$i214: i32, out_$i215: i32, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i32, out_$i224: i32, out_$i225: i64, out_$i226: i64, out_$i227: i32, out_$i228: i1, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$p241: ref, out_$p242: ref, out_$p243: ref, out_$p244: ref, out_$i245: i64, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i32, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$i258: i64, out_$i259: i1, out_$i260: i32, out_$i261: i32, out_$i229: i32, out_$i230: i32, out_$i231: i32, out_$p232: ref, out_$i97: i32, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i64, out_$i102: i64, out_$i276: i1, out_$i277: i32, out_$i278: i32)
{

  entry:
    out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p57, out_$p55, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p56, out_$i105, out_$i106, out_$i107, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p110, out_$i111, out_$i108, out_$p109, out_$i124, out_$p125, out_$i126, out_$p127, out_$p128, out_$p129, out_$i130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$p147, out_$p148, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$p166, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$p184, out_$p185, out_$p186, out_$p187, out_$p188, out_$p189, out_$p190, out_$p191, out_$p193, out_$p194, out_$p196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i180, out_$i201, out_$i202, out_$p203, out_$p204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$p241, out_$p242, out_$p243, out_$p244, out_$i245, out_$i246, out_$p247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i229, out_$i230, out_$i231, out_$p232, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i276, out_$i277, out_$i278 := in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p57, in_$p55, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62, in_$i65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p83, in_$i84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p56, in_$i105, in_$i106, in_$i107, in_$i112, in_$i113, in_$p114, in_$p115, in_$i116, in_$i117, in_$p118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p110, in_$i111, in_$i108, in_$p109, in_$i124, in_$p125, in_$i126, in_$p127, in_$p128, in_$p129, in_$i130, in_$p131, in_$p132, in_$p133, in_$p134, in_$i135, in_$p136, in_$p137, in_$p138, in_$p139, in_$i140, in_$i141, in_$i142, in_$i143, in_$p144, in_$p145, in_$p147, in_$p148, in_$p151, in_$i152, in_$p153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$p163, in_$p165, in_$p166, in_$p169, in_$i170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p181, in_$i182, in_$i183, in_$p184, in_$p185, in_$p186, in_$p187, in_$p188, in_$p189, in_$p190, in_$p191, in_$p193, in_$p194, in_$p196, in_$i197, in_$p198, in_$i199, in_$i200, in_$i180, in_$i201, in_$i202, in_$p203, in_$p204, in_$p205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$p211, in_$p212, in_$p213, in_$i214, in_$i215, in_$p216, in_$p217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$p233, in_$p234, in_$p235, in_$i236, in_$i237, in_$p238, in_$p239, in_$p240, in_$p241, in_$p242, in_$p243, in_$p244, in_$i245, in_$i246, in_$p247, in_$p248, in_$i249, in_$i250, in_$i251, in_$i252, in_$p253, in_$p254, in_$p255, in_$p256, in_$p257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i229, in_$i230, in_$i231, in_$p232, in_$i97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i276, in_$i277, in_$i278;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1544;

  $bb102:
    assume out_$i276 == 1;
    assume {:verifier.code 0} true;
    out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48 := out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102;
    goto $bb102_dummy;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$i277, out_$i278 := out_$i97, out_$i100;
    assume true;
    goto $bb102;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$i276 := $ne.i64(out_$i102, 0);
    goto corral_source_split_1617;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102 := out_$i224, out_$p205, out_$i180, out_$i46, out_$i47, out_$i226;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102 := out_$i43, out_$p44, out_$i45, $sub.i32(0, 11), out_$i84, out_$i48;
    goto $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    out_$i94, out_$i95 := out_$i43, out_$i84;
    assume true;
    goto $bb37;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i32(out_$i92, 0);
    goto corral_source_split_1611;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} out_$i92 := mutex_lock_interruptible_nested(out_$p91, 0);
    call {:si_unique_call 300} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p9, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_1609;

  $bb35:
    assume !(out_$i87 == 1);
    goto corral_source_split_1608;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    out_$i88, out_$i89 := out_$i43, out_$i84;
    assume true;
    goto $bb35;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} out_$i86 := signal_pending(out_$p85);
    call {:si_unique_call 296} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_1602;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} out_$p85 := get_current();
    goto corral_source_split_1601;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} out_$i84 := unix_stream_data_wait(in_$p8, out_$i47, out_$p55);
    call {:si_unique_call 293} {:cexpr "timeo"} boogie_si_record_i64(out_$i84);
    goto corral_source_split_1600;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} mutex_unlock(out_$p83);
    goto corral_source_split_1599;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p9, $mul.ref(0, 1696)), $mul.ref(1296, 1));
    goto corral_source_split_1598;

  $bb31:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i43;
    assume true;
    goto $bb31;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i64(out_$i47, 0);
    goto corral_source_split_1587;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} spin_unlock(out_$p78);
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p77, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1585;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_1584;

  $bb28:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76 := out_$i43, out_$i65;
    assume true;
    goto $bb28;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i73, 0);
    goto corral_source_split_1580;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    out_$i73 := $and.i32(out_$i72, 1);
    goto corral_source_split_1579;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i71);
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    out_$i71 := $and.i8(out_$i70, 3);
    goto corral_source_split_1577;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i8($M.0, out_$p69);
    goto corral_source_split_1576;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1575;

  $bb25:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    out_$i67, out_$i68 := out_$i43, out_$i65;
    assume true;
    goto $bb25;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_1571;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} out_$i65 := sock_error(in_$p8);
    call {:si_unique_call 287} {:cexpr "err"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_1570;

  $bb21:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    out_$i61, out_$i62 := out_$i43, out_$i46;
    assume true;
    goto $bb21;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$i60 := $sge.i32(out_$i43, in_$i25);
    goto corral_source_split_1557;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p59, 0);
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p58, $mul.ref(0, 1696)), $mul.ref(1568, 1));
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_1554;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1553;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p57;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    assume out_$i54 == 1;
    goto $bb16;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p52;
    assume true;
    goto $bb15, $bb17;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i53, 0);
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} out_$p52 := skb_peek(out_$p51);
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} spin_lock(out_$p50);
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_1545;

  $bb19:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1561;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$p57 := out_$p118;
    assume true;
    goto $bb19, $bb48;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i64(out_$i120, 0);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$i120 := $p2i.ref.i64(out_$p119);
    goto corral_source_split_1637;

  $bb46:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    out_$p118, out_$p119 := out_$p110, out_$p115;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i64(out_$i116, 0);
    goto corral_source_split_1634;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    out_$i116 := $p2i.ref.i64(out_$p115);
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} out_$p115 := skb_peek_next(out_$p110, out_$p114);
    goto corral_source_split_1632;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$i113 := $sub.i32(out_$i111, out_$i112);
    call {:si_unique_call 309} {:cexpr "skip"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_1630;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} out_$i112 := unix_skb_len(out_$p110);
    call {:si_unique_call 308} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    call out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i122, out_$i123, out_$p110, out_$i111, out_$i124, out_$p125 := unix_stream_recvmsg_loop_$bb44(in_$p8, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i122, out_$i123, out_$p110, out_$i111, out_$i124, out_$p125);
    goto $bb44_last;

  $bb44_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1627;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$p110, out_$i111 := out_$p56, out_$i105;
    goto $bb44;

  $bb50:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$p110, out_$i111 := out_$p115, out_$i113;
    assume false;
    return;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$i124, out_$p125 := out_$i113, out_$p115;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$i123 := $uge.i32(out_$i113, out_$i122);
    goto corral_source_split_1641;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} out_$i122 := unix_skb_len(out_$p115);
    call {:si_unique_call 312} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_1640;

  $bb47:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb42:
    assume out_$i107 == 1;
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$i108, out_$p109 := out_$i105, out_$p56;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i107 := $uge.i32(out_$i105, out_$i106);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} out_$i106 := unix_skb_len(out_$p56);
    call {:si_unique_call 306} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_1620;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} out_$i105 := sk_peek_offset(in_$p8, in_$i4);
    call {:si_unique_call 304} {:cexpr "skip"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_1619;

  $bb18:
    call out_$p57, out_$p56, out_$i105, out_$i106, out_$i107, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p110, out_$i111, out_$i108, out_$p109, out_$i124, out_$p125 := unix_stream_recvmsg_loop_$bb18(in_$i4, in_$p8, out_$p57, out_$p56, out_$i105, out_$i106, out_$i107, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p110, out_$i111, out_$i108, out_$p109, out_$i124, out_$p125);
    goto $bb18_last;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    out_$p56 := out_$p52;
    goto $bb18;

  $bb48:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$p56 := out_$p119;
    assume false;
    return;

  $bb17:
    assume !(out_$i54 == 1);
    goto corral_source_split_1559;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$i260, out_$i261 := out_$i46, out_$i224;
    assume true;
    goto $bb96;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$i259 := $ne.i64(out_$i258, 0);
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$i258 := $p2i.ref.i64(out_$p257);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$p257 := $load.ref($M.0, out_$p256);
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$p256 := $add.ref($add.ref(out_$p255, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$p255 := $load.ref($M.8, out_$p254);
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$p254 := $add.ref($add.ref(in_$p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} consume_skb(out_$p127);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} skb_unlink(out_$p127, out_$p253);
    goto corral_source_split_1807;

  $bb94:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref(in_$p8, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_1806;

  $bb93:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$i251, out_$i252 := out_$i46, out_$i224;
    assume true;
    goto $bb93;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$i250 := $ne.i32(out_$i249, 0);
    goto corral_source_split_1802;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} out_$i249 := unix_skb_len(out_$p127);
    call {:si_unique_call 333} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i249);
    goto corral_source_split_1801;

  $bb90:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} unix_detach_fds(out_$p248, out_$p127);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$p248 := $load.ref($M.8, out_$p247);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(in_$p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1797;

  $bb89:
    assume out_$i246 == 1;
    goto corral_source_split_1796;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i246 := $ne.i64(out_$i245, 0);
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$i245 := $p2i.ref.i64(out_$p244);
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$p244 := $load.ref($M.0, out_$p243);
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(out_$p242, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$p242 := $bitcast.ref.ref(out_$p241);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} sk_peek_offset_bwd(in_$p8, out_$i210);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p240, out_$i237);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$p240 := $add.ref($add.ref(out_$p239, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$p239 := $bitcast.ref.ref(out_$p238);
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$i237 := $add.i32(out_$i236, out_$i210);
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$i236 := $load.i32($M.0, out_$p235);
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(out_$p234, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$p234 := $bitcast.ref.ref(out_$p233);
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1771;

  $bb87:
    assume out_$i228 == 1;
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$i229, out_$i230, out_$i231, out_$p232 := out_$i46, out_$i210, out_$i224, out_$p127;
    assume true;
    goto $bb87;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 0);
    goto corral_source_split_1768;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    out_$i227 := $and.i32(in_$i4, 2);
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    out_$i226 := $sub.i64(out_$i48, out_$i225);
    call {:si_unique_call 329} {:cexpr "size"} boogie_si_record_i64(out_$i226);
    goto corral_source_split_1766;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    out_$i225 := $sext.i32.i64(out_$i210);
    goto corral_source_split_1765;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i224 := $add.i32(out_$i43, out_$i210);
    call {:si_unique_call 328} {:cexpr "copied"} boogie_si_record_i32(out_$i224);
    goto corral_source_split_1764;

  $bb82:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$i220, out_$i221 := out_$i43, out_$i46;
    assume true;
    goto $bb82;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i219 := $ne.i32(out_$i218, 0);
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} out_$i218 := skb_copy_datagram_iovec(out_$p127, out_$i215, out_$p217, out_$i210);
    call {:si_unique_call 327} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i218);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$p217 := $load.ref($M.0, out_$p216);
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(in_$p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$i215 := $add.i32(out_$i214, out_$i126);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$i214 := $load.i32($M.0, out_$p213);
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref($add.ref(out_$p212, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$p212 := $bitcast.ref.ref(out_$p211);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1747;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i210 := out_$i208;
    goto $bb80;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$i210 := out_$i207;
    goto $bb80;

  $bb78:
    assume out_$i209 == 1;
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    out_$i209 := $ult.i32(out_$i207, out_$i208);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i208 := $trunc.i64.i32(out_$i48);
    call {:si_unique_call 325} {:cexpr "__min2"} boogie_si_record_i32(out_$i208);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$i207 := $sub.i32(out_$i206, out_$i126);
    call {:si_unique_call 324} {:cexpr "__min1"} boogie_si_record_i32(out_$i207);
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} out_$i206 := unix_skb_len(out_$p127);
    call {:si_unique_call 323} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i206);
    goto corral_source_split_1737;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_1736;

  $bb76:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    out_$p205 := out_$p44;
    goto $bb77;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$p205 := $0.ref;
    goto $bb77;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} unix_copy_addr(in_$p2, out_$p204);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$p204 := $load.ref($M.0, out_$p203);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_1732;

  $bb75:
    assume out_$i202 == 1;
    goto corral_source_split_1731;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i202 := $ne.i64(out_$i201, 0);
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$i201 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_1711;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_1710;

  $bb74:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i180 := out_$i200;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i180 := out_$i45;
    goto $bb71;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb67:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$i178, out_$i179 := out_$i43, out_$i46;
    assume true;
    goto $bb67;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i32(out_$i176, 0);
    goto corral_source_split_1706;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_1705;

  $bb64:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    out_$i176 := 1;
    goto $bb65;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$i176 := 0;
    goto $bb65;

  $bb63:
    assume out_$i175 == 1;
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$i175 := $trunc.i8.i1(out_$i174);
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$i174 := $zext.i1.i8(out_$i173);
    call {:si_unique_call 319} {:cexpr "tmp___8"} boogie_si_record_i8(out_$i174);
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} out_$i173 := gid_eq(out_$i170, out_$i172);
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i32($M.0, out_$p171);
    goto corral_source_split_1698;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i32($M.0, out_$p169);
    out_$p171 := $add.ref($add.ref($add.ref($add.ref(out_$p166, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref($add.ref(out_$p163, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$p166 := $load.ref($M.8, out_$p165);
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    out_$p163 := $bitcast.ref.ref(out_$p162);
    goto corral_source_split_1692;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1691;

  $bb62:
    assume !(out_$i159 == 1);
    goto corral_source_split_1690;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$i160, out_$i161 := out_$i43, out_$i46;
    assume true;
    goto $bb62;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$i159 := $ne.i32(out_$i158, 0);
    goto corral_source_split_1686;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_1685;

  $bb59:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    out_$i158 := 1;
    goto $bb60;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$i158 := 0;
    goto $bb60;

  $bb58:
    assume out_$i157 == 1;
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i157 := $trunc.i8.i1(out_$i156);
    goto corral_source_split_1681;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$i156 := $zext.i1.i8(out_$i155);
    call {:si_unique_call 317} {:cexpr "tmp___6"} boogie_si_record_i8(out_$i156);
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} out_$i155 := uid_eq(out_$i152, out_$i154);
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i32($M.0, out_$p153);
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.0, out_$p151);
    out_$p153 := $add.ref($add.ref($add.ref($add.ref(out_$p148, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref($add.ref(out_$p145, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1676;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.8, out_$p147);
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1674;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$p145 := $bitcast.ref.ref(out_$p144);
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1671;

  $bb57:
    assume !(out_$i141 == 1);
    goto corral_source_split_1670;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    out_$i142, out_$i143 := out_$i43, out_$i46;
    assume true;
    goto $bb57;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    out_$i141 := $ne.i64(out_$i135, out_$i140);
    goto corral_source_split_1661;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$i140 := $p2i.ref.i64(out_$p139);
    goto corral_source_split_1660;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.0, out_$p138);
    goto corral_source_split_1659;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p137, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1658;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.8, out_$p136);
    goto corral_source_split_1657;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1656;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    out_$i135 := $p2i.ref.i64(out_$p134);
    goto corral_source_split_1655;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.0, out_$p133);
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(out_$p132, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$p132 := $bitcast.ref.ref(out_$p131);
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1651;

  $bb54:
    assume out_$i130 == 1;
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$i130 := $ne.i32(out_$i45, 0);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} spin_unlock(out_$p129);
    goto corral_source_split_1647;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p128, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1646;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p128 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_1645;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$i126, out_$p127 := out_$i108, out_$p109;
    goto $bb52;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    out_$i126, out_$p127 := out_$i124, out_$p125;
    goto $bb52;

  $bb51:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1643;

  $bb43:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1625;

  $bb73:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    out_$i200 := out_$i45;
    goto $bb74;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$i200 := 1;
    goto $bb74;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} scm_set_cred(out_$p185, out_$p189, out_$i197, out_$i199);
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$i199 := $load.i32($M.0, out_$p198);
    goto corral_source_split_1728;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i32($M.0, out_$p196);
    out_$p198 := $add.ref($add.ref($add.ref(out_$p194, $mul.ref(0, 32)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref($add.ref(out_$p191, $mul.ref(0, 32)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$p194 := $bitcast.ref.ref(out_$p193);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$p191 := $bitcast.ref.ref(out_$p190);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p189 := $load.ref($M.0, out_$p188);
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(out_$p187, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    out_$p187 := $bitcast.ref.ref(out_$p186);
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref(out_$p127, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$p185 := $load.ref($M.8, out_$p184);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref(in_$p6, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_1715;

  $bb72:
    assume out_$i183 == 1;
    goto corral_source_split_1714;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    out_$i183 := $ne.i32(out_$i182, 0);
    goto corral_source_split_1666;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} out_$i182 := constant_test_bit(3, out_$p181);
    call {:si_unique_call 315} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i182);
    goto corral_source_split_1665;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1664;

  $bb55:
    assume !(out_$i130 == 1);
    goto corral_source_split_1663;

  $bb79:
    assume !(out_$i209 == 1);
    goto corral_source_split_1744;

  $bb102_dummy:
    call {:si_unique_call 1} out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p57, out_$p55, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p56, out_$i105, out_$i106, out_$i107, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p110, out_$i111, out_$i108, out_$p109, out_$i124, out_$p125, out_$i126, out_$p127, out_$p128, out_$p129, out_$i130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$p147, out_$p148, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$p166, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$p184, out_$p185, out_$p186, out_$p187, out_$p188, out_$p189, out_$p190, out_$p191, out_$p193, out_$p194, out_$p196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i180, out_$i201, out_$i202, out_$p203, out_$p204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$p241, out_$p242, out_$p243, out_$p244, out_$i245, out_$i246, out_$p247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i229, out_$i230, out_$i231, out_$p232, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i276, out_$i277, out_$i278 := unix_stream_recvmsg_loop_$bb14(in_$p1, in_$p2, in_$i4, in_$p6, in_$p8, in_$p9, in_$i25, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p57, out_$p55, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62, out_$i65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p83, out_$i84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p56, out_$i105, out_$i106, out_$i107, out_$i112, out_$i113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p110, out_$i111, out_$i108, out_$p109, out_$i124, out_$p125, out_$i126, out_$p127, out_$p128, out_$p129, out_$i130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$p147, out_$p148, out_$p151, out_$i152, out_$p153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p165, out_$p166, out_$p169, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p181, out_$i182, out_$i183, out_$p184, out_$p185, out_$p186, out_$p187, out_$p188, out_$p189, out_$p190, out_$p191, out_$p193, out_$p194, out_$p196, out_$i197, out_$p198, out_$i199, out_$i200, out_$i180, out_$i201, out_$i202, out_$p203, out_$p204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p211, out_$p212, out_$p213, out_$i214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$p233, out_$p234, out_$p235, out_$i236, out_$i237, out_$p238, out_$p239, out_$p240, out_$p241, out_$p242, out_$p243, out_$p244, out_$i245, out_$i246, out_$p247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i229, out_$i230, out_$i231, out_$p232, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i276, out_$i277, out_$i278);
    return;

  exit:
    return;
}



procedure unix_stream_recvmsg_loop_$bb14(in_$p1: ref, in_$p2: ref, in_$i4: i32, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$i25: i32, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p57: ref, in_$p55: ref, in_$p58: ref, in_$p59: ref, in_$i60: i1, in_$i61: i32, in_$i62: i32, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i32, in_$p69: ref, in_$i70: i8, in_$i71: i8, in_$i72: i32, in_$i73: i32, in_$i74: i1, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$p78: ref, in_$i79: i1, in_$i80: i32, in_$p83: ref, in_$i84: i64, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i64, in_$p91: ref, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i64, in_$p56: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i112: i32, in_$i113: i32, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$i117: i1, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$p110: ref, in_$i111: i32, in_$i108: i32, in_$p109: ref, in_$i124: i32, in_$p125: ref, in_$i126: i32, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i64, in_$i141: i1, in_$i142: i32, in_$i143: i32, in_$p144: ref, in_$p145: ref, in_$p147: ref, in_$p148: ref, in_$p151: ref, in_$i152: i32, in_$p153: ref, in_$i154: i32, in_$i155: i1, in_$i156: i8, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i32, in_$p162: ref, in_$p163: ref, in_$p165: ref, in_$p166: ref, in_$p169: ref, in_$i170: i32, in_$p171: ref, in_$i172: i32, in_$i173: i1, in_$i174: i8, in_$i175: i1, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i32, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p193: ref, in_$p194: ref, in_$p196: ref, in_$i197: i32, in_$p198: ref, in_$i199: i32, in_$i200: i32, in_$i180: i32, in_$i201: i64, in_$i202: i1, in_$p203: ref, in_$p204: ref, in_$p205: ref, in_$i206: i32, in_$i207: i32, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$p211: ref, in_$p212: ref, in_$p213: ref, in_$i214: i32, in_$i215: i32, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i32, in_$i224: i32, in_$i225: i64, in_$i226: i64, in_$i227: i32, in_$i228: i1, in_$p233: ref, in_$p234: ref, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$p241: ref, in_$p242: ref, in_$p243: ref, in_$p244: ref, in_$i245: i64, in_$i246: i1, in_$p247: ref, in_$p248: ref, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i32, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$i258: i64, in_$i259: i1, in_$i260: i32, in_$i261: i32, in_$i229: i32, in_$i230: i32, in_$i231: i32, in_$p232: ref, in_$i97: i32, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i64, in_$i102: i64, in_$i276: i1, in_$i277: i32, in_$i278: i32) returns (out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p57: ref, out_$p55: ref, out_$p58: ref, out_$p59: ref, out_$i60: i1, out_$i61: i32, out_$i62: i32, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i32, out_$p69: ref, out_$i70: i8, out_$i71: i8, out_$i72: i32, out_$i73: i32, out_$i74: i1, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$p78: ref, out_$i79: i1, out_$i80: i32, out_$p83: ref, out_$i84: i64, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i64, out_$p91: ref, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i64, out_$p56: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i112: i32, out_$i113: i32, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$i117: i1, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$p110: ref, out_$i111: i32, out_$i108: i32, out_$p109: ref, out_$i124: i32, out_$p125: ref, out_$i126: i32, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i64, out_$i141: i1, out_$i142: i32, out_$i143: i32, out_$p144: ref, out_$p145: ref, out_$p147: ref, out_$p148: ref, out_$p151: ref, out_$i152: i32, out_$p153: ref, out_$i154: i32, out_$i155: i1, out_$i156: i8, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i32, out_$p162: ref, out_$p163: ref, out_$p165: ref, out_$p166: ref, out_$p169: ref, out_$i170: i32, out_$p171: ref, out_$i172: i32, out_$i173: i1, out_$i174: i8, out_$i175: i1, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i32, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p193: ref, out_$p194: ref, out_$p196: ref, out_$i197: i32, out_$p198: ref, out_$i199: i32, out_$i200: i32, out_$i180: i32, out_$i201: i64, out_$i202: i1, out_$p203: ref, out_$p204: ref, out_$p205: ref, out_$i206: i32, out_$i207: i32, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$p211: ref, out_$p212: ref, out_$p213: ref, out_$i214: i32, out_$i215: i32, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i32, out_$i224: i32, out_$i225: i64, out_$i226: i64, out_$i227: i32, out_$i228: i1, out_$p233: ref, out_$p234: ref, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$p241: ref, out_$p242: ref, out_$p243: ref, out_$p244: ref, out_$i245: i64, out_$i246: i1, out_$p247: ref, out_$p248: ref, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i32, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$i258: i64, out_$i259: i1, out_$i260: i32, out_$i261: i32, out_$i229: i32, out_$i230: i32, out_$i231: i32, out_$p232: ref, out_$i97: i32, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i64, out_$i102: i64, out_$i276: i1, out_$i277: i32, out_$i278: i32);
  modifies $M.1, $M.0, $CurrAddr, $M.20, $M.11, $M.12, $M.22, $M.9, $M.10, $M.23;



implementation unix_stream_data_wait_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p18: ref, in_$i21: i64, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p29: ref, in_$i30: i8, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i64, in_$i28: i64, in_$i36: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i41: i64, in_$i42: i1, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1) returns (out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p29: ref, out_$i30: i8, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i64, out_$i28: i64, out_$i36: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i41: i64, out_$i42: i1, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1)
{

  entry:
    out_$i24, out_$p25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i28, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58 := in_$i24, in_$p25, in_$i26, in_$i27, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i28, in_$i36, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1955;

  $bb18:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i49;
    goto $bb18_dummy;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i49;
    assume true;
    goto $bb18;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, in_$i21);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} out_$p56 := skb_peek_tail(in_$p18);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} prepare_to_wait(out_$p55, in_$p3, 1);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} out_$p55 := sk_sleep(in_$p0);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} clear_bit(1, out_$p54);
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} spin_lock(out_$p51);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_2002;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} out_$i49 := freezable_schedule_timeout(out_$i24);
    call {:si_unique_call 380} {:cexpr "timeo"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} spin_unlock(out_$p48);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} set_bit(1, out_$p46);
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_1994;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_1993;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i24;
    assume true;
    goto $bb14;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i64(out_$i24, 0);
    goto corral_source_split_1989;

  $bb12:
    assume !(out_$i40 == 1);
    goto corral_source_split_1988;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i24;
    assume true;
    goto $bb12;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} out_$i39 := signal_pending(out_$p38);
    call {:si_unique_call 373} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} out_$p38 := get_current();
    goto corral_source_split_1973;

  $bb8:
    assume !(out_$i34 == 1);
    goto corral_source_split_1972;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i24;
    assume true;
    goto $bb8;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i32(out_$i32, 1);
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i31);
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$i31 := $and.i8(out_$i30, 3);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i8($M.0, out_$p29);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_1963;

  $bb6:
    assume !(out_$i27 == 1);
    goto corral_source_split_1962;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i24;
    assume true;
    goto $bb6;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1272)), $mul.ref(952, 1));
    goto corral_source_split_1956;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i24, out_$p25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i28, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58 := unix_stream_data_wait_loop_$bb4(in_$p0, in_$p3, in_$p18, in_$i21, out_$i24, out_$p25, out_$i26, out_$i27, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i28, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58);
    return;

  exit:
    return;
}



procedure unix_stream_data_wait_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p18: ref, in_$i21: i64, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p29: ref, in_$i30: i8, in_$i31: i8, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i35: i64, in_$i28: i64, in_$i36: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i41: i64, in_$i42: i1, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1) returns (out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p29: ref, out_$i30: i8, out_$i31: i8, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i35: i64, out_$i28: i64, out_$i36: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i41: i64, out_$i42: i1, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1);
  modifies $M.1, $M.0;



implementation unix_detach_fds_loop_$bb4(in_$p0: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i17: i32) returns (out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i17: i32)
{

  entry:
    out_$i18, out_$p19, out_$p20, out_$p22, out_$p23, out_$i24, out_$i25, out_$i17 := in_$i18, in_$p19, in_$p20, in_$p22, in_$p23, in_$i24, in_$i25, in_$i17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2171;

  $bb6:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i24;
    goto $bb6_dummy;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    out_$i25 := $sge.i32(out_$i24, 0);
    goto corral_source_split_2180;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i17, 1);
    call {:si_unique_call 422} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} unix_notinflight(out_$p23);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2177;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 2032)), $mul.ref(8, 1)), $mul.ref(out_$i18, 8));
    goto corral_source_split_2176;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2174;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i17);
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i18, out_$p19, out_$p20, out_$p22, out_$p23, out_$i24, out_$i25, out_$i17 := unix_detach_fds_loop_$bb4(in_$p0, out_$i18, out_$p19, out_$p20, out_$p22, out_$p23, out_$i24, out_$i25, out_$i17);
    return;

  exit:
    return;
}



procedure unix_detach_fds_loop_$bb4(in_$p0: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$i17: i32) returns (out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$i17: i32);
  modifies $M.20, $M.1, $M.0, $CurrAddr;



implementation unix_notinflight_loop_$bb5()
{

  entry:
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb5_dummy;

  $bb5_dummy:
    call {:si_unique_call 1} unix_notinflight_loop_$bb5();
    return;

  exit:
    return;
}



procedure unix_notinflight_loop_$bb5();



implementation wait_for_unix_gc_loop_$bb14(in_$p0: ref, in_$i12: i64, in_$i13: i8, in_$i14: i1) returns (out_$i12: i64, out_$i13: i8, out_$i14: i1)
{

  entry:
    out_$i12, out_$i13, out_$i14 := in_$i12, in_$i13, in_$i14;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb18_dummy;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i14 := $trunc.i8.i1(out_$i13);
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$i13 := $M.24;
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} out_$i12 := prepare_to_wait_event(unix_gc_wait, in_$p0, 2);
    call {:si_unique_call 574} {:cexpr "tmp"} boogie_si_record_i64(out_$i12);
    goto corral_source_split_2666;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} schedule();
    goto corral_source_split_2665;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14 := wait_for_unix_gc_loop_$bb14(in_$p0, out_$i12, out_$i13, out_$i14);
    return;

  exit:
    return;
}



procedure wait_for_unix_gc_loop_$bb14(in_$p0: ref, in_$i12: i64, in_$i13: i8, in_$i14: i1) returns (out_$i12: i64, out_$i13: i8, out_$i14: i1);



implementation unix_attach_fds_loop_$bb27(in_$p0: ref, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i67: i32) returns (out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i67: i32)
{

  entry:
    out_$i68, out_$p69, out_$p70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i67 := in_$i68, in_$p69, in_$p70, in_$p72, in_$p73, in_$i74, in_$i75, in_$i67;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2926;

  $bb29:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := out_$i74;
    goto $bb29_dummy;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$i75 := $sge.i32(out_$i74, 0);
    goto corral_source_split_2935;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i32(out_$i67, 1);
    call {:si_unique_call 641} {:cexpr "i"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_2934;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} unix_inflight(out_$p73);
    goto corral_source_split_2933;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_2932;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(out_$p70, $mul.ref(0, 2032)), $mul.ref(8, 1)), $mul.ref(out_$i68, 8));
    goto corral_source_split_2931;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_2930;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2929;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i67);
    goto corral_source_split_2928;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i68, out_$p69, out_$p70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i67 := unix_attach_fds_loop_$bb27(in_$p0, out_$i68, out_$p69, out_$p70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i67);
    return;

  exit:
    return;
}



procedure unix_attach_fds_loop_$bb27(in_$p0: ref, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i67: i32) returns (out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i67: i32);
  modifies $M.20, $M.1;



implementation unix_attach_fds_loop_$bb4(in_$p0: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i32: i32, in_$i31: i32, in_$i33: i8, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i11: i32, in_$i12: i8, in_$i13: i32, in_$i38: i8, in_$i39: i32) returns (out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i32: i32, out_$i31: i32, out_$i33: i8, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i11: i32, out_$i12: i8, out_$i13: i32, out_$i38: i8, out_$i39: i32)
{

  entry:
    out_$i14, out_$p15, out_$p16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i32, out_$i31, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i11, out_$i12, out_$i13, out_$i38, out_$i39 := in_$i14, in_$p15, in_$p16, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i32, in_$i31, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i11, in_$i12, in_$i13, in_$i38, in_$i39;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2851;

  $bb12:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$i12, out_$i13 := out_$i35, out_$i34, out_$i36;
    goto $bb12_dummy;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    out_$i38, out_$i39 := out_$i34, out_$i35;
    assume true;
    goto $bb12;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$i37 := $sge.i32(out_$i36, 0);
    goto corral_source_split_2882;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i13, 1);
    call {:si_unique_call 635} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_2881;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i34, out_$i35 := out_$i12, out_$i11;
    goto $bb11;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    out_$i34, out_$i35 := out_$i33, out_$i23;
    goto $bb11;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i32.i8(out_$i31);
    call {:si_unique_call 634} {:cexpr "max_level"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_2878;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i32;
    goto $bb10;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i30;
    goto $bb10;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i32(out_$i12);
    goto corral_source_split_2872;

  $bb8:
    assume out_$i29 == 1;
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    out_$i29 := $sgt.i32(out_$i27, out_$i28);
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i26);
    goto corral_source_split_2868;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i12);
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    call {:si_unique_call 633} {:cexpr "_max2"} boogie_si_record_i8(out_$i26);
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 1696)), $mul.ref(1568, 1));
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_2864;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i11, 1);
    call {:si_unique_call 632} {:cexpr "unix_sock_count"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2863;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_2862;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_2860;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_2859;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} out_$p20 := unix_get_socket(out_$p19);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_2857;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 2032)), $mul.ref(8, 1)), $mul.ref(out_$i14, 8));
    goto corral_source_split_2856;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_2855;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2854;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_2853;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i8.i32(out_$i26);
    goto corral_source_split_2875;

  $bb9:
    assume !(out_$i29 == 1);
    goto corral_source_split_2874;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i14, out_$p15, out_$p16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i32, out_$i31, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i11, out_$i12, out_$i13, out_$i38, out_$i39 := unix_attach_fds_loop_$bb4(in_$p0, out_$i14, out_$p15, out_$p16, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i32, out_$i31, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i11, out_$i12, out_$i13, out_$i38, out_$i39);
    return;

  exit:
    return;
}



procedure unix_attach_fds_loop_$bb4(in_$p0: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i32: i32, in_$i31: i32, in_$i33: i8, in_$i34: i8, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i11: i32, in_$i12: i8, in_$i13: i32, in_$i38: i8, in_$i39: i32) returns (out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i32: i32, out_$i31: i32, out_$i33: i8, out_$i34: i8, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i11: i32, out_$i12: i8, out_$i13: i32, out_$i38: i8, out_$i39: i32);



implementation unix_inflight_loop_$bb12()
{

  entry:
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb12_dummy:
    call {:si_unique_call 1} unix_inflight_loop_$bb12();
    return;

  exit:
    return;
}



procedure unix_inflight_loop_$bb12();



implementation unix_inflight_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} unix_inflight_loop_$bb7();
    return;

  exit:
    return;
}



procedure unix_inflight_loop_$bb7();



implementation unix_gc_loop_$bb61()
{

  entry:
    goto $bb61, exit;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb61_dummy;

  $bb61_dummy:
    call {:si_unique_call 1} unix_gc_loop_$bb61();
    return;

  exit:
    return;
}



procedure unix_gc_loop_$bb61();



implementation unix_gc_loop_$bb54(in_$p0: ref, in_$p102: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$p101: ref) returns (out_$p102: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$p101: ref)
{

  entry:
    out_$p102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p101 := in_$p102, in_$p104, in_$p105, in_$p106, in_$p107, in_$p108, in_$i109, in_$i110, in_$p101;
    goto $bb54, exit;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3189;

  $bb56:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$p101 := out_$p107;
    goto $bb56_dummy;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i64(out_$i109, $p2i.ref.i64(gc_candidates));
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    out_$i109 := $p2i.ref.i64(out_$p108);
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p106, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref(out_$p106, $mul.ref($sub.ref(0, 1472), 1696));
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(out_$p105);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_3194;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref(out_$p101, $mul.ref(0, 1696)), $mul.ref(1472, 1)), $mul.ref(0, 1));
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} scan_children(out_$p102, inc_inflight, in_$p0);
    goto corral_source_split_3192;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 1696)), $mul.ref(0, 1));
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb56_dummy:
    call {:si_unique_call 1} out_$p102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p101 := unix_gc_loop_$bb54(in_$p0, out_$p102, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$i109, out_$i110, out_$p101);
    return;

  exit:
    return;
}



procedure unix_gc_loop_$bb54(in_$p0: ref, in_$p102: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$p101: ref) returns (out_$p102: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$p101: ref);
  modifies $M.0, $M.1, $CurrAddr, $M.20;



implementation unix_gc_loop_$bb46(in_$p2: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$i94: i1) returns (out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$i94: i1)
{

  entry:
    out_$p87, out_$p88, out_$p89, out_$p91, out_$p92, out_$i93, out_$i94 := in_$p87, in_$p88, in_$p89, in_$p91, in_$p92, in_$i93, in_$i94;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb48:
    assume {:verifier.code 0} true;
    assume out_$i94 == 1;
    goto $bb48_dummy;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 0);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} out_$i93 := list_empty(in_$p2);
    call {:si_unique_call 709} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} list_move_tail(out_$p92, gc_inflight_list);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p89, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} __clear_bit(0, out_$p91);
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p89, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_3167;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3166;

  $bb48_dummy:
    call {:si_unique_call 1} out_$p87, out_$p88, out_$p89, out_$p91, out_$p92, out_$i93, out_$i94 := unix_gc_loop_$bb46(in_$p2, out_$p87, out_$p88, out_$p89, out_$p91, out_$p92, out_$i93, out_$i94);
    return;

  exit:
    return;
}



procedure unix_gc_loop_$bb46(in_$p2: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p91: ref, in_$p92: ref, in_$i93: i32, in_$i94: i1) returns (out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p91: ref, out_$p92: ref, out_$i93: i32, out_$i94: i1);



implementation unix_gc_loop_$bb35(in_$p1: ref, in_$p2: ref, in_$p67: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1) returns (out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1)
{

  entry:
    out_$p71, out_$p72, out_$p73, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84 := in_$p71, in_$p72, in_$p73, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i84 == 1;
    goto $bb40_dummy;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, $p2i.ref.i64(gc_candidates));
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_3155;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, in_$p67);
    goto corral_source_split_3154;

  $bb38:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} scan_children(out_$p81, inc_inflight_move_tail, $0.ref);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p73, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(0, 1));
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} __clear_bit(1, out_$p80);
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p73, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} list_move_tail(out_$p79, in_$p2);
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p73, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3147;

  $bb37:
    assume out_$i78 == 1;
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i64(out_$i77, 0);
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} out_$i77 := atomic_long_read(out_$p76);
    call {:si_unique_call 699} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i77);
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p73, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1488, 1));
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} list_move(in_$p1, out_$p75);
    goto corral_source_split_3141;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p73, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3140;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    goto corral_source_split_3139;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_3138;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_3137;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3136;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p71, out_$p72, out_$p73, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84 := unix_gc_loop_$bb35(in_$p1, in_$p2, in_$p67, out_$p71, out_$p72, out_$p73, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84);
    return;

  exit:
    return;
}



procedure unix_gc_loop_$bb35(in_$p1: ref, in_$p2: ref, in_$p67: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1) returns (out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1);
  modifies $M.0, $M.1, $CurrAddr, $M.20;



implementation unix_gc_loop_$bb27(in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p57: ref) returns (out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p57: ref)
{

  entry:
    out_$p58, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p57 := in_$p58, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p57;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3114;

  $bb29:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$p57 := out_$p63;
    goto $bb29_dummy;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i64(out_$i65, $p2i.ref.i64(gc_candidates));
    goto corral_source_split_3124;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p62, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p62, $mul.ref($sub.ref(0, 1472), 1696));
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 1696)), $mul.ref(1472, 1)), $mul.ref(0, 1));
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} scan_children(out_$p58, dec_inflight, $0.ref);
    goto corral_source_split_3117;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 1696)), $mul.ref(0, 1));
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p58, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p57 := unix_gc_loop_$bb27(out_$p58, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p57);
    return;

  exit:
    return;
}



procedure unix_gc_loop_$bb27(in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p57: ref) returns (out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p57: ref);
  modifies $M.0, $M.1, $CurrAddr, $M.20;



implementation unix_gc_loop_$bb16()
{

  entry:
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;

  $bb16_dummy:
    call {:si_unique_call 1} unix_gc_loop_$bb16();
    return;

  exit:
    return;
}



procedure unix_gc_loop_$bb16();



implementation unix_gc_loop_$bb12()
{

  entry:
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb12_dummy;

  $bb12_dummy:
    call {:si_unique_call 1} unix_gc_loop_$bb12();
    return;

  exit:
    return;
}



procedure unix_gc_loop_$bb12();



implementation unix_gc_loop_$bb8(in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$i37: i64, in_$i38: i1, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p18: ref, in_$p19: ref) returns (out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$i37: i64, out_$i38: i1, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p18: ref, out_$p19: ref)
{

  entry:
    out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p18, out_$p19 := in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p18, in_$p19;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3059;

  $bb21:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p18, out_$p19 := out_$p19, out_$p47;
    goto $bb21_dummy;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, $p2i.ref.i64(gc_inflight_list));
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p19, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p46, $mul.ref($sub.ref(0, 1472), 1696));
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3096;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 1696)), $mul.ref(1472, 1)), $mul.ref(0, 1));
    goto corral_source_split_3095;

  $bb19:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} __set_bit(1, out_$p42);
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} __set_bit(0, out_$p41);
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} list_move_tail(out_$p40, gc_candidates);
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3088;

  $bb18:
    assume out_$i39 == 1;
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i26, out_$i28);
    goto corral_source_split_3085;

  $bb15:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} out_$i37 := ldv__builtin_expect(out_$i36, 0);
    call {:si_unique_call 690} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i35);
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i32(out_$i34);
    goto corral_source_split_3078;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i64(out_$i26, out_$i28);
    goto corral_source_split_3077;

  $bb11:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, 0);
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} out_$i32 := ldv__builtin_expect(out_$i31, 0);
    call {:si_unique_call 687} {:cexpr "tmp"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_3071;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i1.i32(out_$i29);
    goto corral_source_split_3070;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i29 := $sle.i64(out_$i28, 0);
    goto corral_source_split_3069;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} out_$i28 := atomic_long_read(out_$p27);
    call {:si_unique_call 685} {:cexpr "inflight_refs"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1696)), $mul.ref(1488, 1));
    goto corral_source_split_3067;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} out_$i26 := atomic_long_read(out_$p25);
    call {:si_unique_call 683} {:cexpr "total_refs"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_3066;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 512)), $mul.ref(120, 1));
    goto corral_source_split_3065;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_3064;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_3062;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 1696)), $mul.ref(0, 1)), $mul.ref(1152, 1));
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p18, out_$p19 := unix_gc_loop_$bb8(out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p18, out_$p19);
    return;

  exit:
    return;
}



procedure unix_gc_loop_$bb8(in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i64, in_$i37: i64, in_$i38: i1, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p18: ref, in_$p19: ref) returns (out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i64, out_$i37: i64, out_$i38: i1, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p18: ref, out_$p19: ref);



implementation scan_children_loop_$bb19(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1) returns (out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1)
{

  entry:
    out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$i50, out_$i51 := in_$p44, in_$p45, in_$p46, in_$p48, in_$p49, in_$i50, in_$i51;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i51 == 1;
    goto $bb21_dummy;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 0);
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} out_$i50 := list_empty(in_$p3);
    call {:si_unique_call 747} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} list_del_init(out_$p49);
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p46, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} scan_inflight(out_$p48, in_$p1, in_$p2);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p46, $mul.ref($sub.ref(0, 1472), 1696)), $mul.ref(0, 1));
    goto corral_source_split_3299;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3296;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3295;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$i50, out_$i51 := scan_children_loop_$bb19(in_$p1, in_$p2, in_$p3, out_$p44, out_$p45, out_$p46, out_$p48, out_$p49, out_$i50, out_$i51);
    return;

  exit:
    return;
}



procedure scan_children_loop_$bb19(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1) returns (out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1);
  modifies $M.0, $M.1, $M.20, $CurrAddr;



implementation scan_children_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} scan_children_loop_$bb11();
    return;

  exit:
    return;
}



procedure scan_children_loop_$bb11();



implementation scan_children_loop_$bb7(in_$p3: ref, in_$i20: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p23: ref, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p23: ref, out_$p24: ref)
{

  entry:
    out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p23, out_$p24 := in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p23, in_$p24;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3264;

  $bb13:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$p23, out_$p24 := out_$p37, out_$p23;
    goto $bb13_dummy;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(in_$i20, out_$i38);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p23, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} list_add_tail(out_$p35, in_$p3);
    goto corral_source_split_3280;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p27, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3279;

  $bb10:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} out_$i33 := ldv__builtin_expect(out_$i32, 0);
    call {:si_unique_call 738} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i31);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i32(out_$i30);
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} out_$i29 := list_empty(out_$p28);
    call {:si_unique_call 736} {:cexpr "tmp"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 1696)), $mul.ref(1472, 1));
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_3267;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p23, out_$p24 := scan_children_loop_$bb7(in_$p3, in_$i20, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p23, out_$p24);
    return;

  exit:
    return;
}



procedure scan_children_loop_$bb7(in_$p3: ref, in_$i20: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i64, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p23: ref, in_$p24: ref) returns (out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i64, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p23: ref, out_$p24: ref);



implementation __skb_queue_purge_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p4: ref) returns (out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p4: ref)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$p4 := in_$p5, in_$i6, in_$i7, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3351;

  $bb6:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p5;
    goto $bb6_dummy;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i64(out_$i6, 0);
    goto corral_source_split_3356;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_$p5 := __skb_dequeue(in_$p0);
    goto corral_source_split_3354;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} kfree_skb(out_$p4);
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$p4 := __skb_queue_purge_loop_$bb4(in_$p0, out_$p5, out_$i6, out_$i7, out_$p4);
    return;

  exit:
    return;
}



procedure __skb_queue_purge_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p4: ref) returns (out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p4: ref);
  modifies $M.0;



implementation scan_inflight_loop_$bb11(in_$p1: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i39: i32, in_$p40: ref, in_$i41: i8, in_$i55: i8) returns (out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i39: i32, out_$p40: ref, out_$i41: i8, out_$i55: i8)
{

  entry:
    out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$p40, out_$i41, out_$i55 := in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i39, in_$p40, in_$i41, in_$i55;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3454;

  $bb19:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i39, out_$p40, out_$i41 := out_$i53, out_$p42, out_$i52;
    goto $bb19_dummy;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i52;
    assume true;
    goto $bb19;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(out_$i39, 1);
    call {:si_unique_call 778} {:cexpr "nfd"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3473;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3472;

  $bb14:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := out_$i41;
    goto $bb18;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i51;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  $bb16:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i41;
    goto $bb17;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i51 := 1;
    goto $bb17;

  $bb15:
    assume out_$i50 == 1;
    call {:si_unique_call 777} devirtbounce.12(in_$p1, out_$p47);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} out_$i49 := constant_test_bit(0, out_$p48);
    call {:si_unique_call 776} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_3463;

  $bb13:
    assume out_$i46 == 1;
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} out_$p44 := unix_get_socket(out_$p43);
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3457;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p40, $mul.ref(1, 8));
    goto corral_source_split_3456;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$p40, out_$i41, out_$i55 := scan_inflight_loop_$bb11(in_$p1, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$p40, out_$i41, out_$i55);
    return;

  exit:
    return;
}



procedure scan_inflight_loop_$bb11(in_$p1: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i39: i32, in_$p40: ref, in_$i41: i8, in_$i55: i8) returns (out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i39: i32, out_$p40: ref, out_$i41: i8, out_$i55: i8);
  modifies $M.0, $M.20, $CurrAddr, $M.1;



implementation scan_inflight_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i12: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i36: i32, in_$i37: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i39: i32, in_$p40: ref, in_$i41: i8, in_$i55: i8, in_$i38: i8, in_$i56: i1, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i36: i32, out_$i37: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i39: i32, out_$p40: ref, out_$i41: i8, out_$i55: i8, out_$i38: i8, out_$i56: i1, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p15: ref, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i36, out_$i37, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$p40, out_$i41, out_$i55, out_$i38, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p15, out_$p16 := in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i36, in_$i37, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i39, in_$p40, in_$i41, in_$i55, in_$i38, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p15, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3426;

  $bb29:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16 := out_$p16, out_$p61;
    goto $bb29_dummy;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(in_$i12, out_$i62);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_3490;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p16, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3489;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} __skb_queue_tail(in_$p2, out_$p15);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} __skb_unlink(out_$p15, out_$p59);
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1272)), $mul.ref(328, 1));
    goto corral_source_split_3485;

  $bb25:
    assume out_$i58 == 1;
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_3481;

  $bb22:
    assume out_$i56 == 1;
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i8.i1(out_$i38);
    goto corral_source_split_3478;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb10;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i55;
    goto $bb10;

  $bb20:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i52;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(out_$i39, 1);
    call {:si_unique_call 778} {:cexpr "nfd"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3473;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3472;

  $bb14:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := out_$i41;
    goto $bb18;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i51;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3470;

  $bb16:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i41;
    goto $bb17;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i51 := 1;
    goto $bb17;

  $bb15:
    assume out_$i50 == 1;
    call {:si_unique_call 777} devirtbounce.12(in_$p1, out_$p47);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_3466;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} out_$i49 := constant_test_bit(0, out_$p48);
    call {:si_unique_call 776} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 1696)), $mul.ref(1576, 1));
    goto corral_source_split_3464;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_3463;

  $bb13:
    assume out_$i46 == 1;
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} out_$p44 := unix_get_socket(out_$p43);
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3457;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p40, $mul.ref(1, 8));
    goto corral_source_split_3456;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb11:
    call out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$p40, out_$i41, out_$i55 := scan_inflight_loop_$bb11(in_$p1, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$p40, out_$i41, out_$i55);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3454;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$i39, out_$p40, out_$i41 := out_$i36, out_$p34, 0;
    goto $bb11;

  $bb19:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i39, out_$p40, out_$i41 := out_$i53, out_$p42, out_$i52;
    assume false;
    return;

  $bb8:
    assume out_$i37 == 1;
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$i38 := 0;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i29, 0);
    goto corral_source_split_3450;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i29, 1);
    call {:si_unique_call 773} {:cexpr "nfd"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    goto corral_source_split_3448;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 2032)), $mul.ref(8, 1));
    goto corral_source_split_3447;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3445;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_3444;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p15, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3443;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i16.i32(out_$i28);
    call {:si_unique_call 772} {:cexpr "nfd"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3442;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i16($M.0, out_$p27);
    goto corral_source_split_3441;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 2032)), $mul.ref(0, 1));
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3438;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_3437;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p15, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3436;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_3431;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_3430;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_3429;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p15, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb24;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i36, out_$i37, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$p40, out_$i41, out_$i55, out_$i38, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p15, out_$p16 := scan_inflight_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$i12, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i36, out_$i37, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i39, out_$p40, out_$i41, out_$i55, out_$i38, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p15, out_$p16);
    return;

  exit:
    return;
}



procedure scan_inflight_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i12: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i36: i32, in_$i37: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$i51: i8, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$i39: i32, in_$p40: ref, in_$i41: i8, in_$i55: i8, in_$i38: i8, in_$i56: i1, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i36: i32, out_$i37: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$i51: i8, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$i39: i32, out_$p40: ref, out_$i41: i8, out_$i55: i8, out_$i38: i8, out_$i56: i1, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$p15: ref, out_$p16: ref);
  modifies $M.0, $M.20, $CurrAddr, $M.1;



implementation unix_autobind_loop_$bb12(in_$p0: ref, in_$p3: ref, in_$p15: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$i54: i32, in_$i55: i1, in_vslice_dummy_var_79: i32) returns (out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$i54: i32, out_$i55: i1, out_vslice_dummy_var_79: i32)
{

  entry:
    out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i54, out_$i55, out_vslice_dummy_var_79 := in_$i22, in_$i23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i54, in_$i55, in_vslice_dummy_var_79;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3821;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i22, out_$i23 := out_$i40, out_$i54;
    goto $bb17_dummy;

  $bb16:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i23, 1048575);
    goto corral_source_split_3860;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i23, 1);
    call {:si_unique_call 870} {:cexpr "retries"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} out_vslice_dummy_var_79 := _cond_resched();
    goto corral_source_split_3858;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} __might_sleep(.str.4, 812, 0);
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} spin_unlock(unix_table_lock);
    goto corral_source_split_3856;

  $bb13:
    assume out_$i52 == 1;
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_$p50 := __unix_find_socket_byname(in_$p3, out_$p42, out_$i44, out_$i47, out_$i49);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p15, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i16.i32(out_$i46);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i16($M.0, out_$p45);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p15, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p15, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i39, 1048575);
    call {:si_unique_call 865} {:cexpr "ordernum"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i22, 1);
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} spin_lock(unix_table_lock);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p38, out_$i37);
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p15, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} out_$i37 := unix_hash_fold(out_$i36);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} out_$i36 := csum_partial(out_$p33, out_$i35, 0);
    call {:si_unique_call 862} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p15, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p15, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p31, out_$i30);
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p15, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i29, 3);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} out_$i29 := sprintf.ref.ref.i32(out_$p28, .str.3, out_$i22);
    call {:si_unique_call 860} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p27, $mul.ref(1, 1));
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 110)), $mul.ref(2, 1));
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p15, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_3822;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i54, out_$i55, out_vslice_dummy_var_79 := unix_autobind_loop_$bb12(in_$p0, in_$p3, in_$p15, out_$i22, out_$i23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i54, out_$i55, out_vslice_dummy_var_79);
    return;

  exit:
    return;
}



procedure unix_autobind_loop_$bb12(in_$p0: ref, in_$p3: ref, in_$p15: ref, in_$i22: i32, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$i54: i32, in_$i55: i1, in_vslice_dummy_var_79: i32) returns (out_$i22: i32, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$p48: ref, out_$i49: i32, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$i54: i32, out_$i55: i1, out_vslice_dummy_var_79: i32);
  modifies $M.1, $M.0;



implementation unix_release_sock_loop_$bb19(in_$i20: i32, in_$p57: ref, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1, in_$p61: ref) returns (out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1, out_$p61: ref)
{

  entry:
    out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p61 := in_$i62, in_$p63, in_$p64, in_$p65, in_$i66, in_$i67, in_$p61;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4226;

  $bb24:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$p61 := out_$p65;
    goto $bb24_dummy;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i64(out_$i66, 0);
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(out_$p65);
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_$p65 := skb_dequeue(in_$p57);
    goto corral_source_split_4236;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} kfree_skb(out_$p61);
    goto corral_source_split_4235;

  $bb22:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} unix_release_sock(out_$p64, 1);
    goto corral_source_split_4233;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p61, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_4231;

  $bb21:
    assume out_$i62 == 1;
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(in_$i20, 10);
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p61 := unix_release_sock_loop_$bb19(in_$i20, in_$p57, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p61);
    return;

  exit:
    return;
}



procedure unix_release_sock_loop_$bb19(in_$i20: i32, in_$p57: ref, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1, in_$p61: ref) returns (out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1, out_$p61: ref);
  modifies $M.0, $M.24, $M.1, $CurrAddr, $M.20;



implementation unix_find_socket_byinode_loop_$bb7(in_$p0: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p14: ref) returns (out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p14: ref)
{

  entry:
    out_$p15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p14 := in_$p15, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$p26, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p14;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4415;

  $bb19:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p37;
    goto $bb19_dummy;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_4448;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4447;

  $bb17:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$p37 := $0.ref;
    goto $bb18;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p36;
    goto $bb18;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p35, $mul.ref($sub.ref(0, 88), 1272));
    goto corral_source_split_4445;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_4444;

  $bb16:
    assume out_$i34 == 1;
    goto corral_source_split_4443;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_4441;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4438;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_4437;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_4436;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb11;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p14;
    assume true;
    goto $bb13;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i23, out_$i24);
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p18, $mul.ref(0, 320)), $mul.ref(104, 1));
    goto corral_source_split_4424;

  $bb9:
    assume out_$i20 == 1;
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 1696)), $mul.ref(1280, 1)), $mul.ref(8, 1));
    goto corral_source_split_4418;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p14 := unix_find_socket_byinode_loop_$bb7(in_$p0, out_$p15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$p26, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p14);
    return;

  exit:
    return;
}



procedure unix_find_socket_byinode_loop_$bb7(in_$p0: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p14: ref) returns (out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p14: ref);



implementation __unix_find_socket_byname_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p17: ref) returns (out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p17: ref)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p17 := in_$p18, in_$p19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p17;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4483;

  $bb23:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$p17 := out_$p46;
    goto $bb23_dummy;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_4525;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_4524;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4523;

  $bb21:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$p46 := $0.ref;
    goto $bb22;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb22;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p44, $mul.ref($sub.ref(0, 88), 1272));
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_4520;

  $bb20:
    assume out_$i43 == 1;
    goto corral_source_split_4519;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_4496;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4494;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_4493;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 1272)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_4492;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume out_$i21 == 1;
    goto corral_source_split_4490;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 0);
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} out_$i20 := net_eq(out_$p19, in_$p0);
    call {:si_unique_call 1018} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_4487;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} out_$p19 := sock_net(out_$p17);
    goto corral_source_split_4486;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_4485;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p17;
    assume true;
    goto $bb16;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} out_$i33 := memcmp(out_$p30, out_$p31, out_$i32);
    call {:si_unique_call 1020} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(in_$i2);
    goto corral_source_split_4511;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4510;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_4509;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 12)), $mul.ref(12, 1));
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_4507;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_4506;

  $bb13:
    assume out_$i26 == 1;
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, in_$i2);
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_4502;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_4500;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1696)), $mul.ref(1272, 1));
    goto corral_source_split_4499;

  $bb10:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p17 := __unix_find_socket_byname_loop_$bb7(in_$p0, in_$p1, in_$i2, out_$p18, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p17);
    return;

  exit:
    return;
}



procedure __unix_find_socket_byname_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p17: ref) returns (out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p17: ref);



implementation unix_dgram_connect_loop_$bb19(in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i17: i32, in_$p29: ref, in_$p36: ref, in_$i37: i1, in_$i38: i8, in_$i39: i1, in_$i41: i16, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p40: ref) returns (out_$p36: ref, out_$i37: i1, out_$i38: i8, out_$i39: i1, out_$i41: i16, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p40: ref)
{

  entry:
    out_$p36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p40 := in_$p36, in_$i37, in_$i38, in_$i39, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$p40;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb24:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$p36 := out_$p44;
    goto $bb24_dummy;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i64(out_$i45, 0);
    goto corral_source_split_5101;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_5100;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} out_$p44 := unix_find_other(in_$p8, in_$p9, in_$i17, out_$i42, out_$i43, in_$p5);
    goto corral_source_split_5099;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.5, in_$p4);
    goto corral_source_split_5098;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i16.i32(out_$i41);
    goto corral_source_split_5097;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i16($M.0, in_$p29);
    goto corral_source_split_5096;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} sock_put(out_$p36);
    goto corral_source_split_5095;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} unix_state_double_unlock(in_$p7, out_$p36);
    goto corral_source_split_5094;

  $bb22:
    assume out_$i39 == 1;
    goto corral_source_split_5093;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p36;
    assume true;
    goto $bb22;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i8.i1(out_$i38);
    goto corral_source_split_5091;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i1.i8(out_$i37);
    call {:si_unique_call 1229} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i38);
    goto corral_source_split_5090;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} out_$i37 := sock_flag(out_$p36, 0);
    goto corral_source_split_5089;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} unix_state_double_lock(in_$p7, out_$p36);
    goto corral_source_split_5088;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p40 := unix_dgram_connect_loop_$bb19(in_$p4, in_$p5, in_$p7, in_$p8, in_$p9, in_$i17, in_$p29, out_$p36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p40);
    return;

  exit:
    return;
}



procedure unix_dgram_connect_loop_$bb19(in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i17: i32, in_$p29: ref, in_$p36: ref, in_$i37: i1, in_$i38: i8, in_$i39: i1, in_$i41: i16, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p40: ref) returns (out_$p36: ref, out_$i37: i1, out_$i38: i8, out_$i39: i1, out_$i41: i16, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p40: ref);
  modifies $M.6, $CurrAddr, $M.1;



implementation unix_dgram_sendmsg_loop_$bb50(in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p41: ref, in_$i43: i32, in_$p76: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$i115: i16, in_$i116: i32, in_$i117: i32, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i1, in_$i134: i8, in_$i135: i1, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i64, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$i153: i32, in_$i154: i1, in_$p136: ref) returns (out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$i115: i16, out_$i116: i32, out_$i117: i32, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i1, out_$i134: i8, out_$i135: i1, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i64, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$i153: i32, out_$i154: i1, out_$p136: ref)
{

  entry:
    out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$i135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p136 := in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$p114, in_$i115, in_$i116, in_$i117, in_$p118, in_$i119, in_$i120, in_$p121, in_$p122, in_$i123, in_$i124, in_$p125, in_$p127, in_$p128, in_$i129, in_$i130, in_$p131, in_$i133, in_$i134, in_$i135, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$p143, in_$i144, in_$i145, in_$i146, in_$p147, in_$p148, in_$p149, in_$p150, in_$p151, in_$p152, in_$i153, in_$i154, in_$p136;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_5455;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p108 := $0.ref;
    goto $bb74_dummy;

  $bb73:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    out_$i154 := $ne.i32(out_$i153, 0);
    goto corral_source_split_5534;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.6, in_$p4);
    goto corral_source_split_5533;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} spin_unlock(out_$p152);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, $sub.i32(0, 111));
    goto corral_source_split_5527;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} sock_put(out_$p122);
    goto corral_source_split_5526;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} unix_dgram_disconnected(in_$p9, out_$p122);
    goto corral_source_split_5525;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} spin_unlock(out_$p150);
    goto corral_source_split_5524;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(out_$p149, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    out_$p149 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_5522;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p148, $0.ref);
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_5519;

  $bb69:
    assume out_$i146 == 1;
    goto corral_source_split_5518;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i64(out_$i144, out_$i145);
    goto corral_source_split_5516;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$i145 := $p2i.ref.i64(out_$p122);
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    out_$i144 := $p2i.ref.i64(out_$p143);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, out_$p142);
    goto corral_source_split_5513;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(out_$p141, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    out_$p141 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_5511;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} spin_lock(out_$p140);
    goto corral_source_split_5510;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p139, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5509;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$p139 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_5508;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, 0);
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} sock_put(out_$p122);
    goto corral_source_split_5506;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} spin_unlock(out_$p138);
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p137, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$p137 := $bitcast.ref.ref(out_$p122);
    goto corral_source_split_5503;

  $bb67:
    assume out_$i135 == 1;
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$p136 := out_$p122;
    assume true;
    goto $bb67;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    out_$i135 := $trunc.i8.i1(out_$i134);
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i1.i8(out_$i133);
    call {:si_unique_call 1309} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i134);
    goto corral_source_split_5499;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} out_$i133 := sock_flag(out_$p122, 0);
    goto corral_source_split_5498;

  $bb64:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$p131 := out_$p122;
    assume true;
    goto $bb64;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 0);
    goto corral_source_split_5489;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} out_$i129 := unix_may_send(in_$p9, out_$p122);
    call {:si_unique_call 1306} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_5488;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, $sub.i32(0, 1));
    goto corral_source_split_5487;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} spin_lock(out_$p128);
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p127, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5485;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p127 := $bitcast.ref.ref(out_$p122);
    goto corral_source_split_5484;

  $bb61:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$p125 := out_$p122;
    assume true;
    goto $bb61;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i123, 0);
    goto corral_source_split_5478;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} out_$i123 := sk_filter(out_$p122, in_$p76);
    call {:si_unique_call 1303} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_5477;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5476;

  $bb52:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$p122 := out_$p108;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p122 := out_$p118;
    goto $bb59;

  $bb57:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    out_$p121 := out_$p118;
    assume true;
    goto $bb57;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i64(out_$i119, 0);
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p118);
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} out_$p118 := unix_find_other(in_$p10, in_$p41, in_$i43, out_$i116, out_$i117, in_$p4);
    goto corral_source_split_5470;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.5, in_$p5);
    goto corral_source_split_5469;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i16.i32(out_$i115);
    goto corral_source_split_5468;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i16($M.0, out_$p114);
    goto corral_source_split_5467;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p9, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_5466;

  $bb54:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    out_$p113 := out_$p108;
    assume true;
    goto $bb54;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i64(out_$i111, 0);
    goto corral_source_split_5462;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    out_$i111 := $p2i.ref.i64(in_$p41);
    goto corral_source_split_5461;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, $sub.i32(0, 104));
    goto corral_source_split_5460;

  $bb51:
    assume out_$i110 == 1;
    goto corral_source_split_5459;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i64(out_$i109, 0);
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    out_$i109 := $p2i.ref.i64(out_$p108);
    goto corral_source_split_5456;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(out_$p151, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5531;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_5530;

  $bb70:
    assume !(out_$i146 == 1);
    goto corral_source_split_5529;

  $bb74_dummy:
    call {:si_unique_call 1} out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$i135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p136 := unix_dgram_sendmsg_loop_$bb50(in_$p4, in_$p5, in_$p9, in_$p10, in_$p41, in_$i43, in_$p76, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$i135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p136);
    return;

  exit:
    return;
}



procedure unix_dgram_sendmsg_loop_$bb50(in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p41: ref, in_$i43: i32, in_$p76: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$i115: i16, in_$i116: i32, in_$i117: i32, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i1, in_$i134: i8, in_$i135: i1, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i64, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$i153: i32, in_$i154: i1, in_$p136: ref) returns (out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$i115: i16, out_$i116: i32, out_$i117: i32, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i1, out_$i134: i8, out_$i135: i1, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i64, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$i153: i32, out_$i154: i1, out_$p136: ref);
  modifies $M.1, $M.6, $CurrAddr, $M.0, $M.20;



implementation unix_dgram_sendmsg_loop_$bb49(in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p41: ref, in_$i43: i32, in_$p76: ref, in_$p106: ref, in_$i107: i64, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$i115: i16, in_$i116: i32, in_$i117: i32, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i1, in_$i134: i8, in_$i135: i1, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i64, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$i153: i32, in_$i154: i1, in_$p136: ref, in_$p155: ref, in_$i156: i8, in_$i157: i8, in_$i158: i32, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$p162: ref, in_$i163: i16, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$i177: i64, in_$i178: i64, in_$i179: i1, in_$i181: i32, in_$i182: i1, in_$i184: i1, in_$p185: ref, in_$i186: i64, in_$i187: i32, in_$p188: ref, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$p183: ref, in_$p180: ref) returns (out_$p106: ref, out_$i107: i64, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$i115: i16, out_$i116: i32, out_$i117: i32, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i1, out_$i134: i8, out_$i135: i1, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i64, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$i153: i32, out_$i154: i1, out_$p136: ref, out_$p155: ref, out_$i156: i8, out_$i157: i8, out_$i158: i32, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$p162: ref, out_$i163: i16, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$i177: i64, out_$i178: i64, out_$i179: i1, out_$i181: i32, out_$i182: i1, out_$i184: i1, out_$p185: ref, out_$i186: i64, out_$i187: i32, out_$p188: ref, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$p183: ref, out_$p180: ref)
{

  entry:
    out_$p106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$i135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p136, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$p169, out_$i170, out_$i171, out_$i172, out_$p173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i181, out_$i182, out_$i184, out_$p185, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$p191, out_$p183, out_$p180 := in_$p106, in_$i107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$p114, in_$i115, in_$i116, in_$i117, in_$p118, in_$i119, in_$i120, in_$p121, in_$p122, in_$i123, in_$i124, in_$p125, in_$p127, in_$p128, in_$i129, in_$i130, in_$p131, in_$i133, in_$i134, in_$i135, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$p143, in_$i144, in_$i145, in_$i146, in_$p147, in_$p148, in_$p149, in_$p150, in_$p151, in_$p152, in_$i153, in_$i154, in_$p136, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$p161, in_$p162, in_$i163, in_$i164, in_$i165, in_$p166, in_$p167, in_$p168, in_$p169, in_$i170, in_$i171, in_$i172, in_$p173, in_$p174, in_$p175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i181, in_$i182, in_$i184, in_$p185, in_$i186, in_$i187, in_$p188, in_$i189, in_$i190, in_$p191, in_$p183, in_$p180;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5453;

  $bb94:
    assume {:verifier.code 0} true;
    out_$p106, out_$i107 := out_$p136, out_$i186;
    goto $bb94_dummy;

  $bb93:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$p191 := out_$p136;
    assume true;
    goto $bb93;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    out_$i190 := $ne.i32(out_$i189, 0);
    goto corral_source_split_5587;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} out_$i189 := signal_pending(out_$p188);
    call {:si_unique_call 1325} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i189);
    goto corral_source_split_5586;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} out_$p188 := get_current();
    goto corral_source_split_5585;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, out_$i187);
    goto corral_source_split_5584;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} out_$i187 := sock_intr_errno(out_$i186);
    goto corral_source_split_5583;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} out_$i186 := unix_wait_for_peer(out_$p136, out_$i107);
    call {:si_unique_call 1321} {:cexpr "timeo"} boogie_si_record_i64(out_$i186);
    goto corral_source_split_5582;

  $bb90:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$p185 := out_$p136;
    assume true;
    goto $bb90;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i64(out_$i107, 0);
    goto corral_source_split_5577;

  $bb87:
    assume out_$i182 == 1;
    goto corral_source_split_5576;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    out_$p183 := out_$p136;
    assume true;
    goto $bb87;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$i182 := $ne.i32(out_$i181, 0);
    goto corral_source_split_5574;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} out_$i181 := unix_recvq_full(out_$p136);
    call {:si_unique_call 1319} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_5573;

  $bb85:
    assume out_$i179 == 1;
    goto corral_source_split_5572;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    out_$p180 := out_$p136;
    assume true;
    goto $bb85;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    out_$i179 := $ne.i64(out_$i177, out_$i178);
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$i178 := $p2i.ref.i64(in_$p9);
    goto corral_source_split_5569;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    out_$i177 := $p2i.ref.i64(out_$p176);
    goto corral_source_split_5568;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    out_$p176 := $load.ref($M.0, out_$p175);
    goto corral_source_split_5567;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p174, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5566;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p174 := $bitcast.ref.ref(out_$p136);
    goto corral_source_split_5565;

  $bb80:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    out_$p173 := out_$p136;
    assume true;
    goto $bb82;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    out_$i172 := $ne.i32(out_$i171, 0);
    goto corral_source_split_5561;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i32($M.6, in_$p4);
    goto corral_source_split_5560;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, out_$i170);
    goto corral_source_split_5559;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} out_$i170 := security_unix_may_send(out_$p167, out_$p169);
    goto corral_source_split_5558;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    out_$p169 := $load.ref($M.0, out_$p168);
    goto corral_source_split_5557;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(out_$p136, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_5556;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    out_$p167 := $load.ref($M.0, out_$p166);
    goto corral_source_split_5555;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p9, $mul.ref(0, 1272)), $mul.ref(1152, 1));
    goto corral_source_split_5554;

  $bb79:
    assume out_$i165 == 1;
    goto corral_source_split_5553;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    out_$i165 := $ne.i32(out_$i164, 5);
    goto corral_source_split_5551;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    out_$i164 := $zext.i16.i32(out_$i163);
    goto corral_source_split_5550;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i16($M.0, out_$p162);
    goto corral_source_split_5549;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p9, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_5548;

  $bb77:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    out_$p161 := out_$p136;
    assume true;
    goto $bb77;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    out_$i160 := $ne.i32(out_$i159, 0);
    goto corral_source_split_5544;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    out_$i159 := $and.i32(out_$i158, 1);
    goto corral_source_split_5543;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    out_$i158 := $zext.i8.i32(out_$i157);
    goto corral_source_split_5542;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    out_$i157 := $and.i8(out_$i156, 3);
    goto corral_source_split_5541;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i8($M.0, out_$p155);
    goto corral_source_split_5540;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(out_$p136, $mul.ref(0, 1272)), $mul.ref(712, 1));
    goto corral_source_split_5539;

  $bb75:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, $sub.i32(0, 32));
    goto corral_source_split_5538;

  $bb68:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$p136 := out_$p122;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    out_$i135 := $trunc.i8.i1(out_$i134);
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i1.i8(out_$i133);
    call {:si_unique_call 1309} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i134);
    goto corral_source_split_5499;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} out_$i133 := sock_flag(out_$p122, 0);
    goto corral_source_split_5498;

  $bb64:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$p131 := out_$p122;
    assume true;
    goto $bb64;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 0);
    goto corral_source_split_5489;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} out_$i129 := unix_may_send(in_$p9, out_$p122);
    call {:si_unique_call 1306} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i129);
    goto corral_source_split_5488;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, $sub.i32(0, 1));
    goto corral_source_split_5487;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} spin_lock(out_$p128);
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p127, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5485;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p127 := $bitcast.ref.ref(out_$p122);
    goto corral_source_split_5484;

  $bb61:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$p125 := out_$p122;
    assume true;
    goto $bb61;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i123, 0);
    goto corral_source_split_5478;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} out_$i123 := sk_filter(out_$p122, in_$p76);
    call {:si_unique_call 1303} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_5477;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5476;

  $bb52:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$p122 := out_$p108;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p122 := out_$p118;
    goto $bb59;

  $bb57:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    out_$p121 := out_$p118;
    assume true;
    goto $bb57;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i64(out_$i119, 0);
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p118);
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} out_$p118 := unix_find_other(in_$p10, in_$p41, in_$i43, out_$i116, out_$i117, in_$p4);
    goto corral_source_split_5470;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.5, in_$p5);
    goto corral_source_split_5469;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i16.i32(out_$i115);
    goto corral_source_split_5468;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i16($M.0, out_$p114);
    goto corral_source_split_5467;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p9, $mul.ref(0, 1272)), $mul.ref(714, 1));
    goto corral_source_split_5466;

  $bb54:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    out_$p113 := out_$p108;
    assume true;
    goto $bb54;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i64(out_$i111, 0);
    goto corral_source_split_5462;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    out_$i111 := $p2i.ref.i64(in_$p41);
    goto corral_source_split_5461;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, $sub.i32(0, 104));
    goto corral_source_split_5460;

  $bb51:
    assume out_$i110 == 1;
    goto corral_source_split_5459;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i64(out_$i109, 0);
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    out_$i109 := $p2i.ref.i64(out_$p108);
    goto corral_source_split_5456;

  $bb50:
    call out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$i135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p136 := unix_dgram_sendmsg_loop_$bb50(in_$p4, in_$p5, in_$p9, in_$p10, in_$p41, in_$i43, in_$p76, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$i135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p136);
    goto $bb50_last;

  $bb50_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    out_$p108 := out_$p106;
    goto $bb50;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p108 := $0.ref;
    assume false;
    return;

  $bb73:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    out_$i154 := $ne.i32(out_$i153, 0);
    goto corral_source_split_5534;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.6, in_$p4);
    goto corral_source_split_5533;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} spin_unlock(out_$p152);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, $sub.i32(0, 111));
    goto corral_source_split_5527;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} sock_put(out_$p122);
    goto corral_source_split_5526;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} unix_dgram_disconnected(in_$p9, out_$p122);
    goto corral_source_split_5525;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} spin_unlock(out_$p150);
    goto corral_source_split_5524;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(out_$p149, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    out_$p149 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_5522;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p148, $0.ref);
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_5519;

  $bb69:
    assume out_$i146 == 1;
    goto corral_source_split_5518;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i64(out_$i144, out_$i145);
    goto corral_source_split_5516;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$i145 := $p2i.ref.i64(out_$p122);
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    out_$i144 := $p2i.ref.i64(out_$p143);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, out_$p142);
    goto corral_source_split_5513;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(out_$p141, $mul.ref(0, 1696)), $mul.ref(1464, 1));
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    out_$p141 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_5511;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} spin_lock(out_$p140);
    goto corral_source_split_5510;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p139, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5509;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$p139 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_5508;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, in_$p4, 0);
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} sock_put(out_$p122);
    goto corral_source_split_5506;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} spin_unlock(out_$p138);
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p137, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$p137 := $bitcast.ref.ref(out_$p122);
    goto corral_source_split_5503;

  $bb67:
    assume out_$i135 == 1;
    goto corral_source_split_5502;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(out_$p151, $mul.ref(0, 1696)), $mul.ref(1496, 1));
    goto corral_source_split_5531;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_5530;

  $bb70:
    assume !(out_$i146 == 1);
    goto corral_source_split_5529;

  $bb94_dummy:
    call {:si_unique_call 1} out_$p106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$i135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p136, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$p169, out_$i170, out_$i171, out_$i172, out_$p173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i181, out_$i182, out_$i184, out_$p185, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$p191, out_$p183, out_$p180 := unix_dgram_sendmsg_loop_$bb49(in_$p4, in_$p5, in_$p9, in_$p10, in_$p41, in_$i43, in_$p76, out_$p106, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p127, out_$p128, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$i135, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p136, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$p169, out_$i170, out_$i171, out_$i172, out_$p173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i181, out_$i182, out_$i184, out_$p185, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$p191, out_$p183, out_$p180);
    return;

  exit:
    return;
}



procedure unix_dgram_sendmsg_loop_$bb49(in_$p4: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p41: ref, in_$i43: i32, in_$p76: ref, in_$p106: ref, in_$i107: i64, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$i115: i16, in_$i116: i32, in_$i117: i32, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i1, in_$i134: i8, in_$i135: i1, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i64, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$i153: i32, in_$i154: i1, in_$p136: ref, in_$p155: ref, in_$i156: i8, in_$i157: i8, in_$i158: i32, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$p162: ref, in_$i163: i16, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$p169: ref, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$i177: i64, in_$i178: i64, in_$i179: i1, in_$i181: i32, in_$i182: i1, in_$i184: i1, in_$p185: ref, in_$i186: i64, in_$i187: i32, in_$p188: ref, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$p183: ref, in_$p180: ref) returns (out_$p106: ref, out_$i107: i64, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$i115: i16, out_$i116: i32, out_$i117: i32, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i1, out_$i134: i8, out_$i135: i1, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i64, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$i153: i32, out_$i154: i1, out_$p136: ref, out_$p155: ref, out_$i156: i8, out_$i157: i8, out_$i158: i32, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$p162: ref, out_$i163: i16, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$p169: ref, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$i177: i64, out_$i178: i64, out_$i179: i1, out_$i181: i32, out_$i182: i1, out_$i184: i1, out_$p185: ref, out_$i186: i64, out_$i187: i32, out_$p188: ref, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$p183: ref, out_$p180: ref);
  modifies $M.1, $M.6, $M.0, $CurrAddr, $M.20;



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i32, in_$i2: i64, in_$p3: ref, in_$i4: i32, in_$i5: i32, in_$i6: i64, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i64, in_$i15: i32, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i64, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i64, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i64, in_$i59: i64, in_$i60: i32, in_$i61: i32, in_$p63: ref, in_$i64: i32, in_$p66: ref, in_$p68: ref, in_$i69: i32, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$p79: ref, in_$p81: ref, in_$p83: ref, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$p89: ref, in_$i90: i32, in_$i91: i64, in_$p93: ref, in_$p95: ref, in_$i96: i32, in_$i97: i64, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i64, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$p183: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$p192: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$p206: ref, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$p219: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_$i230: i1, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$p237: ref, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i32, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$p246: ref, in_$i248: i32, in_$i249: i32, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$i262: i1, in_$i263: i1, in_$i264: i1, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i1, in_$i272: i1, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i1, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i285: i32, in_$i286: i1, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$p300: ref, in_$p301: ref, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$i320: i32, in_$i321: i1, in_$p322: ref, in_$p323: ref, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$p332: ref, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$p337: ref, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$p346: ref, in_$i348: i32, in_$i349: i1, in_$p350: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$p355: ref, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i32, in_$i362: i1, in_$i364: i32, in_$i365: i1, in_$i366: i32, in_$i367: i1, in_$i368: i1, in_$i369: i1, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$i377: i32, in_$i378: i1, in_$i379: i32, in_$i380: i1, in_$i381: i1, in_$i382: i1, in_$i383: i1, in_$i384: i1, in_$i385: i32, in_$i386: i1, in_$p387: ref, in_$p388: ref, in_$p389: ref, in_$p390: ref, in_$i391: i64, in_$i392: i1, in_$i393: i32, in_$i394: i32, in_$p395: ref, in_$i396: i64, in_$i397: i1, in_$i398: i32, in_$i399: i32, in_$i400: i32, in_$i401: i1, in_$p402: ref, in_$p403: ref, in_$i404: i32, in_$i405: i32, in_$i406: i32, in_$i407: i1, in_$p408: ref, in_$p409: ref, in_$i410: i32, in_$i411: i32, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$p415: ref, in_$p416: ref, in_$i418: i32, in_$i419: i1, in_$p420: ref, in_$p421: ref, in_$p422: ref, in_$p423: ref, in_$p424: ref, in_$i425: i64, in_$i426: i1, in_$i427: i32, in_$i428: i32, in_$p429: ref, in_$i430: i64, in_$i431: i1, in_$i432: i32, in_$i433: i32, in_$i434: i32, in_$i435: i1, in_$i436: i32, in_$i437: i1, in_$i438: i1, in_$i439: i1, in_$i440: i32, in_$i441: i1, in_$i442: i32, in_$i443: i1, in_$i444: i32, in_$i445: i1, in_$i446: i32, in_$i447: i32, in_$i448: i1, in_$i449: i32, in_$i450: i1, in_$i451: i32, in_$i452: i1, in_$i453: i32, in_$i454: i1, in_$i455: i1, in_$i456: i1, in_$i457: i1, in_$i458: i1, in_$i459: i1, in_$i460: i1, in_$i461: i1, in_$i462: i1, in_$i463: i1, in_$i464: i1, in_$i465: i1, in_$i466: i1, in_$i467: i1, in_$i468: i1, in_$i469: i1, in_$i470: i1, in_$i471: i1, in_$i472: i32, in_$i473: i1, in_$p474: ref, in_$p475: ref, in_$p476: ref, in_$i478: i32, in_$i479: i1, in_$i481: i32, in_$i482: i1, in_$p483: ref, in_$i485: i32, in_$i486: i1, in_$p487: ref, in_$p488: ref, in_$p489: ref, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$p494: ref, in_$i496: i32, in_$i497: i1, in_$p498: ref, in_$i500: i32, in_$i501: i1, in_$p502: ref, in_$i504: i32, in_$i505: i1, in_$p506: ref, in_$p507: ref, in_$i509: i32, in_$i510: i1, in_$p511: ref, in_$i513: i32, in_$i514: i1, in_$p515: ref, in_$p516: ref, in_$i518: i32, in_$i519: i1, in_$p520: ref, in_$i522: i32, in_$i523: i1, in_$p524: ref, in_$p525: ref, in_$i527: i32, in_$i528: i1, in_$p529: ref, in_$p530: ref, in_$i532: i32, in_$i533: i1, in_$p534: ref, in_$i536: i32, in_$i537: i1, in_$p538: ref, in_$i540: i32, in_$i541: i1, in_$p542: ref, in_$p543: ref, in_$i545: i32, in_$i546: i1, in_$p547: ref, in_$p548: ref, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i64, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i64, in_vslice_dummy_var_109: i64, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i64, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i64, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32) returns (out_$i117: i32, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$p183: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$p192: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$p206: ref, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$p219: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_$i230: i1, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$p237: ref, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i32, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$p246: ref, out_$i248: i32, out_$i249: i32, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$i262: i1, out_$i263: i1, out_$i264: i1, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i1, out_$i272: i1, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i1, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i285: i32, out_$i286: i1, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$p300: ref, out_$p301: ref, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$i320: i32, out_$i321: i1, out_$p322: ref, out_$p323: ref, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$p332: ref, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$p337: ref, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$p346: ref, out_$i348: i32, out_$i349: i1, out_$p350: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$p355: ref, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i32, out_$i362: i1, out_$i364: i32, out_$i365: i1, out_$i366: i32, out_$i367: i1, out_$i368: i1, out_$i369: i1, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$i377: i32, out_$i378: i1, out_$i379: i32, out_$i380: i1, out_$i381: i1, out_$i382: i1, out_$i383: i1, out_$i384: i1, out_$i385: i32, out_$i386: i1, out_$p387: ref, out_$p388: ref, out_$p389: ref, out_$p390: ref, out_$i391: i64, out_$i392: i1, out_$i393: i32, out_$i394: i32, out_$p395: ref, out_$i396: i64, out_$i397: i1, out_$i398: i32, out_$i399: i32, out_$i400: i32, out_$i401: i1, out_$p402: ref, out_$p403: ref, out_$i404: i32, out_$i405: i32, out_$i406: i32, out_$i407: i1, out_$p408: ref, out_$p409: ref, out_$i410: i32, out_$i411: i32, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$p415: ref, out_$p416: ref, out_$i418: i32, out_$i419: i1, out_$p420: ref, out_$p421: ref, out_$p422: ref, out_$p423: ref, out_$p424: ref, out_$i425: i64, out_$i426: i1, out_$i427: i32, out_$i428: i32, out_$p429: ref, out_$i430: i64, out_$i431: i1, out_$i432: i32, out_$i433: i32, out_$i434: i32, out_$i435: i1, out_$i436: i32, out_$i437: i1, out_$i438: i1, out_$i439: i1, out_$i440: i32, out_$i441: i1, out_$i442: i32, out_$i443: i1, out_$i444: i32, out_$i445: i1, out_$i446: i32, out_$i447: i32, out_$i448: i1, out_$i449: i32, out_$i450: i1, out_$i451: i32, out_$i452: i1, out_$i453: i32, out_$i454: i1, out_$i455: i1, out_$i456: i1, out_$i457: i1, out_$i458: i1, out_$i459: i1, out_$i460: i1, out_$i461: i1, out_$i462: i1, out_$i463: i1, out_$i464: i1, out_$i465: i1, out_$i466: i1, out_$i467: i1, out_$i468: i1, out_$i469: i1, out_$i470: i1, out_$i471: i1, out_$i472: i32, out_$i473: i1, out_$p474: ref, out_$p475: ref, out_$p476: ref, out_$i478: i32, out_$i479: i1, out_$i481: i32, out_$i482: i1, out_$p483: ref, out_$i485: i32, out_$i486: i1, out_$p487: ref, out_$p488: ref, out_$p489: ref, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$p494: ref, out_$i496: i32, out_$i497: i1, out_$p498: ref, out_$i500: i32, out_$i501: i1, out_$p502: ref, out_$i504: i32, out_$i505: i1, out_$p506: ref, out_$p507: ref, out_$i509: i32, out_$i510: i1, out_$p511: ref, out_$i513: i32, out_$i514: i1, out_$p515: ref, out_$p516: ref, out_$i518: i32, out_$i519: i1, out_$p520: ref, out_$i522: i32, out_$i523: i1, out_$p524: ref, out_$p525: ref, out_$i527: i32, out_$i528: i1, out_$p529: ref, out_$p530: ref, out_$i532: i32, out_$i533: i1, out_$p534: ref, out_$i536: i32, out_$i537: i1, out_$p538: ref, out_$i540: i32, out_$i541: i1, out_$p542: ref, out_$p543: ref, out_$i545: i32, out_$i546: i1, out_$p547: ref, out_$p548: ref, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i64, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i64, out_vslice_dummy_var_109: i64, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i64, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i64, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32)
{

  entry:
    out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$p151, out_$p152, out_$i154, out_$i155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$p174, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$p183, out_$i185, out_$i186, out_$p187, out_$i189, out_$i190, out_$p191, out_$p192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$p201, out_$i203, out_$i204, out_$p205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$p219, out_$i221, out_$i222, out_$p223, out_$p224, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p236, out_$p237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$p245, out_$p246, out_$i248, out_$i249, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$p282, out_$p283, out_$i285, out_$i286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$p295, out_$i297, out_$i298, out_$p299, out_$p300, out_$p301, out_$i303, out_$i304, out_$p305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$p318, out_$i320, out_$i321, out_$p322, out_$p323, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$p332, out_$i334, out_$i335, out_$p336, out_$p337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$p346, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$p355, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$p387, out_$p388, out_$p389, out_$p390, out_$i391, out_$i392, out_$i393, out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$p402, out_$p403, out_$i404, out_$i405, out_$i406, out_$i407, out_$p408, out_$p409, out_$i410, out_$i411, out_$i412, out_$i413, out_$p414, out_$p415, out_$p416, out_$i418, out_$i419, out_$p420, out_$p421, out_$p422, out_$p423, out_$p424, out_$i425, out_$i426, out_$i427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$p474, out_$p475, out_$p476, out_$i478, out_$i479, out_$i481, out_$i482, out_$p483, out_$i485, out_$i486, out_$p487, out_$p488, out_$p489, out_$i491, out_$i492, out_$p493, out_$p494, out_$i496, out_$i497, out_$p498, out_$i500, out_$i501, out_$p502, out_$i504, out_$i505, out_$p506, out_$p507, out_$i509, out_$i510, out_$p511, out_$i513, out_$i514, out_$p515, out_$p516, out_$i518, out_$i519, out_$p520, out_$i522, out_$i523, out_$p524, out_$p525, out_$i527, out_$i528, out_$p529, out_$p530, out_$i532, out_$i533, out_$p534, out_$i536, out_$i537, out_$p538, out_$i540, out_$i541, out_$p542, out_$p543, out_$i545, out_$i546, out_$p547, out_$p548, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146 := in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$p150, in_$p151, in_$p152, in_$i154, in_$i155, in_$i157, in_$i158, in_$p159, in_$i161, in_$i162, in_$p163, in_$p164, in_$p165, in_$i167, in_$i168, in_$p169, in_$p170, in_$i172, in_$i173, in_$p174, in_$i176, in_$i177, in_$p178, in_$i180, in_$i181, in_$p182, in_$p183, in_$i185, in_$i186, in_$p187, in_$i189, in_$i190, in_$p191, in_$p192, in_$i194, in_$i195, in_$p196, in_$i198, in_$i199, in_$p200, in_$p201, in_$i203, in_$i204, in_$p205, in_$p206, in_$i208, in_$i209, in_$p210, in_$i212, in_$i213, in_$p214, in_$i216, in_$i217, in_$p218, in_$p219, in_$i221, in_$i222, in_$p223, in_$p224, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$p236, in_$p237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$p245, in_$p246, in_$i248, in_$i249, in_$i250, in_$i251, in_$p252, in_$i254, in_$i255, in_$p256, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$p281, in_$p282, in_$p283, in_$i285, in_$i286, in_$i288, in_$i289, in_$p290, in_$i292, in_$i293, in_$p294, in_$p295, in_$i297, in_$i298, in_$p299, in_$p300, in_$p301, in_$i303, in_$i304, in_$p305, in_$i307, in_$i308, in_$p309, in_$p310, in_$i312, in_$i313, in_$p314, in_$i316, in_$i317, in_$p318, in_$i320, in_$i321, in_$p322, in_$p323, in_$i325, in_$i326, in_$p327, in_$i329, in_$i330, in_$p331, in_$p332, in_$i334, in_$i335, in_$p336, in_$p337, in_$i339, in_$i340, in_$p341, in_$i343, in_$i344, in_$p345, in_$p346, in_$i348, in_$i349, in_$p350, in_$i352, in_$i353, in_$p354, in_$p355, in_$i357, in_$i358, in_$i359, in_$i360, in_$i361, in_$i362, in_$i364, in_$i365, in_$i366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$p372, in_$i374, in_$i375, in_$p376, in_$i377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$i384, in_$i385, in_$i386, in_$p387, in_$p388, in_$p389, in_$p390, in_$i391, in_$i392, in_$i393, in_$i394, in_$p395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$p402, in_$p403, in_$i404, in_$i405, in_$i406, in_$i407, in_$p408, in_$p409, in_$i410, in_$i411, in_$i412, in_$i413, in_$p414, in_$p415, in_$p416, in_$i418, in_$i419, in_$p420, in_$p421, in_$p422, in_$p423, in_$p424, in_$i425, in_$i426, in_$i427, in_$i428, in_$p429, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$i444, in_$i445, in_$i446, in_$i447, in_$i448, in_$i449, in_$i450, in_$i451, in_$i452, in_$i453, in_$i454, in_$i455, in_$i456, in_$i457, in_$i458, in_$i459, in_$i460, in_$i461, in_$i462, in_$i463, in_$i464, in_$i465, in_$i466, in_$i467, in_$i468, in_$i469, in_$i470, in_$i471, in_$i472, in_$i473, in_$p474, in_$p475, in_$p476, in_$i478, in_$i479, in_$i481, in_$i482, in_$p483, in_$i485, in_$i486, in_$p487, in_$p488, in_$p489, in_$i491, in_$i492, in_$p493, in_$p494, in_$i496, in_$i497, in_$p498, in_$i500, in_$i501, in_$p502, in_$i504, in_$i505, in_$p506, in_$p507, in_$i509, in_$i510, in_$p511, in_$i513, in_$i514, in_$p515, in_$p516, in_$i518, in_$i519, in_$p520, in_$i522, in_$i523, in_$p524, in_$p525, in_$i527, in_$i528, in_$p529, in_$p530, in_$i532, in_$i533, in_$p534, in_$i536, in_$i537, in_$p538, in_$i540, in_$i541, in_$p542, in_$p543, in_$i545, in_$i546, in_$p547, in_$p548, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1722} out_$i117 := __VERIFIER_nondet_int();
    call {:si_unique_call 1723} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i117);
    call {:si_unique_call 1724} {:cexpr "tmp___95"} boogie_si_record_i32(out_$i117);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb117_dummy;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb447:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb23:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} out_vslice_dummy_var_90 := unix_dgram_recvmsg(out_$p150, out_$p151, out_$p152, in_$i14, in_$i33);
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$p152 := $M.45;
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$p151 := $M.47;
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$p150 := $M.46;
    goto corral_source_split_6548;

  $bb62:
    assume out_$i149 == 1;
    goto corral_source_split_6547;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 1);
    goto corral_source_split_6545;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    out_$i148 := $M.57;
    goto corral_source_split_6544;

  $bb60:
    assume out_$i147 == 1;
    goto corral_source_split_6543;

  $bb58:
    assume out_$i146 == 1;
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i129, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb54:
    assume out_$i144 == 1;
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i129, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb46:
    assume out_$i140 == 1;
    assume {:verifier.code 0} true;
    out_$i144 := $slt.i32(out_$i129, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb25:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i140 := $slt.i32(out_$i129, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i129, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_6477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1725} out_$i129 := __VERIFIER_nondet_int();
    call {:si_unique_call 1726} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i129);
    call {:si_unique_call 1727} {:cexpr "tmp___96"} boogie_si_record_i32(out_$i129);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i128 == 1;
    goto corral_source_split_6477;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i32(out_$i127, 0);
    goto corral_source_split_6475;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$i127 := $M.57;
    goto corral_source_split_6474;

  $bb20:
    assume out_$i126 == 1;
    goto corral_source_split_6473;

  $bb18:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i117, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i117, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i117, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i118 := $slt.i32(out_$i117, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb67:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} out_vslice_dummy_var_91 := unix_set_peek_off(in_$p24, in_$i15);
    goto corral_source_split_6555;

  $bb66:
    assume out_$i155 == 1;
    goto corral_source_split_6554;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 1);
    goto corral_source_split_6541;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    out_$i154 := $M.57;
    goto corral_source_split_6540;

  $bb59:
    assume !(out_$i146 == 1);
    goto corral_source_split_6539;

  $bb70:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} out_vslice_dummy_var_92 := sock_no_setsockopt(out_$p159, in_$i4, in_$i30, in_$p22, in_$i13);
    goto corral_source_split_6560;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    out_$p159 := $M.47;
    goto corral_source_split_6559;

  $bb69:
    assume out_$i158 == 1;
    goto corral_source_split_6558;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 1);
    goto corral_source_split_6533;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    out_$i157 := $M.57;
    goto corral_source_split_6532;

  $bb56:
    assume out_$i145 == 1;
    goto corral_source_split_6531;

  $bb55:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    out_$i145 := $slt.i32(out_$i129, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb73:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6568;

  SeqInstr_36:
    goto corral_source_split_6567;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} out_vslice_dummy_var_93 := unix_dgram_sendmsg(out_$p163, out_$p164, out_$p165, in_$i2);
    goto SeqInstr_35;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    out_$p165 := $M.45;
    goto corral_source_split_6566;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$p164 := $M.47;
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$p163 := $M.46;
    goto corral_source_split_6564;

  $bb72:
    assume out_$i162 == 1;
    goto corral_source_split_6563;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 1);
    goto corral_source_split_6537;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    out_$i161 := $M.57;
    goto corral_source_split_6536;

  $bb57:
    assume !(out_$i145 == 1);
    goto corral_source_split_6535;

  $bb76:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} out_vslice_dummy_var_94 := sock_no_mmap(out_$p169, out_$p170, in_$p32);
    goto corral_source_split_6573;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$p170 := $M.47;
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$p169 := $M.44;
    goto corral_source_split_6571;

  $bb75:
    assume out_$i168 == 1;
    goto corral_source_split_6570;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 1);
    goto corral_source_split_6525;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    out_$i167 := $M.57;
    goto corral_source_split_6524;

  $bb52:
    assume out_$i143 == 1;
    goto corral_source_split_6523;

  $bb48:
    assume out_$i141 == 1;
    assume {:verifier.code 0} true;
    out_$i143 := $slt.i32(out_$i129, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb47:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    out_$i141 := $slt.i32(out_$i129, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb79:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6579;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} out_vslice_dummy_var_95 := sock_no_sendpage(out_$p174, in_$p26, in_$i19, in_$i21, in_$i0);
    goto corral_source_split_6578;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$p174 := $M.47;
    goto corral_source_split_6577;

  $bb78:
    assume out_$i173 == 1;
    goto corral_source_split_6576;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 1);
    goto corral_source_split_6529;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    out_$i172 := $M.57;
    goto corral_source_split_6528;

  $bb53:
    assume !(out_$i143 == 1);
    goto corral_source_split_6527;

  $bb82:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} out_vslice_dummy_var_96 := unix_release(out_$p178);
    goto corral_source_split_6583;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$p178 := $M.47;
    goto corral_source_split_6582;

  $bb81:
    assume out_$i177 == 1;
    goto corral_source_split_6581;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 1);
    goto corral_source_split_6517;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    out_$i176 := $M.57;
    goto corral_source_split_6516;

  $bb50:
    assume out_$i142 == 1;
    goto corral_source_split_6515;

  $bb49:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i129, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb85:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6590;

  SeqInstr_39:
    goto corral_source_split_6589;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} out_vslice_dummy_var_97 := unix_bind(out_$p182, out_$p183, in_$i29);
    goto SeqInstr_38;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$p183 := $M.48;
    goto corral_source_split_6588;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    out_$p182 := $M.47;
    goto corral_source_split_6587;

  $bb84:
    assume out_$i181 == 1;
    goto corral_source_split_6586;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 1);
    goto corral_source_split_6521;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    out_$i180 := $M.57;
    goto corral_source_split_6520;

  $bb51:
    assume !(out_$i142 == 1);
    goto corral_source_split_6519;

  $bb88:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6595;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} out_vslice_dummy_var_98 := unix_ioctl(out_$p187, in_$i9, in_$i6);
    goto corral_source_split_6594;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    out_$p187 := $M.47;
    goto corral_source_split_6593;

  $bb87:
    assume out_$i186 == 1;
    goto corral_source_split_6592;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 1);
    goto corral_source_split_6509;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    out_$i185 := $M.57;
    goto corral_source_split_6508;

  $bb44:
    assume out_$i139 == 1;
    goto corral_source_split_6507;

  $bb40:
    assume out_$i137 == 1;
    assume {:verifier.code 0} true;
    out_$i139 := $slt.i32(out_$i129, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb27:
    assume out_$i131 == 1;
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(out_$i129, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb26:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i129, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb91:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6601;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} out_vslice_dummy_var_99 := sock_no_accept(out_$p191, out_$p192, in_$i1);
    goto corral_source_split_6600;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    out_$p192 := $M.49;
    goto corral_source_split_6599;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    out_$p191 := $M.47;
    goto corral_source_split_6598;

  $bb90:
    assume out_$i190 == 1;
    goto corral_source_split_6597;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 1);
    goto corral_source_split_6513;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    out_$i189 := $M.57;
    goto corral_source_split_6512;

  $bb45:
    assume !(out_$i139 == 1);
    goto corral_source_split_6511;

  $bb94:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1749} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6606;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} out_vslice_dummy_var_100 := sock_no_getsockopt(out_$p196, in_$i12, in_$i7, in_$p3, in_$p11);
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$p196 := $M.47;
    goto corral_source_split_6604;

  $bb93:
    assume out_$i195 == 1;
    goto corral_source_split_6603;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 1);
    goto corral_source_split_6501;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    out_$i194 := $M.57;
    goto corral_source_split_6500;

  $bb42:
    assume out_$i138 == 1;
    goto corral_source_split_6499;

  $bb41:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i129, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb97:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1751} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6612;

  SeqInstr_42:
    goto corral_source_split_6611;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} out_vslice_dummy_var_101 := unix_dgram_connect(out_$p200, out_$p201, in_$i20, in_$i18);
    goto SeqInstr_41;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    out_$p201 := $M.48;
    goto corral_source_split_6610;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    out_$p200 := $M.47;
    goto corral_source_split_6609;

  $bb96:
    assume out_$i199 == 1;
    goto corral_source_split_6608;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 1);
    goto corral_source_split_6505;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    out_$i198 := $M.57;
    goto corral_source_split_6504;

  $bb43:
    assume !(out_$i138 == 1);
    goto corral_source_split_6503;

  $bb100:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6618;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} out_vslice_dummy_var_102 := unix_getname(out_$p205, out_$p206, in_$p28, in_$i5);
    goto corral_source_split_6617;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    out_$p206 := $M.48;
    goto corral_source_split_6616;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    out_$p205 := $M.47;
    goto corral_source_split_6615;

  $bb99:
    assume out_$i204 == 1;
    goto corral_source_split_6614;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 1);
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    out_$i203 := $M.57;
    goto corral_source_split_6492;

  $bb38:
    assume out_$i136 == 1;
    goto corral_source_split_6491;

  $bb29:
    assume out_$i132 == 1;
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i129, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb28:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i129, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb103:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6623;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} out_vslice_dummy_var_103 := unix_shutdown(out_$p210, in_$i34);
    goto corral_source_split_6622;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    out_$p210 := $M.47;
    goto corral_source_split_6621;

  $bb102:
    assume out_$i209 == 1;
    goto corral_source_split_6620;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 1);
    goto corral_source_split_6497;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    out_$i208 := $M.57;
    goto corral_source_split_6496;

  $bb39:
    assume !(out_$i136 == 1);
    goto corral_source_split_6495;

  $bb106:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6628;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} out_vslice_dummy_var_104 := sock_no_listen(out_$p214, in_$i8);
    goto corral_source_split_6627;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    out_$p214 := $M.47;
    goto corral_source_split_6626;

  $bb105:
    assume out_$i213 == 1;
    goto corral_source_split_6625;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 1);
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    out_$i212 := $M.57;
    goto corral_source_split_6480;

  $bb31:
    assume out_$i133 == 1;
    goto corral_source_split_6479;

  $bb30:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i129, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb109:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} out_vslice_dummy_var_105 := unix_dgram_poll(out_$p218, out_$p219, in_$p17);
    goto corral_source_split_6633;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    out_$p219 := $M.47;
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    out_$p218 := $M.44;
    goto corral_source_split_6631;

  $bb108:
    assume out_$i217 == 1;
    goto corral_source_split_6630;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 1);
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    out_$i216 := $M.57;
    goto corral_source_split_6484;

  $bb33:
    assume out_$i134 == 1;
    goto corral_source_split_6483;

  $bb32:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i129, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb112:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6640;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} out_vslice_dummy_var_106 := unix_socketpair(out_$p223, out_$p224);
    goto corral_source_split_6639;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    out_$p224 := $M.49;
    goto corral_source_split_6638;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$p223 := $M.47;
    goto corral_source_split_6637;

  $bb111:
    assume out_$i222 == 1;
    goto corral_source_split_6636;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 1);
    goto corral_source_split_6489;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    out_$i221 := $M.57;
    goto corral_source_split_6488;

  $bb35:
    assume out_$i135 == 1;
    goto corral_source_split_6487;

  $bb34:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i129, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} ldv_stop();
    goto corral_source_split_6642;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i135 == 1);
    goto $bb37;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i147 == 1);
    goto $bb37;

  $bb119:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb135:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $M.63 := out_$i242;
    call {:si_unique_call 1769} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i242);
    goto corral_source_split_6674;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    out_$i242 := $add.i32(out_$i241, 1);
    goto corral_source_split_6673;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    out_$i241 := $M.63;
    goto corral_source_split_6672;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1768} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6671;

  $bb134:
    assume out_$i240 == 1;
    goto corral_source_split_6670;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 0);
    goto corral_source_split_6668;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    out_$i239 := $M.66;
    goto corral_source_split_6667;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $M.66 := out_$i238;
    call {:si_unique_call 1767} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_6666;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} out_$i238 := unix_seq_open(out_$p236, out_$p237);
    goto corral_source_split_6665;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    out_$p237 := $M.37;
    goto corral_source_split_6664;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    out_$p236 := $M.36;
    goto corral_source_split_6663;

  $bb132:
    assume out_$i235 == 1;
    goto corral_source_split_6662;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 1);
    goto corral_source_split_6660;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    out_$i234 := $M.58;
    goto corral_source_split_6659;

  $bb130:
    assume out_$i233 == 1;
    goto corral_source_split_6658;

  $bb128:
    assume out_$i232 == 1;
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i228, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb121:
    assume out_$i229 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := $slt.i32(out_$i228, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb120:
    assume {:verifier.code 0} true;
    out_$i229 := $slt.i32(out_$i228, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_6644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1763} out_$i228 := __VERIFIER_nondet_int();
    call {:si_unique_call 1764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i228);
    call {:si_unique_call 1765} {:cexpr "tmp___97"} boogie_si_record_i32(out_$i228);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb118:
    assume out_$i227 == 1;
    goto corral_source_split_6644;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    out_$i227 := $ne.i32(out_$i226, 0);
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$i226 := $M.58;
    goto corral_source_split_6470;

  $bb19:
    assume !(out_$i125 == 1);
    goto corral_source_split_6469;

  $bb140:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $M.63 := out_$i249;
    call {:si_unique_call 1772} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i249);
    goto corral_source_split_6683;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    out_$i249 := $sub.i32(out_$i248, 1);
    goto corral_source_split_6682;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    out_$i248 := $M.63;
    goto corral_source_split_6681;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6680;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} out_vslice_dummy_var_107 := seq_release_net(out_$p245, out_$p246);
    goto corral_source_split_6679;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    out_$p246 := $M.37;
    goto corral_source_split_6678;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    out_$p245 := $M.36;
    goto corral_source_split_6677;

  $bb139:
    assume out_$i244 == 1;
    goto corral_source_split_6676;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i243, 2);
    goto corral_source_split_6656;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    out_$i243 := $M.58;
    goto corral_source_split_6655;

  $bb129:
    assume !(out_$i232 == 1);
    goto corral_source_split_6654;

  $bb143:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1774} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6688;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} out_vslice_dummy_var_108 := seq_read(out_$p252, in_$p39, in_$i35, in_$p37);
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    out_$p252 := $M.37;
    goto corral_source_split_6686;

  $bb142:
    assume out_$i251 == 1;
    goto corral_source_split_6685;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 2);
    goto corral_source_split_6648;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    out_$i250 := $M.58;
    goto corral_source_split_6647;

  $bb123:
    assume out_$i230 == 1;
    goto corral_source_split_6646;

  $bb122:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    out_$i230 := $slt.i32(out_$i228, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb146:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1776} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_6693;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} out_vslice_dummy_var_109 := seq_lseek(out_$p256, in_$i40, in_$i38);
    goto corral_source_split_6692;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    out_$p256 := $M.37;
    goto corral_source_split_6691;

  $bb145:
    assume out_$i255 == 1;
    goto corral_source_split_6690;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 2);
    goto corral_source_split_6652;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$i254 := $M.58;
    goto corral_source_split_6651;

  $bb125:
    assume out_$i231 == 1;
    goto corral_source_split_6650;

  $bb124:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i228, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} ldv_stop();
    goto corral_source_split_6695;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb126:
    assume {:verifier.code 0} true;
    assume !(out_$i231 == 1);
    goto $bb127;

  $bb131:
    assume {:verifier.code 0} true;
    assume !(out_$i233 == 1);
    goto $bb127;

  $bb152:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb192:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} out_vslice_dummy_var_110 := unix_stream_recvmsg(out_$p281, out_$p282, out_$p283, in_$i72, in_$i51);
    goto corral_source_split_6771;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    out_$p283 := $M.39;
    goto corral_source_split_6770;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    out_$p282 := $M.41;
    goto corral_source_split_6769;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    out_$p281 := $M.40;
    goto corral_source_split_6768;

  $bb191:
    assume out_$i280 == 1;
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 1);
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$i279 := $M.59;
    goto corral_source_split_6764;

  $bb189:
    assume out_$i278 == 1;
    goto corral_source_split_6763;

  $bb187:
    assume out_$i277 == 1;
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i260, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb183:
    assume out_$i275 == 1;
    assume {:verifier.code 0} true;
    out_$i277 := $slt.i32(out_$i260, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb175:
    assume out_$i271 == 1;
    assume {:verifier.code 0} true;
    out_$i275 := $slt.i32(out_$i260, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb154:
    assume out_$i261 == 1;
    assume {:verifier.code 0} true;
    out_$i271 := $slt.i32(out_$i260, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i261 := $slt.i32(out_$i260, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_6697:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1778} out_$i260 := __VERIFIER_nondet_int();
    call {:si_unique_call 1779} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i260);
    call {:si_unique_call 1780} {:cexpr "tmp___98"} boogie_si_record_i32(out_$i260);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb151:
    assume out_$i259 == 1;
    goto corral_source_split_6697;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    out_$i259 := $ne.i32(out_$i258, 0);
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$i258 := $M.59;
    goto corral_source_split_6462;

  $bb16:
    assume out_$i124 == 1;
    goto corral_source_split_6461;

  $bb15:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i117, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb196:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1784} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} out_vslice_dummy_var_111 := unix_set_peek_off(in_$p48, in_$i43);
    goto corral_source_split_6775;

  $bb195:
    assume out_$i286 == 1;
    goto corral_source_split_6774;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i285, 1);
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    out_$i285 := $M.59;
    goto corral_source_split_6760;

  $bb188:
    assume !(out_$i277 == 1);
    goto corral_source_split_6759;

  $bb199:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} out_vslice_dummy_var_112 := sock_no_sendpage(out_$p290, in_$p55, in_$i49, in_$i59, in_$i56);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$p290 := $M.41;
    goto corral_source_split_6779;

  $bb198:
    assume out_$i289 == 1;
    goto corral_source_split_6778;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 1);
    goto corral_source_split_6753;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    out_$i288 := $M.59;
    goto corral_source_split_6752;

  $bb185:
    assume out_$i276 == 1;
    goto corral_source_split_6751;

  $bb184:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    out_$i276 := $slt.i32(out_$i260, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb202:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1788} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} out_vslice_dummy_var_113 := sock_no_mmap(out_$p294, out_$p295, in_$p71);
    goto corral_source_split_6786;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$p295 := $M.41;
    goto corral_source_split_6785;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    out_$p294 := $M.38;
    goto corral_source_split_6784;

  $bb201:
    assume out_$i293 == 1;
    goto corral_source_split_6783;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 1);
    goto corral_source_split_6757;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    out_$i292 := $M.59;
    goto corral_source_split_6756;

  $bb186:
    assume !(out_$i276 == 1);
    goto corral_source_split_6755;

  $bb205:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} out_vslice_dummy_var_114 := unix_stream_sendmsg(out_$p299, out_$p300, out_$p301, in_$i58);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    out_$p301 := $M.39;
    goto corral_source_split_6792;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$p300 := $M.41;
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    out_$p299 := $M.40;
    goto corral_source_split_6790;

  $bb204:
    assume out_$i298 == 1;
    goto corral_source_split_6789;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    out_$i298 := $eq.i32(out_$i297, 1);
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    out_$i297 := $M.59;
    goto corral_source_split_6744;

  $bb181:
    assume out_$i274 == 1;
    goto corral_source_split_6743;

  $bb177:
    assume out_$i272 == 1;
    assume {:verifier.code 0} true;
    out_$i274 := $slt.i32(out_$i260, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb176:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    out_$i272 := $slt.i32(out_$i260, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb208:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1792} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6799;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} out_vslice_dummy_var_115 := sock_no_setsockopt(out_$p305, in_$i42, in_$i52, in_$p50, in_$i73);
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$p305 := $M.41;
    goto corral_source_split_6797;

  $bb207:
    assume out_$i304 == 1;
    goto corral_source_split_6796;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 1);
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    out_$i303 := $M.59;
    goto corral_source_split_6748;

  $bb182:
    assume !(out_$i274 == 1);
    goto corral_source_split_6747;

  $bb211:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1794} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6805;

  SeqInstr_45:
    goto corral_source_split_6804;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} out_vslice_dummy_var_116 := unix_bind(out_$p309, out_$p310, in_$i69);
    goto SeqInstr_44;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    out_$p310 := $M.42;
    goto corral_source_split_6803;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$p309 := $M.41;
    goto corral_source_split_6802;

  $bb210:
    assume out_$i308 == 1;
    goto corral_source_split_6801;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i307, 1);
    goto corral_source_split_6737;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    out_$i307 := $M.59;
    goto corral_source_split_6736;

  $bb179:
    assume out_$i273 == 1;
    goto corral_source_split_6735;

  $bb178:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    out_$i273 := $slt.i32(out_$i260, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb214:
    assume !(out_$i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1796} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6810;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} out_vslice_dummy_var_117 := unix_release(out_$p314);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$p314 := $M.41;
    goto corral_source_split_6808;

  $bb213:
    assume out_$i313 == 1;
    goto corral_source_split_6807;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$i313 := $eq.i32(out_$i312, 1);
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$i312 := $M.59;
    goto corral_source_split_6740;

  $bb180:
    assume !(out_$i273 == 1);
    goto corral_source_split_6739;

  $bb217:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1798} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} out_vslice_dummy_var_118 := unix_ioctl(out_$p318, in_$i75, in_$i53);
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$p318 := $M.41;
    goto corral_source_split_6813;

  $bb216:
    assume out_$i317 == 1;
    goto corral_source_split_6812;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 1);
    goto corral_source_split_6729;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    out_$i316 := $M.59;
    goto corral_source_split_6728;

  $bb173:
    assume out_$i270 == 1;
    goto corral_source_split_6727;

  $bb169:
    assume out_$i268 == 1;
    assume {:verifier.code 0} true;
    out_$i270 := $slt.i32(out_$i260, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb156:
    assume out_$i262 == 1;
    assume {:verifier.code 0} true;
    out_$i268 := $slt.i32(out_$i260, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb155:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    out_$i262 := $slt.i32(out_$i260, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb220:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} out_vslice_dummy_var_119 := unix_accept(out_$p322, out_$p323, in_$i64);
    goto corral_source_split_6820;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    out_$p323 := $M.43;
    goto corral_source_split_6819;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    out_$p322 := $M.41;
    goto corral_source_split_6818;

  $bb219:
    assume out_$i321 == 1;
    goto corral_source_split_6817;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    out_$i321 := $eq.i32(out_$i320, 1);
    goto corral_source_split_6733;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$i320 := $M.59;
    goto corral_source_split_6732;

  $bb174:
    assume !(out_$i270 == 1);
    goto corral_source_split_6731;

  $bb223:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6826;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} out_vslice_dummy_var_120 := sock_no_getsockopt(out_$p327, in_$i45, in_$i46, in_$p44, in_$p63);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$p327 := $M.41;
    goto corral_source_split_6824;

  $bb222:
    assume out_$i326 == 1;
    goto corral_source_split_6823;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 1);
    goto corral_source_split_6721;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    out_$i325 := $M.59;
    goto corral_source_split_6720;

  $bb171:
    assume out_$i269 == 1;
    goto corral_source_split_6719;

  $bb170:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    out_$i269 := $slt.i32(out_$i260, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb226:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6832;

  SeqInstr_48:
    goto corral_source_split_6831;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} out_vslice_dummy_var_121 := unix_stream_connect(out_$p331, out_$p332, in_$i61, in_$i41);
    goto SeqInstr_47;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    out_$p332 := $M.42;
    goto corral_source_split_6830;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    out_$p331 := $M.41;
    goto corral_source_split_6829;

  $bb225:
    assume out_$i330 == 1;
    goto corral_source_split_6828;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 1);
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    out_$i329 := $M.59;
    goto corral_source_split_6724;

  $bb172:
    assume !(out_$i269 == 1);
    goto corral_source_split_6723;

  $bb229:
    assume !(out_$i335 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1806} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6838;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} out_vslice_dummy_var_122 := unix_getname(out_$p336, out_$p337, in_$p68, in_$i57);
    goto corral_source_split_6837;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    out_$p337 := $M.42;
    goto corral_source_split_6836;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    out_$p336 := $M.41;
    goto corral_source_split_6835;

  $bb228:
    assume out_$i335 == 1;
    goto corral_source_split_6834;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    out_$i335 := $eq.i32(out_$i334, 1);
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    out_$i334 := $M.59;
    goto corral_source_split_6712;

  $bb167:
    assume out_$i267 == 1;
    goto corral_source_split_6711;

  $bb158:
    assume out_$i263 == 1;
    assume {:verifier.code 0} true;
    out_$i267 := $slt.i32(out_$i260, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb157:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    out_$i263 := $slt.i32(out_$i260, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb232:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1808} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6843;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} out_vslice_dummy_var_123 := unix_shutdown(out_$p341, in_$i60);
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$p341 := $M.41;
    goto corral_source_split_6841;

  $bb231:
    assume out_$i340 == 1;
    goto corral_source_split_6840;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 1);
    goto corral_source_split_6717;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    out_$i339 := $M.59;
    goto corral_source_split_6716;

  $bb168:
    assume !(out_$i267 == 1);
    goto corral_source_split_6715;

  $bb235:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6849;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} out_vslice_dummy_var_124 := unix_poll(out_$p345, out_$p346, in_$p66);
    goto corral_source_split_6848;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    out_$p346 := $M.41;
    goto corral_source_split_6847;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    out_$p345 := $M.38;
    goto corral_source_split_6846;

  $bb234:
    assume out_$i344 == 1;
    goto corral_source_split_6845;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i343, 1);
    goto corral_source_split_6701;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    out_$i343 := $M.59;
    goto corral_source_split_6700;

  $bb160:
    assume out_$i264 == 1;
    goto corral_source_split_6699;

  $bb159:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    out_$i264 := $slt.i32(out_$i260, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb238:
    assume !(out_$i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6854;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} out_vslice_dummy_var_125 := unix_listen(out_$p350, in_$i74);
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    out_$p350 := $M.41;
    goto corral_source_split_6852;

  $bb237:
    assume out_$i349 == 1;
    goto corral_source_split_6851;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    out_$i349 := $eq.i32(out_$i348, 1);
    goto corral_source_split_6705;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    out_$i348 := $M.59;
    goto corral_source_split_6704;

  $bb162:
    assume out_$i265 == 1;
    goto corral_source_split_6703;

  $bb161:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    out_$i265 := $slt.i32(out_$i260, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb241:
    assume !(out_$i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6860;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} out_vslice_dummy_var_126 := unix_socketpair(out_$p354, out_$p355);
    goto corral_source_split_6859;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    out_$p355 := $M.43;
    goto corral_source_split_6858;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$p354 := $M.41;
    goto corral_source_split_6857;

  $bb240:
    assume out_$i353 == 1;
    goto corral_source_split_6856;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i352, 1);
    goto corral_source_split_6709;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    out_$i352 := $M.59;
    goto corral_source_split_6708;

  $bb164:
    assume out_$i266 == 1;
    goto corral_source_split_6707;

  $bb163:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i260, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} ldv_stop();
    goto corral_source_split_6862;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb165:
    assume {:verifier.code 0} true;
    assume !(out_$i266 == 1);
    goto $bb166;

  $bb190:
    assume {:verifier.code 0} true;
    assume !(out_$i278 == 1);
    goto $bb166;

  $bb247:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb252:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6872;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} out_vslice_dummy_var_127 := unix_create(in_$p81, in_$p79, in_$i76, in_$i77);
    goto corral_source_split_6871;

  $bb251:
    assume out_$i362 == 1;
    goto corral_source_split_6870;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 1);
    goto corral_source_split_6868;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    out_$i361 := $M.60;
    goto corral_source_split_6867;

  $bb249:
    assume out_$i360 == 1;
    goto corral_source_split_6866;

  $bb248:
    assume {:verifier.code 0} true;
    out_$i360 := $eq.i32(out_$i359, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_6864:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1816} out_$i359 := __VERIFIER_nondet_int();
    call {:si_unique_call 1817} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i359);
    call {:si_unique_call 1818} {:cexpr "tmp___99"} boogie_si_record_i32(out_$i359);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb246:
    assume out_$i358 == 1;
    goto corral_source_split_6864;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    out_$i358 := $ne.i32(out_$i357, 0);
    goto corral_source_split_6467;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    out_$i357 := $M.60;
    goto corral_source_split_6466;

  $bb17:
    assume !(out_$i124 == 1);
    goto corral_source_split_6465;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} ldv_stop();
    goto corral_source_split_6874;

  $bb250:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb259:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb269:
    assume !(out_$i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    goto $bb270;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6889;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} out_vslice_dummy_var_128 := unix_net_init(out_$p372);
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    out_$p372 := $M.35;
    goto corral_source_split_6887;

  $bb268:
    assume out_$i371 == 1;
    goto corral_source_split_6886;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i370, 1);
    goto corral_source_split_6884;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    out_$i370 := $M.61;
    goto corral_source_split_6883;

  $bb266:
    assume out_$i369 == 1;
    goto corral_source_split_6882;

  $bb261:
    assume out_$i367 == 1;
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i366, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb260:
    assume {:verifier.code 0} true;
    out_$i367 := $slt.i32(out_$i366, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_6876:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1822} out_$i366 := __VERIFIER_nondet_int();
    call {:si_unique_call 1823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i366);
    call {:si_unique_call 1824} {:cexpr "tmp___100"} boogie_si_record_i32(out_$i366);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb258:
    assume out_$i365 == 1;
    goto corral_source_split_6876;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$i365 := $ne.i32(out_$i364, 0);
    goto corral_source_split_6455;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$i364 := $M.61;
    goto corral_source_split_6454;

  $bb12:
    assume out_$i122 == 1;
    goto corral_source_split_6453;

  $bb5:
    assume out_$i119 == 1;
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i117, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i119 := $slt.i32(out_$i117, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb273:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1828} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6894;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} unix_net_exit(out_$p376);
    goto corral_source_split_6893;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    out_$p376 := $M.35;
    goto corral_source_split_6892;

  $bb272:
    assume out_$i375 == 1;
    goto corral_source_split_6891;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$i375 := $eq.i32(out_$i374, 1);
    goto corral_source_split_6880;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    out_$i374 := $M.61;
    goto corral_source_split_6879;

  $bb263:
    assume out_$i368 == 1;
    goto corral_source_split_6878;

  $bb262:
    assume !(out_$i367 == 1);
    assume {:verifier.code 0} true;
    out_$i368 := $eq.i32(out_$i366, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} ldv_stop();
    goto corral_source_split_6896;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb264:
    assume {:verifier.code 0} true;
    assume !(out_$i368 == 1);
    goto $bb265;

  $bb267:
    assume {:verifier.code 0} true;
    assume !(out_$i369 == 1);
    goto $bb265;

  $bb279:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb293:
    assume !(out_$i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb298:
    assume !(out_$i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    goto $bb299;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $M.63 := out_$i399;
    call {:si_unique_call 1837} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i399);
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$i399 := $add.i32(out_$i398, 1);
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    out_$i398 := $M.63;
    goto corral_source_split_6937;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6936;

  $bb297:
    assume out_$i397 == 1;
    goto corral_source_split_6935;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i397 := $eq.i64(out_$i396, 0);
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    out_$i396 := $p2i.ref.i64(out_$p395);
    goto corral_source_split_6932;

  $bb296:
    assume {:verifier.code 0} true;
    out_$p395 := $M.68;
    goto corral_source_split_6931;

  $bb295:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $M.63 := out_$i394;
    call {:si_unique_call 1835} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i394);
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    out_$i394 := $add.i32(out_$i393, 1);
    goto corral_source_split_6928;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    out_$i393 := $M.63;
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1834} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6926;

  $bb294:
    assume out_$i392 == 1;
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    out_$i392 := $ne.i64(out_$i391, 0);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$i391 := $p2i.ref.i64(out_$p390);
    goto corral_source_split_6922;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$p390 := $M.68;
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $M.68 := out_$p389;
    goto corral_source_split_6920;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} out_$p389 := unix_seq_start(out_$p387, out_$p388);
    goto corral_source_split_6919;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    out_$p388 := $M.67;
    goto corral_source_split_6918;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    out_$p387 := $M.56;
    goto corral_source_split_6917;

  $bb292:
    assume out_$i386 == 1;
    goto corral_source_split_6916;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    out_$i386 := $eq.i32(out_$i385, 1);
    goto corral_source_split_6914;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    out_$i385 := $M.62;
    goto corral_source_split_6913;

  $bb290:
    assume out_$i384 == 1;
    goto corral_source_split_6912;

  $bb288:
    assume out_$i383 == 1;
    assume {:verifier.code 0} true;
    out_$i384 := $eq.i32(out_$i379, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb281:
    assume out_$i380 == 1;
    assume {:verifier.code 0} true;
    out_$i383 := $slt.i32(out_$i379, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb280:
    assume {:verifier.code 0} true;
    out_$i380 := $slt.i32(out_$i379, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_6898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1830} out_$i379 := __VERIFIER_nondet_int();
    call {:si_unique_call 1831} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i379);
    call {:si_unique_call 1832} {:cexpr "tmp___101"} boogie_si_record_i32(out_$i379);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb278:
    assume out_$i378 == 1;
    goto corral_source_split_6898;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    out_$i378 := $ne.i32(out_$i377, 0);
    goto corral_source_split_6459;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    out_$i377 := $M.62;
    goto corral_source_split_6458;

  $bb13:
    assume !(out_$i122 == 1);
    goto corral_source_split_6457;

  $bb306:
    assume !(out_$i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $M.63 := out_$i411;
    call {:si_unique_call 1843} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i411);
    goto corral_source_split_6960;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    out_$i411 := $sub.i32(out_$i410, 1);
    goto corral_source_split_6959;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    out_$i410 := $M.63;
    goto corral_source_split_6958;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1842} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6957;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} unix_seq_stop(out_$p408, out_$p409);
    goto corral_source_split_6956;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    out_$p409 := $M.69;
    goto corral_source_split_6955;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    out_$p408 := $M.56;
    goto corral_source_split_6954;

  $bb305:
    assume out_$i407 == 1;
    goto corral_source_split_6953;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    out_$i407 := $eq.i32(out_$i406, 2);
    goto corral_source_split_6951;

  $bb304:
    assume {:verifier.code 0} true;
    out_$i406 := $M.62;
    goto corral_source_split_6950;

  $bb303:
    assume !(out_$i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $M.63 := out_$i405;
    call {:si_unique_call 1840} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i405);
    goto corral_source_split_6948;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    out_$i405 := $sub.i32(out_$i404, 1);
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    out_$i404 := $M.63;
    goto corral_source_split_6946;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} unix_seq_stop(out_$p402, out_$p403);
    goto corral_source_split_6944;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    out_$p403 := $M.69;
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$p402 := $M.56;
    goto corral_source_split_6942;

  $bb302:
    assume out_$i401 == 1;
    goto corral_source_split_6941;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    out_$i401 := $eq.i32(out_$i400, 3);
    goto corral_source_split_6910;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    out_$i400 := $M.62;
    goto corral_source_split_6909;

  $bb289:
    assume !(out_$i383 == 1);
    goto corral_source_split_6908;

  $bb309:
    assume !(out_$i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6967;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} out_vslice_dummy_var_129 := unix_seq_show(out_$p414, out_$p416);
    goto corral_source_split_6966;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    out_$p416 := $bitcast.ref.ref(out_$p415);
    goto corral_source_split_6965;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    out_$p415 := $M.67;
    goto corral_source_split_6964;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    out_$p414 := $M.56;
    goto corral_source_split_6963;

  $bb308:
    assume out_$i413 == 1;
    goto corral_source_split_6962;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    out_$i413 := $eq.i32(out_$i412, 2);
    goto corral_source_split_6902;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    out_$i412 := $M.62;
    goto corral_source_split_6901;

  $bb283:
    assume out_$i381 == 1;
    goto corral_source_split_6900;

  $bb282:
    assume !(out_$i380 == 1);
    assume {:verifier.code 0} true;
    out_$i381 := $slt.i32(out_$i379, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb312:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb317:
    assume !(out_$i431 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    goto $bb318;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $M.63 := out_$i433;
    call {:si_unique_call 1850} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i433);
    goto corral_source_split_6993;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    out_$i433 := $add.i32(out_$i432, 1);
    goto corral_source_split_6992;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    out_$i432 := $M.63;
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $M.62 := 3;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_6990;

  $bb316:
    assume out_$i431 == 1;
    goto corral_source_split_6989;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    out_$i431 := $ne.i64(out_$i430, 0);
    goto corral_source_split_6987;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    out_$i430 := $p2i.ref.i64(out_$p429);
    goto corral_source_split_6986;

  $bb315:
    assume {:verifier.code 0} true;
    out_$p429 := $M.70;
    goto corral_source_split_6985;

  $bb314:
    assume !(out_$i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $M.63 := out_$i428;
    call {:si_unique_call 1848} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i428);
    goto corral_source_split_6983;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    out_$i428 := $add.i32(out_$i427, 1);
    goto corral_source_split_6982;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    out_$i427 := $M.63;
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $M.62 := 2;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_6980;

  $bb313:
    assume out_$i426 == 1;
    goto corral_source_split_6979;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    out_$i426 := $eq.i64(out_$i425, 0);
    goto corral_source_split_6977;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    out_$i425 := $p2i.ref.i64(out_$p424);
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    out_$p424 := $M.70;
    goto corral_source_split_6975;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $M.70 := out_$p423;
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} out_$p423 := unix_seq_next(out_$p420, out_$p421, out_$p422);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$p422 := $M.67;
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$p421 := $M.69;
    goto corral_source_split_6971;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    out_$p420 := $M.56;
    goto corral_source_split_6970;

  $bb311:
    assume out_$i419 == 1;
    goto corral_source_split_6969;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$i419 := $eq.i32(out_$i418, 2);
    goto corral_source_split_6906;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    out_$i418 := $M.62;
    goto corral_source_split_6905;

  $bb285:
    assume out_$i382 == 1;
    goto corral_source_split_6904;

  $bb284:
    assume !(out_$i381 == 1);
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i379, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} ldv_stop();
    goto corral_source_split_6995;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb286:
    assume {:verifier.code 0} true;
    assume !(out_$i382 == 1);
    goto $bb287;

  $bb291:
    assume {:verifier.code 0} true;
    assume !(out_$i384 == 1);
    goto $bb287;

  $bb324:
    assume !(out_$i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb334:
    assume {:verifier.code 0} true;
    assume !(out_$i441 == 1);
    goto $bb335;

  $bb337:
    assume {:verifier.code 0} true;
    assume !(out_$i443 == 1);
    goto $bb335;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    out_$i443 := $eq.i32(out_$i442, 0);
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    out_$i442 := $M.63;
    goto corral_source_split_7008;

  $bb333:
    assume out_$i441 == 1;
    goto corral_source_split_7007;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    out_$i441 := $eq.i32(out_$i440, 3);
    goto corral_source_split_7005;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    out_$i440 := $M.64;
    goto corral_source_split_7004;

  $bb331:
    assume out_$i439 == 1;
    goto corral_source_split_7003;

  $bb326:
    assume out_$i437 == 1;
    assume {:verifier.code 0} true;
    out_$i439 := $eq.i32(out_$i436, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb325:
    assume {:verifier.code 0} true;
    out_$i437 := $slt.i32(out_$i436, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_6997:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1852} out_$i436 := __VERIFIER_nondet_int();
    call {:si_unique_call 1853} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i436);
    call {:si_unique_call 1854} {:cexpr "tmp___102"} boogie_si_record_i32(out_$i436);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb323:
    assume out_$i435 == 1;
    goto corral_source_split_6997;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    out_$i435 := $ne.i32(out_$i434, 0);
    goto corral_source_split_6447;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    out_$i434 := $M.64;
    goto corral_source_split_6446;

  $bb7:
    assume out_$i120 == 1;
    goto corral_source_split_6445;

  $bb6:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i117, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb342:
    assume !(out_$i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb347:
    assume !(out_$i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$i450 := $ne.i32(out_$i449, 0);
    goto corral_source_split_7040;

  $bb345:
    assume {:verifier.code 0} true;
    out_$i449 := $M.71;
    goto corral_source_split_7039;

  $bb344:
    assume !(out_$i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} ldv_initialize_proto_ops_6();
    goto corral_source_split_7037;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1872} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7036;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} ldv_seq_operations_4();
    goto corral_source_split_7035;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 1870} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7034;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} ldv_initialize_pernet_operations_1();
    goto corral_source_split_7033;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.61 := 1;
    call {:si_unique_call 1868} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7032;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} ldv_file_operations_3();
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1866} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} ldv_initialize_proto_ops_7();
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $M.59 := 1;
    call {:si_unique_call 1864} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7028;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $M.60 := 1;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} ldv_initialize_proto_ops_5();
    goto corral_source_split_7026;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $M.64 := 3;
    call {:si_unique_call 1860} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7024;

  $bb343:
    assume out_$i448 == 1;
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$i448 := $eq.i32(out_$i447, 0);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$i447 := $M.71;
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $M.71 := out_$i446;
    call {:si_unique_call 1859} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i446);
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} out_$i446 := af_unix_init();
    goto corral_source_split_7018;

  $bb341:
    assume out_$i445 == 1;
    goto corral_source_split_7017;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    out_$i445 := $eq.i32(out_$i444, 1);
    goto corral_source_split_7001;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    out_$i444 := $M.64;
    goto corral_source_split_7000;

  $bb328:
    assume out_$i438 == 1;
    goto corral_source_split_6999;

  $bb327:
    assume !(out_$i437 == 1);
    assume {:verifier.code 0} true;
    out_$i438 := $eq.i32(out_$i436, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} ldv_stop();
    goto corral_source_split_7045;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb329:
    assume {:verifier.code 0} true;
    assume !(out_$i438 == 1);
    goto $bb330;

  $bb332:
    assume {:verifier.code 0} true;
    assume !(out_$i439 == 1);
    goto $bb330;

  $bb354:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb432:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb411:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb408:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb394:
    assume !(out_$i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1880} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7122;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} out_vslice_dummy_var_130 := unix_seqpacket_recvmsg(out_$p474, out_$p475, out_$p476, in_$i86, in_$i100);
    goto corral_source_split_7121;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    out_$p476 := $M.51;
    goto corral_source_split_7120;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    out_$p475 := $M.53;
    goto corral_source_split_7119;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    out_$p474 := $M.52;
    goto corral_source_split_7118;

  $bb393:
    assume out_$i473 == 1;
    goto corral_source_split_7117;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    out_$i473 := $eq.i32(out_$i472, 1);
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    out_$i472 := $M.65;
    goto corral_source_split_7114;

  $bb391:
    assume out_$i471 == 1;
    goto corral_source_split_7113;

  $bb389:
    assume out_$i470 == 1;
    assume {:verifier.code 0} true;
    out_$i471 := $eq.i32(out_$i453, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb385:
    assume out_$i468 == 1;
    assume {:verifier.code 0} true;
    out_$i470 := $slt.i32(out_$i453, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb377:
    assume out_$i464 == 1;
    assume {:verifier.code 0} true;
    out_$i468 := $slt.i32(out_$i453, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  $bb356:
    assume out_$i454 == 1;
    assume {:verifier.code 0} true;
    out_$i464 := $slt.i32(out_$i453, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb355:
    assume {:verifier.code 0} true;
    out_$i454 := $slt.i32(out_$i453, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_7047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1876} out_$i453 := __VERIFIER_nondet_int();
    call {:si_unique_call 1877} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i453);
    call {:si_unique_call 1878} {:cexpr "tmp___103"} boogie_si_record_i32(out_$i453);
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb353:
    assume out_$i452 == 1;
    goto corral_source_split_7047;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb353, $bb354;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    out_$i452 := $ne.i32(out_$i451, 0);
    goto corral_source_split_6451;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    out_$i451 := $M.65;
    goto corral_source_split_6450;

  $bb9:
    assume out_$i121 == 1;
    goto corral_source_split_6449;

  $bb8:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i117, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb398:
    assume !(out_$i479 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1882} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7126;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} out_vslice_dummy_var_131 := unix_set_peek_off(in_$p111, in_$i109);
    goto corral_source_split_7125;

  $bb397:
    assume out_$i479 == 1;
    goto corral_source_split_7124;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    out_$i479 := $eq.i32(out_$i478, 1);
    goto corral_source_split_7111;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    out_$i478 := $M.65;
    goto corral_source_split_7110;

  $bb390:
    assume !(out_$i470 == 1);
    goto corral_source_split_7109;

  $bb401:
    assume !(out_$i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb402;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1884} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7131;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} out_vslice_dummy_var_132 := sock_no_setsockopt(out_$p483, in_$i106, in_$i112, in_$p103, in_$i87);
    goto corral_source_split_7130;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    out_$p483 := $M.53;
    goto corral_source_split_7129;

  $bb400:
    assume out_$i482 == 1;
    goto corral_source_split_7128;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    out_$i482 := $eq.i32(out_$i481, 1);
    goto corral_source_split_7103;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    out_$i481 := $M.65;
    goto corral_source_split_7102;

  $bb387:
    assume out_$i469 == 1;
    goto corral_source_split_7101;

  $bb386:
    assume !(out_$i468 == 1);
    assume {:verifier.code 0} true;
    out_$i469 := $slt.i32(out_$i453, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  $bb404:
    assume !(out_$i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    goto $bb405;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1886} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7138;

  SeqInstr_51:
    goto corral_source_split_7137;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} out_vslice_dummy_var_133 := unix_seqpacket_sendmsg(out_$p487, out_$p488, out_$p489, in_$i91);
    goto SeqInstr_50;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    out_$p489 := $M.51;
    goto corral_source_split_7136;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    out_$p488 := $M.53;
    goto corral_source_split_7135;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    out_$p487 := $M.52;
    goto corral_source_split_7134;

  $bb403:
    assume out_$i486 == 1;
    goto corral_source_split_7133;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb403, $bb404;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    out_$i486 := $eq.i32(out_$i485, 1);
    goto corral_source_split_7107;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    out_$i485 := $M.65;
    goto corral_source_split_7106;

  $bb388:
    assume !(out_$i469 == 1);
    goto corral_source_split_7105;

  $bb407:
    assume !(out_$i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb408;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    goto $bb408;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1888} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7144;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} out_vslice_dummy_var_134 := sock_no_mmap(out_$p493, out_$p494, in_$p95);
    goto corral_source_split_7143;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    out_$p494 := $M.53;
    goto corral_source_split_7142;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    out_$p493 := $M.50;
    goto corral_source_split_7141;

  $bb406:
    assume out_$i492 == 1;
    goto corral_source_split_7140;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    out_$i492 := $eq.i32(out_$i491, 1);
    goto corral_source_split_7095;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    out_$i491 := $M.65;
    goto corral_source_split_7094;

  $bb383:
    assume out_$i467 == 1;
    goto corral_source_split_7093;

  $bb379:
    assume out_$i465 == 1;
    assume {:verifier.code 0} true;
    out_$i467 := $slt.i32(out_$i453, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb378:
    assume !(out_$i464 == 1);
    assume {:verifier.code 0} true;
    out_$i465 := $slt.i32(out_$i453, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb410:
    assume !(out_$i497 == 1);
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    goto $bb411;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1890} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7149;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} out_vslice_dummy_var_135 := sock_no_sendpage(out_$p498, in_$p85, in_$i98, in_$i115, in_$i101);
    goto corral_source_split_7148;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    out_$p498 := $M.53;
    goto corral_source_split_7147;

  $bb409:
    assume out_$i497 == 1;
    goto corral_source_split_7146;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    out_$i497 := $eq.i32(out_$i496, 1);
    goto corral_source_split_7099;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    out_$i496 := $M.65;
    goto corral_source_split_7098;

  $bb384:
    assume !(out_$i467 == 1);
    goto corral_source_split_7097;

  $bb413:
    assume !(out_$i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    goto $bb414;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1892} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7154;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} out_vslice_dummy_var_136 := unix_release(out_$p502);
    goto corral_source_split_7153;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    out_$p502 := $M.53;
    goto corral_source_split_7152;

  $bb412:
    assume out_$i501 == 1;
    goto corral_source_split_7151;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    out_$i501 := $eq.i32(out_$i500, 1);
    goto corral_source_split_7087;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    out_$i500 := $M.65;
    goto corral_source_split_7086;

  $bb381:
    assume out_$i466 == 1;
    goto corral_source_split_7085;

  $bb380:
    assume !(out_$i465 == 1);
    assume {:verifier.code 0} true;
    out_$i466 := $slt.i32(out_$i453, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb416:
    assume !(out_$i505 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1894} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7160;

  SeqInstr_54:
    goto corral_source_split_7159;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} out_vslice_dummy_var_137 := unix_bind(out_$p506, out_$p507, in_$i99);
    goto SeqInstr_53;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    out_$p507 := $M.54;
    goto corral_source_split_7158;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    out_$p506 := $M.53;
    goto corral_source_split_7157;

  $bb415:
    assume out_$i505 == 1;
    goto corral_source_split_7156;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    out_$i505 := $eq.i32(out_$i504, 1);
    goto corral_source_split_7091;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    out_$i504 := $M.65;
    goto corral_source_split_7090;

  $bb382:
    assume !(out_$i466 == 1);
    goto corral_source_split_7089;

  $bb419:
    assume !(out_$i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    goto $bb420;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1896} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7165;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} out_vslice_dummy_var_138 := unix_ioctl(out_$p511, in_$i90, in_$i97);
    goto corral_source_split_7164;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    out_$p511 := $M.53;
    goto corral_source_split_7163;

  $bb418:
    assume out_$i510 == 1;
    goto corral_source_split_7162;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    out_$i510 := $eq.i32(out_$i509, 1);
    goto corral_source_split_7079;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    out_$i509 := $M.65;
    goto corral_source_split_7078;

  $bb375:
    assume out_$i463 == 1;
    goto corral_source_split_7077;

  $bb371:
    assume out_$i461 == 1;
    assume {:verifier.code 0} true;
    out_$i463 := $slt.i32(out_$i453, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb358:
    assume out_$i455 == 1;
    assume {:verifier.code 0} true;
    out_$i461 := $slt.i32(out_$i453, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb357:
    assume !(out_$i454 == 1);
    assume {:verifier.code 0} true;
    out_$i455 := $slt.i32(out_$i453, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb422:
    assume !(out_$i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb423;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    goto $bb423;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1898} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7171;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} out_vslice_dummy_var_139 := unix_accept(out_$p515, out_$p516, in_$i105);
    goto corral_source_split_7170;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    out_$p516 := $M.55;
    goto corral_source_split_7169;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    out_$p515 := $M.53;
    goto corral_source_split_7168;

  $bb421:
    assume out_$i514 == 1;
    goto corral_source_split_7167;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    out_$i514 := $eq.i32(out_$i513, 1);
    goto corral_source_split_7083;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    out_$i513 := $M.65;
    goto corral_source_split_7082;

  $bb376:
    assume !(out_$i463 == 1);
    goto corral_source_split_7081;

  $bb425:
    assume !(out_$i519 == 1);
    assume {:verifier.code 0} true;
    goto $bb426;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    goto $bb426;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1900} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} out_vslice_dummy_var_140 := sock_no_getsockopt(out_$p520, in_$i114, in_$i116, in_$p113, in_$p83);
    goto corral_source_split_7175;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    out_$p520 := $M.53;
    goto corral_source_split_7174;

  $bb424:
    assume out_$i519 == 1;
    goto corral_source_split_7173;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    out_$i519 := $eq.i32(out_$i518, 1);
    goto corral_source_split_7071;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$i518 := $M.65;
    goto corral_source_split_7070;

  $bb373:
    assume out_$i462 == 1;
    goto corral_source_split_7069;

  $bb372:
    assume !(out_$i461 == 1);
    assume {:verifier.code 0} true;
    out_$i462 := $slt.i32(out_$i453, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb428:
    assume !(out_$i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    goto $bb429;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1902} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7182;

  SeqInstr_57:
    goto corral_source_split_7181;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} out_vslice_dummy_var_141 := unix_stream_connect(out_$p524, out_$p525, in_$i102, in_$i96);
    goto SeqInstr_56;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$p525 := $M.54;
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    out_$p524 := $M.53;
    goto corral_source_split_7179;

  $bb427:
    assume out_$i523 == 1;
    goto corral_source_split_7178;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb427, $bb428;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    out_$i523 := $eq.i32(out_$i522, 1);
    goto corral_source_split_7075;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    out_$i522 := $M.65;
    goto corral_source_split_7074;

  $bb374:
    assume !(out_$i462 == 1);
    goto corral_source_split_7073;

  $bb431:
    assume !(out_$i528 == 1);
    assume {:verifier.code 0} true;
    goto $bb432;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    goto $bb432;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1904} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7188;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} out_vslice_dummy_var_142 := unix_getname(out_$p529, out_$p530, in_$p93, in_$i104);
    goto corral_source_split_7187;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    out_$p530 := $M.54;
    goto corral_source_split_7186;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$p529 := $M.53;
    goto corral_source_split_7185;

  $bb430:
    assume out_$i528 == 1;
    goto corral_source_split_7184;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb430, $bb431;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    out_$i528 := $eq.i32(out_$i527, 1);
    goto corral_source_split_7063;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    out_$i527 := $M.65;
    goto corral_source_split_7062;

  $bb369:
    assume out_$i460 == 1;
    goto corral_source_split_7061;

  $bb360:
    assume out_$i456 == 1;
    assume {:verifier.code 0} true;
    out_$i460 := $slt.i32(out_$i453, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  $bb359:
    assume !(out_$i455 == 1);
    assume {:verifier.code 0} true;
    out_$i456 := $slt.i32(out_$i453, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb434:
    assume !(out_$i533 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    goto $bb435;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1906} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7193;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} out_vslice_dummy_var_143 := unix_shutdown(out_$p534, in_$i108);
    goto corral_source_split_7192;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    out_$p534 := $M.53;
    goto corral_source_split_7191;

  $bb433:
    assume out_$i533 == 1;
    goto corral_source_split_7190;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    out_$i533 := $eq.i32(out_$i532, 1);
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    out_$i532 := $M.65;
    goto corral_source_split_7066;

  $bb370:
    assume !(out_$i460 == 1);
    goto corral_source_split_7065;

  $bb437:
    assume !(out_$i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto $bb438;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1908} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7198;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} out_vslice_dummy_var_144 := unix_listen(out_$p538, in_$i107);
    goto corral_source_split_7197;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    out_$p538 := $M.53;
    goto corral_source_split_7196;

  $bb436:
    assume out_$i537 == 1;
    goto corral_source_split_7195;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    out_$i537 := $eq.i32(out_$i536, 1);
    goto corral_source_split_7051;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    out_$i536 := $M.65;
    goto corral_source_split_7050;

  $bb362:
    assume out_$i457 == 1;
    goto corral_source_split_7049;

  $bb361:
    assume !(out_$i456 == 1);
    assume {:verifier.code 0} true;
    out_$i457 := $slt.i32(out_$i453, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb440:
    assume !(out_$i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    goto $bb441;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1910} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7204;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} out_vslice_dummy_var_145 := unix_dgram_poll(out_$p542, out_$p543, in_$p89);
    goto corral_source_split_7203;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    out_$p543 := $M.53;
    goto corral_source_split_7202;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    out_$p542 := $M.50;
    goto corral_source_split_7201;

  $bb439:
    assume out_$i541 == 1;
    goto corral_source_split_7200;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb439, $bb440;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    out_$i541 := $eq.i32(out_$i540, 1);
    goto corral_source_split_7055;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    out_$i540 := $M.65;
    goto corral_source_split_7054;

  $bb364:
    assume out_$i458 == 1;
    goto corral_source_split_7053;

  $bb363:
    assume !(out_$i457 == 1);
    assume {:verifier.code 0} true;
    out_$i458 := $slt.i32(out_$i453, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb443:
    assume !(out_$i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb444;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    goto $bb444;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 1912} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7210;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} out_vslice_dummy_var_146 := unix_socketpair(out_$p547, out_$p548);
    goto corral_source_split_7209;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    out_$p548 := $M.55;
    goto corral_source_split_7208;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    out_$p547 := $M.53;
    goto corral_source_split_7207;

  $bb442:
    assume out_$i546 == 1;
    goto corral_source_split_7206;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb442, $bb443;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    out_$i546 := $eq.i32(out_$i545, 1);
    goto corral_source_split_7059;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    out_$i545 := $M.65;
    goto corral_source_split_7058;

  $bb366:
    assume out_$i459 == 1;
    goto corral_source_split_7057;

  $bb365:
    assume !(out_$i458 == 1);
    assume {:verifier.code 0} true;
    out_$i459 := $eq.i32(out_$i453, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} ldv_stop();
    goto corral_source_split_7212;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb367:
    assume {:verifier.code 0} true;
    assume !(out_$i459 == 1);
    goto $bb368;

  $bb392:
    assume {:verifier.code 0} true;
    assume !(out_$i471 == 1);
    goto $bb368;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} ldv_stop();
    goto corral_source_split_7214;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i126 == 1);
    goto $bb11;

  $bb117_dummy:
    call {:si_unique_call 1} out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$p151, out_$p152, out_$i154, out_$i155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$p174, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$p183, out_$i185, out_$i186, out_$p187, out_$i189, out_$i190, out_$p191, out_$p192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$p201, out_$i203, out_$i204, out_$p205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$p219, out_$i221, out_$i222, out_$p223, out_$p224, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p236, out_$p237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$p245, out_$p246, out_$i248, out_$i249, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$p282, out_$p283, out_$i285, out_$i286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$p295, out_$i297, out_$i298, out_$p299, out_$p300, out_$p301, out_$i303, out_$i304, out_$p305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$p318, out_$i320, out_$i321, out_$p322, out_$p323, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$p332, out_$i334, out_$i335, out_$p336, out_$p337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$p346, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$p355, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$p387, out_$p388, out_$p389, out_$p390, out_$i391, out_$i392, out_$i393, out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$p402, out_$p403, out_$i404, out_$i405, out_$i406, out_$i407, out_$p408, out_$p409, out_$i410, out_$i411, out_$i412, out_$i413, out_$p414, out_$p415, out_$p416, out_$i418, out_$i419, out_$p420, out_$p421, out_$p422, out_$p423, out_$p424, out_$i425, out_$i426, out_$i427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$p474, out_$p475, out_$p476, out_$i478, out_$i479, out_$i481, out_$i482, out_$p483, out_$i485, out_$i486, out_$p487, out_$p488, out_$p489, out_$i491, out_$i492, out_$p493, out_$p494, out_$i496, out_$i497, out_$p498, out_$i500, out_$i501, out_$p502, out_$i504, out_$i505, out_$p506, out_$p507, out_$i509, out_$i510, out_$p511, out_$i513, out_$i514, out_$p515, out_$p516, out_$i518, out_$i519, out_$p520, out_$i522, out_$i523, out_$p524, out_$p525, out_$i527, out_$i528, out_$p529, out_$p530, out_$i532, out_$i533, out_$p534, out_$i536, out_$i537, out_$p538, out_$i540, out_$i541, out_$p542, out_$p543, out_$i545, out_$i546, out_$p547, out_$p548, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146 := main_loop_$bb1(in_$i0, in_$i1, in_$i2, in_$p3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$p11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p24, in_$p26, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$i35, in_$p37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p63, in_$i64, in_$p66, in_$p68, in_$i69, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p79, in_$p81, in_$p83, in_$p85, in_$i86, in_$i87, in_$p89, in_$i90, in_$i91, in_$p93, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p111, in_$i112, in_$p113, in_$i114, in_$i115, in_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$p151, out_$p152, out_$i154, out_$i155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$p164, out_$p165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$p174, out_$i176, out_$i177, out_$p178, out_$i180, out_$i181, out_$p182, out_$p183, out_$i185, out_$i186, out_$p187, out_$i189, out_$i190, out_$p191, out_$p192, out_$i194, out_$i195, out_$p196, out_$i198, out_$i199, out_$p200, out_$p201, out_$i203, out_$i204, out_$p205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$p219, out_$i221, out_$i222, out_$p223, out_$p224, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$p236, out_$p237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$p245, out_$p246, out_$i248, out_$i249, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p281, out_$p282, out_$p283, out_$i285, out_$i286, out_$i288, out_$i289, out_$p290, out_$i292, out_$i293, out_$p294, out_$p295, out_$i297, out_$i298, out_$p299, out_$p300, out_$p301, out_$i303, out_$i304, out_$p305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i312, out_$i313, out_$p314, out_$i316, out_$i317, out_$p318, out_$i320, out_$i321, out_$p322, out_$p323, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$p332, out_$i334, out_$i335, out_$p336, out_$p337, out_$i339, out_$i340, out_$p341, out_$i343, out_$i344, out_$p345, out_$p346, out_$i348, out_$i349, out_$p350, out_$i352, out_$i353, out_$p354, out_$p355, out_$i357, out_$i358, out_$i359, out_$i360, out_$i361, out_$i362, out_$i364, out_$i365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$p372, out_$i374, out_$i375, out_$p376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$p387, out_$p388, out_$p389, out_$p390, out_$i391, out_$i392, out_$i393, out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$p402, out_$p403, out_$i404, out_$i405, out_$i406, out_$i407, out_$p408, out_$p409, out_$i410, out_$i411, out_$i412, out_$i413, out_$p414, out_$p415, out_$p416, out_$i418, out_$i419, out_$p420, out_$p421, out_$p422, out_$p423, out_$p424, out_$i425, out_$i426, out_$i427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$p474, out_$p475, out_$p476, out_$i478, out_$i479, out_$i481, out_$i482, out_$p483, out_$i485, out_$i486, out_$p487, out_$p488, out_$p489, out_$i491, out_$i492, out_$p493, out_$p494, out_$i496, out_$i497, out_$p498, out_$i500, out_$i501, out_$p502, out_$i504, out_$i505, out_$p506, out_$p507, out_$i509, out_$i510, out_$p511, out_$i513, out_$i514, out_$p515, out_$p516, out_$i518, out_$i519, out_$p520, out_$i522, out_$i523, out_$p524, out_$p525, out_$i527, out_$i528, out_$p529, out_$p530, out_$i532, out_$i533, out_$p534, out_$i536, out_$i537, out_$p538, out_$i540, out_$i541, out_$p542, out_$p543, out_$i545, out_$i546, out_$p547, out_$p548, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i32, in_$i2: i64, in_$p3: ref, in_$i4: i32, in_$i5: i32, in_$i6: i64, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i64, in_$i15: i32, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i64, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p48: ref, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i64, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i64, in_$i59: i64, in_$i60: i32, in_$i61: i32, in_$p63: ref, in_$i64: i32, in_$p66: ref, in_$p68: ref, in_$i69: i32, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$p79: ref, in_$p81: ref, in_$p83: ref, in_$p85: ref, in_$i86: i64, in_$i87: i32, in_$p89: ref, in_$i90: i32, in_$i91: i64, in_$p93: ref, in_$p95: ref, in_$i96: i32, in_$i97: i64, in_$i98: i32, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$p103: ref, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i64, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i32, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$p183: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$p192: ref, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$p201: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$p206: ref, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$p219: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_$i230: i1, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$p237: ref, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i32, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$p246: ref, in_$i248: i32, in_$i249: i32, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i1, in_$i262: i1, in_$i263: i1, in_$i264: i1, in_$i265: i1, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i1, in_$i272: i1, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i1, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i285: i32, in_$i286: i1, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i292: i32, in_$i293: i1, in_$p294: ref, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$p300: ref, in_$p301: ref, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$p310: ref, in_$i312: i32, in_$i313: i1, in_$p314: ref, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$i320: i32, in_$i321: i1, in_$p322: ref, in_$p323: ref, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$p332: ref, in_$i334: i32, in_$i335: i1, in_$p336: ref, in_$p337: ref, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$p346: ref, in_$i348: i32, in_$i349: i1, in_$p350: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$p355: ref, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i361: i32, in_$i362: i1, in_$i364: i32, in_$i365: i1, in_$i366: i32, in_$i367: i1, in_$i368: i1, in_$i369: i1, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$i377: i32, in_$i378: i1, in_$i379: i32, in_$i380: i1, in_$i381: i1, in_$i382: i1, in_$i383: i1, in_$i384: i1, in_$i385: i32, in_$i386: i1, in_$p387: ref, in_$p388: ref, in_$p389: ref, in_$p390: ref, in_$i391: i64, in_$i392: i1, in_$i393: i32, in_$i394: i32, in_$p395: ref, in_$i396: i64, in_$i397: i1, in_$i398: i32, in_$i399: i32, in_$i400: i32, in_$i401: i1, in_$p402: ref, in_$p403: ref, in_$i404: i32, in_$i405: i32, in_$i406: i32, in_$i407: i1, in_$p408: ref, in_$p409: ref, in_$i410: i32, in_$i411: i32, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$p415: ref, in_$p416: ref, in_$i418: i32, in_$i419: i1, in_$p420: ref, in_$p421: ref, in_$p422: ref, in_$p423: ref, in_$p424: ref, in_$i425: i64, in_$i426: i1, in_$i427: i32, in_$i428: i32, in_$p429: ref, in_$i430: i64, in_$i431: i1, in_$i432: i32, in_$i433: i32, in_$i434: i32, in_$i435: i1, in_$i436: i32, in_$i437: i1, in_$i438: i1, in_$i439: i1, in_$i440: i32, in_$i441: i1, in_$i442: i32, in_$i443: i1, in_$i444: i32, in_$i445: i1, in_$i446: i32, in_$i447: i32, in_$i448: i1, in_$i449: i32, in_$i450: i1, in_$i451: i32, in_$i452: i1, in_$i453: i32, in_$i454: i1, in_$i455: i1, in_$i456: i1, in_$i457: i1, in_$i458: i1, in_$i459: i1, in_$i460: i1, in_$i461: i1, in_$i462: i1, in_$i463: i1, in_$i464: i1, in_$i465: i1, in_$i466: i1, in_$i467: i1, in_$i468: i1, in_$i469: i1, in_$i470: i1, in_$i471: i1, in_$i472: i32, in_$i473: i1, in_$p474: ref, in_$p475: ref, in_$p476: ref, in_$i478: i32, in_$i479: i1, in_$i481: i32, in_$i482: i1, in_$p483: ref, in_$i485: i32, in_$i486: i1, in_$p487: ref, in_$p488: ref, in_$p489: ref, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$p494: ref, in_$i496: i32, in_$i497: i1, in_$p498: ref, in_$i500: i32, in_$i501: i1, in_$p502: ref, in_$i504: i32, in_$i505: i1, in_$p506: ref, in_$p507: ref, in_$i509: i32, in_$i510: i1, in_$p511: ref, in_$i513: i32, in_$i514: i1, in_$p515: ref, in_$p516: ref, in_$i518: i32, in_$i519: i1, in_$p520: ref, in_$i522: i32, in_$i523: i1, in_$p524: ref, in_$p525: ref, in_$i527: i32, in_$i528: i1, in_$p529: ref, in_$p530: ref, in_$i532: i32, in_$i533: i1, in_$p534: ref, in_$i536: i32, in_$i537: i1, in_$p538: ref, in_$i540: i32, in_$i541: i1, in_$p542: ref, in_$p543: ref, in_$i545: i32, in_$i546: i1, in_$p547: ref, in_$p548: ref, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i64, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i64, in_vslice_dummy_var_109: i64, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i64, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i64, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32) returns (out_$i117: i32, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i32, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$p183: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$p192: ref, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$p201: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$p206: ref, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$p219: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_$i230: i1, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$p237: ref, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i32, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$p246: ref, out_$i248: i32, out_$i249: i32, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i1, out_$i262: i1, out_$i263: i1, out_$i264: i1, out_$i265: i1, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i1, out_$i272: i1, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i1, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i285: i32, out_$i286: i1, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i292: i32, out_$i293: i1, out_$p294: ref, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$p300: ref, out_$p301: ref, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$p310: ref, out_$i312: i32, out_$i313: i1, out_$p314: ref, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$i320: i32, out_$i321: i1, out_$p322: ref, out_$p323: ref, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$p332: ref, out_$i334: i32, out_$i335: i1, out_$p336: ref, out_$p337: ref, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$p346: ref, out_$i348: i32, out_$i349: i1, out_$p350: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$p355: ref, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i361: i32, out_$i362: i1, out_$i364: i32, out_$i365: i1, out_$i366: i32, out_$i367: i1, out_$i368: i1, out_$i369: i1, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$i377: i32, out_$i378: i1, out_$i379: i32, out_$i380: i1, out_$i381: i1, out_$i382: i1, out_$i383: i1, out_$i384: i1, out_$i385: i32, out_$i386: i1, out_$p387: ref, out_$p388: ref, out_$p389: ref, out_$p390: ref, out_$i391: i64, out_$i392: i1, out_$i393: i32, out_$i394: i32, out_$p395: ref, out_$i396: i64, out_$i397: i1, out_$i398: i32, out_$i399: i32, out_$i400: i32, out_$i401: i1, out_$p402: ref, out_$p403: ref, out_$i404: i32, out_$i405: i32, out_$i406: i32, out_$i407: i1, out_$p408: ref, out_$p409: ref, out_$i410: i32, out_$i411: i32, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$p415: ref, out_$p416: ref, out_$i418: i32, out_$i419: i1, out_$p420: ref, out_$p421: ref, out_$p422: ref, out_$p423: ref, out_$p424: ref, out_$i425: i64, out_$i426: i1, out_$i427: i32, out_$i428: i32, out_$p429: ref, out_$i430: i64, out_$i431: i1, out_$i432: i32, out_$i433: i32, out_$i434: i32, out_$i435: i1, out_$i436: i32, out_$i437: i1, out_$i438: i1, out_$i439: i1, out_$i440: i32, out_$i441: i1, out_$i442: i32, out_$i443: i1, out_$i444: i32, out_$i445: i1, out_$i446: i32, out_$i447: i32, out_$i448: i1, out_$i449: i32, out_$i450: i1, out_$i451: i32, out_$i452: i1, out_$i453: i32, out_$i454: i1, out_$i455: i1, out_$i456: i1, out_$i457: i1, out_$i458: i1, out_$i459: i1, out_$i460: i1, out_$i461: i1, out_$i462: i1, out_$i463: i1, out_$i464: i1, out_$i465: i1, out_$i466: i1, out_$i467: i1, out_$i468: i1, out_$i469: i1, out_$i470: i1, out_$i471: i1, out_$i472: i32, out_$i473: i1, out_$p474: ref, out_$p475: ref, out_$p476: ref, out_$i478: i32, out_$i479: i1, out_$i481: i32, out_$i482: i1, out_$p483: ref, out_$i485: i32, out_$i486: i1, out_$p487: ref, out_$p488: ref, out_$p489: ref, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$p494: ref, out_$i496: i32, out_$i497: i1, out_$p498: ref, out_$i500: i32, out_$i501: i1, out_$p502: ref, out_$i504: i32, out_$i505: i1, out_$p506: ref, out_$p507: ref, out_$i509: i32, out_$i510: i1, out_$p511: ref, out_$i513: i32, out_$i514: i1, out_$p515: ref, out_$p516: ref, out_$i518: i32, out_$i519: i1, out_$p520: ref, out_$i522: i32, out_$i523: i1, out_$p524: ref, out_$p525: ref, out_$i527: i32, out_$i528: i1, out_$p529: ref, out_$p530: ref, out_$i532: i32, out_$i533: i1, out_$p534: ref, out_$i536: i32, out_$i537: i1, out_$p538: ref, out_$i540: i32, out_$i541: i1, out_$p542: ref, out_$p543: ref, out_$i545: i32, out_$i546: i1, out_$p547: ref, out_$p548: ref, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i64, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i64, out_vslice_dummy_var_109: i64, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i64, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i64, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32);
  modifies $M.57, $M.33, $M.34, $M.0, $M.8, $M.13, $M.14, $M.15, $M.1, $M.20, $M.16, $M.17, $CurrAddr, $M.6, $M.5, $M.24, assertsPassed, $M.63, $M.58, $M.66, $M.59, $M.9, $M.10, $M.11, $M.12, $M.23, $M.22, $M.7, $M.60, $M.61, $M.62, $M.68, $M.70, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.56, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.65, $M.64, $M.71;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


