var $M.0: [ref]i8;

var $M.2: [ref]i8;

var $M.3: i32;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]i24;

var $M.9: [ref]i8;

var $M.10: i32;

var $M.11: [ref]i8;

var $M.12: [ref]i64;

var $M.13: [ref]i32;

var $M.14: [ref]i8;

var $M.15: [ref]i8;

var $M.16: [ref]i8;

var $M.17: [ref]i32;

var $M.18: ref;

var $M.19: ref;

var $M.20: [ref]i32;

var $M.21: [ref]i8;

var $M.22: [ref]i8;

var $M.23: [ref]i64;

var $M.24: [ref]i64;

var $M.25: i32;

var $M.26: i32;

var $M.27: ref;

var $M.28: ref;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: ref;

var $M.57: [ref]i64;

var $M.58: [ref]i64;

var $M.59: [ref]ref;

var $M.60: [ref]i64;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]ref;

var $M.64: i8;

var $M.65: i32;

var $M.66: i32;

var $M.114: [ref]i8;

var $M.115: [ref]i8;

var $M.116: [ref]i8;

var $M.117: [ref]i8;

var $M.118: [ref]i8;

var $M.119: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 369224);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const probed_1: ref;

axiom probed_1 == $sub.ref(0, 2056);

const abituguru_driver_group1: ref;

axiom abituguru_driver_group1 == $sub.ref(0, 3088);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 4116);

const abituguru_pm_group1: ref;

axiom abituguru_pm_group1 == $sub.ref(0, 5148);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 6176);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 7204);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 8232);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 9260);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 10288);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 11316);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 12344);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 13372);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 14400);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 15428);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 16456);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 17484);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 18512);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 19540);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 20568);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 21596);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 22624);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 23652);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 24680);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 25708);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 26736);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 27764);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 28792);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 29820);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 30848);

const ldv_mutex_update_lock_of_abituguru_data: ref;

axiom ldv_mutex_update_lock_of_abituguru_data == $sub.ref(0, 31876);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 32904);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 33932);

const force: ref;

axiom force == $sub.ref(0, 34957);

const abituguru_pm: ref;

axiom abituguru_pm == $sub.ref(0, 36165);

const abituguru_driver: ref;

axiom abituguru_driver == $sub.ref(0, 37365);

const abituguru_pdev: ref;

axiom abituguru_pdev == $sub.ref(0, 38397);

const abituguru_sysfs_attr: ref;

axiom abituguru_sysfs_attr == $sub.ref(0, 39477);

const report_this: ref;

axiom report_this == $sub.ref(0, 40509);

const never_happen: ref;

axiom never_happen == $sub.ref(0, 41541);

const {:count 5} abituguru_pwm_settings_multiplier: ref;

axiom abituguru_pwm_settings_multiplier == $sub.ref(0, 42585);

const {:count 6} abituguru_sysfs_pwm_templ: ref;

axiom abituguru_sysfs_pwm_templ == $sub.ref(0, 43945);

const {:count 5} abituguru_pwm_max: ref;

axiom abituguru_pwm_max == $sub.ref(0, 44974);

const {:count 5} abituguru_pwm_min: ref;

axiom abituguru_pwm_min == $sub.ref(0, 46003);

const pwms: ref;

axiom pwms == $sub.ref(0, 47031);

const {:count 6} abituguru_sysfs_fan_templ: ref;

axiom abituguru_sysfs_fan_templ == $sub.ref(0, 48391);

const fan_sensors: ref;

axiom fan_sensors == $sub.ref(0, 49419);

const {:count 2} abituguru_bank1_max_value: ref;

axiom abituguru_bank1_max_value == $sub.ref(0, 50451);

const {:count 2} abituguru_sysfs_bank1_templ: ref;

axiom abituguru_sysfs_bank1_templ == $sub.ref(0, 52483);

const {:count 16} bank1_types: ref;

axiom bank1_types == $sub.ref(0, 53571);

const verbose: ref;

axiom verbose == $sub.ref(0, 54599);

const {:count 11} .str.46: ref;

axiom .str.46 == $sub.ref(0, 55634);

const {:count 9} .str.47: ref;

axiom .str.47 == $sub.ref(0, 56667);

const {:count 15} .str.48: ref;

axiom .str.48 == $sub.ref(0, 57706);

const {:count 9} .str.49: ref;

axiom .str.49 == $sub.ref(0, 58739);

const {:count 15} .str.50: ref;

axiom .str.50 == $sub.ref(0, 59778);

const {:count 10} .str.51: ref;

axiom .str.51 == $sub.ref(0, 60812);

const {:count 14} .str.52: ref;

axiom .str.52 == $sub.ref(0, 61850);

const {:count 22} .str.53: ref;

axiom .str.53 == $sub.ref(0, 62896);

const {:count 22} .str.54: ref;

axiom .str.54 == $sub.ref(0, 63942);

const {:count 13} .str.55: ref;

axiom .str.55 == $sub.ref(0, 64979);

const {:count 13} .str.56: ref;

axiom .str.56 == $sub.ref(0, 66016);

const {:count 11} .str.57: ref;

axiom .str.57 == $sub.ref(0, 67051);

const {:count 12} .str.58: ref;

axiom .str.58 == $sub.ref(0, 68087);

const {:count 12} .str.59: ref;

axiom .str.59 == $sub.ref(0, 69123);

const {:count 16} .str.60: ref;

axiom .str.60 == $sub.ref(0, 70163);

const {:count 20} .str.61: ref;

axiom .str.61 == $sub.ref(0, 71207);

const {:count 10} .str.3: ref;

axiom .str.3 == $sub.ref(0, 72241);

const {:count 16} .str.39: ref;

axiom .str.39 == $sub.ref(0, 73281);

const {:count 204} .str.5: ref;

axiom .str.5 == $sub.ref(0, 74509);

const {:count 65} .str.40: ref;

axiom .str.40 == $sub.ref(0, 75598);

const {:count 76} .str.41: ref;

axiom .str.41 == $sub.ref(0, 76698);

const {:count 76} .str.42: ref;

axiom .str.42 == $sub.ref(0, 77798);

const {:count 87} .str.43: ref;

axiom .str.43 == $sub.ref(0, 78909);

const {:count 63} .str.44: ref;

axiom .str.44 == $sub.ref(0, 79996);

const {:count 74} .str.45: ref;

axiom .str.45 == $sub.ref(0, 81094);

const {:count 16} .str.13: ref;

axiom .str.13 == $sub.ref(0, 82134);

const {:count 42} .str.14: ref;

axiom .str.14 == $sub.ref(0, 83200);

const {:count 53} .str.15: ref;

axiom .str.15 == $sub.ref(0, 84277);

const {:count 48} .str.16: ref;

axiom .str.16 == $sub.ref(0, 85349);

const {:count 59} .str.17: ref;

axiom .str.17 == $sub.ref(0, 86432);

const {:count 41} .str.18: ref;

axiom .str.18 == $sub.ref(0, 87497);

const {:count 52} .str.19: ref;

axiom .str.19 == $sub.ref(0, 88573);

const pv_cpu_ops: ref;

axiom pv_cpu_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 23} .str.8: ref;

axiom .str.8 == $sub.ref(0, 89620);

const {:count 67} .str.9: ref;

axiom .str.9 == $sub.ref(0, 90711);

const {:count 78} .str.10: ref;

axiom .str.10 == $sub.ref(0, 91813);

const {:count 58} .str.11: ref;

axiom .str.11 == $sub.ref(0, 92895);

const {:count 69} .str.12: ref;

axiom .str.12 == $sub.ref(0, 93988);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 3} .str.68: ref;

axiom .str.68 == $sub.ref(0, 95015);

const {:count 3} .str.69: ref;

axiom .str.69 == $sub.ref(0, 96042);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 24} .str.63: ref;

axiom .str.63 == $sub.ref(0, 97090);

const {:count 46} .str.64: ref;

axiom .str.64 == $sub.ref(0, 98160);

const {:count 57} .str.65: ref;

axiom .str.65 == $sub.ref(0, 99241);

const {:count 56} .str.66: ref;

axiom .str.66 == $sub.ref(0, 100321);

const {:count 67} .str.67: ref;

axiom .str.67 == $sub.ref(0, 101412);

const {:count 15} .str.4: ref;

axiom .str.4 == $sub.ref(0, 102451);

const {:count 64} .str.6: ref;

axiom .str.6 == $sub.ref(0, 103539);

const {:count 75} .str.7: ref;

axiom .str.7 == $sub.ref(0, 104638);

const {:count 4} .str.62: ref;

axiom .str.62 == $sub.ref(0, 105666);

const {:count 12} .str.83: ref;

axiom .str.83 == $sub.ref(0, 106702);

const {:count 12} .str.84: ref;

axiom .str.84 == $sub.ref(0, 107738);

const {:count 10} .str.85: ref;

axiom .str.85 == $sub.ref(0, 108772);

const {:count 11} .str.86: ref;

axiom .str.86 == $sub.ref(0, 109807);

const {:count 15} .str.87: ref;

axiom .str.87 == $sub.ref(0, 110846);

const {:count 19} .str.88: ref;

axiom .str.88 == $sub.ref(0, 111889);

const {:count 13} .str.108: ref;

axiom .str.108 == $sub.ref(0, 112926);

const {:count 25} .str.109: ref;

axiom .str.109 == $sub.ref(0, 113975);

const {:count 22} .str.110: ref;

axiom .str.110 == $sub.ref(0, 115021);

const {:count 22} .str.111: ref;

axiom .str.111 == $sub.ref(0, 116067);

const {:count 23} .str.112: ref;

axiom .str.112 == $sub.ref(0, 117114);

const {:count 23} .str.113: ref;

axiom .str.113 == $sub.ref(0, 118161);

const {:count 26} .str.114: ref;

axiom .str.114 == $sub.ref(0, 119211);

const {:count 65} .str.115: ref;

axiom .str.115 == $sub.ref(0, 120300);

const {:count 5} .str.116: ref;

axiom .str.116 == $sub.ref(0, 121329);

const {:count 4} .str.117: ref;

axiom .str.117 == $sub.ref(0, 122357);

const .str: ref;

axiom .str == $sub.ref(0, 123400);

const {:count 69} .str.1: ref;

axiom .str.1 == $sub.ref(0, 124493);

const {:count 30} .str.2: ref;

axiom .str.2 == $sub.ref(0, 125547);

const {:count 25} .str.89: ref;

axiom .str.89 == $sub.ref(0, 126596);

const {:count 56} .str.90: ref;

axiom .str.90 == $sub.ref(0, 127676);

const {:count 67} .str.91: ref;

axiom .str.91 == $sub.ref(0, 128767);

const {:count 33} .str.92: ref;

axiom .str.92 == $sub.ref(0, 129824);

const {:count 44} .str.93: ref;

axiom .str.93 == $sub.ref(0, 130892);

const {:count 72} .str.94: ref;

axiom .str.94 == $sub.ref(0, 131988);

const {:count 83} .str.95: ref;

axiom .str.95 == $sub.ref(0, 133095);

const {:count 91} .str.96: ref;

axiom .str.96 == $sub.ref(0, 134210);

const {:count 102} .str.97: ref;

axiom .str.97 == $sub.ref(0, 135336);

const {:count 101} .str.98: ref;

axiom .str.98 == $sub.ref(0, 136461);

const {:count 112} .str.99: ref;

axiom .str.99 == $sub.ref(0, 137597);

const {:count 101} .str.100: ref;

axiom .str.100 == $sub.ref(0, 138722);

const {:count 112} .str.101: ref;

axiom .str.101 == $sub.ref(0, 139858);

const {:count 82} .str.102: ref;

axiom .str.102 == $sub.ref(0, 140964);

const {:count 93} .str.103: ref;

axiom .str.103 == $sub.ref(0, 142081);

const {:count 84} .str.104: ref;

axiom .str.104 == $sub.ref(0, 143189);

const {:count 95} .str.105: ref;

axiom .str.105 == $sub.ref(0, 144308);

const {:count 24} .str.106: ref;

axiom .str.106 == $sub.ref(0, 145356);

const {:count 35} .str.107: ref;

axiom .str.107 == $sub.ref(0, 146415);

const {:count 34} .str.70: ref;

axiom .str.70 == $sub.ref(0, 147473);

const {:count 63} .str.71: ref;

axiom .str.71 == $sub.ref(0, 148560);

const {:count 74} .str.72: ref;

axiom .str.72 == $sub.ref(0, 149658);

const {:count 33} .str.73: ref;

axiom .str.73 == $sub.ref(0, 150715);

const {:count 44} .str.74: ref;

axiom .str.74 == $sub.ref(0, 151783);

const {:count 72} .str.75: ref;

axiom .str.75 == $sub.ref(0, 152879);

const {:count 83} .str.76: ref;

axiom .str.76 == $sub.ref(0, 153986);

const {:count 98} .str.77: ref;

axiom .str.77 == $sub.ref(0, 155108);

const {:count 109} .str.78: ref;

axiom .str.78 == $sub.ref(0, 156241);

const {:count 98} .str.79: ref;

axiom .str.79 == $sub.ref(0, 157363);

const {:count 109} .str.80: ref;

axiom .str.80 == $sub.ref(0, 158496);

const {:count 24} .str.81: ref;

axiom .str.81 == $sub.ref(0, 159544);

const {:count 35} .str.82: ref;

axiom .str.82 == $sub.ref(0, 160603);

const {:count 35} .str.20: ref;

axiom .str.20 == $sub.ref(0, 161662);

const {:count 83} .str.21: ref;

axiom .str.21 == $sub.ref(0, 162769);

const {:count 94} .str.22: ref;

axiom .str.22 == $sub.ref(0, 163887);

const {:count 113} .str.23: ref;

axiom .str.23 == $sub.ref(0, 165024);

const {:count 25} .str.24: ref;

axiom .str.24 == $sub.ref(0, 166073);

const {:count 36} .str.25: ref;

axiom .str.25 == $sub.ref(0, 167133);

const {:count 21} .str.26: ref;

axiom .str.26 == $sub.ref(0, 168178);

const {:count 32} .str.27: ref;

axiom .str.27 == $sub.ref(0, 169234);

const {:count 69} .str.28: ref;

axiom .str.28 == $sub.ref(0, 170327);

const {:count 80} .str.29: ref;

axiom .str.29 == $sub.ref(0, 171431);

const {:count 44} .str.30: ref;

axiom .str.30 == $sub.ref(0, 172499);

const {:count 55} .str.31: ref;

axiom .str.31 == $sub.ref(0, 173578);

const {:count 21} .str.32: ref;

axiom .str.32 == $sub.ref(0, 174623);

const {:count 32} .str.33: ref;

axiom .str.33 == $sub.ref(0, 175679);

const {:count 68} .str.34: ref;

axiom .str.34 == $sub.ref(0, 176771);

const {:count 79} .str.35: ref;

axiom .str.35 == $sub.ref(0, 177874);

const {:count 44} .str.36: ref;

axiom .str.36 == $sub.ref(0, 178942);

const {:count 55} .str.37: ref;

axiom .str.37 == $sub.ref(0, 180021);

const {:count 68} .str.38: ref;

axiom .str.38 == $sub.ref(0, 181113);

const {:count 24} .str.118: ref;

axiom .str.118 == $sub.ref(0, 182161);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 38} .str.119: ref;

axiom .str.119 == $sub.ref(0, 183223);

const {:count 50} .str.120: ref;

axiom .str.120 == $sub.ref(0, 184297);

const {:count 41} .str.121: ref;

axiom .str.121 == $sub.ref(0, 185362);

const {:count 17} .str.122: ref;

axiom .str.122 == $sub.ref(0, 186403);

const {:count 50} .str.123: ref;

axiom .str.123 == $sub.ref(0, 187477);

const {:count 61} .str.124: ref;

axiom .str.124 == $sub.ref(0, 188562);

const {:count 73} .str.125: ref;

axiom .str.125 == $sub.ref(0, 189659);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 190691);

const {:count 3} .str.1.262: ref;

axiom .str.1.262 == $sub.ref(0, 191718);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 192756);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 193784);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 194816);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 195848);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const show_bank1_value: ref;

axiom show_bank1_value == $sub.ref(0, 196880);

procedure show_bank1_value($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const show_bank1_setting: ref;

axiom show_bank1_setting == $sub.ref(0, 197912);

procedure show_bank1_setting($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_bank1_setting: ref;

axiom store_bank1_setting == $sub.ref(0, 198944);

procedure store_bank1_setting($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_bank1_alarm: ref;

axiom show_bank1_alarm == $sub.ref(0, 199976);

procedure show_bank1_alarm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const show_bank1_mask: ref;

axiom show_bank1_mask == $sub.ref(0, 201008);

procedure show_bank1_mask($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_bank1_mask: ref;

axiom store_bank1_mask == $sub.ref(0, 202040);

procedure store_bank1_mask($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 203072);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kstrtoul: ref;

axiom kstrtoul == $sub.ref(0, 204104);

procedure kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const ldv_mutex_lock_14: ref;

axiom ldv_mutex_lock_14 == $sub.ref(0, 205136);

procedure ldv_mutex_lock_14($p0: ref);



const abituguru_write: ref;

axiom abituguru_write == $sub.ref(0, 206168);

procedure abituguru_write($p0: ref, $i1: i8, $i2: i8, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.11, $M.12, $CurrAddr;



implementation abituguru_write($p0: ref, $i1: i8, $i2: i8, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i42: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i17: i32;
  var $i52: i32;
  var $i16: i32;
  var $i41: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i24;
  var $i64: i24;
  var $i65: i24;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i24;
  var $i93: i24;
  var $i94: i24;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i16;
  var $i105: i32;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $i81: i32;
  var $i14: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 4} {:cexpr "abituguru_write:arg:bank_addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 5} {:cexpr "abituguru_write:arg:sensor_addr"} boogie_si_record_i8($i2);
    call {:si_unique_call 6} {:cexpr "abituguru_write:arg:count"} boogie_si_record_i32($i4);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i2);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i12 := abituguru_send_address($p0, $i9, $i11, 3);
    call {:si_unique_call 8} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32(0, $i4);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i16 := 0;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i41 := $i16;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i53 := abituguru_wait($p0, 1);
    call {:si_unique_call 15} {:cexpr "tmp___2"} boogie_si_record_i32($i53);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i78 := inb_p($i77);
    call {:si_unique_call 22} {:cexpr "tmp___4"} boogie_si_record_i8($i78);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 172);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_41 := abituguru_ready($p0);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i14 := $i41;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb32:
    assume $i80 == 1;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i81 := 5;
    goto $bb35;

  $bb35:
    call $i82, $i83, $i104, $i105, $i106, $i107, $i108, $i81 := abituguru_write_loop_$bb35($p75, $i82, $i83, $i104, $i105, $i106, $i107, $i108, $i81);
    goto $bb35_last;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32($i81, 1);
    call {:si_unique_call 23} {:cexpr "timeout"} boogie_si_record_i32($i82);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} msleep(0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.0, $p75);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i106 := inb_p($i105);
    call {:si_unique_call 29} {:cexpr "tmp___4"} boogie_si_record_i8($i106);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 172);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i108 == 1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb46:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i81 := $i82;
    goto $bb46_dummy;

  $bb37:
    assume $i83 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i84 := $M.3;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i85 := $sgt.i32($i84, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 5);
    goto $bb3;

  $bb39:
    assume $i85 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p86, .str.3);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p87, .str.39);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p88, .str.5);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p89, .str.44);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i92 := $load.i24($M.8, $p91);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i93 := $and.i24($i92, $sub.i24(0, 262144));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i94 := $or.i24($i93, 464);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p91, $i94);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p95, 1);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.9, $p96);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i64($i97);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i99 := $and.i64($i98, 1);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i100 := ldv__builtin_expect($i99, 0);
    call {:si_unique_call 25} {:cexpr "tmp___3"} boogie_si_record_i64($i100);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i101 == 1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i1);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i2);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} __dynamic_pr_debug.ref.ref.i32.i32($p7, .str.45, $i102, $i103);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb23:
    assume $i54 == 1;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i55 := $M.3;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i55, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 5);
    goto $bb3;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p57, .str.3);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p58, .str.39);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p59, .str.5);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p60, .str.42);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i63 := $load.i24($M.8, $p62);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i64 := $and.i24($i63, $sub.i24(0, 262144));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i65 := $or.i24($i64, 454);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p62, $i65);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p66, 1);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.9, $p67);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i64($i68);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i70 := $and.i64($i69, 1);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 19} {:cexpr "tmp___1"} boogie_si_record_i64($i71);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i72 == 1;
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i1);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i2);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} __dynamic_pr_debug.ref.ref.i32.i32($p6, .str.43, $i73, $i74);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    call $i18, $i19, $i20, $i42, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51, $i17, $i52 := abituguru_write_loop_$bb8($p0, $p3, $i4, $i18, $i19, $i20, $i42, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51, $i17, $i52);
    goto $bb8_last;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i18 := abituguru_wait($p0, 0);
    call {:si_unique_call 10} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i17);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p3, $mul.ref($i42, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} outb($i46, $i49);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i17, 1);
    call {:si_unique_call 17} {:cexpr "i"} boogie_si_record_i32($i50);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, $i4);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i52 := $i50;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i16 := $i52;
    goto $bb7;

  $bb20:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i50;
    goto $bb20_dummy;

  $bb10:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i21 := $M.3;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i41 := $i20;
    goto $bb18;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p23, .str.3);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p24, .str.39);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p25, .str.5);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p26, .str.40);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.8, $p28);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 440);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p28, $i31);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p32, 1);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.9, $p33);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 12} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i1);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i2);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} __dynamic_pr_debug.ref.ref.i32.i32($p5, .str.41, $i39, $i40);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb3;

  $bb46_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_119;

  $bb20_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_21;
}



const ldv_mutex_unlock_15: ref;

axiom ldv_mutex_unlock_15 == $sub.ref(0, 207200);

procedure ldv_mutex_unlock_15($p0: ref);



const ldv_mutex_unlock_update_lock_of_abituguru_data: ref;

axiom ldv_mutex_unlock_update_lock_of_abituguru_data == $sub.ref(0, 208232);

procedure ldv_mutex_unlock_update_lock_of_abituguru_data($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_mutex_unlock_update_lock_of_abituguru_data($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 2);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 32} {:cexpr "ldv_mutex_update_lock_of_abituguru_data"} boogie_si_record_i32(1);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} ldv_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 209264);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 210296);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 33} __VERIFIER_error();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const abituguru_send_address: ref;

axiom abituguru_send_address == $sub.ref(0, 211328);

procedure abituguru_send_address($p0: ref, $i1: i8, $i2: i8, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.12, $CurrAddr;



implementation abituguru_send_address($p0: ref, $i1: i8, $i2: i8, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i10: i32;
  var vslice_dummy_var_42: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 37} {:cexpr "abituguru_send_address:arg:bank_addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 38} {:cexpr "abituguru_send_address:arg:sensor_addr"} boogie_si_record_i8($i2);
    call {:si_unique_call 39} {:cexpr "abituguru_send_address:arg:retries"} boogie_si_record_i32($i3);
    call {:si_unique_call 40} {:cexpr "abituguru_send_address:arg:report_errors"} boogie_si_record_i32($i3);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i7 := abituguru_ready($p0);
    call {:si_unique_call 42} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    goto $bb4;

  $bb4:
    call $i9, $i11, $i12, $p13, $i14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $p41, $i42, $p43, $i44, $i46, $i72, $i73, vslice_dummy_var_42 := abituguru_send_address_loop_$bb4($p0, $i1, $p4, $p5, $i9, $i11, $i12, $p13, $i14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $p23, $p24, $p25, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $p40, $p41, $i42, $p43, $i44, $i46, $i72, $i73, vslice_dummy_var_42);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 4);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} outb($i12, $i16);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(178, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i18 := abituguru_wait($p0, 8);
    call {:si_unique_call 45} {:cexpr "tmp___7"} boogie_si_record_i32($i18);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i2);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} outb($i68, $i71);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i9, 0);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i3, 0);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb6;

  $bb21:
    assume $i47 == 1;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i48 := $M.3;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i48, 0);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i49 == 1;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str.3);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p51, .str.8);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p52, .str.5);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p53, .str.11);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.8, $p55);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 376);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p55, $i58);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p59, 1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.9, $p60);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 57} {:cexpr "tmp___6"} boogie_si_record_i64($i64);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i65 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i1);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} __dynamic_pr_debug.ref.ref.i32($p6, .str.12, $i66);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i21 := $M.3;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 2);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p39 := get_current();
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 11712)), $mul.ref(11696, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $M.11 := $store.i64($M.11, $p40, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p5, 2);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p41 := get_current();
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.12, $p5);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref(0, 11712)), $mul.ref(0, 1));
    call {:si_unique_call 51} $i44 := devirtbounce(0, $p43, $i42, $p43);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p5, $i44);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} vslice_dummy_var_42 := schedule_timeout(50);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i9, 1);
    call {:si_unique_call 53} {:cexpr "retries"} boogie_si_record_i32($i46);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i72 := abituguru_ready($p0);
    call {:si_unique_call 55} {:cexpr "tmp"} boogie_si_record_i32($i72);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb31;

  $bb31:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i9 := $i46;
    goto $bb31_dummy;

  $bb5:
    assume $i73 == 1;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 5);
    goto $bb6;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p23, .str.3);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p24, .str.8);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p25, .str.5);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p26, .str.9);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.8, $p28);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 367);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p28, $i31);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p32, 1);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.9, $p33);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 47} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __dynamic_pr_debug.ref.ref.i32($p4, .str.10, $i9);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb31_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const abituguru_wait: ref;

axiom abituguru_wait == $sub.ref(0, 212360);

procedure abituguru_wait($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation abituguru_wait($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i1;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i10: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} {:cexpr "abituguru_wait:arg:state"} boogie_si_record_i8($i1);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 4);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i6 := inb_p($i5);
    call {:si_unique_call 62} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i7, $i8);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i10 := 125;
    goto $bb4;

  $bb4:
    call $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i10 := abituguru_wait_loop_$bb4($p2, $i8, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i10);
    goto $bb4_last;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 1);
    call {:si_unique_call 63} {:cexpr "timeout"} boogie_si_record_i32($i11);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i11, 5);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p2);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 4);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i18 := inb_p($i17);
    call {:si_unique_call 66} {:cexpr "tmp"} boogie_si_record_i8($i18);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, $i8);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb13_dummy;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} msleep(0);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb8;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_307;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 213392);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 68} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 214424);

procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 215456);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 70} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 71} devirtbounce.1(0, $i0, $i1);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 216488);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    return;
}



const inb_p: ref;

axiom inb_p == $sub.ref(0, 217520);

procedure inb_p($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb_p($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} {:cexpr "inb_p:arg:port"} boogie_si_record_i32($i0);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i1 := inb($i0);
    call {:si_unique_call 75} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} slow_down_io();
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const abituguru_ready: ref;

axiom abituguru_ready == $sub.ref(0, 218552);

procedure abituguru_ready($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation abituguru_ready($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $i60: i16;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i39: i32;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $i93: i16;
  var $i94: i32;
  var $i95: i32;
  var $i96: i8;
  var $i97: i32;
  var $i98: i1;
  var $i72: i32;
  var $p99: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(178, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 4);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} outb(0, $i12);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i13 := abituguru_wait($p0, 9);
    call {:si_unique_call 82} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i36 := inb_p($i35);
    call {:si_unique_call 87} {:cexpr "tmp___2"} boogie_si_record_i8($i36);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 172);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, 4);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i69 := inb_p($i68);
    call {:si_unique_call 96} {:cexpr "tmp___4"} boogie_si_record_i8($i69);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 8);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(178, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 1);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb31:
    assume $i71 == 1;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i72 := 5;
    goto $bb34;

  $bb34:
    call $i73, $i74, $i93, $i94, $i95, $i96, $i97, $i98, $i72 := abituguru_ready_loop_$bb34($p65, $i73, $i74, $i93, $i94, $i95, $i96, $i97, $i98, $i72);
    goto $bb34_last;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i72, 1);
    call {:si_unique_call 97} {:cexpr "timeout"} boogie_si_record_i32($i73);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} msleep(0);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p65);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, 4);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i96 := inb_p($i95);
    call {:si_unique_call 103} {:cexpr "tmp___4"} boogie_si_record_i8($i96);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 8);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i98 == 1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb45:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i72 := $i73;
    goto $bb45_dummy;

  $bb36:
    assume $i74 == 1;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i75 := $M.3;
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i32($i75, 0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb3;

  $bb38:
    assume $i76 == 1;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p77, .str.3);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p78, .str.13);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p79, .str.5);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p80, .str.18);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.8, $p82);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 324);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p82, $i85);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p86, 1);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.9, $p87);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 99} {:cexpr "tmp___3"} boogie_si_record_i64($i91);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i92 == 1;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} __dynamic_pr_debug.ref.ref($p3, .str.19);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i39 := 5;
    goto $bb17;

  $bb17:
    call $i40, $i41, $i60, $i61, $i62, $i63, $i64, $i39 := abituguru_ready_loop_$bb17($p33, $i40, $i41, $i60, $i61, $i62, $i63, $i64, $i39);
    goto $bb17_last;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 1);
    call {:si_unique_call 88} {:cexpr "timeout"} boogie_si_record_i32($i40);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} msleep(0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p33);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i62 := inb_p($i61);
    call {:si_unique_call 94} {:cexpr "tmp___2"} boogie_si_record_i8($i62);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 172);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i64 == 1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb28:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb28_dummy;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i42 := $M.3;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb3;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p44, .str.3);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p45, .str.13);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p46, .str.5);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p47, .str.16);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.8, $p49);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 309);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p49, $i52);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p53, 1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.9, $p54);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 90} {:cexpr "tmp___1"} boogie_si_record_i64($i58);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i59 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} __dynamic_pr_debug.ref.ref($p2, .str.17);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i15 := $M.3;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb3;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p17, .str.3);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p18, .str.13);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p19, .str.5);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p20, .str.14);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.8, $p22);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 300);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p22, $i25);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p26, 1);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.9, $p27);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 84} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} __dynamic_pr_debug.ref.ref($p1, .str.15);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb45_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_463;

  $bb28_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_408;
}



const inb: ref;

axiom inb == $sub.ref(0, 219584);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 105} $i1 := devirtbounce.2(0, $i0);
    call {:si_unique_call 106} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const slow_down_io: ref;

axiom slow_down_io == $sub.ref(0, 220616);

procedure slow_down_io();
  free requires assertsPassed;



implementation slow_down_io()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 312)), $mul.ref(208, 1)));
    call {:si_unique_call 107} devirtbounce.3($p0);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 221648);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p0 := devirtbounce.4(0, current_task);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 222680);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 1} true;
    call {:si_unique_call 110} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 111} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_update_lock_of_abituguru_data: ref;

axiom ldv_mutex_lock_update_lock_of_abituguru_data == $sub.ref(0, 223712);

procedure ldv_mutex_lock_update_lock_of_abituguru_data($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_mutex_lock_update_lock_of_abituguru_data($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i1 := $M.10;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 1);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 113} {:cexpr "ldv_mutex_update_lock_of_abituguru_data"} boogie_si_record_i32(2);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 224744);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    return;
}



const kstrtoull: ref;

axiom kstrtoull == $sub.ref(0, 225776);

procedure kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 226808);

procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



const abituguru_update_device: ref;

axiom abituguru_update_device == $sub.ref(0, 227840);

procedure abituguru_update_device($p0: ref) returns ($r: ref);



const ldv_mutex_lock_24: ref;

axiom ldv_mutex_lock_24 == $sub.ref(0, 228872);

procedure ldv_mutex_lock_24($p0: ref);



const abituguru_read: ref;

axiom abituguru_read == $sub.ref(0, 229904);

procedure abituguru_read($p0: ref, $i1: i8, $i2: i8, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.12, $CurrAddr;



implementation abituguru_read($p0: ref, $i1: i8, $i2: i8, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i14: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i8;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i16: i32;
  var $i50: i32;
  var $i15: i32;
  var $i41: i32;
  var $i13: i32;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 115} {:cexpr "abituguru_read:arg:bank_addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 116} {:cexpr "abituguru_read:arg:sensor_addr"} boogie_si_record_i8($i2);
    call {:si_unique_call 117} {:cexpr "abituguru_read:arg:count"} boogie_si_record_i32($i4);
    call {:si_unique_call 118} {:cexpr "abituguru_read:arg:retries"} boogie_si_record_i32($i5);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i11 := abituguru_send_address($p0, $i8, $i10, $i5);
    call {:si_unique_call 120} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32(0, $i4);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i41 := $i15;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_43 := abituguru_ready($p0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i13 := $i41;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    call $i17, $i18, $i19, $p42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $i16, $i50 := abituguru_read_loop_$bb8($p0, $p3, $i4, $i17, $i18, $i19, $p42, $i43, $i44, $i45, $i46, $p47, $i48, $i49, $i16, $i50);
    goto $bb8_last;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i17 := abituguru_wait($p0, 1);
    call {:si_unique_call 122} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i19 := $i16;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i45 := inb($i44);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i16);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p3, $mul.ref($i46, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i45);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i16, 1);
    call {:si_unique_call 128} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, $i4);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i15 := $i50;
    goto $bb7;

  $bb23:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i48;
    goto $bb23_dummy;

  $bb10:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i5, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i20 == 1);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i21 := $M.3;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 2);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i41 := $i19;
    goto $bb21;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p23, .str.3);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p24, .str.4);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p25, .str.5);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p26, .str.6);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.8, $p28);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 404);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p28, $i31);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p32, 1);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.9, $p33);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 124} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i2);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} __dynamic_pr_debug.ref.ref.i32.i32($p6, .str.7, $i39, $i40);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb13;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;
}



const ldv_mutex_unlock_25: ref;

axiom ldv_mutex_unlock_25 == $sub.ref(0, 230936);

procedure ldv_mutex_unlock_25($p0: ref);



const ldv_mutex_lock_10: ref;

axiom ldv_mutex_lock_10 == $sub.ref(0, 231968);

procedure ldv_mutex_lock_10($p0: ref);



const ldv_mutex_unlock_11: ref;

axiom ldv_mutex_unlock_11 == $sub.ref(0, 233000);

procedure ldv_mutex_unlock_11($p0: ref);



const show_bank2_value: ref;

axiom show_bank2_value == $sub.ref(0, 234032);

procedure show_bank2_value($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const show_bank2_alarm: ref;

axiom show_bank2_alarm == $sub.ref(0, 235064);

procedure show_bank2_alarm($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const show_bank2_setting: ref;

axiom show_bank2_setting == $sub.ref(0, 236096);

procedure show_bank2_setting($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_bank2_setting: ref;

axiom store_bank2_setting == $sub.ref(0, 237128);

procedure store_bank2_setting($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_bank2_mask: ref;

axiom show_bank2_mask == $sub.ref(0, 238160);

procedure show_bank2_mask($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_bank2_mask: ref;

axiom store_bank2_mask == $sub.ref(0, 239192);

procedure store_bank2_mask($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const ldv_mutex_lock_16: ref;

axiom ldv_mutex_lock_16 == $sub.ref(0, 240224);

procedure ldv_mutex_lock_16($p0: ref);



const ldv_mutex_unlock_17: ref;

axiom ldv_mutex_unlock_17 == $sub.ref(0, 241256);

procedure ldv_mutex_unlock_17($p0: ref);



const ldv_mutex_lock_12: ref;

axiom ldv_mutex_lock_12 == $sub.ref(0, 242288);

procedure ldv_mutex_lock_12($p0: ref);



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 243320);

procedure ldv_mutex_unlock_13($p0: ref);



const show_pwm_enable: ref;

axiom show_pwm_enable == $sub.ref(0, 244352);

procedure show_pwm_enable($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_pwm_enable: ref;

axiom store_pwm_enable == $sub.ref(0, 245384);

procedure store_pwm_enable($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_pwm_sensor: ref;

axiom show_pwm_sensor == $sub.ref(0, 246416);

procedure show_pwm_sensor($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_pwm_sensor: ref;

axiom store_pwm_sensor == $sub.ref(0, 247448);

procedure store_pwm_sensor($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const show_pwm_setting: ref;

axiom show_pwm_setting == $sub.ref(0, 248480);

procedure show_pwm_setting($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const store_pwm_setting: ref;

axiom store_pwm_setting == $sub.ref(0, 249512);

procedure store_pwm_setting($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);



const ldv_mutex_lock_18: ref;

axiom ldv_mutex_lock_18 == $sub.ref(0, 250544);

procedure ldv_mutex_lock_18($p0: ref);



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 251576);

procedure ldv_mutex_unlock_19($p0: ref);



const ldv_mutex_lock_20: ref;

axiom ldv_mutex_lock_20 == $sub.ref(0, 252608);

procedure ldv_mutex_lock_20($p0: ref);



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 253640);

procedure ldv_mutex_unlock_21($p0: ref);



const ldv_mutex_lock_22: ref;

axiom ldv_mutex_lock_22 == $sub.ref(0, 254672);

procedure ldv_mutex_lock_22($p0: ref);



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 255704);

procedure ldv_mutex_unlock_23($p0: ref);



const show_name: ref;

axiom show_name == $sub.ref(0, 256736);

procedure show_name($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);



const abituguru_probe: ref;

axiom abituguru_probe == $sub.ref(0, 257768);

procedure abituguru_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.12, $M.22, $M.23, $M.24, $CurrAddr, $M.2;



implementation abituguru_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i16;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i73: i64;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i86: i1;
  var $i87: i32;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i64;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p123: ref;
  var $i124: i64;
  var $p125: ref;
  var $i126: i8;
  var $i127: i64;
  var $p130: ref;
  var $i131: i64;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i137: i32;
  var $i138: i32;
  var $p139: ref;
  var $i140: i64;
  var $p141: ref;
  var $i142: i32;
  var $i143: i64;
  var $p144: ref;
  var $i145: i8;
  var $i146: i32;
  var $i147: i64;
  var $p149: ref;
  var $i150: i64;
  var $p151: ref;
  var $i152: i8;
  var $i153: i64;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i64;
  var $i159: i64;
  var $p162: ref;
  var $i163: i64;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i32;
  var $i169: i8;
  var $i170: i64;
  var $p172: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $i173: i32;
  var $i174: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i175: i32;
  var $i176: i32;
  var $p177: ref;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $i189: i64;
  var $i190: i32;
  var $i191: i32;
  var $i192: i32;
  var $i193: i64;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $p202: ref;
  var $i203: i8;
  var $i204: i64;
  var $p207: ref;
  var $i208: i64;
  var $p209: ref;
  var $i210: i32;
  var $i211: i32;
  var $i212: i32;
  var $i213: i8;
  var $i214: i32;
  var $i215: i1;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i216: i32;
  var $i218: i32;
  var $p220: ref;
  var $i182: i32;
  var $i183: i32;
  var $p184: ref;
  var $p222: ref;
  var $i223: i8;
  var $i224: i32;
  var $i225: i1;
  var $i232: i64;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $i236: i64;
  var $p238: ref;
  var $p239: ref;
  var $i240: i64;
  var $p245: ref;
  var $i246: i8;
  var $i247: i64;
  var $p250: ref;
  var $i251: i64;
  var $p252: ref;
  var $i253: i32;
  var $i254: i32;
  var $i255: i32;
  var $i256: i8;
  var $i257: i32;
  var $i258: i1;
  var $p228: ref;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i259: i32;
  var $i261: i32;
  var $i226: i32;
  var $i227: i32;
  var $i263: i1;
  var $p264: ref;
  var $p265: ref;
  var $i268: i1;
  var $p270: ref;
  var $i271: i64;
  var $p274: ref;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i32;
  var $i279: i1;
  var $i269: i32;
  var $p280: ref;
  var $i281: i32;
  var $i282: i1;
  var $i283: i32;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $i290: i1;
  var $i291: i8;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $i299: i32;
  var $i44: i32;
  var $p304: ref;
  var $p305: ref;
  var $i306: i64;
  var $i307: i1;
  var $p309: ref;
  var $i310: i64;
  var $p313: ref;
  var $i314: i32;
  var $i315: i64;
  var $p319: ref;
  var $p320: ref;
  var $i321: i64;
  var $i322: i1;
  var $i308: i32;
  var $p323: ref;
  var $i24: i32;
  var $i324: i64;
  var $i325: i32;
  var $i326: i32;
  var $i327: i32;
  var $i328: i64;
  var $p330: ref;
  var $p331: ref;
  var $i332: i64;
  var $p337: ref;
  var $i338: i8;
  var $i339: i64;
  var $p342: ref;
  var $i343: i64;
  var $i344: i64;
  var $p345: ref;
  var $i346: i32;
  var $i347: i32;
  var $i348: i64;
  var $i349: i32;
  var $i350: i32;
  var $i351: i32;
  var $i352: i64;
  var $p354: ref;
  var $p355: ref;
  var $i356: i64;
  var $p361: ref;
  var $i362: i8;
  var $i363: i64;
  var $p366: ref;
  var $i367: i64;
  var $i368: i64;
  var $p369: ref;
  var $i370: i32;
  var $i371: i32;
  var $i372: i64;
  var $i373: i32;
  var $i374: i32;
  var $i375: i32;
  var $i376: i64;
  var $p378: ref;
  var $p379: ref;
  var $i380: i64;
  var $p385: ref;
  var $i386: i8;
  var $i387: i64;
  var $p390: ref;
  var $i391: i64;
  var $i392: i64;
  var $p393: ref;
  var $i394: i32;
  var $i395: i32;
  var $i396: i64;
  var $i397: i32;
  var $i398: i32;
  var $i399: i32;
  var $i400: i64;
  var $p402: ref;
  var $p403: ref;
  var $i404: i64;
  var $p409: ref;
  var $i410: i8;
  var $i411: i64;
  var $p414: ref;
  var $i415: i64;
  var $i416: i64;
  var $p417: ref;
  var $i418: i32;
  var $i419: i32;
  var $i420: i64;
  var $i421: i32;
  var $i422: i32;
  var $i423: i32;
  var $i424: i64;
  var $p426: ref;
  var $p427: ref;
  var $i428: i64;
  var $p433: ref;
  var $i434: i8;
  var $i435: i64;
  var $p438: ref;
  var $i439: i64;
  var $i440: i64;
  var $p441: ref;
  var $i262: i32;
  var $i260: i32;
  var $i442: i64;
  var $i443: i32;
  var $i444: i32;
  var $i445: i32;
  var $i446: i64;
  var $p448: ref;
  var $p449: ref;
  var $i450: i64;
  var $p455: ref;
  var $i456: i8;
  var $i457: i64;
  var $p460: ref;
  var $i461: i64;
  var $i462: i64;
  var $p463: ref;
  var $i464: i32;
  var $i465: i32;
  var $i466: i64;
  var $i467: i32;
  var $i468: i32;
  var $i469: i32;
  var $i470: i64;
  var $p472: ref;
  var $p473: ref;
  var $i474: i64;
  var $p479: ref;
  var $i480: i8;
  var $i481: i64;
  var $p484: ref;
  var $i485: i64;
  var $i486: i64;
  var $p487: ref;
  var $i488: i32;
  var $i489: i32;
  var $i490: i64;
  var $i491: i32;
  var $i492: i32;
  var $i493: i32;
  var $i494: i64;
  var $p496: ref;
  var $p497: ref;
  var $i498: i64;
  var $p503: ref;
  var $i504: i8;
  var $i505: i64;
  var $p508: ref;
  var $i509: i64;
  var $i510: i64;
  var $p511: ref;
  var $i512: i32;
  var $i513: i32;
  var $i514: i64;
  var $i515: i32;
  var $i516: i32;
  var $i517: i32;
  var $i518: i64;
  var $p520: ref;
  var $p521: ref;
  var $i522: i64;
  var $p527: ref;
  var $i528: i8;
  var $i529: i64;
  var $p532: ref;
  var $i533: i64;
  var $i534: i64;
  var $p535: ref;
  var $i536: i32;
  var $i537: i32;
  var $i538: i64;
  var $i539: i32;
  var $i540: i32;
  var $i541: i32;
  var $i542: i64;
  var $p544: ref;
  var $p545: ref;
  var $i546: i64;
  var $p551: ref;
  var $i552: i8;
  var $i553: i64;
  var $p556: ref;
  var $i557: i64;
  var $i558: i64;
  var $p221: ref;
  var $i219: i32;
  var $i217: i32;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $i562: i32;
  var $i563: i1;
  var $p564: ref;
  var $p565: ref;
  var $p566: ref;
  var $i567: i32;
  var $i568: i1;
  var $p569: ref;
  var $p570: ref;
  var $p571: ref;
  var $i572: i32;
  var $i573: i1;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $i577: i32;
  var $i578: i1;
  var $p579: ref;
  var $p580: ref;
  var $p581: ref;
  var $i582: i32;
  var $i583: i1;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $i587: i32;
  var $i588: i1;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $i592: i32;
  var $i593: i1;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $i597: i32;
  var $i598: i1;
  var $p599: ref;
  var $p600: ref;
  var $p601: ref;
  var $i602: i32;
  var $i603: i1;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $i607: i32;
  var $i608: i1;
  var $p609: ref;
  var $p610: ref;
  var $p611: ref;
  var $i612: i32;
  var $i613: i1;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $i617: i32;
  var $i618: i1;
  var $p619: ref;
  var $p620: ref;
  var $p621: ref;
  var $i622: i32;
  var $i623: i1;
  var $p624: ref;
  var $p625: ref;
  var $p626: ref;
  var $i627: i32;
  var $i628: i1;
  var $p629: ref;
  var $p630: ref;
  var $p631: ref;
  var $i632: i32;
  var $i633: i1;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $i637: i32;
  var $i638: i1;
  var $p639: ref;
  var $p640: ref;
  var $p641: ref;
  var $i642: i32;
  var $i643: i1;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $i647: i32;
  var $i648: i1;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $i652: i32;
  var $i653: i1;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $i657: i32;
  var $i658: i1;
  var $p659: ref;
  var $p660: ref;
  var $p661: ref;
  var $i662: i32;
  var $i663: i1;
  var $p664: ref;
  var $p665: ref;
  var $p666: ref;
  var $i667: i32;
  var $i668: i1;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $i672: i32;
  var $i673: i1;
  var $p674: ref;
  var $p675: ref;
  var $p676: ref;
  var $i677: i32;
  var $i678: i1;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $i682: i32;
  var $i683: i1;
  var $p684: ref;
  var $p685: ref;
  var $p686: ref;
  var $i687: i32;
  var $i688: i1;
  var $p689: ref;
  var $p690: ref;
  var $p691: ref;
  var $i692: i32;
  var $i693: i1;
  var $p694: ref;
  var $p695: ref;
  var $p696: ref;
  var $i697: i32;
  var $i698: i1;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $i702: i32;
  var $i703: i1;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $i707: i32;
  var $i708: i1;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $i712: i32;
  var $i713: i1;
  var $p714: ref;
  var $p715: ref;
  var $p716: ref;
  var $i717: i32;
  var $i718: i1;
  var $p719: ref;
  var $p720: ref;
  var $p721: ref;
  var $i722: i32;
  var $i723: i1;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $i727: i32;
  var $i728: i1;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $i732: i32;
  var $i733: i1;
  var $p734: ref;
  var $p735: ref;
  var $p736: ref;
  var $i737: i32;
  var $i738: i1;
  var $p739: ref;
  var $p740: ref;
  var $p741: ref;
  var $i742: i32;
  var $i743: i1;
  var $p744: ref;
  var $p745: ref;
  var $p746: ref;
  var $i747: i32;
  var $i748: i1;
  var $p749: ref;
  var $p750: ref;
  var $p751: ref;
  var $i752: i32;
  var $i753: i1;
  var $p754: ref;
  var $p755: ref;
  var $p756: ref;
  var $i757: i32;
  var $i758: i1;
  var $p759: ref;
  var $p760: ref;
  var $p761: ref;
  var $i762: i32;
  var $i763: i1;
  var $p764: ref;
  var $p765: ref;
  var $p766: ref;
  var $i767: i32;
  var $i768: i1;
  var $p769: ref;
  var $p770: ref;
  var $p771: ref;
  var $i772: i32;
  var $i773: i1;
  var $p774: ref;
  var $p775: ref;
  var $p776: ref;
  var $i777: i32;
  var $i778: i1;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p3, 0);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p4, 1);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p5, 3);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p6, 4);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p7, 10);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p8, 8);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p9, 14);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p10, 2);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p11, 9);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p12, 6);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p13, 5);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(11, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p14, 11);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p15, 15);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(13, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p16, 13);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p17, 7);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(15, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p18, 12);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p20 := devm_kzalloc($p19, 15240, 208);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $p25 := platform_get_resource($p0, 256, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i16($i27);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i28);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(8, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} __mutex_init($p30, .str, $p2);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p21);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} platform_set_drvdata($p0, $p31);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 4);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i36 := inb_p($i35);
    call {:si_unique_call 136} {:cexpr "tmp___1"} boogie_si_record_i8($i36);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 8);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15207, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i42 := abituguru_read($p21, 32, 0, $p41, 3, 3);
    call {:si_unique_call 138} {:cexpr "tmp___2"} boogie_si_record_i32($i42);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 3);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i47 := abituguru_read($p21, 33, 0, $p46, 1, 3);
    call {:si_unique_call 140} {:cexpr "tmp___3"} boogie_si_record_i32($i47);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 1);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i51 := abituguru_read($p21, 34, 0, $p50, 3, 3);
    call {:si_unique_call 142} {:cexpr "tmp___4"} boogie_si_record_i32($i51);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 3);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p630 := $bitcast.ref.ref($p629);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($p630, $mul.ref(1, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i632 := abituguru_read($p21, 33, 1, $p631, 1, 3);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i633 := $ne.i32($i632, 1);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i633} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i633 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p635 := $bitcast.ref.ref($p634);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($p635, $mul.ref(1, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i637 := abituguru_read($p21, 34, 1, $p636, 3, 3);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i638 := $ne.i32($i637, 3);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i638} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p640 := $bitcast.ref.ref($p639);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($p640, $mul.ref(2, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i642 := abituguru_read($p21, 33, 2, $p641, 1, 3);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i643 := $ne.i32($i642, 1);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i643} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i643 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p645 := $bitcast.ref.ref($p644);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($p645, $mul.ref(2, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i647 := abituguru_read($p21, 34, 2, $p646, 3, 3);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i648 := $ne.i32($i647, 3);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i648} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i648 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p650 := $bitcast.ref.ref($p649);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($p650, $mul.ref(3, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $i652 := abituguru_read($p21, 33, 3, $p651, 1, 3);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i653 := $ne.i32($i652, 1);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i653 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p655 := $bitcast.ref.ref($p654);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($p655, $mul.ref(3, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i657 := abituguru_read($p21, 34, 3, $p656, 3, 3);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i658 := $ne.i32($i657, 3);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i658} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i658 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p660 := $bitcast.ref.ref($p659);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($p660, $mul.ref(4, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i662 := abituguru_read($p21, 33, 4, $p661, 1, 3);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i663 := $ne.i32($i662, 1);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i663} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i663 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p665 := $bitcast.ref.ref($p664);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($p665, $mul.ref(4, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i667 := abituguru_read($p21, 34, 4, $p666, 3, 3);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i668 := $ne.i32($i667, 3);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i668} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i668 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p670 := $bitcast.ref.ref($p669);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($p670, $mul.ref(5, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i672 := abituguru_read($p21, 33, 5, $p671, 1, 3);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i673 := $ne.i32($i672, 1);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i673} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i673 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p675 := $bitcast.ref.ref($p674);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($p675, $mul.ref(5, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i677 := abituguru_read($p21, 34, 5, $p676, 3, 3);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i678 := $ne.i32($i677, 3);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i678} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i678 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p680 := $bitcast.ref.ref($p679);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($p680, $mul.ref(6, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i682 := abituguru_read($p21, 33, 6, $p681, 1, 3);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i683 := $ne.i32($i682, 1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i683} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i683 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p685 := $bitcast.ref.ref($p684);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($p685, $mul.ref(6, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i687 := abituguru_read($p21, 34, 6, $p686, 3, 3);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i688 := $ne.i32($i687, 3);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i688} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i688 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p690 := $bitcast.ref.ref($p689);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($p690, $mul.ref(7, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i692 := abituguru_read($p21, 33, 7, $p691, 1, 3);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i693 := $ne.i32($i692, 1);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i693} true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i693 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p695 := $bitcast.ref.ref($p694);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($p695, $mul.ref(7, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i697 := abituguru_read($p21, 34, 7, $p696, 3, 3);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i698 := $ne.i32($i697, 3);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i698} true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i698 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p700 := $bitcast.ref.ref($p699);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($p700, $mul.ref(8, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i702 := abituguru_read($p21, 33, 8, $p701, 1, 3);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i703 := $ne.i32($i702, 1);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i703} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i703 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p705 := $bitcast.ref.ref($p704);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($p705, $mul.ref(8, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i707 := abituguru_read($p21, 34, 8, $p706, 3, 3);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i708 := $ne.i32($i707, 3);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i708} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i708 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p710 := $bitcast.ref.ref($p709);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($p710, $mul.ref(9, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i712 := abituguru_read($p21, 33, 9, $p711, 1, 3);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i713 := $ne.i32($i712, 1);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i713} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i713 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p715 := $bitcast.ref.ref($p714);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($p715, $mul.ref(9, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i717 := abituguru_read($p21, 34, 9, $p716, 3, 3);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i718 := $ne.i32($i717, 3);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i718} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i718 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p720 := $bitcast.ref.ref($p719);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($p720, $mul.ref(10, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i722 := abituguru_read($p21, 33, 10, $p721, 1, 3);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i723 := $ne.i32($i722, 1);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i723} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i723 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p725 := $bitcast.ref.ref($p724);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($p725, $mul.ref(10, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i727 := abituguru_read($p21, 34, 10, $p726, 3, 3);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i728 := $ne.i32($i727, 3);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i728} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p730 := $bitcast.ref.ref($p729);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p731 := $add.ref($p730, $mul.ref(11, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i732 := abituguru_read($p21, 33, 11, $p731, 1, 3);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i733 := $ne.i32($i732, 1);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i733} true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i733 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p734 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p735 := $bitcast.ref.ref($p734);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($p735, $mul.ref(11, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i737 := abituguru_read($p21, 34, 11, $p736, 3, 3);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i738 := $ne.i32($i737, 3);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i738} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i738 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p740 := $bitcast.ref.ref($p739);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($p740, $mul.ref(12, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i742 := abituguru_read($p21, 33, 12, $p741, 1, 3);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i743 := $ne.i32($i742, 1);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i743} true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i743 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p745 := $bitcast.ref.ref($p744);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($p745, $mul.ref(12, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i747 := abituguru_read($p21, 34, 12, $p746, 3, 3);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i748 := $ne.i32($i747, 3);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i748} true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i748 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p750 := $bitcast.ref.ref($p749);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($p750, $mul.ref(13, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i752 := abituguru_read($p21, 33, 13, $p751, 1, 3);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i753 := $ne.i32($i752, 1);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i753} true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i753 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p754 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p755 := $bitcast.ref.ref($p754);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($p755, $mul.ref(13, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i757 := abituguru_read($p21, 34, 13, $p756, 3, 3);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i758 := $ne.i32($i757, 3);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i758} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i758 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p760 := $bitcast.ref.ref($p759);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($p760, $mul.ref(14, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i762 := abituguru_read($p21, 33, 14, $p761, 1, 3);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i763 := $ne.i32($i762, 1);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i763} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i763 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p765 := $bitcast.ref.ref($p764);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($p765, $mul.ref(14, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i767 := abituguru_read($p21, 34, 14, $p766, 3, 3);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i768 := $ne.i32($i767, 3);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i768} true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i768 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15058, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p770 := $bitcast.ref.ref($p769);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($p770, $mul.ref(15, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i772 := abituguru_read($p21, 33, 15, $p771, 1, 3);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i773 := $ne.i32($i772, 1);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i773} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i773 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p775 := $bitcast.ref.ref($p774);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($p775, $mul.ref(15, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i777 := abituguru_read($p21, 34, 15, $p776, 3, 3);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i778 := $ne.i32($i777, 3);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i778} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i778 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15189, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i55 := abituguru_read($p21, 38, 0, $p54, 1, 3);
    call {:si_unique_call 145} {:cexpr "tmp___5"} boogie_si_record_i32($i55);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15195, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i59 := abituguru_read($p21, 39, 0, $p58, 2, 3);
    call {:si_unique_call 147} {:cexpr "tmp___6"} boogie_si_record_i32($i59);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 2);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15189, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p580 := $bitcast.ref.ref($p579);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($p580, $mul.ref(1, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i582 := abituguru_read($p21, 38, 1, $p581, 1, 3);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i583 := $ne.i32($i582, 1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i583} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i583 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15195, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p585 := $bitcast.ref.ref($p584);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($p585, $mul.ref(1, 1));
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i587 := abituguru_read($p21, 39, 1, $p586, 2, 3);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i588 := $ne.i32($i587, 2);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15189, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p590 := $bitcast.ref.ref($p589);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($p590, $mul.ref(2, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i592 := abituguru_read($p21, 38, 2, $p591, 1, 3);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i593 := $ne.i32($i592, 1);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i593} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i593 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15195, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p595 := $bitcast.ref.ref($p594);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($p595, $mul.ref(2, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i597 := abituguru_read($p21, 39, 2, $p596, 2, 3);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i598 := $ne.i32($i597, 2);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i598} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15189, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p600 := $bitcast.ref.ref($p599);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($p600, $mul.ref(3, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $i602 := abituguru_read($p21, 38, 3, $p601, 1, 3);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i603 := $ne.i32($i602, 1);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i603} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i603 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15195, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p605 := $bitcast.ref.ref($p604);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($p605, $mul.ref(3, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i607 := abituguru_read($p21, 39, 3, $p606, 2, 3);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i608 := $ne.i32($i607, 2);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i608} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i608 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15189, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p610 := $bitcast.ref.ref($p609);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($p610, $mul.ref(4, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i612 := abituguru_read($p21, 38, 4, $p611, 1, 3);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i613 := $ne.i32($i612, 1);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i613} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i613 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15195, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p615 := $bitcast.ref.ref($p614);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($p615, $mul.ref(4, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i617 := abituguru_read($p21, 39, 4, $p616, 2, 3);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i618 := $ne.i32($i617, 2);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i618} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i618 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15189, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p620 := $bitcast.ref.ref($p619);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($p620, $mul.ref(5, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i622 := abituguru_read($p21, 38, 5, $p621, 1, 3);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i623 := $ne.i32($i622, 1);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i623} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15195, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p625 := $bitcast.ref.ref($p624);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($p625, $mul.ref(5, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i627 := abituguru_read($p21, 39, 5, $p626, 2, 3);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i628 := $ne.i32($i627, 2);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i628} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i628 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15211, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i63 := abituguru_read($p21, 36, 0, $p62, 5, 3);
    call {:si_unique_call 150} {:cexpr "tmp___7"} boogie_si_record_i32($i63);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 5);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15211, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p560 := $bitcast.ref.ref($p559);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($p560, $mul.ref(1, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i562 := abituguru_read($p21, 36, 1, $p561, 5, 3);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i563 := $ne.i32($i562, 5);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i563} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i563 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15211, 1));
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p565 := $bitcast.ref.ref($p564);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($p565, $mul.ref(2, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i567 := abituguru_read($p21, 36, 2, $p566, 5, 3);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i568 := $ne.i32($i567, 5);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i568} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15211, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p570 := $bitcast.ref.ref($p569);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($p570, $mul.ref(3, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i572 := abituguru_read($p21, 36, 3, $p571, 5, 3);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i573 := $ne.i32($i572, 5);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i573} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i573 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15211, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p575 := $bitcast.ref.ref($p574);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($p575, $mul.ref(4, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i577 := abituguru_read($p21, 36, 4, $p576, 5, 3);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i578 := $ne.i32($i577, 5);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i578} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i578 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, jiffies);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(168, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i65);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(11944, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p69, $i70, $i71, $i72 := $p67, 0, 3080, 0;
    goto $bb44;

  $bb44:
    call $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i86, $i87, $i92, $i93, $i94, $p99, $p100, $i101, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $p111, $i112, $i113, $p115, $p116, $p117, $i118, $p123, $i124, $p125, $i126, $i127, $p130, $i131, $p132, $i133, $i134, $i135, $i136, $p88, $i89, $i90, $i91, $i137, $i138, $p139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $i147, $p149, $i150, $p151, $i152, $i153, $p155, $i156, $i157, $i158, $i159, $p162, $i163, $p165, $i166, $i167, $i168, $i169, $i170, $p172, $i82, $i83, $i84, $p85, $i173, $i174, $p69, $i70, $i71, $i72, $i175, $i176, $p177, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2 := abituguru_probe_loop_$bb44($p1, $p21, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i86, $i87, $i92, $i93, $i94, $p99, $p100, $i101, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $p111, $i112, $i113, $p115, $p116, $p117, $i118, $p123, $i124, $p125, $i126, $i127, $p130, $i131, $p132, $i133, $i134, $i135, $i136, $p88, $i89, $i90, $i91, $i137, $i138, $p139, $i140, $p141, $i142, $i143, $p144, $i145, $i146, $i147, $p149, $i150, $p151, $i152, $i153, $p155, $i156, $i157, $i158, $i159, $p162, $i163, $p165, $i166, $i167, $i168, $i169, $i170, $p172, $i82, $i83, $i84, $p85, $i173, $i174, $p69, $i70, $i71, $i72, $i175, $i176, $p177, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2);
    goto $bb44_last;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i70);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref($i73, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.16, $p74);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i78 := abituguru_detect_bank1_sensor_type($p21, $i77);
    call {:si_unique_call 153} {:cexpr "res"} boogie_si_record_i32($i78);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i78, 2);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i78, 0);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i87 := (if $i86 == 1 then 7 else 9);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p88, $i89, $i90, $i91 := $p69, 0, $i71, $i72;
    goto $bb53;

  $bb53:
    call $i92, $i93, $i94, $p99, $p100, $i101, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $p111, $i112, $i113, $p115, $p116, $p117, $i118, $p123, $i124, $p125, $i126, $i127, $p130, $i131, $p132, $i133, $i134, $i135, $i136, $p88, $i89, $i90, $i91, $i137, $i138, $p139, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2 := abituguru_probe_loop_$bb53($p1, $p21, $i78, $i87, $i92, $i93, $i94, $p99, $p100, $i101, $p103, $i104, $i105, $i106, $i107, $i108, $i109, $p111, $i112, $i113, $p115, $p116, $p117, $i118, $p123, $i124, $p125, $i126, $i127, $p130, $i131, $p132, $i133, $i134, $i135, $i136, $p88, $i89, $i90, $i91, $i137, $i138, $p139, $i70, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2);
    goto $bb53_last;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i90);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i89);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i78);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref($i94, 504)), $mul.ref($i93, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i78);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref($i101, 1));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, $i78);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i107 := snprintf.ref.i64.ref.i32($p88, $i92, $p100, $i106);
    call {:si_unique_call 156} {:cexpr "tmp___8"} boogie_si_record_i32($i107);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i107, 1);
    call {:si_unique_call 157} {:cexpr "used"} boogie_si_record_i32($i108);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i91);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i109, 56));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i89);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i78);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref($i113, 504)), $mul.ref($i112, 56));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p111);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p115);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 158} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p116, $p117, 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i91);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i118, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p123, $p88);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i70);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref($i124, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.16, $p125);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i91);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i127, 56)), $mul.ref(48, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, $i126);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i108);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($p88, $mul.ref($i131, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i133 := $sub.i32($i90, $i108);
    call {:si_unique_call 159} {:cexpr "sysfs_names_free"} boogie_si_record_i32($i133);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i91, 1);
    call {:si_unique_call 160} {:cexpr "sysfs_attr_i"} boogie_si_record_i32($i134);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i89, 1);
    call {:si_unique_call 161} {:cexpr "j"} boogie_si_record_i32($i135);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i136 := $sgt.i32($i87, $i135);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i137, $i138, $p139 := $i134, $i133, $p132;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i78);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref(abituguru_bank1_max_value, $mul.ref(0, 8)), $mul.ref($i140, 4));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.17, $p141);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i70);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref($i143, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.16, $p144);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i146);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15124, 1)), $mul.ref($i147, 4));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, $i142);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i70);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref($i150, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.16, $p151);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i153 := $sext.i32.i64($i78);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref($i153, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i157);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i159 := $sext.i32.i64($i78);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref($i159, 16)), $mul.ref($i158, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p162, $i152);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i78);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref($i163, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.0, $p165);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i168 := $add.i32($i167, 1);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i8($i168);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i170 := $sext.i32.i64($i78);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref($i170, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p172, $i169);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i82, $i83, $i84, $p85 := $i70, $i137, $i138, $p139;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i82, 1);
    call {:si_unique_call 154} {:cexpr "i"} boogie_si_record_i32($i173);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i174 := $sle.i32($i173, 15);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i175, $i176, $p177 := $i83, $i84, $p85;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} abituguru_detect_no_bank2_sensors($p21);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15188, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i181 := $sgt.i32($i180, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i182, $i183, $p184 := $i175, $i176, $p177;
    assume {:branchcond $i181} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} abituguru_detect_no_pwms($p21);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(15210, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.0, $p222);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i224 := $zext.i8.i32($i223);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i225 := $sgt.i32($i224, 0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i226, $i227 := $i182, $i183;
    assume {:branchcond $i225} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i263 := $slt.i32($i227, 0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} vslice_dummy_var_45 := printk.ref(.str.2);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i268 := $slt.i32(0, $i226);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i281 := device_create_file($p280, abituguru_sysfs_attr);
    call {:si_unique_call 188} {:cexpr "res"} boogie_si_record_i32($i281);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i282 := $ne.i32($i281, 0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i283 := $i281;
    assume {:branchcond $i282} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p285 := hwmon_device_register($p284);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(0, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p286, $p285);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(0, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i290 := IS_ERR($p289);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i291 := $zext.i1.i8($i290);
    call {:si_unique_call 191} {:cexpr "tmp___11"} boogie_si_record_i8($i291);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i8.i1($i291);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i292} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    $i293 := 1;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(0, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.0, $p295);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p296);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i298 := PTR_ERR($p297);
    call {:si_unique_call 193} {:cexpr "tmp___13"} boogie_si_record_i64($i298);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i299 := $trunc.i64.i32($i298);
    call {:si_unique_call 194} {:cexpr "res"} boogie_si_record_i32($i299);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i44 := $i299;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.0, $p304);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p305);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i307 := $ne.i64($i306, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i307 == 1);
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} device_remove_file($p323, abituguru_sysfs_attr);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i24 := $i44;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb111:
    assume $i307 == 1;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i308 := 0;
    goto $bb114;

  $bb114:
    call $p309, $i310, $p313, $i314, $i315, $p319, $p320, $i321, $i322, $i308 := abituguru_probe_loop_$bb114($p0, $p21, $p309, $i310, $p313, $i314, $i315, $p319, $p320, $i321, $i322, $i308);
    goto $bb114_last;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i310 := $sext.i32.i64($i308);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i310, 56)), $mul.ref(0, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} device_remove_file($p309, $p313);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i314 := $add.i32($i308, 1);
    call {:si_unique_call 196} {:cexpr "i"} boogie_si_record_i32($i314);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i315 := $sext.i32.i64($i314);
    $p319 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i315, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i321 := $p2i.ref.i64($p320);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i322 := $ne.i64($i321, 0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i322 == 1);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb116:
    assume $i322 == 1;
    assume {:verifier.code 0} true;
    $i308 := $i314;
    goto $bb116_dummy;

  $bb108:
    assume $i294 == 1;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb3;

  $bb105:
    assume $i292 == 1;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i293 := 0;
    goto $bb107;

  $bb101:
    assume $i282 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i44 := $i283;
    goto $bb10;

  $bb88:
    assume $i268 == 1;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i269 := 0;
    goto $bb91;

  $bb91:
    call $p270, $i271, $p274, $i275, $i276, $i277, $i278, $i279, $i269 := abituguru_probe_loop_$bb91($p0, $p21, $i226, $p270, $i271, $p274, $i275, $i276, $i277, $i278, $i279, $i269);
    goto $bb91_last;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i271 := $sext.i32.i64($i269);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i271, 56)), $mul.ref(0, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i275 := device_create_file($p270, $p274);
    call {:si_unique_call 185} {:cexpr "res"} boogie_si_record_i32($i275);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i277 := $i275;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i278 := $add.i32($i269, 1);
    call {:si_unique_call 186} {:cexpr "i"} boogie_si_record_i32($i278);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i279 := $slt.i32($i278, $i226);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i279 == 1);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb96:
    assume $i279 == 1;
    assume {:verifier.code 0} true;
    $i269 := $i278;
    goto $bb96_dummy;

  $bb93:
    assume $i276 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i44 := $i277;
    goto $bb10;

  $bb85:
    assume $i263 == 1;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p264 := $M.18;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p265 := $M.19;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} vslice_dummy_var_44 := printk.ref.ref.ref(.str.1, $p264, $p265);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 36);
    goto $bb10;

  $bb73:
    assume $i225 == 1;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p228, $i229, $i230, $i231 := $p184, 0, $i183, $i182;
    goto $bb76;

  $bb76:
    call $i232, $i233, $i234, $i235, $i236, $p238, $p239, $i240, $p245, $i246, $i247, $p250, $i251, $p252, $i253, $i254, $i255, $i256, $i257, $i258, $p228, $i229, $i230, $i231, $i259, $i261, $i324, $i325, $i326, $i327, $i328, $p330, $p331, $i332, $p337, $i338, $i339, $p342, $i343, $i344, $p345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $p354, $p355, $i356, $p361, $i362, $i363, $p366, $i367, $i368, $p369, $i370, $i371, $i372, $i373, $i374, $i375, $i376, $p378, $p379, $i380, $p385, $i386, $i387, $p390, $i391, $i392, $p393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $p402, $p403, $i404, $p409, $i410, $i411, $p414, $i415, $i416, $p417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $p426, $p427, $i428, $p433, $i434, $i435, $p438, $i439, $i440, $p441, $i262, $i260, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26 := abituguru_probe_loop_$bb76($p21, $p222, $i232, $i233, $i234, $i235, $i236, $p238, $p239, $i240, $p245, $i246, $i247, $p250, $i251, $p252, $i253, $i254, $i255, $i256, $i257, $i258, $p228, $i229, $i230, $i231, $i259, $i261, $i324, $i325, $i326, $i327, $i328, $p330, $p331, $i332, $p337, $i338, $i339, $p342, $i343, $i344, $p345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $p354, $p355, $i356, $p361, $i362, $i363, $p366, $i367, $i368, $p369, $i370, $i371, $i372, $i373, $i374, $i375, $i376, $p378, $p379, $i380, $p385, $i386, $i387, $p390, $i391, $i392, $p393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $p402, $p403, $i404, $p409, $i410, $i411, $p414, $i415, $i416, $p417, $i418, $i419, $i420, $i421, $i422, $i423, $i424, $p426, $p427, $i428, $p433, $i434, $i435, $p438, $i439, $i440, $p441, $i262, $i260, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, cmdloc_dummy_var_24, cmdloc_dummy_var_25, cmdloc_dummy_var_26);
    goto $bb76_last;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i232 := $sext.i32.i64($i230);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i229, 1);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i234 := snprintf.ref.i64.ref.i32($p228, $i232, .str.108, $i233);
    call {:si_unique_call 174} {:cexpr "tmp___10"} boogie_si_record_i32($i234);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i235 := $add.i32($i234, 1);
    call {:si_unique_call 175} {:cexpr "used"} boogie_si_record_i32($i235);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i236 := $sext.i32.i64($i231);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i236, 56));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p238);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 176} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p239, abituguru_sysfs_pwm_templ, 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i240 := $sext.i32.i64($i231);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i240, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p245, $p228);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i246 := $trunc.i32.i8($i229);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i247 := $sext.i32.i64($i231);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i247, 56)), $mul.ref(48, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p250, $i246);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i251 := $sext.i32.i64($i235);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($p228, $mul.ref($i251, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i253 := $sub.i32($i230, $i235);
    call {:si_unique_call 177} {:cexpr "sysfs_names_free"} boogie_si_record_i32($i253);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i254 := $add.i32($i231, 1);
    call {:si_unique_call 178} {:cexpr "sysfs_attr_i"} boogie_si_record_i32($i254);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i324 := $sext.i32.i64($i253);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i325 := $add.i32($i229, 1);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i326 := snprintf.ref.i64.ref.i32($p252, $i324, .str.109, $i325);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i327 := $add.i32($i326, 1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i328 := $sext.i32.i64($i254);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i328, 56));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p331 := $bitcast.ref.ref($p330);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 180} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p331, $add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i332 := $sext.i32.i64($i254);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i332, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p337, $p252);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i32.i8($i229);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i339 := $sext.i32.i64($i254);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i339, 56)), $mul.ref(48, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p342, $i338);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i343 := $sext.i32.i64($i327);
    $i344 := $add.i64($i251, $i343);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($p228, $mul.ref($i344, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i346 := $sub.i32($i253, $i327);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i347 := $add.i32($i254, 1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i348 := $sext.i32.i64($i346);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i349 := $add.i32($i229, 1);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i350 := snprintf.ref.i64.ref.i32($p345, $i348, .str.110, $i349);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i351 := $add.i32($i350, 1);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i352 := $sext.i32.i64($i347);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i352, 56));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p355 := $bitcast.ref.ref($p354);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 199} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p355, $add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i356 := $sext.i32.i64($i347);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i356, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p361, $p345);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i362 := $trunc.i32.i8($i229);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i363 := $sext.i32.i64($i347);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i363, 56)), $mul.ref(48, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p366, $i362);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i367 := $sext.i32.i64($i351);
    $i368 := $add.i64($i344, $i367);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($p228, $mul.ref($i368, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i370 := $sub.i32($i346, $i351);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i371 := $add.i32($i347, 1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i372 := $sext.i32.i64($i370);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i373 := $add.i32($i229, 1);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i374 := snprintf.ref.i64.ref.i32($p369, $i372, .str.111, $i373);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i375 := $add.i32($i374, 1);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i376 := $sext.i32.i64($i371);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i376, 56));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p379 := $bitcast.ref.ref($p378);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 201} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p379, $add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i380 := $sext.i32.i64($i371);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i380, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p385, $p369);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i386 := $trunc.i32.i8($i229);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i387 := $sext.i32.i64($i371);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i387, 56)), $mul.ref(48, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p390, $i386);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i391 := $sext.i32.i64($i375);
    $i392 := $add.i64($i368, $i391);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($p228, $mul.ref($i392, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i394 := $sub.i32($i370, $i375);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i395 := $add.i32($i371, 1);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i396 := $sext.i32.i64($i394);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i397 := $add.i32($i229, 1);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i398 := snprintf.ref.i64.ref.i32($p393, $i396, .str.112, $i397);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i399 := $add.i32($i398, 1);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i400 := $sext.i32.i64($i395);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i400, 56));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p403 := $bitcast.ref.ref($p402);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 203} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p403, $add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i404 := $sext.i32.i64($i395);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i404, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p409, $p393);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i410 := $trunc.i32.i8($i229);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i411 := $sext.i32.i64($i395);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i411, 56)), $mul.ref(48, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p414, $i410);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i415 := $sext.i32.i64($i399);
    $i416 := $add.i64($i392, $i415);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($p228, $mul.ref($i416, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i418 := $sub.i32($i394, $i399);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i419 := $add.i32($i395, 1);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i420 := $sext.i32.i64($i418);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i421 := $add.i32($i229, 1);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i422 := snprintf.ref.i64.ref.i32($p417, $i420, .str.113, $i421);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i423 := $add.i32($i422, 1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i424 := $sext.i32.i64($i419);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i424, 56));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p427 := $bitcast.ref.ref($p426);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 205} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p427, $add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i428 := $sext.i32.i64($i419);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i428, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p433, $p417);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i434 := $trunc.i32.i8($i229);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i435 := $sext.i32.i64($i419);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i435, 56)), $mul.ref(48, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p438, $i434);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i439 := $sext.i32.i64($i423);
    $i440 := $add.i64($i416, $i439);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($p228, $mul.ref($i440, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i262 := $sub.i32($i418, $i423);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i260 := $add.i32($i419, 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i229, 1);
    call {:si_unique_call 181} {:cexpr "i"} boogie_si_record_i32($i255);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i256 := $load.i8($M.0, $p222);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i256);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i258 := $sgt.i32($i257, $i255);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i259, $i261 := $i260, $i262;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i226, $i227 := $i259, $i261;
    goto $bb75;

  $bb82:
    assume $i258 == 1;
    assume {:verifier.code 0} true;
    $p228, $i229, $i230, $i231 := $p441, $i255, $i262, $i260;
    goto $bb82_dummy;

  $bb61:
    assume $i181 == 1;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p185, $i186, $i187, $i188 := $p177, 0, $i176, $i175;
    goto $bb64;

  $bb64:
    call $i189, $i190, $i191, $i192, $i193, $p195, $p196, $i197, $p202, $i203, $i204, $p207, $i208, $p209, $i210, $i211, $i212, $i213, $i214, $i215, $p185, $i186, $i187, $i188, $i216, $i218, $p220, $i442, $i443, $i444, $i445, $i446, $p448, $p449, $i450, $p455, $i456, $i457, $p460, $i461, $i462, $p463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $p472, $p473, $i474, $p479, $i480, $i481, $p484, $i485, $i486, $p487, $i488, $i489, $i490, $i491, $i492, $i493, $i494, $p496, $p497, $i498, $p503, $i504, $i505, $p508, $i509, $i510, $p511, $i512, $i513, $i514, $i515, $i516, $i517, $i518, $p520, $p521, $i522, $p527, $i528, $i529, $p532, $i533, $i534, $p535, $i536, $i537, $i538, $i539, $i540, $i541, $i542, $p544, $p545, $i546, $p551, $i552, $i553, $p556, $i557, $i558, $p221, $i219, $i217, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38 := abituguru_probe_loop_$bb64($p21, $p178, $i189, $i190, $i191, $i192, $i193, $p195, $p196, $i197, $p202, $i203, $i204, $p207, $i208, $p209, $i210, $i211, $i212, $i213, $i214, $i215, $p185, $i186, $i187, $i188, $i216, $i218, $p220, $i442, $i443, $i444, $i445, $i446, $p448, $p449, $i450, $p455, $i456, $i457, $p460, $i461, $i462, $p463, $i464, $i465, $i466, $i467, $i468, $i469, $i470, $p472, $p473, $i474, $p479, $i480, $i481, $p484, $i485, $i486, $p487, $i488, $i489, $i490, $i491, $i492, $i493, $i494, $p496, $p497, $i498, $p503, $i504, $i505, $p508, $i509, $i510, $p511, $i512, $i513, $i514, $i515, $i516, $i517, $i518, $p520, $p521, $i522, $p527, $i528, $i529, $p532, $i533, $i534, $p535, $i536, $i537, $i538, $i539, $i540, $i541, $i542, $p544, $p545, $i546, $p551, $i552, $i553, $p556, $i557, $i558, $p221, $i219, $i217, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38);
    goto $bb64_last;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i187);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i186, 1);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i191 := snprintf.ref.i64.ref.i32($p185, $i189, .str.83, $i190);
    call {:si_unique_call 164} {:cexpr "tmp___9"} boogie_si_record_i32($i191);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i191, 1);
    call {:si_unique_call 165} {:cexpr "used"} boogie_si_record_i32($i192);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i193 := $sext.i32.i64($i188);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i193, 56));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 166} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p196, abituguru_sysfs_fan_templ, 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i197 := $sext.i32.i64($i188);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i197, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p202, $p185);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i32.i8($i186);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i204 := $sext.i32.i64($i188);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i204, 56)), $mul.ref(48, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p207, $i203);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i208 := $sext.i32.i64($i192);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p185, $mul.ref($i208, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i210 := $sub.i32($i187, $i192);
    call {:si_unique_call 167} {:cexpr "sysfs_names_free"} boogie_si_record_i32($i210);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i211 := $add.i32($i188, 1);
    call {:si_unique_call 168} {:cexpr "sysfs_attr_i"} boogie_si_record_i32($i211);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i442 := $sext.i32.i64($i210);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i443 := $add.i32($i186, 1);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i444 := snprintf.ref.i64.ref.i32($p209, $i442, .str.84, $i443);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i445 := $add.i32($i444, 1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i446 := $sext.i32.i64($i211);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i446, 56));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p449 := $bitcast.ref.ref($p448);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 170} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p449, $add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i450 := $sext.i32.i64($i211);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i450, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p455, $p209);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i456 := $trunc.i32.i8($i186);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i457 := $sext.i32.i64($i211);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i457, 56)), $mul.ref(48, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p460, $i456);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i461 := $sext.i32.i64($i445);
    $i462 := $add.i64($i208, $i461);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($p185, $mul.ref($i462, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i464 := $sub.i32($i210, $i445);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i465 := $add.i32($i211, 1);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i466 := $sext.i32.i64($i464);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i467 := $add.i32($i186, 1);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i468 := snprintf.ref.i64.ref.i32($p463, $i466, .str.85, $i467);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i469 := $add.i32($i468, 1);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i470 := $sext.i32.i64($i465);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i470, 56));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p473 := $bitcast.ref.ref($p472);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 207} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p473, $add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i474 := $sext.i32.i64($i465);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i474, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p479, $p463);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i480 := $trunc.i32.i8($i186);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i481 := $sext.i32.i64($i465);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i481, 56)), $mul.ref(48, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p484, $i480);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i485 := $sext.i32.i64($i469);
    $i486 := $add.i64($i462, $i485);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($p185, $mul.ref($i486, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i488 := $sub.i32($i464, $i469);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i489 := $add.i32($i465, 1);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i490 := $sext.i32.i64($i488);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i491 := $add.i32($i186, 1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i492 := snprintf.ref.i64.ref.i32($p487, $i490, .str.86, $i491);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i493 := $add.i32($i492, 1);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i494 := $sext.i32.i64($i489);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i494, 56));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p497 := $bitcast.ref.ref($p496);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 209} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p497, $add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i498 := $sext.i32.i64($i489);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i498, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p503, $p487);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i504 := $trunc.i32.i8($i186);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i505 := $sext.i32.i64($i489);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i505, 56)), $mul.ref(48, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p508, $i504);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i509 := $sext.i32.i64($i493);
    $i510 := $add.i64($i486, $i509);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($p185, $mul.ref($i510, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i512 := $sub.i32($i488, $i493);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i513 := $add.i32($i489, 1);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i514 := $sext.i32.i64($i512);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i515 := $add.i32($i186, 1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i516 := snprintf.ref.i64.ref.i32($p511, $i514, .str.87, $i515);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i517 := $add.i32($i516, 1);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i518 := $sext.i32.i64($i513);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i518, 56));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p521 := $bitcast.ref.ref($p520);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 211} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p521, $add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i522 := $sext.i32.i64($i513);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i522, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p527, $p511);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i528 := $trunc.i32.i8($i186);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i529 := $sext.i32.i64($i513);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i529, 56)), $mul.ref(48, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p532, $i528);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i533 := $sext.i32.i64($i517);
    $i534 := $add.i64($i510, $i533);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($p185, $mul.ref($i534, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i536 := $sub.i32($i512, $i517);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i537 := $add.i32($i513, 1);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i538 := $sext.i32.i64($i536);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i539 := $add.i32($i186, 1);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i540 := snprintf.ref.i64.ref.i32($p535, $i538, .str.88, $i539);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i541 := $add.i32($i540, 1);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i542 := $sext.i32.i64($i537);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i542, 56));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p545 := $bitcast.ref.ref($p544);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 213} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p545, $add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i546 := $sext.i32.i64($i537);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i546, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p551, $p535);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i552 := $trunc.i32.i8($i186);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i553 := $sext.i32.i64($i537);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i553, 56)), $mul.ref(48, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p556, $i552);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i557 := $sext.i32.i64($i541);
    $i558 := $add.i64($i534, $i557);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p185, $mul.ref($i558, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i219 := $sub.i32($i536, $i541);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i217 := $add.i32($i537, 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i212 := $add.i32($i186, 1);
    call {:si_unique_call 171} {:cexpr "i"} boogie_si_record_i32($i212);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.0, $p178);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i215 := $sgt.i32($i214, $i212);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i216, $i218, $p220 := $i217, $i219, $p221;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i182, $i183, $p184 := $i216, $i218, $p220;
    goto $bb63;

  $bb70:
    assume $i215 == 1;
    assume {:verifier.code 0} true;
    $p185, $i186, $i187, $i188 := $p221, $i212, $i219, $i217;
    goto $bb70_dummy;

  $bb58:
    assume $i174 == 1;
    assume {:verifier.code 0} true;
    $p69, $i70, $i71, $i72 := $p85, $i173, $i84, $i83;
    goto $bb58_dummy;

  $bb55:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $p88, $i89, $i90, $i91 := $p132, $i135, $i133, $i134;
    goto $bb55_dummy;

  $bb49:
    assume $i81 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i82, $i83, $i84, $p85 := $i70, $i72, $i71, $p69;
    goto $bb51;

  $bb46:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i44 := $i80;
    goto $bb10;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i578 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 19);
    goto $bb10;

  $bb138:
    assume {:verifier.code 0} true;
    assume $i573 == 1;
    goto $bb39;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i568 == 1;
    goto $bb39;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i563 == 1;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb39;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i628 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 19);
    goto $bb10;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i623 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 19);
    goto $bb10;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i618 == 1;
    goto $bb31;

  $bb166:
    assume {:verifier.code 0} true;
    assume $i613 == 1;
    goto $bb27;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i608 == 1;
    goto $bb31;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i603 == 1;
    goto $bb27;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i598 == 1;
    goto $bb31;

  $bb152:
    assume {:verifier.code 0} true;
    assume $i593 == 1;
    goto $bb27;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i588 == 1;
    goto $bb31;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i583 == 1;
    goto $bb27;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb27;

  $bb280:
    assume {:verifier.code 0} true;
    assume $i778 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 19);
    goto $bb10;

  $bb277:
    assume {:verifier.code 0} true;
    assume $i773 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 19);
    goto $bb10;

  $bb273:
    assume {:verifier.code 0} true;
    assume $i768 == 1;
    goto $bb19;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i763 == 1;
    goto $bb15;

  $bb266:
    assume {:verifier.code 0} true;
    assume $i758 == 1;
    goto $bb19;

  $bb263:
    assume {:verifier.code 0} true;
    assume $i753 == 1;
    goto $bb15;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i748 == 1;
    goto $bb19;

  $bb256:
    assume {:verifier.code 0} true;
    assume $i743 == 1;
    goto $bb15;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i738 == 1;
    goto $bb19;

  $bb249:
    assume {:verifier.code 0} true;
    assume $i733 == 1;
    goto $bb15;

  $bb245:
    assume {:verifier.code 0} true;
    assume $i728 == 1;
    goto $bb19;

  $bb242:
    assume {:verifier.code 0} true;
    assume $i723 == 1;
    goto $bb15;

  $bb238:
    assume {:verifier.code 0} true;
    assume $i718 == 1;
    goto $bb19;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i713 == 1;
    goto $bb15;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i708 == 1;
    goto $bb19;

  $bb228:
    assume {:verifier.code 0} true;
    assume $i703 == 1;
    goto $bb15;

  $bb224:
    assume {:verifier.code 0} true;
    assume $i698 == 1;
    goto $bb19;

  $bb221:
    assume {:verifier.code 0} true;
    assume $i693 == 1;
    goto $bb15;

  $bb217:
    assume {:verifier.code 0} true;
    assume $i688 == 1;
    goto $bb19;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i683 == 1;
    goto $bb15;

  $bb210:
    assume {:verifier.code 0} true;
    assume $i678 == 1;
    goto $bb19;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i673 == 1;
    goto $bb15;

  $bb203:
    assume {:verifier.code 0} true;
    assume $i668 == 1;
    goto $bb19;

  $bb200:
    assume {:verifier.code 0} true;
    assume $i663 == 1;
    goto $bb15;

  $bb196:
    assume {:verifier.code 0} true;
    assume $i658 == 1;
    goto $bb19;

  $bb193:
    assume {:verifier.code 0} true;
    assume $i653 == 1;
    goto $bb15;

  $bb189:
    assume {:verifier.code 0} true;
    assume $i648 == 1;
    goto $bb19;

  $bb186:
    assume {:verifier.code 0} true;
    assume $i643 == 1;
    goto $bb15;

  $bb182:
    assume {:verifier.code 0} true;
    assume $i638 == 1;
    goto $bb19;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i633 == 1;
    goto $bb15;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb15;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 19);
    goto $bb10;

  $bb5:
    assume $i38 == 1;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p21, $mul.ref(0, 15240)), $mul.ref(178, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb3;

  $bb116_dummy:
    assume false;
    return;

  $bb114_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_996;

  $bb96_dummy:
    assume false;
    return;

  $bb91_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_949;

  $bb82_dummy:
    assume false;
    return;

  $bb76_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  $bb70_dummy:
    assume false;
    return;

  $bb64_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  $bb55_dummy:
    assume false;
    return;

  $bb53_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_754;

  $bb58_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_731;
}



const abituguru_remove: ref;

axiom abituguru_remove == $sub.ref(0, 258800);

procedure abituguru_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation abituguru_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i13: i32;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 15240)), $mul.ref(0, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} hwmon_device_unregister($p4);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} device_remove_file($p28, abituguru_sysfs_attr);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb4;

  $bb4:
    call $p14, $i15, $p18, $i19, $i20, $p24, $p25, $i26, $i27, $i13 := abituguru_remove_loop_$bb4($p0, $p2, $p14, $i15, $p18, $i19, $i20, $p24, $p25, $i26, $i27, $i13);
    goto $bb4_last;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i13);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i15, 56)), $mul.ref(0, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} device_remove_file($p14, $p18);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i13, 1);
    call {:si_unique_call 258} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref($i20, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i19;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 259832);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const hwmon_device_unregister: ref;

axiom hwmon_device_unregister == $sub.ref(0, 260864);

procedure hwmon_device_unregister($p0: ref);
  free requires assertsPassed;



implementation hwmon_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 261896);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 262928);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 262} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const platform_get_resource: ref;

axiom platform_get_resource == $sub.ref(0, 263960);

procedure platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} {:cexpr "platform_get_resource:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 265} {:cexpr "platform_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p3 := external_alloc();
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 264992);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 266024);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    return;
}



const abituguru_detect_bank1_sensor_type: ref;

axiom abituguru_detect_bank1_sensor_type == $sub.ref(0, 267056);

procedure abituguru_detect_bank1_sensor_type($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.11, $M.12, $M.22, $M.23, $M.24, $CurrAddr;



implementation abituguru_detect_bank1_sensor_type($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i1;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i8;
  var $i64: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i24;
  var $i75: i24;
  var $i76: i24;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i1;
  var $i84: i32;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i91: i8;
  var $i95: i32;
  var $i96: i8;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i64;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i64;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i8;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i24;
  var $i142: i24;
  var $i143: i24;
  var $p144: ref;
  var $p145: ref;
  var $i146: i8;
  var $i147: i64;
  var $i148: i64;
  var $i149: i64;
  var $i150: i1;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i24;
  var $i160: i24;
  var $i161: i24;
  var $p162: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i64;
  var $i166: i64;
  var $i167: i64;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i24;
  var $i178: i24;
  var $i179: i24;
  var $p180: ref;
  var $p181: ref;
  var $i182: i8;
  var $i183: i64;
  var $i184: i64;
  var $i185: i64;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $i191: i8;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i64;
  var $p199: ref;
  var $i200: i64;
  var $p202: ref;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i32;
  var $i207: i64;
  var $p208: ref;
  var $i209: i8;
  var $i210: i32;
  var $i211: i32;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i8;
  var $p218: ref;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i222: i8;
  var $i223: i32;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i24;
  var $i235: i24;
  var $i236: i24;
  var $p237: ref;
  var $p238: ref;
  var $i239: i8;
  var $i240: i64;
  var $i241: i64;
  var $i242: i64;
  var $i243: i1;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i24;
  var $i253: i24;
  var $i254: i24;
  var $p255: ref;
  var $p256: ref;
  var $i257: i8;
  var $i258: i64;
  var $i259: i64;
  var $i260: i64;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i24;
  var $i271: i24;
  var $i272: i24;
  var $p273: ref;
  var $p274: ref;
  var $i275: i8;
  var $i276: i64;
  var $i277: i64;
  var $i278: i64;
  var $i279: i1;
  var $i100: i32;
  var $i280: i32;
  var $i281: i8;
  var $p282: ref;
  var $p283: ref;
  var $i284: i64;
  var $p285: ref;
  var $i286: i32;
  var $i287: i1;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $p292: ref;
  var $i51: i32;
  var $i294: i32;
  var $i295: i8;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $p299: ref;
  var $i300: i32;
  var $i301: i1;
  var $i302: i32;
  var $i303: i8;
  var $p304: ref;
  var $p305: ref;
  var $i306: i64;
  var $p307: ref;
  var $i308: i32;
  var $i309: i1;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i64;
  var vslice_dummy_var_48: i64;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $p3 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 280} {:cexpr "abituguru_detect_bank1_sensor_type:arg:sensor_addr"} boogie_si_record_i8($i1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref($i15, 4));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.20, $p16);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i18 := $sge.i32($i17, 0);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i1);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i54 := abituguru_read($p0, 33, $i53, $p2, 1, 3);
    call {:si_unique_call 285} {:cexpr "tmp___0"} boogie_si_record_i32($i54);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 1);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.21, $p2);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i58 := $ule.i32($i57, 9);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i58 == 1);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.21, $p2);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i61 := $ugt.i32($i60, 250);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i66 := $M.3;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i67 := $sgt.i32($i66, 1);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.21, $p2);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i87 := $ule.i32($i86, 240);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i87 == 1);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p92, 2);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p93, 5);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p94, 10);
    assume {:verifier.code 0} true;
    $i91 := 32;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i1);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p3);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i98 := abituguru_write($p0, 35, $i96, $p97, 3);
    call {:si_unique_call 291} {:cexpr "tmp___2"} boogie_si_record_i32($i98);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 3);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p101 := get_current();
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 11712)), $mul.ref(11696, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $M.11 := $store.i64($M.11, $p102, 0);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $M.23 := $store.i64($M.23, $p6, 2);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p103 := get_current();
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.23, $p6);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p103, $mul.ref(0, 11712)), $mul.ref(0, 1));
    call {:si_unique_call 294} $i106 := devirtbounce(0, $p105, $i104, $p105);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $M.23 := $store.i64($M.23, $p6, $i106);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_47 := schedule_timeout(5);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p3);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i109 := abituguru_read($p0, 32, 0, $p108, 3, 3);
    call {:si_unique_call 297} {:cexpr "tmp___8"} boogie_si_record_i32($i109);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 3);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i32($i1);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i112 := $udiv.i32($i111, 8);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i112);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref($i113, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.22, $p114);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i1);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 7);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i119 := $ashr.i32($i116, $i118);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 1);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i121 == 1);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i169 := $M.3;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i170 := $sgt.i32($i169, 1);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p187, 1);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p188, 5);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p189, 10);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i1);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i32.i8($i190);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p3);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i193 := abituguru_write($p0, 35, $i191, $p192, 3);
    call {:si_unique_call 307} {:cexpr "tmp___13"} boogie_si_record_i32($i193);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 3);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p195 := get_current();
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p195, $mul.ref(0, 11712)), $mul.ref(11696, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.11 := $store.i64($M.11, $p196, 0);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p10, 2);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p197 := get_current();
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i198 := $load.i64($M.24, $p10);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p197, $mul.ref(0, 11712)), $mul.ref(0, 1));
    call {:si_unique_call 313} $i200 := devirtbounce(0, $p199, $i198, $p199);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p10, $i200);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} vslice_dummy_var_48 := schedule_timeout(12);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p3);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i203 := abituguru_read($p0, 32, 0, $p202, 3, 3);
    call {:si_unique_call 316} {:cexpr "tmp___19"} boogie_si_record_i32($i203);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 3);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i205 := $zext.i8.i32($i1);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i206 := $udiv.i32($i205, 8);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i207 := $sext.i32.i64($i206);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref($i207, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i209 := $load.i8($M.22, $p208);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i209);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i212 := $and.i32($i211, 7);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i213 := $ashr.i32($i210, $i212);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, 1);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i215 == 1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i262 := $M.3;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i263 := $sgt.i32($i262, 1);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i100 := 2;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i280 := $zext.i8.i32($i1);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i281 := $trunc.i32.i8($i280);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p283 := $bitcast.ref.ref($p282);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i64($i1);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($p283, $mul.ref($i284, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i286 := abituguru_write($p0, 35, $i281, $p285, 3);
    call {:si_unique_call 329} {:cexpr "tmp___24"} boogie_si_record_i32($i286);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 3);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i288 := 0;
    assume {:branchcond $i287} true;
    goto $bb103, $bb105;

  $bb105:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i1);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i32.i8($i294);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p296);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i298 := $zext.i8.i64($i1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($p297, $mul.ref($i298, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i300 := abituguru_write($p0, 35, $i295, $p299, 3);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, 3);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i288 := 1;
    assume {:branchcond $i301} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i302 := $zext.i8.i32($i1);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i32.i8($i302);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15074, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p305 := $bitcast.ref.ref($p304);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i64($i1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($p305, $mul.ref($i306, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i308 := abituguru_write($p0, 35, $i303, $p307, 3);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 3);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i288 := 2;
    assume {:branchcond $i309} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i289 := 3;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 3);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i51 := $i100;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb110:
    assume $i290 == 1;
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p291 := $M.18;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p292 := $M.19;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} vslice_dummy_var_49 := printk.ref.ref.ref(.str.38, $p291, $p292);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 19);
    goto $bb12;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i309 == 1;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i289 := $i288;
    goto $bb106;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb104;

  $bb95:
    assume $i263 == 1;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p264, .str.3);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p265, .str.20);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p266, .str.5);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p267, .str.36);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p268);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i270 := $load.i24($M.8, $p269);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i271 := $and.i24($i270, $sub.i24(0, 262144));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i272 := $or.i24($i271, 600);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p269, $i272);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p273, 1);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i275 := $load.i8($M.9, $p274);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i64($i275);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i277 := $and.i64($i276, 1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i278 := ldv__builtin_expect($i277, 0);
    call {:si_unique_call 326} {:cexpr "tmp___23"} boogie_si_record_i64($i278);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i279 := $ne.i64($i278, 0);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb97:
    assume $i279 == 1;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} __dynamic_pr_debug.ref.ref($p13, .str.37);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb74:
    assume $i215 == 1;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i216 := $zext.i8.i32($i1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i32.i8($i216);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p3);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i219 := abituguru_read($p0, 34, $i217, $p218, 3, 3);
    call {:si_unique_call 318} {:cexpr "tmp___20"} boogie_si_record_i32($i219);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 3);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.22, $p221);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i222);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i224 := $and.i32($i223, 16);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i225 == 1);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i244 := $M.3;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i245 := $sgt.i32($i244, 1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb87:
    assume $i245 == 1;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p246, .str.3);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p247, .str.20);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p248, .str.5);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p249, .str.34);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i252 := $load.i24($M.8, $p251);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i253 := $and.i24($i252, $sub.i24(0, 262144));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i254 := $or.i24($i253, 597);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p251, $i254);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p255, 1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i257 := $load.i8($M.9, $p256);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i64($i257);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i259 := $and.i64($i258, 1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i260 := ldv__builtin_expect($i259, 0);
    call {:si_unique_call 323} {:cexpr "tmp___22"} boogie_si_record_i64($i260);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i261 := $ne.i64($i260, 0);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb89:
    assume $i261 == 1;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} __dynamic_pr_debug.ref.ref($p12, .str.35);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb79:
    assume $i225 == 1;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i226 := $M.3;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i227 := $sgt.i32($i226, 1);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i100 := 1;
    goto $bb34;

  $bb81:
    assume $i227 == 1;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p228, .str.3);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p229, .str.20);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p230, .str.5);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p231, .str.32);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p232);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i234 := $load.i24($M.8, $p233);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i235 := $and.i24($i234, $sub.i24(0, 262144));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i236 := $or.i24($i235, 592);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p233, $i236);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p237, 1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.9, $p238);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i64($i239);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i241 := $and.i64($i240, 1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i242 := ldv__builtin_expect($i241, 0);
    call {:si_unique_call 320} {:cexpr "tmp___21"} boogie_si_record_i64($i242);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i243 := $ne.i64($i242, 0);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb83:
    assume $i243 == 1;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} __dynamic_pr_debug.ref.ref($p11, .str.33);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb76:
    assume $i220 == 1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32(0, 19);
    goto $bb34;

  $bb71:
    assume $i204 == 1;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32(0, 19);
    goto $bb34;

  $bb67:
    assume $i194 == 1;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32(0, 19);
    goto $bb34;

  $bb61:
    assume $i170 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p171, .str.3);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p172, .str.20);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p173, .str.5);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p174, .str.30);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i177 := $load.i24($M.8, $p176);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i178 := $and.i24($i177, $sub.i24(0, 262144));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i179 := $or.i24($i178, 563);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p176, $i179);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p180, 1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.9, $p181);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i64($i182);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i184 := $and.i64($i183, 1);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i185 := ldv__builtin_expect($i184, 0);
    call {:si_unique_call 309} {:cexpr "tmp___12"} boogie_si_record_i64($i185);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i186 := $ne.i64($i185, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i186 == 1;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} __dynamic_pr_debug.ref.ref($p9, .str.31);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb40:
    assume $i121 == 1;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i1);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i8($i122);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p3);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i125 := abituguru_read($p0, 34, $i123, $p124, 3, 3);
    call {:si_unique_call 299} {:cexpr "tmp___9"} boogie_si_record_i32($i125);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 3);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.22, $p127);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i91);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i129, $i130);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i132 == 1);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i151 := $M.3;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i152 := $sgt.i32($i151, 1);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb53:
    assume $i152 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p153, .str.3);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p154, .str.20);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p155, .str.5);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p156, .str.28);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i159 := $load.i24($M.8, $p158);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i160 := $and.i24($i159, $sub.i24(0, 262144));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i161 := $or.i24($i160, 560);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p158, $i161);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p162, 1);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.9, $p163);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i64($i164);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i166 := $and.i64($i165, 1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i167 := ldv__builtin_expect($i166, 0);
    call {:si_unique_call 304} {:cexpr "tmp___11"} boogie_si_record_i64($i167);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i168 := $ne.i64($i167, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb55:
    assume $i168 == 1;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} __dynamic_pr_debug.ref.ref($p8, .str.29);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb45:
    assume $i132 == 1;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i133 := $M.3;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i134 := $sgt.i32($i133, 1);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i100 := 0;
    goto $bb34;

  $bb47:
    assume $i134 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p135, .str.3);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p136, .str.20);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p137, .str.5);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p138, .str.26);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i141 := $load.i24($M.8, $p140);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i142 := $and.i24($i141, $sub.i24(0, 262144));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i143 := $or.i24($i142, 555);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p140, $i143);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p144, 1);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.9, $p145);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i64($i146);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i148 := $and.i64($i147, 1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i149 := ldv__builtin_expect($i148, 0);
    call {:si_unique_call 301} {:cexpr "tmp___10"} boogie_si_record_i64($i149);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i149, 0);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb49:
    assume $i150 == 1;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} __dynamic_pr_debug.ref.ref($p7, .str.27);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb42:
    assume $i126 == 1;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32(0, 19);
    goto $bb34;

  $bb37:
    assume $i110 == 1;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32(0, 19);
    goto $bb34;

  $bb32:
    assume $i99 == 1;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32(0, 19);
    goto $bb34;

  $bb29:
    assume $i87 == 1;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p88, 4);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p89, $sub.i8(0, 11));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.22 := $store.i8($M.22, $p90, $sub.i8(0, 6));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i91 := 64;
    goto $bb31;

  $bb23:
    assume $i67 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, .str.3);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p69, .str.20);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p70, .str.5);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p71, .str.24);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i74 := $load.i24($M.8, $p73);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i75 := $and.i24($i74, $sub.i24(0, 262144));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i76 := $or.i24($i75, 518);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p73, $i76);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p77, 1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.9, $p78);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i64($i79);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i81 := $and.i64($i80, 1);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i82 := ldv__builtin_expect($i81, 0);
    call {:si_unique_call 288} {:cexpr "tmp___1"} boogie_si_record_i64($i82);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i83 == 1;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} __dynamic_pr_debug.ref.ref.i32($p5, .str.25, $i84);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.21, $p2);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vslice_dummy_var_46 := printk.ref.i32.i32(.str.23, $i62, $i64);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i51 := 2;
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb18;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 19);
    goto $bb12;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref($i20, 4));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.20, $p21);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i22, 2);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i24 := $M.3;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 1);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i1);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref($i48, 4));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.20, $p49);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb12;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p26, .str.3);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p27, .str.20);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p28, .str.5);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p29, .str.21);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.8, $p31);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 496);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p31, $i34);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p35, 1);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.9, $p36);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 282} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i1);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref($i43, 4));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.20, $p44);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} __dynamic_pr_debug.ref.ref.i32.i32($p4, .str.22, $i45, $i46);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 268088);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 269120);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const abituguru_detect_no_bank2_sensors: ref;

axiom abituguru_detect_no_bank2_sensors == $sub.ref(0, 270152);

procedure abituguru_detect_no_bank2_sensors($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation abituguru_detect_no_bank2_sensors($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i24;
  var $i70: i24;
  var $i71: i24;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i79: i64;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i24;
  var $i102: i24;
  var $i103: i24;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $i111: i64;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i24;
  var $i133: i24;
  var $i134: i24;
  var $p135: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i64;
  var $i139: i64;
  var $i140: i64;
  var $i141: i1;
  var $i142: i64;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i85: i32;
  var $i148: i8;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i24;
  var $i159: i24;
  var $i160: i24;
  var $p161: ref;
  var $p162: ref;
  var $i163: i8;
  var $i164: i64;
  var $i165: i64;
  var $i166: i64;
  var $i167: i1;
  var $p168: ref;
  var $i169: i8;
  var $i170: i32;
  var $p173: ref;
  var $i174: i8;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $p180: ref;
  var $i181: i8;
  var $i182: i32;
  var $i183: i1;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i1;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $p199: ref;
  var $i200: i8;
  var $i201: i32;
  var $i202: i1;
  var $p205: ref;
  var $i206: i8;
  var $i207: i32;
  var $i208: i1;
  var $p211: ref;
  var $i212: i8;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $p218: ref;
  var $i219: i8;
  var $i220: i32;
  var $i221: i1;
  var $p224: ref;
  var $i225: i8;
  var $i226: i32;
  var $i227: i1;
  var $p230: ref;
  var $i231: i8;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $p237: ref;
  var $i238: i8;
  var $i239: i32;
  var $i240: i1;
  var $p243: ref;
  var $i244: i8;
  var $i245: i32;
  var $i246: i1;
  var $p249: ref;
  var $i250: i8;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $p256: ref;
  var $i257: i8;
  var $i258: i32;
  var $i259: i1;
  var $p262: ref;
  var $i263: i8;
  var $i264: i32;
  var $i265: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i7 := $M.25;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $M.3;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, 1);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, $sub.i32(0, 202));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i60 := 0;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i90, 5);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i92 := 0;
    assume true;
    goto $bb33, $bb35;

  $bb35:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i122 := $sgt.i32($i121, 50);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i123 := 0;
    assume true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(1, 2)), $mul.ref(0, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i174 := $load.i8($M.0, $p173);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i174);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i176 := $and.i32($i175, $sub.i32(0, 202));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i60 := 1;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.0, $p180);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i183 := $slt.i32($i182, 5);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i92 := 1;
    assume {:branchcond $i183} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(1, 2)), $mul.ref(1, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.0, $p186);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i189 := $sgt.i32($i188, 50);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i123 := 1;
    assume {:branchcond $i189} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(2, 2)), $mul.ref(0, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p192);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i195 := $and.i32($i194, $sub.i32(0, 202));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i60 := 2;
    assume {:branchcond $i196} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(2, 2)), $mul.ref(1, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.0, $p199);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i32($i200);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i201, 5);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i92 := 2;
    assume {:branchcond $i202} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(2, 2)), $mul.ref(1, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.0, $p205);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i206);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i208 := $sgt.i32($i207, 50);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i123 := 2;
    assume {:branchcond $i208} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(3, 2)), $mul.ref(0, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i212 := $load.i8($M.0, $p211);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i213 := $zext.i8.i32($i212);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, $sub.i32(0, 202));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i60 := 3;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(3, 2)), $mul.ref(1, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i219 := $load.i8($M.0, $p218);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i220 := $zext.i8.i32($i219);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i221 := $slt.i32($i220, 5);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i92 := 3;
    assume {:branchcond $i221} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(3, 2)), $mul.ref(1, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i225 := $load.i8($M.0, $p224);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i32($i225);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i227 := $sgt.i32($i226, 50);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i123 := 3;
    assume {:branchcond $i227} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(4, 2)), $mul.ref(0, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i231 := $load.i8($M.0, $p230);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i233 := $and.i32($i232, $sub.i32(0, 202));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i60 := 4;
    assume {:branchcond $i234} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(4, 2)), $mul.ref(1, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.0, $p237);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i238);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i240 := $slt.i32($i239, 5);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i92 := 4;
    assume {:branchcond $i240} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(4, 2)), $mul.ref(1, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i244 := $load.i8($M.0, $p243);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i244);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i246 := $sgt.i32($i245, 50);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i123 := 4;
    assume {:branchcond $i246} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(5, 2)), $mul.ref(0, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i250 := $load.i8($M.0, $p249);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i251 := $zext.i8.i32($i250);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i252 := $and.i32($i251, $sub.i32(0, 202));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 0);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i60 := 5;
    assume {:branchcond $i253} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(5, 2)), $mul.ref(1, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i257 := $load.i8($M.0, $p256);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i257);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i259 := $slt.i32($i258, 5);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i92 := 5;
    assume {:branchcond $i259} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref(5, 2)), $mul.ref(1, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.0, $p262);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i32($i263);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i265 := $sgt.i32($i264, 50);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i123 := 5;
    assume {:branchcond $i265} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i85 := 6;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i8($i85);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15188, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, $i148);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i150 := $M.3;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i151 := $sgt.i32($i150, 1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb55:
    assume $i151 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p152, .str.3);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p153, .str.70);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p154, .str.5);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p155, .str.81);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i158 := $load.i24($M.8, $p157);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i159 := $and.i24($i158, $sub.i24(0, 262144));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i160 := $or.i24($i159, 694);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p157, $i160);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p161, 1);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.9, $p162);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i64($i163);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i165 := $and.i64($i164, 1);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i166 := ldv__builtin_expect($i165, 0);
    call {:si_unique_call 355} {:cexpr "tmp___4"} boogie_si_record_i64($i166);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i167 := $ne.i64($i166, 0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume $i167 == 1;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15188, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.0, $p168);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i169);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} __dynamic_pr_debug.ref.ref.i32($p6, .str.82, $i170);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i265 == 1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i124 := $M.3;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i125 := $sgt.i32($i124, 1);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i85 := $i123;
    goto $bb31;

  $bb46:
    assume $i125 == 1;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p126, .str.3);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p127, .str.70);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p128, .str.5);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p129, .str.79);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i132 := $load.i24($M.8, $p131);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i133 := $and.i24($i132, $sub.i24(0, 262144));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i134 := $or.i24($i133, 687);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p131, $i134);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p135, 1);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.9, $p136);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i64($i137);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i139 := $and.i64($i138, 1);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i140 := ldv__builtin_expect($i139, 0);
    call {:si_unique_call 352} {:cexpr "tmp___3"} boogie_si_record_i64($i140);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, 0);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i141 == 1;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i123);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref($i142, 2)), $mul.ref(1, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p145);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} __dynamic_pr_debug.ref.ref.i32.i32.i32($p5, .str.80, $i123, $i147, 50);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i93 := $M.3;
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i94 := $sgt.i32($i93, 1);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i85 := $i92;
    goto $bb31;

  $bb36:
    assume $i94 == 1;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p95, .str.3);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p96, .str.70);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p97, .str.5);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p98, .str.77);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i101 := $load.i24($M.8, $p100);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i102 := $and.i24($i101, $sub.i24(0, 262144));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i103 := $or.i24($i102, 678);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p100, $i103);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p104, 1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.9, $p105);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i64($i106);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i108 := $and.i64($i107, 1);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i109 := ldv__builtin_expect($i108, 0);
    call {:si_unique_call 349} {:cexpr "tmp___2"} boogie_si_record_i64($i109);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i110 == 1;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i111 := $sext.i32.i64($i92);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref($i111, 2)), $mul.ref(1, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} __dynamic_pr_debug.ref.ref.i32.i32.i32($p4, .str.78, $i92, $i116, 5);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i253 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i61 := $M.3;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, 1);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i85 := $i60;
    goto $bb31;

  $bb25:
    assume $i62 == 1;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p63, .str.3);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p64, .str.70);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p65, .str.5);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p66, .str.75);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i69 := $load.i24($M.8, $p68);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i70 := $and.i24($i69, $sub.i24(0, 262144));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i71 := $or.i24($i70, 667);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p68, $i71);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p72, 1);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.9, $p73);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i64($i74);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 1);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 346} {:cexpr "tmp___1"} boogie_si_record_i64($i77);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i78 == 1;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i60);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15195, 1)), $mul.ref($i79, 2)), $mul.ref(0, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} __dynamic_pr_debug.ref.ref.i32.i32($p3, .str.76, $i60, $i84);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i246 == 1;
    goto $bb44;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb34;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i234 == 1;
    goto $bb23;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb44;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i221 == 1;
    goto $bb34;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb23;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb44;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb34;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb23;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb44;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb34;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i177 == 1;
    goto $bb23;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb44;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb34;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb23;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p37, .str.3);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p38, .str.70);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, .str.5);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p40, .str.73);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.8, $p42);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 654);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p42, $i45);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p46, 1);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.9, $p47);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 343} {:cexpr "tmp___0"} boogie_si_record_i64($i51);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} __dynamic_pr_debug.ref.ref($p2, .str.74);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i9 := $M.25;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i10 := $sle.i32($i9, 6);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i11 := $M.25;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15188, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i14 := $M.3;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.3);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p17, .str.70);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p18, .str.5);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p19, .str.71);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.8, $p21);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 650);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p21, $i24);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p25, 1);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.9, $p26);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 340} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15188, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} __dynamic_pr_debug.ref.ref.i32($p1, .str.72, $i34);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const abituguru_detect_no_pwms: ref;

axiom abituguru_detect_no_pwms == $sub.ref(0, 271184);

procedure abituguru_detect_no_pwms($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation abituguru_detect_no_pwms($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $i82: i64;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $i96: i64;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i111: i32;
  var $i112: i8;
  var $i113: i32;
  var $i114: i1;
  var $i95: i32;
  var $i115: i32;
  var $i94: i32;
  var $i110: i32;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i24;
  var $i131: i24;
  var $i132: i24;
  var $p133: ref;
  var $p134: ref;
  var $i135: i8;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i1;
  var $i140: i64;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i32;
  var $i147: i8;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i32;
  var $i157: i8;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i24;
  var $i167: i24;
  var $i168: i24;
  var $p169: ref;
  var $p170: ref;
  var $i171: i8;
  var $i172: i64;
  var $i173: i64;
  var $i174: i64;
  var $i175: i1;
  var $i176: i64;
  var $i177: i64;
  var $p180: ref;
  var $i181: i8;
  var $i182: i32;
  var $i183: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i24;
  var $i196: i24;
  var $i197: i24;
  var $p198: ref;
  var $p199: ref;
  var $i200: i8;
  var $i201: i64;
  var $i202: i64;
  var $i203: i64;
  var $i204: i1;
  var $i205: i64;
  var $i206: i64;
  var $p209: ref;
  var $i210: i8;
  var $i211: i32;
  var $i212: i64;
  var $p213: ref;
  var $i214: i8;
  var $i215: i32;
  var $p218: ref;
  var $i219: i8;
  var $i220: i32;
  var $p223: ref;
  var $i224: i8;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i24;
  var $i237: i24;
  var $i238: i24;
  var $p239: ref;
  var $p240: ref;
  var $i241: i8;
  var $i242: i64;
  var $i243: i64;
  var $i244: i64;
  var $i245: i1;
  var $i246: i64;
  var $p249: ref;
  var $i250: i8;
  var $i251: i32;
  var $i252: i64;
  var $p255: ref;
  var $i256: i8;
  var $i257: i32;
  var $p260: ref;
  var $i261: i8;
  var $i262: i32;
  var $p265: ref;
  var $i266: i8;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $i278: i24;
  var $i279: i24;
  var $i280: i24;
  var $p281: ref;
  var $p282: ref;
  var $i283: i8;
  var $i284: i64;
  var $i285: i64;
  var $i286: i64;
  var $i287: i1;
  var $i288: i64;
  var $p291: ref;
  var $i292: i8;
  var $i293: i32;
  var $i294: i64;
  var $p297: ref;
  var $i298: i8;
  var $i299: i32;
  var $i88: i32;
  var $i184: i32;
  var $i300: i8;
  var $p301: ref;
  var $i302: i32;
  var $i303: i1;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $i310: i24;
  var $i311: i24;
  var $i312: i24;
  var $p313: ref;
  var $p314: ref;
  var $i315: i8;
  var $i316: i64;
  var $i317: i64;
  var $i318: i64;
  var $i319: i1;
  var $p320: ref;
  var $i321: i8;
  var $i322: i32;
  var $i323: i8;
  var $p326: ref;
  var $i327: i8;
  var $i328: i32;
  var $i329: i32;
  var $i330: i1;
  var $i331: i8;
  var $p334: ref;
  var $i335: i8;
  var $i336: i32;
  var $i337: i32;
  var $i338: i1;
  var $p341: ref;
  var $i342: i8;
  var $i343: i32;
  var $i344: i1;
  var $i345: i8;
  var $p348: ref;
  var $i349: i8;
  var $i350: i32;
  var $i351: i32;
  var $i352: i1;
  var $p355: ref;
  var $i356: i8;
  var $i357: i32;
  var $i358: i1;
  var $p361: ref;
  var $i362: i8;
  var $i363: i32;
  var $i364: i32;
  var $i365: i1;
  var $p367: ref;
  var $i368: i8;
  var $i369: i32;
  var $i370: i1;
  var $i372: i32;
  var $i373: i64;
  var $p376: ref;
  var $i377: i8;
  var $i378: i32;
  var $p381: ref;
  var $i382: i8;
  var $i383: i32;
  var $i384: i32;
  var $i385: i1;
  var $i387: i32;
  var $i388: i8;
  var $i389: i32;
  var $i390: i1;
  var $i391: i32;
  var $i371: i32;
  var $i386: i32;
  var $i392: i32;
  var $p394: ref;
  var $i395: i8;
  var $i396: i32;
  var $i397: i1;
  var $i398: i8;
  var $p401: ref;
  var $i402: i8;
  var $i403: i32;
  var $i404: i32;
  var $i405: i1;
  var $i406: i8;
  var $p409: ref;
  var $i410: i8;
  var $i411: i32;
  var $i412: i32;
  var $i413: i1;
  var $i414: i8;
  var $p417: ref;
  var $i418: i8;
  var $i419: i32;
  var $i420: i32;
  var $i421: i1;
  var $p424: ref;
  var $i425: i8;
  var $i426: i32;
  var $i427: i1;
  var $i428: i8;
  var $p431: ref;
  var $i432: i8;
  var $i433: i32;
  var $i434: i32;
  var $i435: i1;
  var $p438: ref;
  var $i439: i8;
  var $i440: i32;
  var $i441: i1;
  var $p444: ref;
  var $i445: i8;
  var $i446: i32;
  var $p449: ref;
  var $i450: i8;
  var $i451: i32;
  var $i452: i1;
  var $p455: ref;
  var $i456: i8;
  var $i457: i32;
  var $p460: ref;
  var $i461: i8;
  var $i462: i32;
  var $i463: i1;
  var $p466: ref;
  var $i467: i8;
  var $i468: i32;
  var $i469: i32;
  var $i470: i1;
  var $p472: ref;
  var $i473: i8;
  var $i474: i32;
  var $i475: i1;
  var $i477: i32;
  var $i478: i64;
  var $p481: ref;
  var $i482: i8;
  var $i483: i32;
  var $p486: ref;
  var $i487: i8;
  var $i488: i32;
  var $i489: i32;
  var $i490: i1;
  var $i492: i32;
  var $i493: i8;
  var $i494: i32;
  var $i495: i1;
  var $i496: i32;
  var $i476: i32;
  var $i491: i32;
  var $i497: i32;
  var $p499: ref;
  var $i500: i8;
  var $i501: i32;
  var $i502: i1;
  var $i503: i8;
  var $p506: ref;
  var $i507: i8;
  var $i508: i32;
  var $i509: i32;
  var $i510: i1;
  var $i511: i8;
  var $p514: ref;
  var $i515: i8;
  var $i516: i32;
  var $i517: i32;
  var $i518: i1;
  var $i519: i8;
  var $p522: ref;
  var $i523: i8;
  var $i524: i32;
  var $i525: i32;
  var $i526: i1;
  var $p529: ref;
  var $i530: i8;
  var $i531: i32;
  var $i532: i1;
  var $i533: i8;
  var $p536: ref;
  var $i537: i8;
  var $i538: i32;
  var $i539: i32;
  var $i540: i1;
  var $p543: ref;
  var $i544: i8;
  var $i545: i32;
  var $i546: i1;
  var $p549: ref;
  var $i550: i8;
  var $i551: i32;
  var $p554: ref;
  var $i555: i8;
  var $i556: i32;
  var $i557: i1;
  var $p560: ref;
  var $i561: i8;
  var $i562: i32;
  var $p565: ref;
  var $i566: i8;
  var $i567: i32;
  var $i568: i1;
  var $p571: ref;
  var $i572: i8;
  var $i573: i32;
  var $i574: i32;
  var $i575: i1;
  var $p577: ref;
  var $i578: i8;
  var $i579: i32;
  var $i580: i1;
  var $i582: i32;
  var $i583: i64;
  var $p586: ref;
  var $i587: i8;
  var $i588: i32;
  var $p591: ref;
  var $i592: i8;
  var $i593: i32;
  var $i594: i32;
  var $i595: i1;
  var $i597: i32;
  var $i598: i8;
  var $i599: i32;
  var $i600: i1;
  var $i601: i32;
  var $i581: i32;
  var $i596: i32;
  var $i602: i32;
  var $p604: ref;
  var $i605: i8;
  var $i606: i32;
  var $i607: i1;
  var $i608: i8;
  var $p611: ref;
  var $i612: i8;
  var $i613: i32;
  var $i614: i32;
  var $i615: i1;
  var $i616: i8;
  var $p619: ref;
  var $i620: i8;
  var $i621: i32;
  var $i622: i32;
  var $i623: i1;
  var $i624: i8;
  var $p627: ref;
  var $i628: i8;
  var $i629: i32;
  var $i630: i32;
  var $i631: i1;
  var $p634: ref;
  var $i635: i8;
  var $i636: i32;
  var $i637: i1;
  var $i638: i8;
  var $p641: ref;
  var $i642: i8;
  var $i643: i32;
  var $i644: i32;
  var $i645: i1;
  var $p648: ref;
  var $i649: i8;
  var $i650: i32;
  var $i651: i1;
  var $p654: ref;
  var $i655: i8;
  var $i656: i32;
  var $p659: ref;
  var $i660: i8;
  var $i661: i32;
  var $i662: i1;
  var $p665: ref;
  var $i666: i8;
  var $i667: i32;
  var $p670: ref;
  var $i671: i8;
  var $i672: i32;
  var $i673: i1;
  var $p676: ref;
  var $i677: i8;
  var $i678: i32;
  var $i679: i32;
  var $i680: i1;
  var $p682: ref;
  var $i683: i8;
  var $i684: i32;
  var $i685: i1;
  var $i687: i32;
  var $i688: i64;
  var $p691: ref;
  var $i692: i8;
  var $i693: i32;
  var $p696: ref;
  var $i697: i8;
  var $i698: i32;
  var $i699: i32;
  var $i700: i1;
  var $i702: i32;
  var $i703: i8;
  var $i704: i32;
  var $i705: i1;
  var $i706: i32;
  var $i686: i32;
  var $i701: i32;
  var $i707: i32;
  var $p709: ref;
  var $i710: i8;
  var $i711: i32;
  var $i712: i1;
  var $i713: i8;
  var $p716: ref;
  var $i717: i8;
  var $i718: i32;
  var $i719: i32;
  var $i720: i1;
  var $i721: i8;
  var $p724: ref;
  var $i725: i8;
  var $i726: i32;
  var $i727: i32;
  var $i728: i1;
  var $i729: i8;
  var $p732: ref;
  var $i733: i8;
  var $i734: i32;
  var $i735: i32;
  var $i736: i1;
  var $p739: ref;
  var $i740: i8;
  var $i741: i32;
  var $i742: i1;
  var $i743: i8;
  var $p746: ref;
  var $i747: i8;
  var $i748: i32;
  var $i749: i32;
  var $i750: i1;
  var $p753: ref;
  var $i754: i8;
  var $i755: i32;
  var $i756: i1;
  var $p759: ref;
  var $i760: i8;
  var $i761: i32;
  var $p764: ref;
  var $i765: i8;
  var $i766: i32;
  var $i767: i1;
  var $p770: ref;
  var $i771: i8;
  var $i772: i32;
  var $p775: ref;
  var $i776: i8;
  var $i777: i32;
  var $i778: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i10 := $M.26;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i38 := $M.3;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i32($i38, 1);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(0, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, $sub.i32(0, 144));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i63 := 0;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(1, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i93 := $sgt.i32($i92, 0);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i94 := 0;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i110 := $i94;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(1, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, $i110);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i121 := 0;
    assume true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i147 := $sub.i8(0, 86);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(1, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p150);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i147);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i154 := $slt.i32($i152, $i153);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 0, 1, $i147;
    assume true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i185, $i186 := 0, 1;
    assume {:branchcond 0} true;
    goto $bb77, $bb79;

  $bb79:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i323 := $sub.i8(0, 86);
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(2, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.0, $p326);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i328 := $zext.i8.i32($i327);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i32($i323);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i330 := $slt.i32($i328, $i329);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 0, 2, $i323;
    assume {:branchcond $i330} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i185, $i186 := 0, 2;
    assume {:branchcond 0} true;
    goto $bb129, $bb130;

  $bb130:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i331 := 25;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.0, $p334);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i337 := $zext.i8.i32($i331);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i338 := $slt.i32($i336, $i337);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 0, 3, $i331;
    assume {:branchcond $i338} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i342 := $load.i8($M.0, $p341);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i343 := $zext.i8.i32($i342);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i344 := $sgt.i32($i343, 75);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i185, $i186 := 0, 3;
    assume {:branchcond $i344} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i345 := 25;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i349 := $load.i8($M.0, $p348);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i350 := $zext.i8.i32($i349);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i351 := $zext.i8.i32($i345);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i352 := $slt.i32($i350, $i351);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 0, 4, $i345;
    assume {:branchcond $i352} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i356 := $load.i8($M.0, $p355);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i32($i356);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i358 := $sgt.i32($i357, 75);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i185, $i186 := 0, 4;
    assume {:branchcond $i358} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(1, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i219 := $load.i8($M.0, $p218);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i220 := $zext.i8.i32($i219);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(2, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i224 := $load.i8($M.0, $p223);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i225 := $zext.i8.i32($i224);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i226 := $sge.i32($i220, $i225);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i227 := 0;
    assume {:branchcond $i226} true;
    goto $bb89, $bb91;

  $bb91:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i261 := $load.i8($M.0, $p260);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i32($i261);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i266 := $load.i8($M.0, $p265);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i267 := $zext.i8.i32($i266);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i268 := $sge.i32($i262, $i267);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i269 := 0;
    assume {:branchcond $i268} true;
    goto $bb99, $bb101;

  $bb101:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(0, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i362 := $load.i8($M.0, $p361);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i363 := $zext.i8.i32($i362);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i364 := $and.i32($i363, $sub.i32(0, 144));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i365 := $ne.i32($i364, 0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i63 := 1;
    assume {:branchcond $i365} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(1, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i368 := $load.i8($M.0, $p367);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i369 := $zext.i8.i32($i368);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i370 := $sgt.i32($i369, 0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i371 := 0;
    assume {:branchcond $i370} true;
    goto $bb167, $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume !($i370 == 1);
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i392 := $i371;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(1, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i395 := $load.i8($M.0, $p394);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i396 := $zext.i8.i32($i395);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i397 := $eq.i32($i396, $i392);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i121 := 1;
    assume {:branchcond $i397} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i398 := $sub.i8(0, 86);
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(1, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i402 := $load.i8($M.0, $p401);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i403 := $zext.i8.i32($i402);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i404 := $zext.i8.i32($i398);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i405 := $slt.i32($i403, $i404);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 1, 1, $i398;
    assume {:branchcond $i405} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $i185, $i186 := 1, 1;
    assume {:branchcond 0} true;
    goto $bb196, $bb197;

  $bb197:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i406 := $sub.i8(0, 86);
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(2, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i410 := $load.i8($M.0, $p409);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i411 := $zext.i8.i32($i410);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i412 := $zext.i8.i32($i406);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i413 := $slt.i32($i411, $i412);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 1, 2, $i406;
    assume {:branchcond $i413} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i185, $i186 := 1, 2;
    assume {:branchcond 0} true;
    goto $bb212, $bb213;

  $bb213:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb216, $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $i414 := 25;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(3, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i418 := $load.i8($M.0, $p417);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i419 := $zext.i8.i32($i418);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i420 := $zext.i8.i32($i414);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i421 := $slt.i32($i419, $i420);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 1, 3, $i414;
    assume {:branchcond $i421} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(3, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i425 := $load.i8($M.0, $p424);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i426 := $zext.i8.i32($i425);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i427 := $sgt.i32($i426, 75);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i185, $i186 := 1, 3;
    assume {:branchcond $i427} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i428 := 25;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(4, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i432 := $load.i8($M.0, $p431);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i433 := $zext.i8.i32($i432);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i434 := $zext.i8.i32($i428);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i435 := $slt.i32($i433, $i434);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 1, 4, $i428;
    assume {:branchcond $i435} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(4, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i439 := $load.i8($M.0, $p438);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i440 := $zext.i8.i32($i439);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i441 := $sgt.i32($i440, 75);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i185, $i186 := 1, 4;
    assume {:branchcond $i441} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(1, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.0, $p444);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i446 := $zext.i8.i32($i445);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(2, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i450 := $load.i8($M.0, $p449);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i451 := $zext.i8.i32($i450);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i452 := $sge.i32($i446, $i451);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i227 := 1;
    assume {:branchcond $i452} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(3, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i456 := $load.i8($M.0, $p455);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i457 := $zext.i8.i32($i456);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(4, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i461 := $load.i8($M.0, $p460);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i462 := $zext.i8.i32($i461);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i463 := $sge.i32($i457, $i462);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i269 := 1;
    assume {:branchcond $i463} true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(0, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i467 := $load.i8($M.0, $p466);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i468 := $zext.i8.i32($i467);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i469 := $and.i32($i468, $sub.i32(0, 144));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i470 := $ne.i32($i469, 0);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i63 := 2;
    assume {:branchcond $i470} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(1, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i473 := $load.i8($M.0, $p472);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i474 := $zext.i8.i32($i473);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i475 := $sgt.i32($i474, 0);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i476 := 0;
    assume {:branchcond $i475} true;
    goto $bb258, $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    assume !($i475 == 1);
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $i497 := $i476;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(1, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i500 := $load.i8($M.0, $p499);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i501 := $zext.i8.i32($i500);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i502 := $eq.i32($i501, $i497);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i121 := 2;
    assume {:branchcond $i502} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb275, $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $i503 := $sub.i8(0, 86);
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(1, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i507 := $load.i8($M.0, $p506);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i508 := $zext.i8.i32($i507);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i509 := $zext.i8.i32($i503);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i510 := $slt.i32($i508, $i509);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 2, 1, $i503;
    assume {:branchcond $i510} true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $i185, $i186 := 2, 1;
    assume {:branchcond 0} true;
    goto $bb287, $bb288;

  $bb288:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb291, $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $i511 := $sub.i8(0, 86);
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(2, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i515 := $load.i8($M.0, $p514);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i516 := $zext.i8.i32($i515);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i517 := $zext.i8.i32($i511);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i518 := $slt.i32($i516, $i517);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 2, 2, $i511;
    assume {:branchcond $i518} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i518 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $i185, $i186 := 2, 2;
    assume {:branchcond 0} true;
    goto $bb303, $bb304;

  $bb304:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb307, $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $i519 := 25;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(3, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i523 := $load.i8($M.0, $p522);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i524 := $zext.i8.i32($i523);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i525 := $zext.i8.i32($i519);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i526 := $slt.i32($i524, $i525);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 2, 3, $i519;
    assume {:branchcond $i526} true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(3, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i530 := $load.i8($M.0, $p529);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i531 := $zext.i8.i32($i530);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i532 := $sgt.i32($i531, 75);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i185, $i186 := 2, 3;
    assume {:branchcond $i532} true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb323, $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    $i533 := 25;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(4, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i537 := $load.i8($M.0, $p536);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i538 := $zext.i8.i32($i537);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i539 := $zext.i8.i32($i533);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i540 := $slt.i32($i538, $i539);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 2, 4, $i533;
    assume {:branchcond $i540} true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i540 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(4, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i544 := $load.i8($M.0, $p543);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i545 := $zext.i8.i32($i544);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i546 := $sgt.i32($i545, 75);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i185, $i186 := 2, 4;
    assume {:branchcond $i546} true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(1, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i550 := $load.i8($M.0, $p549);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i551 := $zext.i8.i32($i550);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(2, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i555 := $load.i8($M.0, $p554);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i556 := $zext.i8.i32($i555);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i557 := $sge.i32($i551, $i556);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i227 := 2;
    assume {:branchcond $i557} true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i557 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(3, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i561 := $load.i8($M.0, $p560);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i562 := $zext.i8.i32($i561);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(4, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i566 := $load.i8($M.0, $p565);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i567 := $zext.i8.i32($i566);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i568 := $sge.i32($i562, $i567);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i269 := 2;
    assume {:branchcond $i568} true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(0, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i572 := $load.i8($M.0, $p571);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i573 := $zext.i8.i32($i572);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i574 := $and.i32($i573, $sub.i32(0, 144));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i575 := $ne.i32($i574, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i63 := 3;
    assume {:branchcond $i575} true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i575 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(1, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i578 := $load.i8($M.0, $p577);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i579 := $zext.i8.i32($i578);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i580 := $sgt.i32($i579, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i581 := 0;
    assume {:branchcond $i580} true;
    goto $bb349, $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    assume !($i580 == 1);
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    $i602 := $i581;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(1, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i605 := $load.i8($M.0, $p604);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i606 := $zext.i8.i32($i605);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i607 := $eq.i32($i606, $i602);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i121 := 3;
    assume {:branchcond $i607} true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i607 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb366, $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $i608 := $sub.i8(0, 86);
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(1, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i612 := $load.i8($M.0, $p611);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i613 := $zext.i8.i32($i612);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i614 := $zext.i8.i32($i608);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i615 := $slt.i32($i613, $i614);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 3, 1, $i608;
    assume {:branchcond $i615} true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i615 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $i185, $i186 := 3, 1;
    assume {:branchcond 0} true;
    goto $bb378, $bb379;

  $bb379:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb382, $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    $i616 := $sub.i8(0, 86);
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(2, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i620 := $load.i8($M.0, $p619);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i621 := $zext.i8.i32($i620);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i622 := $zext.i8.i32($i616);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i623 := $slt.i32($i621, $i622);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 3, 2, $i616;
    assume {:branchcond $i623} true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    $i185, $i186 := 3, 2;
    assume {:branchcond 0} true;
    goto $bb394, $bb395;

  $bb395:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb398, $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    $i624 := 25;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(3, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i628 := $load.i8($M.0, $p627);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i629 := $zext.i8.i32($i628);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i630 := $zext.i8.i32($i624);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i631 := $slt.i32($i629, $i630);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 3, 3, $i624;
    assume {:branchcond $i631} true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(3, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i635 := $load.i8($M.0, $p634);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i636 := $zext.i8.i32($i635);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i637 := $sgt.i32($i636, 75);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i185, $i186 := 3, 3;
    assume {:branchcond $i637} true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i637 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb414, $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    $i638 := 25;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(4, 1));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i642 := $load.i8($M.0, $p641);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i643 := $zext.i8.i32($i642);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i644 := $zext.i8.i32($i638);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i645 := $slt.i32($i643, $i644);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 3, 4, $i638;
    assume {:branchcond $i645} true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i645 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(4, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i649 := $load.i8($M.0, $p648);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i650 := $zext.i8.i32($i649);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i651 := $sgt.i32($i650, 75);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i185, $i186 := 3, 4;
    assume {:branchcond $i651} true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(1, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i655 := $load.i8($M.0, $p654);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i656 := $zext.i8.i32($i655);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(2, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i660 := $load.i8($M.0, $p659);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i661 := $zext.i8.i32($i660);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i662 := $sge.i32($i656, $i661);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i227 := 3;
    assume {:branchcond $i662} true;
    goto $bb430, $bb431;

  $bb431:
    assume !($i662 == 1);
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(3, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i666 := $load.i8($M.0, $p665);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i667 := $zext.i8.i32($i666);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(4, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i671 := $load.i8($M.0, $p670);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i672 := $zext.i8.i32($i671);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i673 := $sge.i32($i667, $i672);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i269 := 3;
    assume {:branchcond $i673} true;
    goto $bb433, $bb434;

  $bb434:
    assume !($i673 == 1);
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(0, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i677 := $load.i8($M.0, $p676);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i678 := $zext.i8.i32($i677);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i679 := $and.i32($i678, $sub.i32(0, 144));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i680 := $ne.i32($i679, 0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i63 := 4;
    assume {:branchcond $i680} true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i680 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(1, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i683 := $load.i8($M.0, $p682);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i684 := $zext.i8.i32($i683);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i685 := $sgt.i32($i684, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i686 := 0;
    assume {:branchcond $i685} true;
    goto $bb440, $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    assume !($i685 == 1);
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    $i707 := $i686;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(1, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i710 := $load.i8($M.0, $p709);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i711 := $zext.i8.i32($i710);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i712 := $eq.i32($i711, $i707);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i121 := 4;
    assume {:branchcond $i712} true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i712 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb457, $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $i713 := $sub.i8(0, 86);
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(1, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i717 := $load.i8($M.0, $p716);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i718 := $zext.i8.i32($i717);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i719 := $zext.i8.i32($i713);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i720 := $slt.i32($i718, $i719);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 4, 1, $i713;
    assume {:branchcond $i720} true;
    goto $bb466, $bb467;

  $bb467:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    $i185, $i186 := 4, 1;
    assume {:branchcond 0} true;
    goto $bb469, $bb470;

  $bb470:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb473, $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $i721 := $sub.i8(0, 86);
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(2, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i725 := $load.i8($M.0, $p724);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i726 := $zext.i8.i32($i725);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i727 := $zext.i8.i32($i721);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i728 := $slt.i32($i726, $i727);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 4, 2, $i721;
    assume {:branchcond $i728} true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    $i185, $i186 := 4, 2;
    assume {:branchcond 0} true;
    goto $bb485, $bb486;

  $bb486:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb489, $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $i729 := 25;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(3, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i733 := $load.i8($M.0, $p732);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i734 := $zext.i8.i32($i733);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i735 := $zext.i8.i32($i729);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i736 := $slt.i32($i734, $i735);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 4, 3, $i729;
    assume {:branchcond $i736} true;
    goto $bb498, $bb499;

  $bb499:
    assume !($i736 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    $p739 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(3, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i740 := $load.i8($M.0, $p739);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i741 := $zext.i8.i32($i740);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i742 := $sgt.i32($i741, 75);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i185, $i186 := 4, 3;
    assume {:branchcond $i742} true;
    goto $bb501, $bb502;

  $bb502:
    assume !($i742 == 1);
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb505, $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $i743 := 25;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(4, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i747 := $load.i8($M.0, $p746);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i748 := $zext.i8.i32($i747);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i749 := $zext.i8.i32($i743);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i750 := $slt.i32($i748, $i749);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i155, $i156, $i157 := 4, 4, $i743;
    assume {:branchcond $i750} true;
    goto $bb514, $bb515;

  $bb515:
    assume !($i750 == 1);
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(4, 1));
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i754 := $load.i8($M.0, $p753);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i755 := $zext.i8.i32($i754);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i756 := $sgt.i32($i755, 75);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i185, $i186 := 4, 4;
    assume {:branchcond $i756} true;
    goto $bb517, $bb518;

  $bb518:
    assume !($i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(1, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i760 := $load.i8($M.0, $p759);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i761 := $zext.i8.i32($i760);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(2, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i765 := $load.i8($M.0, $p764);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i766 := $zext.i8.i32($i765);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i767 := $sge.i32($i761, $i766);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i227 := 4;
    assume {:branchcond $i767} true;
    goto $bb521, $bb522;

  $bb522:
    assume !($i767 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(3, 1));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i771 := $load.i8($M.0, $p770);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i772 := $zext.i8.i32($i771);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(4, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i776 := $load.i8($M.0, $p775);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i777 := $zext.i8.i32($i776);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i778 := $sge.i32($i772, $i777);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i269 := 4;
    assume {:branchcond $i778} true;
    goto $bb524, $bb525;

  $bb525:
    assume !($i778 == 1);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i88 := 5;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i184 := $i88;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i300 := $trunc.i32.i8($i184);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15210, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p301, $i300);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i302 := $M.3;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i303 := $sgt.i32($i302, 1);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb111:
    assume $i303 == 1;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p304, .str.3);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p305, .str.89);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p306, .str.5);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p307, .str.106);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p309 := $bitcast.ref.ref($p308);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i310 := $load.i24($M.8, $p309);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i311 := $and.i24($i310, $sub.i24(0, 262144));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i312 := $or.i24($i311, 790);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p309, $i312);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p313, 1);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i315 := $load.i8($M.9, $p314);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i316 := $zext.i8.i64($i315);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i317 := $and.i64($i316, 1);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i318 := ldv__builtin_expect($i317, 0);
    call {:si_unique_call 392} {:cexpr "tmp___7"} boogie_si_record_i64($i318);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i319 := $ne.i64($i318, 0);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb113:
    assume $i319 == 1;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15210, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.0, $p320);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i32($i321);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} __dynamic_pr_debug.ref.ref.i32($p9, .str.107, $i322);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb524:
    assume {:verifier.code 0} true;
    assume $i778 == 1;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i270 := $M.3;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i271 := $sgt.i32($i270, 1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i88 := $i269;
    goto $bb31;

  $bb102:
    assume $i271 == 1;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p272, .str.3);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p273, .str.89);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p274, .str.5);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p275, .str.104);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p276);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i278 := $load.i24($M.8, $p277);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i279 := $and.i24($i278, $sub.i24(0, 262144));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i280 := $or.i24($i279, 783);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p277, $i280);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p281, 1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.9, $p282);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i64($i283);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i285 := $and.i64($i284, 1);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i286 := ldv__builtin_expect($i285, 0);
    call {:si_unique_call 389} {:cexpr "tmp___6"} boogie_si_record_i64($i286);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb104:
    assume $i287 == 1;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i288 := $sext.i32.i64($i269);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref($i288, 5)), $mul.ref(3, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i292 := $load.i8($M.0, $p291);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i293 := $zext.i8.i32($i292);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i294 := $sext.i32.i64($i269);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref($i294, 5)), $mul.ref(4, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i298 := $load.i8($M.0, $p297);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i299 := $zext.i8.i32($i298);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __dynamic_pr_debug.ref.ref.i32.i32.i32($p8, .str.105, $i269, $i293, $i299);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb521:
    assume {:verifier.code 0} true;
    assume $i767 == 1;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i228 := $M.3;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i229 := $sgt.i32($i228, 1);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i88 := $i227;
    goto $bb31;

  $bb92:
    assume $i229 == 1;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p230, .str.3);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p231, .str.89);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p232, .str.5);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p233, .str.102);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i236 := $load.i24($M.8, $p235);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i237 := $and.i24($i236, $sub.i24(0, 262144));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i238 := $or.i24($i237, 775);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p235, $i238);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p239, 1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.9, $p240);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i242 := $zext.i8.i64($i241);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i243 := $and.i64($i242, 1);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i244 := ldv__builtin_expect($i243, 0);
    call {:si_unique_call 386} {:cexpr "tmp___5"} boogie_si_record_i64($i244);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i245 := $ne.i64($i244, 0);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb94:
    assume $i245 == 1;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i246 := $sext.i32.i64($i227);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref($i246, 5)), $mul.ref(1, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i250 := $load.i8($M.0, $p249);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i251 := $zext.i8.i32($i250);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i252 := $sext.i32.i64($i227);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref($i252, 5)), $mul.ref(2, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i256 := $load.i8($M.0, $p255);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i256);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} __dynamic_pr_debug.ref.ref.i32.i32.i32($p7, .str.103, $i227, $i251, $i257);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb517:
    assume {:verifier.code 0} true;
    assume $i756 == 1;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i187 := $M.3;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i188 := $sgt.i32($i187, 1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i184 := $i185;
    goto $bb75;

  $bb80:
    assume $i188 == 1;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p189, .str.3);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p190, .str.89);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p191, .str.5);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p192, .str.100);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i195 := $load.i24($M.8, $p194);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i196 := $and.i24($i195, $sub.i24(0, 262144));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i197 := $or.i24($i196, 764);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p194, $i197);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p198, 1);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.9, $p199);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i64($i200);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i202 := $and.i64($i201, 1);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i203 := ldv__builtin_expect($i202, 0);
    call {:si_unique_call 383} {:cexpr "tmp___4"} boogie_si_record_i64($i203);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i204 := $ne.i64($i203, 0);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb82:
    assume $i204 == 1;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i205 := $sext.i32.i64($i186);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i206 := $sext.i32.i64($i185);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref($i206, 5)), $mul.ref($i205, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.0, $p209);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i210);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i212 := $sext.i32.i64($i186);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref(abituguru_pwm_max, $mul.ref(0, 5)), $mul.ref($i212, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.15, $p213);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i32($i214);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} __dynamic_pr_debug.ref.ref.i32.i32.i32.i32($p6, .str.101, $i185, $i186, $i211, $i215);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb514:
    assume {:verifier.code 0} true;
    assume $i750 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i158 := $M.3;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i159 := $sgt.i32($i158, 1);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i184 := $i155;
    goto $bb75;

  $bb69:
    assume $i159 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p160, .str.3);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p161, .str.89);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p162, .str.5);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p163, .str.98);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i166 := $load.i24($M.8, $p165);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i167 := $and.i24($i166, $sub.i24(0, 262144));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i168 := $or.i24($i167, 755);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p165, $i168);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p169, 1);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.9, $p170);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i64($i171);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i173 := $and.i64($i172, 1);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i174 := ldv__builtin_expect($i173, 0);
    call {:si_unique_call 380} {:cexpr "tmp___3"} boogie_si_record_i64($i174);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb71:
    assume $i175 == 1;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i176 := $sext.i32.i64($i156);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i177 := $sext.i32.i64($i155);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref($i177, 5)), $mul.ref($i176, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.0, $p180);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i157);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} __dynamic_pr_debug.ref.ref.i32.i32.i32.i32($p5, .str.99, $i155, $i156, $i182, $i183);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb505:
    assume 0 == 1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb508, $bb510;

  $bb510:
    assume !(0 == 1);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb511, $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb507;

  $bb511:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    $i743 := 77;
    goto $bb513;

  $bb508:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb509;

  $bb501:
    assume {:verifier.code 0} true;
    assume $i742 == 1;
    goto $bb78;

  $bb498:
    assume {:verifier.code 0} true;
    assume $i736 == 1;
    goto $bb67;

  $bb489:
    assume 0 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb492, $bb494;

  $bb494:
    assume !(0 == 1);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb495, $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb491;

  $bb495:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    $i729 := 77;
    goto $bb497;

  $bb492:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb493;

  $bb485:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb78;

  $bb482:
    assume {:verifier.code 0} true;
    assume $i728 == 1;
    goto $bb67;

  $bb473:
    assume 0 == 1;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb476, $bb478;

  $bb478:
    assume !(0 == 1);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb479, $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb475;

  $bb479:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    $i721 := 77;
    goto $bb481;

  $bb476:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb477;

  $bb469:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb78;

  $bb466:
    assume {:verifier.code 0} true;
    assume $i720 == 1;
    goto $bb67;

  $bb457:
    assume 0 == 1;
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb460, $bb462;

  $bb462:
    assume !(1 == 1);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb463, $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb459;

  $bb463:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    $i713 := 77;
    goto $bb465;

  $bb460:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb461;

  $bb452:
    assume {:verifier.code 0} true;
    assume $i712 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i122 := $M.3;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i123 := $sgt.i32($i122, 1);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i88 := $i121;
    goto $bb31;

  $bb48:
    assume $i123 == 1;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p124, .str.3);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p125, .str.89);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p126, .str.5);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p127, .str.96);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i130 := $load.i24($M.8, $p129);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i131 := $and.i24($i130, $sub.i24(0, 262144));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i132 := $or.i24($i131, 737);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p129, $i132);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p133, 1);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.9, $p134);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i64($i135);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i137 := $and.i64($i136, 1);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i138 := ldv__builtin_expect($i137, 0);
    call {:si_unique_call 377} {:cexpr "tmp___2"} boogie_si_record_i64($i138);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i139 == 1;
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i121);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref($i140, 5)), $mul.ref(0, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.0, $p143);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 15);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} __dynamic_pr_debug.ref.ref.i32.i32($p4, .str.97, $i121, $i146);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb440:
    assume $i685 == 1;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i687 := 0;
    goto $bb443;

  $bb443:
    call $i687, $i688, $p691, $i692, $i693, $p696, $i697, $i698, $i699, $i700, $i702, $i703, $i704, $i705, $i706, $i701 := abituguru_detect_no_pwms_loop_$bb443($p0, $p682, $i687, $i688, $p691, $i692, $i693, $p696, $i697, $i698, $i699, $i700, $i702, $i703, $i704, $i705, $i706, $i701);
    goto $bb443_last;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    $i688 := $sext.i32.i64($i687);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(1, 16)), $mul.ref($i688, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i692 := $load.i8($M.0, $p691);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i693 := $zext.i8.i32($i692);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(0, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i697 := $load.i8($M.0, $p696);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i698 := $zext.i8.i32($i697);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i699 := $and.i32($i698, 15);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i700 := $eq.i32($i693, $i699);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i701 := $i687;
    assume true;
    goto $bb445, $bb446;

  $bb446:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    $i702 := $add.i32($i687, 1);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i703 := $load.i8($M.0, $p682);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i704 := $zext.i8.i32($i703);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i705 := $sgt.i32($i704, $i702);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i706 := $i702;
    assume true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i705 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i686 := $i706;
    goto $bb442;

  $bb448:
    assume $i705 == 1;
    assume {:verifier.code 0} true;
    $i687 := $i702;
    goto $bb448_dummy;

  $bb445:
    assume $i700 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i707 := $i701;
    goto $bb451;

  $bb437:
    assume {:verifier.code 0} true;
    assume $i680 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i64 := $M.3;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i64, 1);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i88 := $i63;
    goto $bb31;

  $bb25:
    assume $i65 == 1;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p66, .str.3);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p67, .str.89);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p68, .str.5);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p69, .str.94);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.8, $p71);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 719);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p71, $i74);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p75, 1);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.9, $p76);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 373} {:cexpr "tmp___1"} boogie_si_record_i64($i80);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i81 == 1;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i63);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref($i82, 5)), $mul.ref(0, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} __dynamic_pr_debug.ref.ref.i32.i32($p3, .str.95, $i63, $i87);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb433:
    assume {:verifier.code 0} true;
    assume $i673 == 1;
    goto $bb100;

  $bb430:
    assume {:verifier.code 0} true;
    assume $i662 == 1;
    goto $bb90;

  $bb426:
    assume {:verifier.code 0} true;
    assume $i651 == 1;
    goto $bb78;

  $bb423:
    assume {:verifier.code 0} true;
    assume $i645 == 1;
    goto $bb67;

  $bb414:
    assume 0 == 1;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb417, $bb419;

  $bb419:
    assume !(0 == 1);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb420, $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb416;

  $bb420:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    $i638 := 77;
    goto $bb422;

  $bb417:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb418;

  $bb410:
    assume {:verifier.code 0} true;
    assume $i637 == 1;
    goto $bb78;

  $bb407:
    assume {:verifier.code 0} true;
    assume $i631 == 1;
    goto $bb67;

  $bb398:
    assume 0 == 1;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb401, $bb403;

  $bb403:
    assume !(0 == 1);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb404, $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb400;

  $bb404:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    $i624 := 77;
    goto $bb406;

  $bb401:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb402;

  $bb394:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb78;

  $bb391:
    assume {:verifier.code 0} true;
    assume $i623 == 1;
    goto $bb67;

  $bb382:
    assume 0 == 1;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb385, $bb387;

  $bb387:
    assume !(0 == 1);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb388, $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb384;

  $bb388:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    $i616 := 77;
    goto $bb390;

  $bb385:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb386;

  $bb378:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb78;

  $bb375:
    assume {:verifier.code 0} true;
    assume $i615 == 1;
    goto $bb67;

  $bb366:
    assume 0 == 1;
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb369, $bb371;

  $bb371:
    assume !(1 == 1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb372, $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb368;

  $bb372:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    $i608 := 77;
    goto $bb374;

  $bb369:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb370;

  $bb361:
    assume {:verifier.code 0} true;
    assume $i607 == 1;
    goto $bb46;

  $bb349:
    assume $i580 == 1;
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i582 := 0;
    goto $bb352;

  $bb352:
    call $i582, $i583, $p586, $i587, $i588, $p591, $i592, $i593, $i594, $i595, $i597, $i598, $i599, $i600, $i601, $i596 := abituguru_detect_no_pwms_loop_$bb352($p0, $p577, $i582, $i583, $p586, $i587, $i588, $p591, $i592, $i593, $i594, $i595, $i597, $i598, $i599, $i600, $i601, $i596);
    goto $bb352_last;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $i583 := $sext.i32.i64($i582);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(1, 16)), $mul.ref($i583, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i587 := $load.i8($M.0, $p586);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i588 := $zext.i8.i32($i587);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(0, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i592 := $load.i8($M.0, $p591);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i593 := $zext.i8.i32($i592);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i594 := $and.i32($i593, 15);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i595 := $eq.i32($i588, $i594);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i596 := $i582;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i595 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $i597 := $add.i32($i582, 1);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i598 := $load.i8($M.0, $p577);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i599 := $zext.i8.i32($i598);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i600 := $sgt.i32($i599, $i597);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i601 := $i597;
    assume true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i600 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i581 := $i601;
    goto $bb351;

  $bb357:
    assume $i600 == 1;
    assume {:verifier.code 0} true;
    $i582 := $i597;
    goto $bb357_dummy;

  $bb354:
    assume $i595 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i602 := $i596;
    goto $bb360;

  $bb346:
    assume {:verifier.code 0} true;
    assume $i575 == 1;
    goto $bb23;

  $bb342:
    assume {:verifier.code 0} true;
    assume $i568 == 1;
    goto $bb100;

  $bb339:
    assume {:verifier.code 0} true;
    assume $i557 == 1;
    goto $bb90;

  $bb335:
    assume {:verifier.code 0} true;
    assume $i546 == 1;
    goto $bb78;

  $bb332:
    assume {:verifier.code 0} true;
    assume $i540 == 1;
    goto $bb67;

  $bb323:
    assume 0 == 1;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb326, $bb328;

  $bb328:
    assume !(0 == 1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb329, $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb325;

  $bb329:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $i533 := 77;
    goto $bb331;

  $bb326:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb327;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i532 == 1;
    goto $bb78;

  $bb316:
    assume {:verifier.code 0} true;
    assume $i526 == 1;
    goto $bb67;

  $bb307:
    assume 0 == 1;
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb310, $bb312;

  $bb312:
    assume !(0 == 1);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb313, $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb309;

  $bb313:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $i519 := 77;
    goto $bb315;

  $bb310:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb311;

  $bb303:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb78;

  $bb300:
    assume {:verifier.code 0} true;
    assume $i518 == 1;
    goto $bb67;

  $bb291:
    assume 0 == 1;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb294, $bb296;

  $bb296:
    assume !(0 == 1);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb297, $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb293;

  $bb297:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $i511 := 77;
    goto $bb299;

  $bb294:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb295;

  $bb287:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb78;

  $bb284:
    assume {:verifier.code 0} true;
    assume $i510 == 1;
    goto $bb67;

  $bb275:
    assume 0 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb278, $bb280;

  $bb280:
    assume !(1 == 1);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb281, $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb277;

  $bb281:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $i503 := 77;
    goto $bb283;

  $bb278:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb279;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i502 == 1;
    goto $bb46;

  $bb258:
    assume $i475 == 1;
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i477 := 0;
    goto $bb261;

  $bb261:
    call $i477, $i478, $p481, $i482, $i483, $p486, $i487, $i488, $i489, $i490, $i492, $i493, $i494, $i495, $i496, $i491 := abituguru_detect_no_pwms_loop_$bb261($p0, $p472, $i477, $i478, $p481, $i482, $i483, $p486, $i487, $i488, $i489, $i490, $i492, $i493, $i494, $i495, $i496, $i491);
    goto $bb261_last;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i478 := $sext.i32.i64($i477);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(1, 16)), $mul.ref($i478, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i482 := $load.i8($M.0, $p481);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i483 := $zext.i8.i32($i482);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(0, 1));
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i487 := $load.i8($M.0, $p486);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i488 := $zext.i8.i32($i487);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i489 := $and.i32($i488, 15);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i490 := $eq.i32($i483, $i489);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i491 := $i477;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $i492 := $add.i32($i477, 1);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i493 := $load.i8($M.0, $p472);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i494 := $zext.i8.i32($i493);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i495 := $sgt.i32($i494, $i492);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i496 := $i492;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i476 := $i496;
    goto $bb260;

  $bb266:
    assume $i495 == 1;
    assume {:verifier.code 0} true;
    $i477 := $i492;
    goto $bb266_dummy;

  $bb263:
    assume $i490 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i497 := $i491;
    goto $bb269;

  $bb255:
    assume {:verifier.code 0} true;
    assume $i470 == 1;
    goto $bb23;

  $bb251:
    assume {:verifier.code 0} true;
    assume $i463 == 1;
    goto $bb100;

  $bb248:
    assume {:verifier.code 0} true;
    assume $i452 == 1;
    goto $bb90;

  $bb244:
    assume {:verifier.code 0} true;
    assume $i441 == 1;
    goto $bb78;

  $bb241:
    assume {:verifier.code 0} true;
    assume $i435 == 1;
    goto $bb67;

  $bb232:
    assume 0 == 1;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb235, $bb237;

  $bb237:
    assume !(0 == 1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb238, $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb234;

  $bb238:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i428 := 77;
    goto $bb240;

  $bb235:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb236;

  $bb228:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb78;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i421 == 1;
    goto $bb67;

  $bb216:
    assume 0 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb219, $bb221;

  $bb221:
    assume !(0 == 1);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb222, $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb218;

  $bb222:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i414 := 77;
    goto $bb224;

  $bb219:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb220;

  $bb212:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb78;

  $bb209:
    assume {:verifier.code 0} true;
    assume $i413 == 1;
    goto $bb67;

  $bb200:
    assume 0 == 1;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb203, $bb205;

  $bb205:
    assume !(0 == 1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb202;

  $bb206:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $i406 := 77;
    goto $bb208;

  $bb203:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb204;

  $bb196:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb78;

  $bb193:
    assume {:verifier.code 0} true;
    assume $i405 == 1;
    goto $bb67;

  $bb184:
    assume 0 == 1;
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb187, $bb189;

  $bb189:
    assume !(1 == 1);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb190, $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb186;

  $bb190:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $i398 := 77;
    goto $bb192;

  $bb187:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb188;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i397 == 1;
    goto $bb46;

  $bb167:
    assume $i370 == 1;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i372 := 0;
    goto $bb170;

  $bb170:
    call $i372, $i373, $p376, $i377, $i378, $p381, $i382, $i383, $i384, $i385, $i387, $i388, $i389, $i390, $i391, $i386 := abituguru_detect_no_pwms_loop_$bb170($p0, $p367, $i372, $i373, $p376, $i377, $i378, $p381, $i382, $i383, $i384, $i385, $i387, $i388, $i389, $i390, $i391, $i386);
    goto $bb170_last;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i373 := $sext.i32.i64($i372);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(1, 16)), $mul.ref($i373, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i377 := $load.i8($M.0, $p376);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i378 := $zext.i8.i32($i377);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(0, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i382 := $load.i8($M.0, $p381);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i383 := $zext.i8.i32($i382);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i384 := $and.i32($i383, 15);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i378, $i384);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i386 := $i372;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i387 := $add.i32($i372, 1);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i388 := $load.i8($M.0, $p367);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i389 := $zext.i8.i32($i388);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i390 := $sgt.i32($i389, $i387);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i391 := $i387;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i371 := $i391;
    goto $bb169;

  $bb175:
    assume $i390 == 1;
    assume {:verifier.code 0} true;
    $i372 := $i387;
    goto $bb175_dummy;

  $bb172:
    assume $i385 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i392 := $i386;
    goto $bb178;

  $bb164:
    assume {:verifier.code 0} true;
    assume $i365 == 1;
    goto $bb23;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb100;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i226 == 1;
    goto $bb90;

  $bb161:
    assume {:verifier.code 0} true;
    assume $i358 == 1;
    goto $bb78;

  $bb158:
    assume {:verifier.code 0} true;
    assume $i352 == 1;
    goto $bb67;

  $bb149:
    assume 1 == 1;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb152, $bb154;

  $bb154:
    assume !(0 == 1);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb151;

  $bb155:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i345 := 77;
    goto $bb157;

  $bb152:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb153;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i344 == 1;
    goto $bb78;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i338 == 1;
    goto $bb67;

  $bb133:
    assume 1 == 1;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb136, $bb138;

  $bb138:
    assume !(0 == 1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb135;

  $bb139:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i331 := 77;
    goto $bb141;

  $bb136:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb137;

  $bb129:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb78;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i330 == 1;
    goto $bb67;

  $bb117:
    assume 1 == 1;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb120, $bb122;

  $bb122:
    assume !(0 == 1);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb119;

  $bb123:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i323 := 77;
    goto $bb125;

  $bb120:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb121;

  $bb77:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb78;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb67;

  $bb57:
    assume 1 == 1;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb60, $bb62;

  $bb62:
    assume !(1 == 1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb59;

  $bb63:
    assume {:verifier.code 0} true;
    assume 0 == 1;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i147 := 77;
    goto $bb65;

  $bb60:
    assume {:verifier.code 0} true;
    assume 1 == 1;
    goto $bb61;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb46;

  $bb33:
    assume $i93 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb36;

  $bb36:
    call $i96, $p99, $i100, $i101, $p104, $i105, $i106, $i107, $i108, $i109, $i111, $i112, $i113, $i114, $i95, $i115 := abituguru_detect_no_pwms_loop_$bb36($p0, $p90, $i96, $p99, $i100, $i101, $p104, $i105, $i106, $i107, $i108, $i109, $i111, $i112, $i113, $i114, $i95, $i115);
    goto $bb36_last;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i95);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(1, 16)), $mul.ref($i96, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(0, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 15);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i101, $i107);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i109 := $i95;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i95, 1);
    call {:si_unique_call 375} {:cexpr "j"} boogie_si_record_i32($i111);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p90);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i114 := $sgt.i32($i113, $i111);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i115 := $i111;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i94 := $i115;
    goto $bb35;

  $bb42:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i95 := $i111;
    goto $bb42_dummy;

  $bb38:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i110 := $i109;
    goto $bb40;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb23;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.3);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p41, .str.89);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p42, .str.5);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p43, .str.92);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.8, $p45);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 709);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p45, $i48);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p49, 1);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.9, $p50);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 370} {:cexpr "tmp___0"} boogie_si_record_i64($i54);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} __dynamic_pr_debug.ref.ref($p2, .str.93);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i12 := $M.26;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i13 := $sle.i32($i12, 5);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i14 := $M.26;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15210, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i17 := $M.3;
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 1);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p19, .str.3);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p20, .str.89);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p21, .str.5);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p22, .str.90);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.8, $p24);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 705);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p24, $i27);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p28, 1);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.9, $p29);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 367} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 15240)), $mul.ref(15210, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} __dynamic_pr_debug.ref.ref.i32($p1, .str.91, $i37);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb448_dummy:
    assume false;
    return;

  $bb443_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3038;

  $bb357_dummy:
    assume false;
    return;

  $bb352_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2928;

  $bb266_dummy:
    assume false;
    return;

  $bb261_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2818;

  $bb175_dummy:
    assume false;
    return;

  $bb170_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  $bb42_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2370;
}



const printk: ref;

axiom printk == $sub.ref(0, 272216);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 1} true;
    call {:si_unique_call 394} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 395} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 396} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 397} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 1} true;
    call {:si_unique_call 398} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 399} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 400} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 401} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 273248);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 1} true;
    call {:si_unique_call 402} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 403} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const hwmon_device_register: ref;

axiom hwmon_device_register == $sub.ref(0, 274280);

procedure hwmon_device_register($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation hwmon_device_register($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p1 := external_alloc();
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 275312);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i1 := ldv_is_err($p0);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 406} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 276344);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 408} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 277376);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 278408);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 279440);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 409} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 410} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 280472);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p2, $p1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 281504);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 412} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p3 := external_alloc();
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const abituguru_suspend: ref;

axiom abituguru_suspend == $sub.ref(0, 282536);

procedure abituguru_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation abituguru_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 15240)), $mul.ref(8, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} ldv_mutex_lock_26($p3);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const abituguru_resume: ref;

axiom abituguru_resume == $sub.ref(0, 283568);

procedure abituguru_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, assertsPassed;



implementation abituguru_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 4);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i7 := inb_p($i6);
    call {:si_unique_call 418} {:cexpr "tmp___0"} boogie_si_record_i8($i7);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 8);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 15240)), $mul.ref(8, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} ldv_mutex_unlock_27($p11);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 15240)), $mul.ref(178, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 284600);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} ldv_mutex_unlock_update_lock_of_abituguru_data($p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} mutex_unlock($p0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_26: ref;

axiom ldv_mutex_lock_26 == $sub.ref(0, 285632);

procedure ldv_mutex_lock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_mutex_lock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} ldv_mutex_lock_update_lock_of_abituguru_data($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} mutex_lock($p0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 286664);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p1 := calloc(1, $i0);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 1} true;
    call {:si_unique_call 426} __VERIFIER_assume($i4);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 287696);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_dev_pm_ops_2: ref;

axiom ldv_dev_pm_ops_2 == $sub.ref(0, 288728);

procedure ldv_dev_pm_ops_2();
  free requires assertsPassed;
  modifies $M.27, $M.2, $CurrAddr;



implementation ldv_dev_pm_ops_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $M.27 := $p0;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_init_1: ref;

axiom ldv_platform_driver_init_1 == $sub.ref(0, 289760);

procedure ldv_platform_driver_init_1();
  free requires assertsPassed;
  modifies $M.28, $M.2, $CurrAddr;



implementation ldv_platform_driver_init_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p0 := ldv_init_zalloc(1472);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 290792);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.31, $M.32, $M.16, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.12, $M.33, $M.34, $M.35, $M.36, $M.27, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.28, $M.10, $M.66, $M.65, $M.64, $M.56, $M.19, $M.18, $M.13, $M.15, $M.14, $M.26, $M.25, $M.17, $M.20, $M.3, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $CurrAddr, $M.22, $M.23, $M.24, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.2, assertsPassed;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i1;
  var $i186: i32;
  var $i187: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    call {:si_unique_call 429} $initialize();
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} ldv_initialize();
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 432} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 433} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 434} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 435} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i186, $i187, vslice_dummy_var_50 := main_loop_$bb1($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $p13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i186, $i187, vslice_dummy_var_50);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} ldv_stop();
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb50_dummy;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i56 := $M.32;
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb81:
    assume $i57 == 1;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 471} $i58 := __VERIFIER_nondet_int();
    call {:si_unique_call 472} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i58);
    call {:si_unique_call 473} {:cexpr "tmp___2"} boogie_si_record_i32($i58);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i58, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i58, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i58, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i58, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i58, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} ldv_stop();
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb94:
    assume $i64 == 1;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i183 := $M.32;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 15);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb242:
    assume $i184 == 1;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vslice_dummy_var_50 := ldv_complete_2();
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 533} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i186 := $M.30;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i187 := $sub.i32($i186, 1);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $M.30 := $i187;
    call {:si_unique_call 534} {:cexpr "ref_cnt"} boogie_si_record_i32($i187);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb92:
    assume $i63 == 1;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i178 := $M.32;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 5);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb236:
    assume $i179 == 1;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i180 := ldv_suspend_noirq_2();
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $M.55 := $i180;
    call {:si_unique_call 530} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i180);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i181 := $M.55;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 0);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb238:
    assume $i182 == 1;
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.32 := 11;
    call {:si_unique_call 531} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(11);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb90:
    assume $i62 == 1;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i173 := $M.32;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 6);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb230:
    assume $i174 == 1;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i175 := ldv_restore_noirq_2();
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.54 := $i175;
    call {:si_unique_call 527} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i175);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i176 := $M.54;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb232:
    assume $i177 == 1;
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.32 := 12;
    call {:si_unique_call 528} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(12);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb88:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i58, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i65 == 1);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i168 := $M.32;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 3);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb224:
    assume $i169 == 1;
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i170 := ldv_poweroff_late_2();
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.53 := $i170;
    call {:si_unique_call 524} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i170);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i171 := $M.53;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 0);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb226:
    assume $i172 == 1;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.32 := 7;
    call {:si_unique_call 525} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(7);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb97:
    assume $i65 == 1;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i163 := $M.32;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 3);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb218:
    assume $i164 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i165 := ldv_poweroff_noirq_2();
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.52 := $i165;
    call {:si_unique_call 521} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i165);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i166 := $M.52;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb220:
    assume $i167 == 1;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $M.32 := 6;
    call {:si_unique_call 522} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(6);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb86:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i58, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i58, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i58, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i68 == 1);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i158 := $M.32;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 8);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb212:
    assume $i159 == 1;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i160 := ldv_thaw_noirq_2();
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.51 := $i160;
    call {:si_unique_call 518} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i160);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i161 := $M.51;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 0);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb214:
    assume $i162 == 1;
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.32 := 13;
    call {:si_unique_call 519} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(13);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb103:
    assume $i68 == 1;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i153 := $M.32;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 4);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb206:
    assume $i154 == 1;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i155 := ldv_freeze_late_2();
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.50 := $i155;
    call {:si_unique_call 515} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i155);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i156 := $M.50;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 0);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb208:
    assume $i157 == 1;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.32 := 9;
    call {:si_unique_call 516} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(9);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb101:
    assume $i67 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i146 := $M.32;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 1);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb200:
    assume $i147 == 1;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i148 := ldv_prepare_2();
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $M.49 := $i148;
    call {:si_unique_call 511} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i148);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i149 := $M.49;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 0);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb202:
    assume $i150 == 1;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $M.32 := 2;
    call {:si_unique_call 512} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i151 := $M.30;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i151, 1);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $M.30 := $i152;
    call {:si_unique_call 513} {:cexpr "ref_cnt"} boogie_si_record_i32($i152);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb99:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i58, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i69 == 1);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i141 := $M.32;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 4);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb194:
    assume $i142 == 1;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i143 := ldv_freeze_noirq_2();
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.48 := $i143;
    call {:si_unique_call 508} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i143);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i144 := $M.48;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb196:
    assume $i145 == 1;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.32 := 8;
    call {:si_unique_call 509} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(8);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb105:
    assume $i69 == 1;
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i136 := $M.32;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 11);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb188:
    assume $i137 == 1;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i138 := ldv_resume_noirq_2();
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.47 := $i138;
    call {:si_unique_call 505} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i138);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i139 := $M.47;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 0);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb190:
    assume $i140 == 1;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.32 := 14;
    call {:si_unique_call 506} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(14);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb84:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i58, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i58, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i58, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i58, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i73 == 1);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i131 := $M.32;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 9);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb182:
    assume $i132 == 1;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i133 := ldv_thaw_early_2();
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.46 := $i133;
    call {:si_unique_call 502} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i133);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i134 := $M.46;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb184:
    assume $i135 == 1;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $M.32 := 13;
    call {:si_unique_call 503} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(13);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb113:
    assume $i73 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i126 := $M.32;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 10);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb176:
    assume $i127 == 1;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i128 := ldv_resume_early_2();
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.45 := $i128;
    call {:si_unique_call 499} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i128);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i129 := $M.45;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 0);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb178:
    assume $i130 == 1;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.32 := 14;
    call {:si_unique_call 500} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(14);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb111:
    assume $i72 == 1;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i121 := $M.32;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 7);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb170:
    assume $i122 == 1;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i123 := ldv_restore_early_2();
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.44 := $i123;
    call {:si_unique_call 496} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i123);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i124 := $M.44;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb172:
    assume $i125 == 1;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.32 := 12;
    call {:si_unique_call 497} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(12);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb109:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i58, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i74 == 1);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i116 := $M.32;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 5);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb164:
    assume $i117 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i118 := ldv_suspend_late_2();
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.43 := $i118;
    call {:si_unique_call 493} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i118);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i119 := $M.43;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb166:
    assume $i120 == 1;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $M.32 := 10;
    call {:si_unique_call 494} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(10);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb115:
    assume $i74 == 1;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i110 := $M.32;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 14);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb158:
    assume $i111 == 1;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p112 := $M.27;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i113 := abituguru_resume($p112);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.42 := $i113;
    call {:si_unique_call 490} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i113);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i114 := $M.42;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb160:
    assume $i115 == 1;
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.32 := 15;
    call {:si_unique_call 491} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb162;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb107:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i58, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i58, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i77 == 1);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i104 := $M.32;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 2);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb152:
    assume $i105 == 1;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p106 := $M.27;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i107 := abituguru_suspend($p106);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.41 := $i107;
    call {:si_unique_call 487} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i107);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i108 := $M.41;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb154:
    assume $i109 == 1;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $M.32 := 5;
    call {:si_unique_call 488} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    goto $bb156;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb121:
    assume $i77 == 1;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i98 := $M.32;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 2);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb146:
    assume $i99 == 1;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p100 := $M.27;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i101 := abituguru_suspend($p100);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.40 := $i101;
    call {:si_unique_call 484} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i101);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i102 := $M.40;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb148:
    assume $i103 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.32 := 4;
    call {:si_unique_call 485} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    goto $bb150;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb119:
    assume $i76 == 1;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i92 := $M.32;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 2);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb140:
    assume $i93 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p94 := $M.27;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i95 := abituguru_suspend($p94);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.39 := $i95;
    call {:si_unique_call 481} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i95);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i96 := $M.39;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb142:
    assume $i97 == 1;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.32 := 3;
    call {:si_unique_call 482} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb144;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb117:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i58, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i78 == 1);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i86 := $M.32;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 13);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb134:
    assume $i87 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p88 := $M.27;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i89 := abituguru_resume($p88);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.38 := $i89;
    call {:si_unique_call 478} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i89);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i90 := $M.38;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 0);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i91 == 1;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.32 := 15;
    call {:si_unique_call 479} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb138;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb123:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i58, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb96;

  $bb125:
    assume $i79 == 1;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i80 := $M.32;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 12);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb127:
    assume $i81 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p82 := $M.27;
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i83 := abituguru_resume($p82);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.37 := $i83;
    call {:si_unique_call 475} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i83);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i84 := $M.37;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb129:
    assume $i85 == 1;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.32 := 15;
    call {:si_unique_call 476} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    goto $bb131;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i2 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i39 := $M.31;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb51:
    assume $i40 == 1;
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 458} $i41 := __VERIFIER_nondet_int();
    call {:si_unique_call 459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i41);
    call {:si_unique_call 460} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} ldv_stop();
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb56:
    assume $i43 == 1;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i49 := $M.31;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb69:
    assume $i50 == 1;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i51 := abituguru_init();
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.36 := $i51;
    call {:si_unique_call 465} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i51);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i52 := $M.36;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i54 := $M.36;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb74:
    assume $i55 == 1;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 467} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 468} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} ldv_dev_pm_ops_2();
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i53 == 1;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.31 := 3;
    call {:si_unique_call 466} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} ldv_check_final_state();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i41, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb58;

  $bb59:
    assume $i44 == 1;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i45 := $M.31;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 2);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb61:
    assume $i46 == 1;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i47 := $M.30;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb63;

  $bb64:
    assume $i48 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} abituguru_exit();
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.31 := 3;
    call {:si_unique_call 462} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb3:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb9;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i5 := $M.29;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 439} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 440} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    call {:si_unique_call 441} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} ldv_stop();
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i19 := $M.29;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i29 := $M.29;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb38:
    assume $i30 == 1;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i31 := $M.34;
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb40;

  $bb41:
    assume $i32 == 1;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p33 := $M.28;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i34 := abituguru_remove($p33);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.35 := $i34;
    call {:si_unique_call 453} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i34);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i35 := $M.35;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i36 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 454} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i37 := $M.30;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i37, 1);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.30 := $i38;
    call {:si_unique_call 455} {:cexpr "ref_cnt"} boogie_si_record_i32($i38);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 456} {:cexpr "probed_1"} boogie_si_record_i32(0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb29:
    assume $i20 == 1;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i21 := $M.34;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb31;

  $bb32:
    assume $i22 == 1;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p23 := $M.28;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i24 := abituguru_remove($p23);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $M.35 := $i24;
    call {:si_unique_call 448} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i24);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i25 := $M.35;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i26 == 1;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 449} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i27 := $M.30;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, 1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $M.30 := $i28;
    call {:si_unique_call 450} {:cexpr "ref_cnt"} boogie_si_record_i32($i28);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 451} {:cexpr "probed_1"} boogie_si_record_i32(0);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb15:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb19;

  $bb20:
    assume $i10 == 1;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i11 := $M.29;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i12 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p13 := $M.28;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i14 := abituguru_probe($p13);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.33 := $i14;
    call {:si_unique_call 443} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i14);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i15 := $M.33;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i16 == 1;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 444} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i17 := $M.30;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $M.30 := $i18;
    call {:si_unique_call 445} {:cexpr "ref_cnt"} boogie_si_record_i32($i18);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 446} {:cexpr "probed_1"} boogie_si_record_i32(1);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb50_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 436} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 437} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 438} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 291824);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 292856);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const abituguru_exit: ref;

axiom abituguru_exit == $sub.ref(0, 293888);

procedure abituguru_exit();
  free requires assertsPassed;
  modifies $M.29;



implementation abituguru_exit()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p0 := $M.56;
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} platform_device_unregister($p0);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} ldv_platform_driver_unregister_30(abituguru_driver);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    return;
}



const abituguru_init: ref;

axiom abituguru_init == $sub.ref(0, 294920);

procedure abituguru_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.56, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.29, $M.28, $CurrAddr, $M.2;



implementation abituguru_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $i11: i64;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i37: i32;
  var $p42: ref;
  var $i26: i32;
  var $i20: i32;
  var $i13: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p0 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, $p1, 0);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p2, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $M.59 := $store.ref($M.59, $p3, $0.ref);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.60 := $store.i64($M.60, $p4, 256);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $M.61 := $store.ref($M.61, $p5, $0.ref);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $M.62 := $store.ref($M.62, $p6, $0.ref);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $M.63 := $store.ref($M.63, $p7, $0.ref);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p8 := dmi_get_system_info(9);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i9 := $M.64;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p8);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $i14 := strcmp($p8, .str.118);
    call {:si_unique_call 542} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i16 := abituguru_detect();
    call {:si_unique_call 544} {:cexpr "address"} boogie_si_record_i32($i16);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i18 := ldv___platform_driver_register_28(abituguru_driver, __this_module);
    call {:si_unique_call 546} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $p21 := platform_device_alloc(.str.3, $i16);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.56 := $p21;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p22 := $M.56;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i16);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $M.57 := $store.i64($M.57, $p28, $i27);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i16, 4);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $M.58 := $store.i64($M.58, $p31, $i30);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.59 := $store.ref($M.59, $p32, .str.3);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p33 := $M.56;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i34 := platform_device_add_resources($p33, $p0, 1);
    call {:si_unique_call 551} {:cexpr "err"} boogie_si_record_i32($i34);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p38 := $M.56;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $i39 := platform_device_add($p38);
    call {:si_unique_call 555} {:cexpr "err"} boogie_si_record_i32($i39);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_53 := printk.ref.i32(.str.121, $i39);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i37 := $i39;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p42 := $M.56;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} platform_device_put($p42);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i26 := $i37;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} ldv_platform_driver_unregister_29(abituguru_driver);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i20 := $i26;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb5;

  $bb22:
    assume $i35 == 1;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_52 := printk.ref.i32(.str.120, $i34);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i37 := $i34;
    goto $bb24;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_51 := printk.ref(.str.119);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 12);
    goto $bb20;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb16;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb5;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb5;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb5;

  $bb1:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;
}



const ldv_suspend_late_2: ref;

axiom ldv_suspend_late_2 == $sub.ref(0, 295952);

procedure ldv_suspend_late_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 557} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 558} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_2: ref;

axiom ldv_restore_early_2 == $sub.ref(0, 296984);

procedure ldv_restore_early_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 1} true;
    call {:si_unique_call 559} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 560} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_2: ref;

axiom ldv_resume_early_2 == $sub.ref(0, 298016);

procedure ldv_resume_early_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 1} true;
    call {:si_unique_call 561} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 562} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_2: ref;

axiom ldv_thaw_early_2 == $sub.ref(0, 299048);

procedure ldv_thaw_early_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 1} true;
    call {:si_unique_call 563} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 564} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_2: ref;

axiom ldv_resume_noirq_2 == $sub.ref(0, 300080);

procedure ldv_resume_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 565} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 566} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_2: ref;

axiom ldv_freeze_noirq_2 == $sub.ref(0, 301112);

procedure ldv_freeze_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 567} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 568} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_2: ref;

axiom ldv_prepare_2 == $sub.ref(0, 302144);

procedure ldv_prepare_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 1} true;
    call {:si_unique_call 569} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 570} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_2: ref;

axiom ldv_freeze_late_2 == $sub.ref(0, 303176);

procedure ldv_freeze_late_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 571} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 572} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_2: ref;

axiom ldv_thaw_noirq_2 == $sub.ref(0, 304208);

procedure ldv_thaw_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 1} true;
    call {:si_unique_call 573} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 574} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_2: ref;

axiom ldv_poweroff_noirq_2 == $sub.ref(0, 305240);

procedure ldv_poweroff_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 575} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 576} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_2: ref;

axiom ldv_poweroff_late_2 == $sub.ref(0, 306272);

procedure ldv_poweroff_late_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 578} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_2: ref;

axiom ldv_restore_noirq_2 == $sub.ref(0, 307304);

procedure ldv_restore_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_2: ref;

axiom ldv_suspend_noirq_2 == $sub.ref(0, 308336);

procedure ldv_suspend_noirq_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 581} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 582} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_2: ref;

axiom ldv_complete_2 == $sub.ref(0, 309368);

procedure ldv_complete_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 1} true;
    call {:si_unique_call 583} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 584} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 310400);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i0 := $M.65;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.66;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.10;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 1);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} ldv_error();
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} ldv_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} ldv_error();
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const dmi_get_system_info: ref;

axiom dmi_get_system_info == $sub.ref(0, 311432);

procedure dmi_get_system_info($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dmi_get_system_info($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} {:cexpr "dmi_get_system_info:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $p1 := external_alloc();
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 312464);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const abituguru_detect: ref;

axiom abituguru_detect == $sub.ref(0, 313496);

procedure abituguru_detect() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation abituguru_detect() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i8;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i8;
  var $i33: i1;
  var $i11: i32;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i1 := inb_p(224);
    call {:si_unique_call 592} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i2 := inb_p(228);
    call {:si_unique_call 594} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 8);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $M.3;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 1);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i32 := $M.64;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 19);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_54 := printk.ref(.str.125);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i11 := 224;
    goto $bb12;

  $bb14:
    assume $i13 == 1;
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p14, .str.3);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p15, .str.122);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p16, .str.5);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p17, .str.123);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.8, $p19);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 1574);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p19, $i22);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p23, 1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.9, $p24);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 596} {:cexpr "tmp___1"} boogie_si_record_i64($i28);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i2);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i1);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} __dynamic_pr_debug.ref.ref.i32.i32($p0, .str.124, $i30, $i31);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i8 == 1);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 172);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := 224;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const ldv___platform_driver_register_28: ref;

axiom ldv___platform_driver_register_28 == $sub.ref(0, 314528);

procedure ldv___platform_driver_register_28($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.28, $M.2, $CurrAddr;



implementation ldv___platform_driver_register_28($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 600} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 601} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} ldv_platform_driver_init_1();
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const platform_device_alloc: ref;

axiom platform_device_alloc == $sub.ref(0, 315560);

procedure platform_device_alloc($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_device_alloc($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} {:cexpr "platform_device_alloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p2 := external_alloc();
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const platform_device_add_resources: ref;

axiom platform_device_add_resources == $sub.ref(0, 316592);

procedure platform_device_add_resources($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation platform_device_add_resources($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 605} {:cexpr "platform_device_add_resources:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 606} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 607} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const platform_device_add: ref;

axiom platform_device_add == $sub.ref(0, 317624);

procedure platform_device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation platform_device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 1} true;
    call {:si_unique_call 608} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 609} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const platform_device_put: ref;

axiom platform_device_put == $sub.ref(0, 318656);

procedure platform_device_put($p0: ref);
  free requires assertsPassed;



implementation platform_device_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister_29: ref;

axiom ldv_platform_driver_unregister_29 == $sub.ref(0, 319688);

procedure ldv_platform_driver_unregister_29($p0: ref);
  free requires assertsPassed;
  modifies $M.29;



implementation ldv_platform_driver_unregister_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} platform_driver_unregister($p0);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 611} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 320720);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 321752);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 612} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 613} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 322784);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister_30: ref;

axiom ldv_platform_driver_unregister_30 == $sub.ref(0, 323816);

procedure ldv_platform_driver_unregister_30($p0: ref);
  free requires assertsPassed;
  modifies $M.29;



implementation ldv_platform_driver_unregister_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} platform_driver_unregister($p0);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 615} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 324848);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 616} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 1} true;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 325880);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 326912);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 327944);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 328976);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 330008);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 331040);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 332072);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 333104);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 334136);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 335168);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 336200);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 337232);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 338264);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 1} true;
    call {:si_unique_call 617} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 618} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 619} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 1} true;
    call {:si_unique_call 620} __VERIFIER_assume($i4);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 339296);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 340328);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 341360);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 342392);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 343424);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 622} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 623} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 624} __VERIFIER_assume($i4);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 344456);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 345488);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 346520);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 347552);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 348584);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 349616);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 350648);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 351680);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 352712);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 353744);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 354776);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 355808);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 356840);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 625} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 626} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 357872);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 358904);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 627} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 628} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 359936);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 360968);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 362000);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 629} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 630} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 1} true;
    call {:si_unique_call 631} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 632} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $p6 := malloc($i5);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.2;
    call {:si_unique_call 634} cmdloc_dummy_var_40 := $memset.i8(cmdloc_dummy_var_39, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_40;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 363032);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 364064);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.34, $M.28, $M.30, $M.27, $M.29, $M.31, $M.32, $M.33, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.10, $M.66, $M.65, $M.64, $M.56, $M.0, $M.19, $M.18, $M.13, $M.15, $M.14, $M.26, $M.25, $M.17, $M.20, $M.3, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 635} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.34 := 0;
    call {:si_unique_call 636} {:cexpr "probed_1"} boogie_si_record_i32(0);
    $M.28 := $0.ref;
    $M.30 := 0;
    call {:si_unique_call 637} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.27 := $0.ref;
    $M.29 := 0;
    call {:si_unique_call 638} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 639} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 640} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 641} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 642} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 643} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 644} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 645} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 646} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 647} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 648} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 649} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 650} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 651} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 652} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 653} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 654} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 655} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 656} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 657} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 658} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 659} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 660} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 661} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 662} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.10 := 1;
    call {:si_unique_call 663} {:cexpr "ldv_mutex_update_lock_of_abituguru_data"} boogie_si_record_i32(1);
    $M.66 := 1;
    call {:si_unique_call 664} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    $M.65 := 1;
    call {:si_unique_call 665} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    $M.64 := 0;
    call {:si_unique_call 666} {:cexpr "force"} boogie_si_record_i8(0);
    $M.56 := $0.ref;
    $M.0 := $store.ref($M.0, abituguru_sysfs_attr, .str.116);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_name);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_attr, $mul.ref(0, 56)), $mul.ref(0, 56)), $mul.ref(49, 1)), 0);
    $M.19 := .str.115;
    $M.18 := .str.114;
    $M.13 := $store.i32($M.13, abituguru_pwm_settings_multiplier, 0);
    $M.13 := $store.i32($M.13, $add.ref($add.ref(abituguru_pwm_settings_multiplier, $mul.ref(0, 20)), $mul.ref(1, 4)), 1);
    $M.13 := $store.i32($M.13, $add.ref($add.ref(abituguru_pwm_settings_multiplier, $mul.ref(0, 20)), $mul.ref(2, 4)), 1);
    $M.13 := $store.i32($M.13, $add.ref($add.ref(abituguru_pwm_settings_multiplier, $mul.ref(0, 20)), $mul.ref(3, 4)), 1000);
    $M.13 := $store.i32($M.13, $add.ref($add.ref(abituguru_pwm_settings_multiplier, $mul.ref(0, 20)), $mul.ref(4, 4)), 1000);
    $M.0 := $store.ref($M.0, abituguru_sysfs_pwm_templ, .str.108);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm_enable);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm_enable);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(49, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.109);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm_sensor);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm_sensor);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(49, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm_setting);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm_setting);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(49, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.111);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm_setting);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm_setting);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(49, 1)), 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.112);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm_setting);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm_setting);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(49, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.113);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_pwm_setting);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_pwm_setting);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(49, 1)), 4);
    $M.15 := $store.i8($M.15, abituguru_pwm_max, 0);
    $M.15 := $store.i8($M.15, $add.ref($add.ref(abituguru_pwm_max, $mul.ref(0, 5)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.15 := $store.i8($M.15, $add.ref($add.ref(abituguru_pwm_max, $mul.ref(0, 5)), $mul.ref(2, 1)), $sub.i8(0, 1));
    $M.15 := $store.i8($M.15, $add.ref($add.ref(abituguru_pwm_max, $mul.ref(0, 5)), $mul.ref(3, 1)), 75);
    $M.15 := $store.i8($M.15, $add.ref($add.ref(abituguru_pwm_max, $mul.ref(0, 5)), $mul.ref(4, 1)), 75);
    $M.14 := $store.i8($M.14, abituguru_pwm_min, 0);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(abituguru_pwm_min, $mul.ref(0, 5)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.14 := $store.i8($M.14, $add.ref($add.ref(abituguru_pwm_min, $mul.ref(0, 5)), $mul.ref(2, 1)), $sub.i8(0, 86));
    $M.14 := $store.i8($M.14, $add.ref($add.ref(abituguru_pwm_min, $mul.ref(0, 5)), $mul.ref(3, 1)), 25);
    $M.14 := $store.i8($M.14, $add.ref($add.ref(abituguru_pwm_min, $mul.ref(0, 5)), $mul.ref(4, 1)), 25);
    $M.26 := 0;
    call {:si_unique_call 667} {:cexpr "pwms"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, abituguru_sysfs_fan_templ, .str.83);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank2_value);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(0, 56)), $mul.ref(49, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.84);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank2_alarm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), $mul.ref(49, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.85);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank2_setting);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank2_setting);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), $mul.ref(49, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.86);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank2_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank2_mask);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), $mul.ref(49, 1)), 8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.87);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank2_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank2_mask);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), $mul.ref(49, 1)), $sub.i8(0, 128));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.88);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank2_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank2_mask);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), $mul.ref(49, 1)), 1);
    $M.25 := 0;
    call {:si_unique_call 668} {:cexpr "fan_sensors"} boogie_si_record_i32(0);
    $M.17 := $store.i32($M.17, abituguru_bank1_max_value, 3494);
    $M.17 := $store.i32($M.17, $add.ref($add.ref(abituguru_bank1_max_value, $mul.ref(0, 8)), $mul.ref(1, 4)), 255000);
    $M.0 := $store.ref($M.0, abituguru_sysfs_bank1_templ, .str.46);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_value);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(0, 56)), $mul.ref(49, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.47);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_setting);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_setting);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(1, 56)), $mul.ref(49, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.48);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_alarm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(2, 56)), $mul.ref(49, 1)), 64);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.49);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_setting);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_setting);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(3, 56)), $mul.ref(49, 1)), 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.50);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_alarm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(4, 56)), $mul.ref(49, 1)), 32);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.51);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_mask);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(5, 56)), $mul.ref(49, 1)), 8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.52);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_mask);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(6, 56)), $mul.ref(49, 1)), $sub.i8(0, 128));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.53);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_mask);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(7, 56)), $mul.ref(49, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.54);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_mask);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(0, 504)), $mul.ref(8, 56)), $mul.ref(49, 1)), 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_value);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(0, 56)), $mul.ref(49, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.56);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_alarm);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(1, 56)), $mul.ref(49, 1)), 16);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.57);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_setting);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_setting);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(2, 56)), $mul.ref(49, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.58);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_setting);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_setting);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(3, 56)), $mul.ref(49, 1)), 2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.59);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_mask);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(4, 56)), $mul.ref(49, 1)), 8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_mask);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(5, 56)), $mul.ref(49, 1)), $sub.i8(0, 128));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.61);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_bank1_mask);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), store_bank1_mask);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(6, 56)), $mul.ref(49, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(7, 56)), $mul.ref(49, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(1, 504)), $mul.ref(8, 56)), $mul.ref(49, 1)), 0);
    $M.20 := $store.i32($M.20, bank1_types, $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(1, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(2, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(3, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(4, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(5, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(6, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(7, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(8, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(9, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(10, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(11, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(12, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(13, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(14, 4)), $sub.i32(0, 1));
    $M.20 := $store.i32($M.20, $add.ref($add.ref(bank1_types, $mul.ref(0, 64)), $mul.ref(15, 4)), $sub.i32(0, 1));
    $M.3 := 2;
    call {:si_unique_call 669} {:cexpr "verbose"} boogie_si_record_i32(2);
    $M.0 := $store.i8($M.0, .str.46, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 9)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 9)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 9)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 9)), $mul.ref(7, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(7, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 10)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 10)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 10)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 10)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 10)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 10)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(11, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(18, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(2, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(7, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(18, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(9, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(13, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.61, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(4, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(16, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.114 := $store.i8($M.114, .str.3, 97);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.3, $mul.ref(0, 10)), $mul.ref(1, 1)), 98);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.3, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.3, $mul.ref(0, 10)), $mul.ref(3, 1)), 116);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.3, $mul.ref(0, 10)), $mul.ref(4, 1)), 117);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.3, $mul.ref(0, 10)), $mul.ref(5, 1)), 103);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.3, $mul.ref(0, 10)), $mul.ref(6, 1)), 117);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.3, $mul.ref(0, 10)), $mul.ref(7, 1)), 114);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.3, $mul.ref(0, 10)), $mul.ref(8, 1)), 117);
    $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.3, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.115 := $store.i8($M.115, .str.68, 49);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.68, $mul.ref(0, 3)), $mul.ref(1, 1)), 10);
    $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.68, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i8($M.116, .str.69, 48);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.69, $mul.ref(0, 3)), $mul.ref(1, 1)), 10);
    $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.69, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, .str.62, 37);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.62, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.62, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.62, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.83, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.83, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.85, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.86, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 11)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 11)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 11)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 11)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 11)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 11)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 11)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 11)), $mul.ref(9, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(12, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(15, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.108, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.108, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.109, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(11, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(12, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(22, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(23, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.109, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.110, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(16, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.111, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(16, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(18, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(19, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.111, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.112, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(16, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.113, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(3, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(16, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.113, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.116, 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 5)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 5)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.116, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, .str.117, 37);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.117, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.117, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.117, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.119 := $store.i8($M.119, .str.118, 104);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(1, 1)), 116);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(2, 1)), 116);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(3, 1)), 112);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(4, 1)), 58);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(5, 1)), 47);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(6, 1)), 47);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(7, 1)), 119);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(8, 1)), 119);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(9, 1)), 119);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(10, 1)), 46);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(11, 1)), 97);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(12, 1)), 98);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(13, 1)), 105);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(14, 1)), 116);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(15, 1)), 46);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(16, 1)), 99);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(17, 1)), 111);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(18, 1)), 109);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(19, 1)), 46);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(20, 1)), 116);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(21, 1)), 119);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(22, 1)), 47);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(.str.118, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    call {:si_unique_call 670} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 365096);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 366128);

procedure devirtbounce.1(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 367160);

procedure devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 368192);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 369224);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.34, $M.28, $M.30, $M.27, $M.29, $M.31, $M.32, $M.33, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.10, $M.66, $M.65, $M.64, $M.56, $M.0, $M.19, $M.18, $M.13, $M.15, $M.14, $M.26, $M.25, $M.17, $M.20, $M.3, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 671} __SMACK_static_init();
    call {:si_unique_call 672} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.29, $M.30, $M.31, $M.32, $M.16, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.12, $M.33, $M.34, $M.35, $M.36, $M.27, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.28, $M.10, $M.66, $M.65, $M.64, $M.56, $M.19, $M.18, $M.13, $M.15, $M.14, $M.26, $M.25, $M.17, $M.20, $M.3, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $CurrAddr, $M.22, $M.23, $M.24, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.2;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation abituguru_write_loop_$bb35(in_$p75: ref, in_$i82: i32, in_$i83: i1, in_$i104: i16, in_$i105: i32, in_$i106: i8, in_$i107: i32, in_$i108: i1, in_$i81: i32) returns (out_$i82: i32, out_$i83: i1, out_$i104: i16, out_$i105: i32, out_$i106: i8, out_$i107: i32, out_$i108: i1, out_$i81: i32)
{

  entry:
    out_$i82, out_$i83, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i81 := in_$i82, in_$i83, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i81;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_119;

  $bb46:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i81 := out_$i82;
    goto $bb46_dummy;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 172);
    goto corral_source_split_162;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i106);
    goto corral_source_split_161;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} out_$i106 := inb_p(out_$i105);
    call {:si_unique_call 29} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i106);
    goto corral_source_split_160;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i16.i32(out_$i104);
    goto corral_source_split_159;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i16($M.0, in_$p75);
    goto corral_source_split_158;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} msleep(0);
    goto corral_source_split_157;

  $bb38:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 0);
    goto corral_source_split_122;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i82 := $sub.i32(out_$i81, 1);
    call {:si_unique_call 23} {:cexpr "timeout"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb46_dummy:
    call {:si_unique_call 1} out_$i82, out_$i83, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i81 := abituguru_write_loop_$bb35(in_$p75, out_$i82, out_$i83, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i81);
    return;

  exit:
    return;
}



procedure abituguru_write_loop_$bb35(in_$p75: ref, in_$i82: i32, in_$i83: i1, in_$i104: i16, in_$i105: i32, in_$i106: i8, in_$i107: i32, in_$i108: i1, in_$i81: i32) returns (out_$i82: i32, out_$i83: i1, out_$i104: i16, out_$i105: i32, out_$i106: i8, out_$i107: i32, out_$i108: i1, out_$i81: i32);



implementation abituguru_write_loop_$bb8(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i42: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i8, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i17: i32, in_$i52: i32) returns (out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i42: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i8, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i17: i32, out_$i52: i32)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i17, out_$i52 := in_$i18, in_$i19, in_$i20, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i17, in_$i52;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_21;

  $bb20:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i50;
    goto $bb20_dummy;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i50;
    assume true;
    goto $bb20;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i50, in_$i4);
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i17, 1);
    call {:si_unique_call 17} {:cexpr "i"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} outb(out_$i46, out_$i49);
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i48);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i16($M.0, out_$p47);
    goto corral_source_split_69;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i8(out_$i45);
    goto corral_source_split_67;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_66;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.0, out_$p43);
    goto corral_source_split_65;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(in_$p3, $mul.ref(out_$i42, 1));
    goto corral_source_split_64;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i17);
    goto corral_source_split_63;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i17;
    assume true;
    goto $bb11;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_24;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} out_$i18 := abituguru_wait(in_$p0, 0);
    call {:si_unique_call 10} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_23;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i17, out_$i52 := abituguru_write_loop_$bb8(in_$p0, in_$p3, in_$i4, out_$i18, out_$i19, out_$i20, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i17, out_$i52);
    return;

  exit:
    return;
}



procedure abituguru_write_loop_$bb8(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i42: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i8, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i17: i32, in_$i52: i32) returns (out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i42: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i8, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i17: i32, out_$i52: i32);



implementation abituguru_send_address_loop_$bb4(in_$p0: ref, in_$i1: i8, in_$p4: ref, in_$p5: ref, in_$i9: i32, in_$i11: i32, in_$i12: i8, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i24, in_$i30: i24, in_$i31: i24, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$i46: i32, in_$i72: i32, in_$i73: i1, in_vslice_dummy_var_42: i64) returns (out_$i9: i32, out_$i11: i32, out_$i12: i8, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i24, out_$i30: i24, out_$i31: i24, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$i46: i32, out_$i72: i32, out_$i73: i1, out_vslice_dummy_var_42: i64)
{

  entry:
    out_$i9, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i46, out_$i72, out_$i73, out_vslice_dummy_var_42 := in_$i9, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i46, in_$i72, in_$i73, in_vslice_dummy_var_42;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb31:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := out_$i46;
    goto $bb31_dummy;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_252;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} out_$i72 := abituguru_ready(in_$p0);
    call {:si_unique_call 55} {:cexpr "tmp"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_251;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i32(out_$i9, 1);
    call {:si_unique_call 53} {:cexpr "retries"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_249;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} out_vslice_dummy_var_42 := schedule_timeout(50);
    goto corral_source_split_248;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, in_$p5, out_$i44);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p41, $mul.ref(0, 11712)), $mul.ref(0, 1));
    call {:si_unique_call 51} out_$i44 := devirtbounce(0, out_$p43, out_$i42, out_$p43);
    goto corral_source_split_245;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.12, in_$p5);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} out_$p41 := get_current();
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, in_$p5, 2);
    goto corral_source_split_242;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $M.11 := $store.i64($M.11, out_$p40, 0);
    goto corral_source_split_241;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 11712)), $mul.ref(11696, 1));
    goto corral_source_split_240;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} out_$p39 := get_current();
    goto corral_source_split_239;

  $bb13:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __dynamic_pr_debug.ref.ref.i32(in_$p4, .str.10, out_$i9);
    goto corral_source_split_237;

  $bb14:
    assume out_$i38 == 1;
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} out_$i37 := ldv__builtin_expect(out_$i36, 0);
    call {:si_unique_call 47} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i64(out_$i35, 1);
    goto corral_source_split_232;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i64(out_$i34);
    goto corral_source_split_231;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.9, out_$p33);
    goto corral_source_split_230;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, out_$p32, 1);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, out_$p28, out_$i31);
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$i31 := $or.i24(out_$i30, 367);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i24(out_$i29, $sub.i24(0, 262144));
    goto corral_source_split_224;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i24($M.8, out_$p28);
    goto corral_source_split_223;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p26, .str.9);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p25, .str.5);
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p24, .str.8);
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p23, .str.3);
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_213;

  $bb12:
    assume out_$i22 == 1;
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$i22 := $sgt.i32(out_$i21, 2);
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    out_$i21 := $M.3;
    goto corral_source_split_209;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i9, 0);
    goto corral_source_split_206;

  $bb8:
    assume out_$i19 == 1;
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i18, 0);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_$i18 := abituguru_wait(in_$p0, 8);
    call {:si_unique_call 45} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p17, 0);
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(178, 1));
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} outb(out_$i12, out_$i16);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i15, 4);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$i12 := $trunc.i32.i8(out_$i11);
    goto corral_source_split_194;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i8.i32(in_$i1);
    goto corral_source_split_193;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i9, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i46, out_$i72, out_$i73, out_vslice_dummy_var_42 := abituguru_send_address_loop_$bb4(in_$p0, in_$i1, in_$p4, in_$p5, out_$i9, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i46, out_$i72, out_$i73, out_vslice_dummy_var_42);
    return;

  exit:
    return;
}



procedure abituguru_send_address_loop_$bb4(in_$p0: ref, in_$i1: i8, in_$p4: ref, in_$p5: ref, in_$i9: i32, in_$i11: i32, in_$i12: i8, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i24, in_$i30: i24, in_$i31: i24, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$i46: i32, in_$i72: i32, in_$i73: i1, in_vslice_dummy_var_42: i64) returns (out_$i9: i32, out_$i11: i32, out_$i12: i8, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i24, out_$i30: i24, out_$i31: i24, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$i46: i32, out_$i72: i32, out_$i73: i1, out_vslice_dummy_var_42: i64);
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.12, $M.11;



implementation abituguru_wait_loop_$bb4(in_$p2: ref, in_$i8: i32, in_$i11: i32, in_$i12: i1, in_$i14: i1, in_$i15: i16, in_$i16: i32, in_$i17: i32, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$i10: i32) returns (out_$i11: i32, out_$i12: i1, out_$i14: i1, out_$i15: i16, out_$i16: i32, out_$i17: i32, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$i10: i32)
{

  entry:
    out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i10 := in_$i11, in_$i12, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_307;

  $bb13:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i11;
    goto $bb13_dummy;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, in_$i8);
    goto corral_source_split_326;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_$i18 := inb_p(out_$i17);
    call {:si_unique_call 66} {:cexpr "tmp"} boogie_si_record_i8(out_$i18);
    goto corral_source_split_324;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 4);
    goto corral_source_split_323;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i15);
    goto corral_source_split_322;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i16($M.0, in_$p2);
    goto corral_source_split_321;

  $bb11:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} msleep(0);
    goto corral_source_split_319;

  $bb10:
    assume out_$i14 == 1;
    goto corral_source_split_318;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i14 := $sle.i32(out_$i11, 5);
    goto corral_source_split_316;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_310;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 63} {:cexpr "timeout"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i10 := abituguru_wait_loop_$bb4(in_$p2, in_$i8, out_$i11, out_$i12, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i10);
    return;

  exit:
    return;
}



procedure abituguru_wait_loop_$bb4(in_$p2: ref, in_$i8: i32, in_$i11: i32, in_$i12: i1, in_$i14: i1, in_$i15: i16, in_$i16: i32, in_$i17: i32, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$i10: i32) returns (out_$i11: i32, out_$i12: i1, out_$i14: i1, out_$i15: i16, out_$i16: i32, out_$i17: i32, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$i10: i32);



implementation abituguru_ready_loop_$bb34(in_$p65: ref, in_$i73: i32, in_$i74: i1, in_$i93: i16, in_$i94: i32, in_$i95: i32, in_$i96: i8, in_$i97: i32, in_$i98: i1, in_$i72: i32) returns (out_$i73: i32, out_$i74: i1, out_$i93: i16, out_$i94: i32, out_$i95: i32, out_$i96: i8, out_$i97: i32, out_$i98: i1, out_$i72: i32)
{

  entry:
    out_$i73, out_$i74, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i72 := in_$i73, in_$i74, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i72;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_463;

  $bb45:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := out_$i73;
    goto $bb45_dummy;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 8);
    goto corral_source_split_505;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i32(out_$i96);
    goto corral_source_split_504;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} out_$i96 := inb_p(out_$i95);
    call {:si_unique_call 103} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i96);
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i94, 4);
    goto corral_source_split_502;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i16.i32(out_$i93);
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i16($M.0, in_$p65);
    goto corral_source_split_500;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} msleep(0);
    goto corral_source_split_499;

  $bb37:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 0);
    goto corral_source_split_466;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i72, 1);
    call {:si_unique_call 97} {:cexpr "timeout"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_465;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i73, out_$i74, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i72 := abituguru_ready_loop_$bb34(in_$p65, out_$i73, out_$i74, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i72);
    return;

  exit:
    return;
}



procedure abituguru_ready_loop_$bb34(in_$p65: ref, in_$i73: i32, in_$i74: i1, in_$i93: i16, in_$i94: i32, in_$i95: i32, in_$i96: i8, in_$i97: i32, in_$i98: i1, in_$i72: i32) returns (out_$i73: i32, out_$i74: i1, out_$i93: i16, out_$i94: i32, out_$i95: i32, out_$i96: i8, out_$i97: i32, out_$i98: i1, out_$i72: i32);



implementation abituguru_ready_loop_$bb17(in_$p33: ref, in_$i40: i32, in_$i41: i1, in_$i60: i16, in_$i61: i32, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$i39: i32) returns (out_$i40: i32, out_$i41: i1, out_$i60: i16, out_$i61: i32, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$i39: i32)
{

  entry:
    out_$i40, out_$i41, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i39 := in_$i40, in_$i41, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i39;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_408;

  $bb28:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := out_$i40;
    goto $bb28_dummy;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 172);
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} out_$i62 := inb_p(out_$i61);
    call {:si_unique_call 94} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i62);
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$i61 := $zext.i16.i32(out_$i60);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i16($M.0, in_$p33);
    goto corral_source_split_445;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} msleep(0);
    goto corral_source_split_444;

  $bb20:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 0);
    goto corral_source_split_411;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i39, 1);
    call {:si_unique_call 88} {:cexpr "timeout"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i40, out_$i41, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i39 := abituguru_ready_loop_$bb17(in_$p33, out_$i40, out_$i41, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i39);
    return;

  exit:
    return;
}



procedure abituguru_ready_loop_$bb17(in_$p33: ref, in_$i40: i32, in_$i41: i1, in_$i60: i16, in_$i61: i32, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$i39: i32) returns (out_$i40: i32, out_$i41: i1, out_$i60: i16, out_$i61: i32, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$i39: i32);



implementation abituguru_read_loop_$bb8(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$p42: ref, in_$i43: i16, in_$i44: i32, in_$i45: i8, in_$i46: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i16: i32, in_$i50: i32) returns (out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$p42: ref, out_$i43: i16, out_$i44: i32, out_$i45: i8, out_$i46: i64, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i16: i32, out_$i50: i32)
{

  entry:
    out_$i17, out_$i18, out_$i19, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i16, out_$i50 := in_$i17, in_$i18, in_$i19, in_$p42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i16, in_$i50;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  $bb23:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i48;
    goto $bb23_dummy;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i48;
    assume true;
    goto $bb23;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i48, in_$i4);
    goto corral_source_split_600;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i16, 1);
    call {:si_unique_call 128} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_599;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p47, out_$i45);
    goto corral_source_split_598;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(in_$p3, $mul.ref(out_$i46, 1));
    goto corral_source_split_597;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i16);
    goto corral_source_split_596;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} out_$i45 := inb(out_$i44);
    goto corral_source_split_595;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i43);
    goto corral_source_split_594;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.0, out_$p42);
    goto corral_source_split_593;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(176, 1));
    goto corral_source_split_592;

  $bb11:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i16;
    assume true;
    goto $bb11;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_552;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} out_$i17 := abituguru_wait(in_$p0, 1);
    call {:si_unique_call 122} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_551;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$i19, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i16, out_$i50 := abituguru_read_loop_$bb8(in_$p0, in_$p3, in_$i4, out_$i17, out_$i18, out_$i19, out_$p42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i16, out_$i50);
    return;

  exit:
    return;
}



procedure abituguru_read_loop_$bb8(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$p42: ref, in_$i43: i16, in_$i44: i32, in_$i45: i8, in_$i46: i64, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$i16: i32, in_$i50: i32) returns (out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$p42: ref, out_$i43: i16, out_$i44: i32, out_$i45: i8, out_$i46: i64, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$i16: i32, out_$i50: i32);
  modifies $M.0;



implementation abituguru_probe_loop_$bb114(in_$p0: ref, in_$p21: ref, in_$p309: ref, in_$i310: i64, in_$p313: ref, in_$i314: i32, in_$i315: i64, in_$p319: ref, in_$p320: ref, in_$i321: i64, in_$i322: i1, in_$i308: i32) returns (out_$p309: ref, out_$i310: i64, out_$p313: ref, out_$i314: i32, out_$i315: i64, out_$p319: ref, out_$p320: ref, out_$i321: i64, out_$i322: i1, out_$i308: i32)
{

  entry:
    out_$p309, out_$i310, out_$p313, out_$i314, out_$i315, out_$p319, out_$p320, out_$i321, out_$i322, out_$i308 := in_$p309, in_$i310, in_$p313, in_$i314, in_$i315, in_$p319, in_$p320, in_$i321, in_$i322, in_$i308;
    goto $bb114, exit;

  $bb114:
    assume {:verifier.code 0} true;
    goto corral_source_split_996;

  $bb116:
    assume out_$i322 == 1;
    assume {:verifier.code 0} true;
    out_$i308 := out_$i314;
    goto $bb116_dummy;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$i322 := $ne.i64(out_$i321, 0);
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    out_$i321 := $p2i.ref.i64(out_$p320);
    goto corral_source_split_1005;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$p320 := $load.ref($M.0, out_$p319);
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$i315 := $sext.i32.i64(out_$i314);
    out_$p319 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i315, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i314 := $add.i32(out_$i308, 1);
    call {:si_unique_call 196} {:cexpr "i"} boogie_si_record_i32(out_$i314);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} device_remove_file(out_$p309, out_$p313);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$p313 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i310, 56)), $mul.ref(0, 1));
    goto corral_source_split_1000;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    out_$i310 := $sext.i32.i64(out_$i308);
    goto corral_source_split_999;

  $bb115:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_998;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116_dummy:
    call {:si_unique_call 1} out_$p309, out_$i310, out_$p313, out_$i314, out_$i315, out_$p319, out_$p320, out_$i321, out_$i322, out_$i308 := abituguru_probe_loop_$bb114(in_$p0, in_$p21, out_$p309, out_$i310, out_$p313, out_$i314, out_$i315, out_$p319, out_$p320, out_$i321, out_$i322, out_$i308);
    return;

  exit:
    return;
}



procedure abituguru_probe_loop_$bb114(in_$p0: ref, in_$p21: ref, in_$p309: ref, in_$i310: i64, in_$p313: ref, in_$i314: i32, in_$i315: i64, in_$p319: ref, in_$p320: ref, in_$i321: i64, in_$i322: i1, in_$i308: i32) returns (out_$p309: ref, out_$i310: i64, out_$p313: ref, out_$i314: i32, out_$i315: i64, out_$p319: ref, out_$p320: ref, out_$i321: i64, out_$i322: i1, out_$i308: i32);



implementation abituguru_probe_loop_$bb91(in_$p0: ref, in_$p21: ref, in_$i226: i32, in_$p270: ref, in_$i271: i64, in_$p274: ref, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i32, in_$i279: i1, in_$i269: i32) returns (out_$p270: ref, out_$i271: i64, out_$p274: ref, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i32, out_$i279: i1, out_$i269: i32)
{

  entry:
    out_$p270, out_$i271, out_$p274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i269 := in_$p270, in_$i271, in_$p274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i269;
    goto $bb91, exit;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_949;

  $bb96:
    assume out_$i279 == 1;
    assume {:verifier.code 0} true;
    out_$i269 := out_$i278;
    goto $bb96_dummy;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$i279 := $slt.i32(out_$i278, in_$i226);
    goto corral_source_split_960;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i278 := $add.i32(out_$i269, 1);
    call {:si_unique_call 186} {:cexpr "i"} boogie_si_record_i32(out_$i278);
    goto corral_source_split_959;

  $bb94:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$i277 := out_$i275;
    assume true;
    goto $bb94;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$i276 := $ne.i32(out_$i275, 0);
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} out_$i275 := device_create_file(out_$p270, out_$p274);
    call {:si_unique_call 185} {:cexpr "res"} boogie_si_record_i32(out_$i275);
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$p274 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i271, 56)), $mul.ref(0, 1));
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$i271 := $sext.i32.i64(out_$i269);
    goto corral_source_split_952;

  $bb92:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb96_dummy:
    call {:si_unique_call 1} out_$p270, out_$i271, out_$p274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i269 := abituguru_probe_loop_$bb91(in_$p0, in_$p21, in_$i226, out_$p270, out_$i271, out_$p274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i269);
    return;

  exit:
    return;
}



procedure abituguru_probe_loop_$bb91(in_$p0: ref, in_$p21: ref, in_$i226: i32, in_$p270: ref, in_$i271: i64, in_$p274: ref, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i32, in_$i279: i1, in_$i269: i32) returns (out_$p270: ref, out_$i271: i64, out_$p274: ref, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i32, out_$i279: i1, out_$i269: i32);



implementation abituguru_probe_loop_$bb76(in_$p21: ref, in_$p222: ref, in_$i232: i64, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i64, in_$p238: ref, in_$p239: ref, in_$i240: i64, in_$p245: ref, in_$i246: i8, in_$i247: i64, in_$p250: ref, in_$i251: i64, in_$p252: ref, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i8, in_$i257: i32, in_$i258: i1, in_$p228: ref, in_$i229: i32, in_$i230: i32, in_$i231: i32, in_$i259: i32, in_$i261: i32, in_$i324: i64, in_$i325: i32, in_$i326: i32, in_$i327: i32, in_$i328: i64, in_$p330: ref, in_$p331: ref, in_$i332: i64, in_$p337: ref, in_$i338: i8, in_$i339: i64, in_$p342: ref, in_$i343: i64, in_$i344: i64, in_$p345: ref, in_$i346: i32, in_$i347: i32, in_$i348: i64, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i64, in_$p354: ref, in_$p355: ref, in_$i356: i64, in_$p361: ref, in_$i362: i8, in_$i363: i64, in_$p366: ref, in_$i367: i64, in_$i368: i64, in_$p369: ref, in_$i370: i32, in_$i371: i32, in_$i372: i64, in_$i373: i32, in_$i374: i32, in_$i375: i32, in_$i376: i64, in_$p378: ref, in_$p379: ref, in_$i380: i64, in_$p385: ref, in_$i386: i8, in_$i387: i64, in_$p390: ref, in_$i391: i64, in_$i392: i64, in_$p393: ref, in_$i394: i32, in_$i395: i32, in_$i396: i64, in_$i397: i32, in_$i398: i32, in_$i399: i32, in_$i400: i64, in_$p402: ref, in_$p403: ref, in_$i404: i64, in_$p409: ref, in_$i410: i8, in_$i411: i64, in_$p414: ref, in_$i415: i64, in_$i416: i64, in_$p417: ref, in_$i418: i32, in_$i419: i32, in_$i420: i64, in_$i421: i32, in_$i422: i32, in_$i423: i32, in_$i424: i64, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$p433: ref, in_$i434: i8, in_$i435: i64, in_$p438: ref, in_$i439: i64, in_$i440: i64, in_$p441: ref, in_$i262: i32, in_$i260: i32, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8) returns (out_$i232: i64, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i64, out_$p238: ref, out_$p239: ref, out_$i240: i64, out_$p245: ref, out_$i246: i8, out_$i247: i64, out_$p250: ref, out_$i251: i64, out_$p252: ref, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i8, out_$i257: i32, out_$i258: i1, out_$p228: ref, out_$i229: i32, out_$i230: i32, out_$i231: i32, out_$i259: i32, out_$i261: i32, out_$i324: i64, out_$i325: i32, out_$i326: i32, out_$i327: i32, out_$i328: i64, out_$p330: ref, out_$p331: ref, out_$i332: i64, out_$p337: ref, out_$i338: i8, out_$i339: i64, out_$p342: ref, out_$i343: i64, out_$i344: i64, out_$p345: ref, out_$i346: i32, out_$i347: i32, out_$i348: i64, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i64, out_$p354: ref, out_$p355: ref, out_$i356: i64, out_$p361: ref, out_$i362: i8, out_$i363: i64, out_$p366: ref, out_$i367: i64, out_$i368: i64, out_$p369: ref, out_$i370: i32, out_$i371: i32, out_$i372: i64, out_$i373: i32, out_$i374: i32, out_$i375: i32, out_$i376: i64, out_$p378: ref, out_$p379: ref, out_$i380: i64, out_$p385: ref, out_$i386: i8, out_$i387: i64, out_$p390: ref, out_$i391: i64, out_$i392: i64, out_$p393: ref, out_$i394: i32, out_$i395: i32, out_$i396: i64, out_$i397: i32, out_$i398: i32, out_$i399: i32, out_$i400: i64, out_$p402: ref, out_$p403: ref, out_$i404: i64, out_$p409: ref, out_$i410: i8, out_$i411: i64, out_$p414: ref, out_$i415: i64, out_$i416: i64, out_$p417: ref, out_$i418: i32, out_$i419: i32, out_$i420: i64, out_$i421: i32, out_$i422: i32, out_$i423: i32, out_$i424: i64, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$p433: ref, out_$i434: i8, out_$i435: i64, out_$p438: ref, out_$i439: i64, out_$i440: i64, out_$p441: ref, out_$i262: i32, out_$i260: i32, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8)
{

  entry:
    out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$p238, out_$p239, out_$i240, out_$p245, out_$i246, out_$i247, out_$p250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p228, out_$i229, out_$i230, out_$i231, out_$i259, out_$i261, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p330, out_$p331, out_$i332, out_$p337, out_$i338, out_$i339, out_$p342, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p354, out_$p355, out_$i356, out_$p361, out_$i362, out_$i363, out_$p366, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p378, out_$p379, out_$i380, out_$p385, out_$i386, out_$i387, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$p402, out_$p403, out_$i404, out_$p409, out_$i410, out_$i411, out_$p414, out_$i415, out_$i416, out_$p417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$p426, out_$p427, out_$i428, out_$p433, out_$i434, out_$i435, out_$p438, out_$i439, out_$i440, out_$p441, out_$i262, out_$i260, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26 := in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$p238, in_$p239, in_$i240, in_$p245, in_$i246, in_$i247, in_$p250, in_$i251, in_$p252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$p228, in_$i229, in_$i230, in_$i231, in_$i259, in_$i261, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$p330, in_$p331, in_$i332, in_$p337, in_$i338, in_$i339, in_$p342, in_$i343, in_$i344, in_$p345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$p354, in_$p355, in_$i356, in_$p361, in_$i362, in_$i363, in_$p366, in_$i367, in_$i368, in_$p369, in_$i370, in_$i371, in_$i372, in_$i373, in_$i374, in_$i375, in_$i376, in_$p378, in_$p379, in_$i380, in_$p385, in_$i386, in_$i387, in_$p390, in_$i391, in_$i392, in_$p393, in_$i394, in_$i395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$p402, in_$p403, in_$i404, in_$p409, in_$i410, in_$i411, in_$p414, in_$i415, in_$i416, in_$p417, in_$i418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$p426, in_$p427, in_$i428, in_$p433, in_$i434, in_$i435, in_$p438, in_$i439, in_$i440, in_$p441, in_$i262, in_$i260, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14, in_cmdloc_dummy_var_15, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_cmdloc_dummy_var_18, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_cmdloc_dummy_var_23, in_cmdloc_dummy_var_24, in_cmdloc_dummy_var_25, in_cmdloc_dummy_var_26;
    goto $bb76, exit;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  $bb82:
    assume out_$i258 == 1;
    assume {:verifier.code 0} true;
    out_$p228, out_$i229, out_$i230, out_$i231 := out_$p441, out_$i255, out_$i262, out_$i260;
    goto $bb82_dummy;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    out_$i259, out_$i261 := out_$i260, out_$i262;
    assume true;
    goto $bb82;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$i258 := $sgt.i32(out_$i257, out_$i255);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i257 := $zext.i8.i32(out_$i256);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$i256 := $load.i8($M.0, in_$p222);
    goto corral_source_split_931;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i255 := $add.i32(out_$i229, 1);
    call {:si_unique_call 181} {:cexpr "i"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_930;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$i260 := $add.i32(out_$i419, 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$i262 := $sub.i32(out_$i418, out_$i423);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$p441 := $add.ref(out_$p228, $mul.ref(out_$i440, 1));
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$i439 := $sext.i32.i64(out_$i423);
    out_$i440 := $add.i64(out_$i416, out_$i439);
    goto corral_source_split_1087;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p438, out_$i434);
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$p438 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i435, 56)), $mul.ref(48, 1));
    goto corral_source_split_1085;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$i435 := $sext.i32.i64(out_$i419);
    goto corral_source_split_1084;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    out_$i434 := $trunc.i32.i8(out_$i229);
    goto corral_source_split_1083;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p433, out_$p417);
    goto corral_source_split_1082;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    out_$p433 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i428, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1081;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    out_$i428 := $sext.i32.i64(out_$i419);
    goto corral_source_split_1080;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_24 := $M.0;
    out_cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 205} out_cmdloc_dummy_var_26 := $memcpy.i8(out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_$p427, $add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_26;
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    out_$p427 := $bitcast.ref.ref(out_$p426);
    goto corral_source_split_1078;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$p426 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i424, 56));
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$i424 := $sext.i32.i64(out_$i419);
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$i423 := $add.i32(out_$i422, 1);
    goto corral_source_split_1075;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} out_$i422 := snprintf.ref.i64.ref.i32(out_$p417, out_$i420, .str.113, out_$i421);
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$i421 := $add.i32(out_$i229, 1);
    goto corral_source_split_1073;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i420 := $sext.i32.i64(out_$i418);
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$i419 := $add.i32(out_$i395, 1);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$i418 := $sub.i32(out_$i394, out_$i399);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    out_$p417 := $add.ref(out_$p228, $mul.ref(out_$i416, 1));
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i415 := $sext.i32.i64(out_$i399);
    out_$i416 := $add.i64(out_$i392, out_$i415);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p414, out_$i410);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$p414 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i411, 56)), $mul.ref(48, 1));
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$i411 := $sext.i32.i64(out_$i395);
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$i410 := $trunc.i32.i8(out_$i229);
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p409, out_$p393);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$p409 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i404, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1061;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    out_$i404 := $sext.i32.i64(out_$i395);
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_21 := $M.0;
    out_cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 203} out_cmdloc_dummy_var_23 := $memcpy.i8(out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_$p403, $add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_23;
    goto corral_source_split_1059;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    out_$p403 := $bitcast.ref.ref(out_$p402);
    goto corral_source_split_1058;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    out_$p402 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i400, 56));
    goto corral_source_split_1057;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    out_$i400 := $sext.i32.i64(out_$i395);
    goto corral_source_split_1056;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    out_$i399 := $add.i32(out_$i398, 1);
    goto corral_source_split_1055;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} out_$i398 := snprintf.ref.i64.ref.i32(out_$p393, out_$i396, .str.112, out_$i397);
    goto corral_source_split_1054;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    out_$i397 := $add.i32(out_$i229, 1);
    goto corral_source_split_1053;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i396 := $sext.i32.i64(out_$i394);
    goto corral_source_split_1052;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    out_$i395 := $add.i32(out_$i371, 1);
    goto corral_source_split_1050;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    out_$i394 := $sub.i32(out_$i370, out_$i375);
    goto corral_source_split_1049;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    out_$p393 := $add.ref(out_$p228, $mul.ref(out_$i392, 1));
    goto corral_source_split_1048;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    out_$i391 := $sext.i32.i64(out_$i375);
    out_$i392 := $add.i64(out_$i368, out_$i391);
    goto corral_source_split_1047;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p390, out_$i386);
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    out_$p390 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i387, 56)), $mul.ref(48, 1));
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$i387 := $sext.i32.i64(out_$i371);
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$i386 := $trunc.i32.i8(out_$i229);
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p385, out_$p369);
    goto corral_source_split_1042;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    out_$p385 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i380, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1041;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    out_$i380 := $sext.i32.i64(out_$i371);
    goto corral_source_split_1040;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_18 := $M.0;
    out_cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 201} out_cmdloc_dummy_var_20 := $memcpy.i8(out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_$p379, $add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_20;
    goto corral_source_split_1039;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    out_$p379 := $bitcast.ref.ref(out_$p378);
    goto corral_source_split_1038;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    out_$p378 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i376, 56));
    goto corral_source_split_1037;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$i376 := $sext.i32.i64(out_$i371);
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i375 := $add.i32(out_$i374, 1);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} out_$i374 := snprintf.ref.i64.ref.i32(out_$p369, out_$i372, .str.111, out_$i373);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$i373 := $add.i32(out_$i229, 1);
    goto corral_source_split_1033;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i372 := $sext.i32.i64(out_$i370);
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$i371 := $add.i32(out_$i347, 1);
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i370 := $sub.i32(out_$i346, out_$i351);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$p369 := $add.ref(out_$p228, $mul.ref(out_$i368, 1));
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    out_$i367 := $sext.i32.i64(out_$i351);
    out_$i368 := $add.i64(out_$i344, out_$i367);
    goto corral_source_split_1027;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p366, out_$i362);
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    out_$p366 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i363, 56)), $mul.ref(48, 1));
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$i363 := $sext.i32.i64(out_$i347);
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$i362 := $trunc.i32.i8(out_$i229);
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p361, out_$p345);
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    out_$p361 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i356, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    out_$i356 := $sext.i32.i64(out_$i347);
    goto corral_source_split_1020;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_15 := $M.0;
    out_cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 199} out_cmdloc_dummy_var_17 := $memcpy.i8(out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_$p355, $add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_17;
    goto corral_source_split_1019;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    out_$p355 := $bitcast.ref.ref(out_$p354);
    goto corral_source_split_1018;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$p354 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i352, 56));
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$i352 := $sext.i32.i64(out_$i347);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    out_$i351 := $add.i32(out_$i350, 1);
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} out_$i350 := snprintf.ref.i64.ref.i32(out_$p345, out_$i348, .str.110, out_$i349);
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$i349 := $add.i32(out_$i229, 1);
    goto corral_source_split_1013;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i348 := $sext.i32.i64(out_$i346);
    goto corral_source_split_1012;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    out_$i347 := $add.i32(out_$i254, 1);
    goto corral_source_split_928;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$i346 := $sub.i32(out_$i253, out_$i327);
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$p345 := $add.ref(out_$p228, $mul.ref(out_$i344, 1));
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$i343 := $sext.i32.i64(out_$i327);
    out_$i344 := $add.i64(out_$i251, out_$i343);
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p342, out_$i338);
    goto corral_source_split_924;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$p342 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i339, 56)), $mul.ref(48, 1));
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$i339 := $sext.i32.i64(out_$i254);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$i338 := $trunc.i32.i8(out_$i229);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p337, out_$p252);
    goto corral_source_split_920;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    out_$p337 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i332, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    out_$i332 := $sext.i32.i64(out_$i254);
    goto corral_source_split_918;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_12 := $M.0;
    out_cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 180} out_cmdloc_dummy_var_14 := $memcpy.i8(out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_$p331, $add.ref($add.ref(abituguru_sysfs_pwm_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_14;
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$p331 := $bitcast.ref.ref(out_$p330);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$p330 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i328, 56));
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$i328 := $sext.i32.i64(out_$i254);
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i327 := $add.i32(out_$i326, 1);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} out_$i326 := snprintf.ref.i64.ref.i32(out_$p252, out_$i324, .str.109, out_$i325);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$i325 := $add.i32(out_$i229, 1);
    goto corral_source_split_911;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i324 := $sext.i32.i64(out_$i253);
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$i254 := $add.i32(out_$i231, 1);
    call {:si_unique_call 178} {:cexpr "sysfs_attr_i"} boogie_si_record_i32(out_$i254);
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$i253 := $sub.i32(out_$i230, out_$i235);
    call {:si_unique_call 177} {:cexpr "sysfs_names_free"} boogie_si_record_i32(out_$i253);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref(out_$p228, $mul.ref(out_$i251, 1));
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$i251 := $sext.i32.i64(out_$i235);
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p250, out_$i246);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i247, 56)), $mul.ref(48, 1));
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i247 := $sext.i32.i64(out_$i231);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$i246 := $trunc.i32.i8(out_$i229);
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p245, out_$p228);
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i240, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_899;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$i240 := $sext.i32.i64(out_$i231);
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    out_cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 176} out_cmdloc_dummy_var_11 := $memcpy.i8(out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_$p239, abituguru_sysfs_pwm_templ, 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_11;
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$p239 := $bitcast.ref.ref(out_$p238);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i236, 56));
    goto corral_source_split_895;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$i236 := $sext.i32.i64(out_$i231);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$i235 := $add.i32(out_$i234, 1);
    call {:si_unique_call 175} {:cexpr "used"} boogie_si_record_i32(out_$i235);
    goto corral_source_split_893;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} out_$i234 := snprintf.ref.i64.ref.i32(out_$p228, out_$i232, .str.108, out_$i233);
    call {:si_unique_call 174} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i234);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    out_$i233 := $add.i32(out_$i229, 1);
    goto corral_source_split_891;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i232 := $sext.i32.i64(out_$i230);
    goto corral_source_split_890;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb82_dummy:
    call {:si_unique_call 1} out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$p238, out_$p239, out_$i240, out_$p245, out_$i246, out_$i247, out_$p250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p228, out_$i229, out_$i230, out_$i231, out_$i259, out_$i261, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p330, out_$p331, out_$i332, out_$p337, out_$i338, out_$i339, out_$p342, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p354, out_$p355, out_$i356, out_$p361, out_$i362, out_$i363, out_$p366, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p378, out_$p379, out_$i380, out_$p385, out_$i386, out_$i387, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$p402, out_$p403, out_$i404, out_$p409, out_$i410, out_$i411, out_$p414, out_$i415, out_$i416, out_$p417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$p426, out_$p427, out_$i428, out_$p433, out_$i434, out_$i435, out_$p438, out_$i439, out_$i440, out_$p441, out_$i262, out_$i260, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26 := abituguru_probe_loop_$bb76(in_$p21, in_$p222, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$p238, out_$p239, out_$i240, out_$p245, out_$i246, out_$i247, out_$p250, out_$i251, out_$p252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$p228, out_$i229, out_$i230, out_$i231, out_$i259, out_$i261, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$p330, out_$p331, out_$i332, out_$p337, out_$i338, out_$i339, out_$p342, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p354, out_$p355, out_$i356, out_$p361, out_$i362, out_$i363, out_$p366, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p378, out_$p379, out_$i380, out_$p385, out_$i386, out_$i387, out_$p390, out_$i391, out_$i392, out_$p393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$p402, out_$p403, out_$i404, out_$p409, out_$i410, out_$i411, out_$p414, out_$i415, out_$i416, out_$p417, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$p426, out_$p427, out_$i428, out_$p433, out_$i434, out_$i435, out_$p438, out_$i439, out_$i440, out_$p441, out_$i262, out_$i260, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24, out_cmdloc_dummy_var_25, out_cmdloc_dummy_var_26);
    return;

  exit:
    return;
}



procedure abituguru_probe_loop_$bb76(in_$p21: ref, in_$p222: ref, in_$i232: i64, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i64, in_$p238: ref, in_$p239: ref, in_$i240: i64, in_$p245: ref, in_$i246: i8, in_$i247: i64, in_$p250: ref, in_$i251: i64, in_$p252: ref, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i8, in_$i257: i32, in_$i258: i1, in_$p228: ref, in_$i229: i32, in_$i230: i32, in_$i231: i32, in_$i259: i32, in_$i261: i32, in_$i324: i64, in_$i325: i32, in_$i326: i32, in_$i327: i32, in_$i328: i64, in_$p330: ref, in_$p331: ref, in_$i332: i64, in_$p337: ref, in_$i338: i8, in_$i339: i64, in_$p342: ref, in_$i343: i64, in_$i344: i64, in_$p345: ref, in_$i346: i32, in_$i347: i32, in_$i348: i64, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i64, in_$p354: ref, in_$p355: ref, in_$i356: i64, in_$p361: ref, in_$i362: i8, in_$i363: i64, in_$p366: ref, in_$i367: i64, in_$i368: i64, in_$p369: ref, in_$i370: i32, in_$i371: i32, in_$i372: i64, in_$i373: i32, in_$i374: i32, in_$i375: i32, in_$i376: i64, in_$p378: ref, in_$p379: ref, in_$i380: i64, in_$p385: ref, in_$i386: i8, in_$i387: i64, in_$p390: ref, in_$i391: i64, in_$i392: i64, in_$p393: ref, in_$i394: i32, in_$i395: i32, in_$i396: i64, in_$i397: i32, in_$i398: i32, in_$i399: i32, in_$i400: i64, in_$p402: ref, in_$p403: ref, in_$i404: i64, in_$p409: ref, in_$i410: i8, in_$i411: i64, in_$p414: ref, in_$i415: i64, in_$i416: i64, in_$p417: ref, in_$i418: i32, in_$i419: i32, in_$i420: i64, in_$i421: i32, in_$i422: i32, in_$i423: i32, in_$i424: i64, in_$p426: ref, in_$p427: ref, in_$i428: i64, in_$p433: ref, in_$i434: i8, in_$i435: i64, in_$p438: ref, in_$i439: i64, in_$i440: i64, in_$p441: ref, in_$i262: i32, in_$i260: i32, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8, in_cmdloc_dummy_var_25: [ref]i8, in_cmdloc_dummy_var_26: [ref]i8) returns (out_$i232: i64, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i64, out_$p238: ref, out_$p239: ref, out_$i240: i64, out_$p245: ref, out_$i246: i8, out_$i247: i64, out_$p250: ref, out_$i251: i64, out_$p252: ref, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i8, out_$i257: i32, out_$i258: i1, out_$p228: ref, out_$i229: i32, out_$i230: i32, out_$i231: i32, out_$i259: i32, out_$i261: i32, out_$i324: i64, out_$i325: i32, out_$i326: i32, out_$i327: i32, out_$i328: i64, out_$p330: ref, out_$p331: ref, out_$i332: i64, out_$p337: ref, out_$i338: i8, out_$i339: i64, out_$p342: ref, out_$i343: i64, out_$i344: i64, out_$p345: ref, out_$i346: i32, out_$i347: i32, out_$i348: i64, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i64, out_$p354: ref, out_$p355: ref, out_$i356: i64, out_$p361: ref, out_$i362: i8, out_$i363: i64, out_$p366: ref, out_$i367: i64, out_$i368: i64, out_$p369: ref, out_$i370: i32, out_$i371: i32, out_$i372: i64, out_$i373: i32, out_$i374: i32, out_$i375: i32, out_$i376: i64, out_$p378: ref, out_$p379: ref, out_$i380: i64, out_$p385: ref, out_$i386: i8, out_$i387: i64, out_$p390: ref, out_$i391: i64, out_$i392: i64, out_$p393: ref, out_$i394: i32, out_$i395: i32, out_$i396: i64, out_$i397: i32, out_$i398: i32, out_$i399: i32, out_$i400: i64, out_$p402: ref, out_$p403: ref, out_$i404: i64, out_$p409: ref, out_$i410: i8, out_$i411: i64, out_$p414: ref, out_$i415: i64, out_$i416: i64, out_$p417: ref, out_$i418: i32, out_$i419: i32, out_$i420: i64, out_$i421: i32, out_$i422: i32, out_$i423: i32, out_$i424: i64, out_$p426: ref, out_$p427: ref, out_$i428: i64, out_$p433: ref, out_$i434: i8, out_$i435: i64, out_$p438: ref, out_$i439: i64, out_$i440: i64, out_$p441: ref, out_$i262: i32, out_$i260: i32, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8, out_cmdloc_dummy_var_25: [ref]i8, out_cmdloc_dummy_var_26: [ref]i8);
  modifies $M.0;



implementation abituguru_probe_loop_$bb64(in_$p21: ref, in_$p178: ref, in_$i189: i64, in_$i190: i32, in_$i191: i32, in_$i192: i32, in_$i193: i64, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$p202: ref, in_$i203: i8, in_$i204: i64, in_$p207: ref, in_$i208: i64, in_$p209: ref, in_$i210: i32, in_$i211: i32, in_$i212: i32, in_$i213: i8, in_$i214: i32, in_$i215: i1, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i32, in_$i216: i32, in_$i218: i32, in_$p220: ref, in_$i442: i64, in_$i443: i32, in_$i444: i32, in_$i445: i32, in_$i446: i64, in_$p448: ref, in_$p449: ref, in_$i450: i64, in_$p455: ref, in_$i456: i8, in_$i457: i64, in_$p460: ref, in_$i461: i64, in_$i462: i64, in_$p463: ref, in_$i464: i32, in_$i465: i32, in_$i466: i64, in_$i467: i32, in_$i468: i32, in_$i469: i32, in_$i470: i64, in_$p472: ref, in_$p473: ref, in_$i474: i64, in_$p479: ref, in_$i480: i8, in_$i481: i64, in_$p484: ref, in_$i485: i64, in_$i486: i64, in_$p487: ref, in_$i488: i32, in_$i489: i32, in_$i490: i64, in_$i491: i32, in_$i492: i32, in_$i493: i32, in_$i494: i64, in_$p496: ref, in_$p497: ref, in_$i498: i64, in_$p503: ref, in_$i504: i8, in_$i505: i64, in_$p508: ref, in_$i509: i64, in_$i510: i64, in_$p511: ref, in_$i512: i32, in_$i513: i32, in_$i514: i64, in_$i515: i32, in_$i516: i32, in_$i517: i32, in_$i518: i64, in_$p520: ref, in_$p521: ref, in_$i522: i64, in_$p527: ref, in_$i528: i8, in_$i529: i64, in_$p532: ref, in_$i533: i64, in_$i534: i64, in_$p535: ref, in_$i536: i32, in_$i537: i32, in_$i538: i64, in_$i539: i32, in_$i540: i32, in_$i541: i32, in_$i542: i64, in_$p544: ref, in_$p545: ref, in_$i546: i64, in_$p551: ref, in_$i552: i8, in_$i553: i64, in_$p556: ref, in_$i557: i64, in_$i558: i64, in_$p221: ref, in_$i219: i32, in_$i217: i32, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8) returns (out_$i189: i64, out_$i190: i32, out_$i191: i32, out_$i192: i32, out_$i193: i64, out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$p202: ref, out_$i203: i8, out_$i204: i64, out_$p207: ref, out_$i208: i64, out_$p209: ref, out_$i210: i32, out_$i211: i32, out_$i212: i32, out_$i213: i8, out_$i214: i32, out_$i215: i1, out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i32, out_$i216: i32, out_$i218: i32, out_$p220: ref, out_$i442: i64, out_$i443: i32, out_$i444: i32, out_$i445: i32, out_$i446: i64, out_$p448: ref, out_$p449: ref, out_$i450: i64, out_$p455: ref, out_$i456: i8, out_$i457: i64, out_$p460: ref, out_$i461: i64, out_$i462: i64, out_$p463: ref, out_$i464: i32, out_$i465: i32, out_$i466: i64, out_$i467: i32, out_$i468: i32, out_$i469: i32, out_$i470: i64, out_$p472: ref, out_$p473: ref, out_$i474: i64, out_$p479: ref, out_$i480: i8, out_$i481: i64, out_$p484: ref, out_$i485: i64, out_$i486: i64, out_$p487: ref, out_$i488: i32, out_$i489: i32, out_$i490: i64, out_$i491: i32, out_$i492: i32, out_$i493: i32, out_$i494: i64, out_$p496: ref, out_$p497: ref, out_$i498: i64, out_$p503: ref, out_$i504: i8, out_$i505: i64, out_$p508: ref, out_$i509: i64, out_$i510: i64, out_$p511: ref, out_$i512: i32, out_$i513: i32, out_$i514: i64, out_$i515: i32, out_$i516: i32, out_$i517: i32, out_$i518: i64, out_$p520: ref, out_$p521: ref, out_$i522: i64, out_$p527: ref, out_$i528: i8, out_$i529: i64, out_$p532: ref, out_$i533: i64, out_$i534: i64, out_$p535: ref, out_$i536: i32, out_$i537: i32, out_$i538: i64, out_$i539: i32, out_$i540: i32, out_$i541: i32, out_$i542: i64, out_$p544: ref, out_$p545: ref, out_$i546: i64, out_$p551: ref, out_$i552: i8, out_$i553: i64, out_$p556: ref, out_$i557: i64, out_$i558: i64, out_$p221: ref, out_$i219: i32, out_$i217: i32, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8)
{

  entry:
    out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p195, out_$p196, out_$i197, out_$p202, out_$i203, out_$i204, out_$p207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p185, out_$i186, out_$i187, out_$i188, out_$i216, out_$i218, out_$p220, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$p448, out_$p449, out_$i450, out_$p455, out_$i456, out_$i457, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$p472, out_$p473, out_$i474, out_$p479, out_$i480, out_$i481, out_$p484, out_$i485, out_$i486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$p496, out_$p497, out_$i498, out_$p503, out_$i504, out_$i505, out_$p508, out_$i509, out_$i510, out_$p511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$p520, out_$p521, out_$i522, out_$p527, out_$i528, out_$i529, out_$p532, out_$i533, out_$i534, out_$p535, out_$i536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$p544, out_$p545, out_$i546, out_$p551, out_$i552, out_$i553, out_$p556, out_$i557, out_$i558, out_$p221, out_$i219, out_$i217, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$p195, in_$p196, in_$i197, in_$p202, in_$i203, in_$i204, in_$p207, in_$i208, in_$p209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$p185, in_$i186, in_$i187, in_$i188, in_$i216, in_$i218, in_$p220, in_$i442, in_$i443, in_$i444, in_$i445, in_$i446, in_$p448, in_$p449, in_$i450, in_$p455, in_$i456, in_$i457, in_$p460, in_$i461, in_$i462, in_$p463, in_$i464, in_$i465, in_$i466, in_$i467, in_$i468, in_$i469, in_$i470, in_$p472, in_$p473, in_$i474, in_$p479, in_$i480, in_$i481, in_$p484, in_$i485, in_$i486, in_$p487, in_$i488, in_$i489, in_$i490, in_$i491, in_$i492, in_$i493, in_$i494, in_$p496, in_$p497, in_$i498, in_$p503, in_$i504, in_$i505, in_$p508, in_$i509, in_$i510, in_$p511, in_$i512, in_$i513, in_$i514, in_$i515, in_$i516, in_$i517, in_$i518, in_$p520, in_$p521, in_$i522, in_$p527, in_$i528, in_$i529, in_$p532, in_$i533, in_$i534, in_$p535, in_$i536, in_$i537, in_$i538, in_$i539, in_$i540, in_$i541, in_$i542, in_$p544, in_$p545, in_$i546, in_$p551, in_$i552, in_$i553, in_$p556, in_$i557, in_$i558, in_$p221, in_$i219, in_$i217, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_27, in_cmdloc_dummy_var_28, in_cmdloc_dummy_var_29, in_cmdloc_dummy_var_30, in_cmdloc_dummy_var_31, in_cmdloc_dummy_var_32, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37, in_cmdloc_dummy_var_38;
    goto $bb64, exit;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_831;

  $bb70:
    assume out_$i215 == 1;
    assume {:verifier.code 0} true;
    out_$p185, out_$i186, out_$i187, out_$i188 := out_$p221, out_$i212, out_$i219, out_$i217;
    goto $bb70_dummy;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$i216, out_$i218, out_$p220 := out_$i217, out_$i219, out_$p221;
    assume true;
    goto $bb70;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i215 := $sgt.i32(out_$i214, out_$i212);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i214 := $zext.i8.i32(out_$i213);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$i213 := $load.i8($M.0, in_$p178);
    goto corral_source_split_874;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i212 := $add.i32(out_$i186, 1);
    call {:si_unique_call 171} {:cexpr "i"} boogie_si_record_i32(out_$i212);
    goto corral_source_split_873;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    out_$i217 := $add.i32(out_$i537, 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    out_$i219 := $sub.i32(out_$i536, out_$i541);
    goto corral_source_split_1168;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref(out_$p185, $mul.ref(out_$i558, 1));
    goto corral_source_split_1167;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    out_$i557 := $sext.i32.i64(out_$i541);
    out_$i558 := $add.i64(out_$i534, out_$i557);
    goto corral_source_split_1166;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p556, out_$i552);
    goto corral_source_split_1165;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    out_$p556 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i553, 56)), $mul.ref(48, 1));
    goto corral_source_split_1164;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    out_$i553 := $sext.i32.i64(out_$i537);
    goto corral_source_split_1163;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    out_$i552 := $trunc.i32.i8(out_$i186);
    goto corral_source_split_1162;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p551, out_$p535);
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    out_$p551 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i546, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1160;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    out_$i546 := $sext.i32.i64(out_$i537);
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_36 := $M.0;
    out_cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 213} out_cmdloc_dummy_var_38 := $memcpy.i8(out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_$p545, $add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(5, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_38;
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$p545 := $bitcast.ref.ref(out_$p544);
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$p544 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i542, 56));
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    out_$i542 := $sext.i32.i64(out_$i537);
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$i541 := $add.i32(out_$i540, 1);
    goto corral_source_split_1154;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} out_$i540 := snprintf.ref.i64.ref.i32(out_$p535, out_$i538, .str.88, out_$i539);
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$i539 := $add.i32(out_$i186, 1);
    goto corral_source_split_1152;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i538 := $sext.i32.i64(out_$i536);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$i537 := $add.i32(out_$i513, 1);
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    out_$i536 := $sub.i32(out_$i512, out_$i517);
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$p535 := $add.ref(out_$p185, $mul.ref(out_$i534, 1));
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$i533 := $sext.i32.i64(out_$i517);
    out_$i534 := $add.i64(out_$i510, out_$i533);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p532, out_$i528);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$p532 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i529, 56)), $mul.ref(48, 1));
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    out_$i529 := $sext.i32.i64(out_$i513);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$i528 := $trunc.i32.i8(out_$i186);
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p527, out_$p511);
    goto corral_source_split_1141;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    out_$p527 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i522, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    out_$i522 := $sext.i32.i64(out_$i513);
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_33 := $M.0;
    out_cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 211} out_cmdloc_dummy_var_35 := $memcpy.i8(out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_$p521, $add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(4, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_35;
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    out_$p521 := $bitcast.ref.ref(out_$p520);
    goto corral_source_split_1137;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    out_$p520 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i518, 56));
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    out_$i518 := $sext.i32.i64(out_$i513);
    goto corral_source_split_1135;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$i517 := $add.i32(out_$i516, 1);
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} out_$i516 := snprintf.ref.i64.ref.i32(out_$p511, out_$i514, .str.87, out_$i515);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    out_$i515 := $add.i32(out_$i186, 1);
    goto corral_source_split_1132;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i514 := $sext.i32.i64(out_$i512);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    out_$i513 := $add.i32(out_$i489, 1);
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    out_$i512 := $sub.i32(out_$i488, out_$i493);
    goto corral_source_split_1128;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    out_$p511 := $add.ref(out_$p185, $mul.ref(out_$i510, 1));
    goto corral_source_split_1127;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    out_$i509 := $sext.i32.i64(out_$i493);
    out_$i510 := $add.i64(out_$i486, out_$i509);
    goto corral_source_split_1126;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p508, out_$i504);
    goto corral_source_split_1125;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    out_$p508 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i505, 56)), $mul.ref(48, 1));
    goto corral_source_split_1124;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    out_$i505 := $sext.i32.i64(out_$i489);
    goto corral_source_split_1123;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    out_$i504 := $trunc.i32.i8(out_$i186);
    goto corral_source_split_1122;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p503, out_$p487);
    goto corral_source_split_1121;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    out_$p503 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i498, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1120;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$i498 := $sext.i32.i64(out_$i489);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_30 := $M.0;
    out_cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 209} out_cmdloc_dummy_var_32 := $memcpy.i8(out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_$p497, $add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(3, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_32;
    goto corral_source_split_1118;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    out_$p497 := $bitcast.ref.ref(out_$p496);
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    out_$p496 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i494, 56));
    goto corral_source_split_1116;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    out_$i494 := $sext.i32.i64(out_$i489);
    goto corral_source_split_1115;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    out_$i493 := $add.i32(out_$i492, 1);
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} out_$i492 := snprintf.ref.i64.ref.i32(out_$p487, out_$i490, .str.86, out_$i491);
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$i491 := $add.i32(out_$i186, 1);
    goto corral_source_split_1112;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i490 := $sext.i32.i64(out_$i488);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i489 := $add.i32(out_$i465, 1);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$i488 := $sub.i32(out_$i464, out_$i469);
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    out_$p487 := $add.ref(out_$p185, $mul.ref(out_$i486, 1));
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$i485 := $sext.i32.i64(out_$i469);
    out_$i486 := $add.i64(out_$i462, out_$i485);
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p484, out_$i480);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$p484 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i481, 56)), $mul.ref(48, 1));
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$i481 := $sext.i32.i64(out_$i465);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$i480 := $trunc.i32.i8(out_$i186);
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p479, out_$p463);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$p479 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i474, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    out_$i474 := $sext.i32.i64(out_$i465);
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_27 := $M.0;
    out_cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 207} out_cmdloc_dummy_var_29 := $memcpy.i8(out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_$p473, $add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(2, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_29;
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$p473 := $bitcast.ref.ref(out_$p472);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$p472 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i470, 56));
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$i470 := $sext.i32.i64(out_$i465);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$i469 := $add.i32(out_$i468, 1);
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} out_$i468 := snprintf.ref.i64.ref.i32(out_$p463, out_$i466, .str.85, out_$i467);
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$i467 := $add.i32(out_$i186, 1);
    goto corral_source_split_1092;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i466 := $sext.i32.i64(out_$i464);
    goto corral_source_split_1091;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$i465 := $add.i32(out_$i211, 1);
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$i464 := $sub.i32(out_$i210, out_$i445);
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$p463 := $add.ref(out_$p185, $mul.ref(out_$i462, 1));
    goto corral_source_split_869;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$i461 := $sext.i32.i64(out_$i445);
    out_$i462 := $add.i64(out_$i208, out_$i461);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p460, out_$i456);
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$p460 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i457, 56)), $mul.ref(48, 1));
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    out_$i457 := $sext.i32.i64(out_$i211);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i456 := $trunc.i32.i8(out_$i186);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p455, out_$p209);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$p455 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i450, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$i450 := $sext.i32.i64(out_$i211);
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.0;
    out_cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 170} out_cmdloc_dummy_var_8 := $memcpy.i8(out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_$p449, $add.ref($add.ref(abituguru_sysfs_fan_templ, $mul.ref(0, 336)), $mul.ref(1, 56)), 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_8;
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$p449 := $bitcast.ref.ref(out_$p448);
    goto corral_source_split_859;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    out_$p448 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i446, 56));
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i446 := $sext.i32.i64(out_$i211);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i445 := $add.i32(out_$i444, 1);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} out_$i444 := snprintf.ref.i64.ref.i32(out_$p209, out_$i442, .str.84, out_$i443);
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$i443 := $add.i32(out_$i186, 1);
    goto corral_source_split_854;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i442 := $sext.i32.i64(out_$i210);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i211 := $add.i32(out_$i188, 1);
    call {:si_unique_call 168} {:cexpr "sysfs_attr_i"} boogie_si_record_i32(out_$i211);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$i210 := $sub.i32(out_$i187, out_$i192);
    call {:si_unique_call 167} {:cexpr "sysfs_names_free"} boogie_si_record_i32(out_$i210);
    goto corral_source_split_850;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref(out_$p185, $mul.ref(out_$i208, 1));
    goto corral_source_split_849;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$i208 := $sext.i32.i64(out_$i192);
    goto corral_source_split_848;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p207, out_$i203);
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$p207 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i204, 56)), $mul.ref(48, 1));
    goto corral_source_split_846;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i204 := $sext.i32.i64(out_$i188);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    out_$i203 := $trunc.i32.i8(out_$i186);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p202, out_$p185);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i197, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i197 := $sext.i32.i64(out_$i188);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.0;
    out_cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 166} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p196, abituguru_sysfs_fan_templ, 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_5;
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$p196 := $bitcast.ref.ref(out_$p195);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i193, 56));
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$i193 := $sext.i32.i64(out_$i188);
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i192 := $add.i32(out_$i191, 1);
    call {:si_unique_call 165} {:cexpr "used"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} out_$i191 := snprintf.ref.i64.ref.i32(out_$p185, out_$i189, .str.83, out_$i190);
    call {:si_unique_call 164} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i191);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$i190 := $add.i32(out_$i186, 1);
    goto corral_source_split_834;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i189 := $sext.i32.i64(out_$i187);
    goto corral_source_split_833;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb70_dummy:
    call {:si_unique_call 1} out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p195, out_$p196, out_$i197, out_$p202, out_$i203, out_$i204, out_$p207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p185, out_$i186, out_$i187, out_$i188, out_$i216, out_$i218, out_$p220, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$p448, out_$p449, out_$i450, out_$p455, out_$i456, out_$i457, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$p472, out_$p473, out_$i474, out_$p479, out_$i480, out_$i481, out_$p484, out_$i485, out_$i486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$p496, out_$p497, out_$i498, out_$p503, out_$i504, out_$i505, out_$p508, out_$i509, out_$i510, out_$p511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$p520, out_$p521, out_$i522, out_$p527, out_$i528, out_$i529, out_$p532, out_$i533, out_$i534, out_$p535, out_$i536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$p544, out_$p545, out_$i546, out_$p551, out_$i552, out_$i553, out_$p556, out_$i557, out_$i558, out_$p221, out_$i219, out_$i217, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := abituguru_probe_loop_$bb64(in_$p21, in_$p178, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$p195, out_$p196, out_$i197, out_$p202, out_$i203, out_$i204, out_$p207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p185, out_$i186, out_$i187, out_$i188, out_$i216, out_$i218, out_$p220, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$p448, out_$p449, out_$i450, out_$p455, out_$i456, out_$i457, out_$p460, out_$i461, out_$i462, out_$p463, out_$i464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$p472, out_$p473, out_$i474, out_$p479, out_$i480, out_$i481, out_$p484, out_$i485, out_$i486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$p496, out_$p497, out_$i498, out_$p503, out_$i504, out_$i505, out_$p508, out_$i509, out_$i510, out_$p511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$p520, out_$p521, out_$i522, out_$p527, out_$i528, out_$i529, out_$p532, out_$i533, out_$i534, out_$p535, out_$i536, out_$i537, out_$i538, out_$i539, out_$i540, out_$i541, out_$i542, out_$p544, out_$p545, out_$i546, out_$p551, out_$i552, out_$i553, out_$p556, out_$i557, out_$i558, out_$p221, out_$i219, out_$i217, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38);
    return;

  exit:
    return;
}



procedure abituguru_probe_loop_$bb64(in_$p21: ref, in_$p178: ref, in_$i189: i64, in_$i190: i32, in_$i191: i32, in_$i192: i32, in_$i193: i64, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$p202: ref, in_$i203: i8, in_$i204: i64, in_$p207: ref, in_$i208: i64, in_$p209: ref, in_$i210: i32, in_$i211: i32, in_$i212: i32, in_$i213: i8, in_$i214: i32, in_$i215: i1, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i32, in_$i216: i32, in_$i218: i32, in_$p220: ref, in_$i442: i64, in_$i443: i32, in_$i444: i32, in_$i445: i32, in_$i446: i64, in_$p448: ref, in_$p449: ref, in_$i450: i64, in_$p455: ref, in_$i456: i8, in_$i457: i64, in_$p460: ref, in_$i461: i64, in_$i462: i64, in_$p463: ref, in_$i464: i32, in_$i465: i32, in_$i466: i64, in_$i467: i32, in_$i468: i32, in_$i469: i32, in_$i470: i64, in_$p472: ref, in_$p473: ref, in_$i474: i64, in_$p479: ref, in_$i480: i8, in_$i481: i64, in_$p484: ref, in_$i485: i64, in_$i486: i64, in_$p487: ref, in_$i488: i32, in_$i489: i32, in_$i490: i64, in_$i491: i32, in_$i492: i32, in_$i493: i32, in_$i494: i64, in_$p496: ref, in_$p497: ref, in_$i498: i64, in_$p503: ref, in_$i504: i8, in_$i505: i64, in_$p508: ref, in_$i509: i64, in_$i510: i64, in_$p511: ref, in_$i512: i32, in_$i513: i32, in_$i514: i64, in_$i515: i32, in_$i516: i32, in_$i517: i32, in_$i518: i64, in_$p520: ref, in_$p521: ref, in_$i522: i64, in_$p527: ref, in_$i528: i8, in_$i529: i64, in_$p532: ref, in_$i533: i64, in_$i534: i64, in_$p535: ref, in_$i536: i32, in_$i537: i32, in_$i538: i64, in_$i539: i32, in_$i540: i32, in_$i541: i32, in_$i542: i64, in_$p544: ref, in_$p545: ref, in_$i546: i64, in_$p551: ref, in_$i552: i8, in_$i553: i64, in_$p556: ref, in_$i557: i64, in_$i558: i64, in_$p221: ref, in_$i219: i32, in_$i217: i32, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8) returns (out_$i189: i64, out_$i190: i32, out_$i191: i32, out_$i192: i32, out_$i193: i64, out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$p202: ref, out_$i203: i8, out_$i204: i64, out_$p207: ref, out_$i208: i64, out_$p209: ref, out_$i210: i32, out_$i211: i32, out_$i212: i32, out_$i213: i8, out_$i214: i32, out_$i215: i1, out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i32, out_$i216: i32, out_$i218: i32, out_$p220: ref, out_$i442: i64, out_$i443: i32, out_$i444: i32, out_$i445: i32, out_$i446: i64, out_$p448: ref, out_$p449: ref, out_$i450: i64, out_$p455: ref, out_$i456: i8, out_$i457: i64, out_$p460: ref, out_$i461: i64, out_$i462: i64, out_$p463: ref, out_$i464: i32, out_$i465: i32, out_$i466: i64, out_$i467: i32, out_$i468: i32, out_$i469: i32, out_$i470: i64, out_$p472: ref, out_$p473: ref, out_$i474: i64, out_$p479: ref, out_$i480: i8, out_$i481: i64, out_$p484: ref, out_$i485: i64, out_$i486: i64, out_$p487: ref, out_$i488: i32, out_$i489: i32, out_$i490: i64, out_$i491: i32, out_$i492: i32, out_$i493: i32, out_$i494: i64, out_$p496: ref, out_$p497: ref, out_$i498: i64, out_$p503: ref, out_$i504: i8, out_$i505: i64, out_$p508: ref, out_$i509: i64, out_$i510: i64, out_$p511: ref, out_$i512: i32, out_$i513: i32, out_$i514: i64, out_$i515: i32, out_$i516: i32, out_$i517: i32, out_$i518: i64, out_$p520: ref, out_$p521: ref, out_$i522: i64, out_$p527: ref, out_$i528: i8, out_$i529: i64, out_$p532: ref, out_$i533: i64, out_$i534: i64, out_$p535: ref, out_$i536: i32, out_$i537: i32, out_$i538: i64, out_$i539: i32, out_$i540: i32, out_$i541: i32, out_$i542: i64, out_$p544: ref, out_$p545: ref, out_$i546: i64, out_$p551: ref, out_$i552: i8, out_$i553: i64, out_$p556: ref, out_$i557: i64, out_$i558: i64, out_$p221: ref, out_$i219: i32, out_$i217: i32, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8);
  modifies $M.0;



implementation abituguru_probe_loop_$bb53(in_$p1: ref, in_$p21: ref, in_$i78: i32, in_$i87: i32, in_$i92: i64, in_$i93: i64, in_$i94: i64, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p103: ref, in_$i104: i8, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i32, in_$i109: i64, in_$p111: ref, in_$i112: i64, in_$i113: i64, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p123: ref, in_$i124: i64, in_$p125: ref, in_$i126: i8, in_$i127: i64, in_$p130: ref, in_$i131: i64, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i137: i32, in_$i138: i32, in_$p139: ref, in_$i70: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$i92: i64, out_$i93: i64, out_$i94: i64, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p103: ref, out_$i104: i8, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i32, out_$i109: i64, out_$p111: ref, out_$i112: i64, out_$i113: i64, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p123: ref, out_$i124: i64, out_$p125: ref, out_$i126: i8, out_$i127: i64, out_$p130: ref, out_$i131: i64, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i137: i32, out_$i138: i32, out_$p139: ref, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8)
{

  entry:
    out_$i92, out_$i93, out_$i94, out_$p99, out_$p100, out_$i101, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$p115, out_$p116, out_$p117, out_$i118, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p88, out_$i89, out_$i90, out_$i91, out_$i137, out_$i138, out_$p139, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := in_$i92, in_$i93, in_$i94, in_$p99, in_$p100, in_$i101, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p111, in_$i112, in_$i113, in_$p115, in_$p116, in_$p117, in_$i118, in_$p123, in_$i124, in_$p125, in_$i126, in_$i127, in_$p130, in_$i131, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$p88, in_$i89, in_$i90, in_$i91, in_$i137, in_$i138, in_$p139, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2;
    goto $bb53, exit;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_754;

  $bb55:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$p88, out_$i89, out_$i90, out_$i91 := out_$p132, out_$i135, out_$i133, out_$i134;
    goto $bb55_dummy;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    out_$i137, out_$i138, out_$p139 := out_$i134, out_$i133, out_$p132;
    assume true;
    goto $bb55;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$i136 := $sgt.i32(in_$i87, out_$i135);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$i135 := $add.i32(out_$i89, 1);
    call {:si_unique_call 161} {:cexpr "j"} boogie_si_record_i32(out_$i135);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i91, 1);
    call {:si_unique_call 160} {:cexpr "sysfs_attr_i"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_788;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    out_$i133 := $sub.i32(out_$i90, out_$i108);
    call {:si_unique_call 159} {:cexpr "sysfs_names_free"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref(out_$p88, $mul.ref(out_$i131, 1));
    goto corral_source_split_786;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i131 := $sext.i32.i64(out_$i108);
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p130, out_$i126);
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i127, 56)), $mul.ref(48, 1));
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i91);
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i8($M.16, out_$p125);
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(out_$i124, 1));
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$i124 := $sext.i32.i64(in_$i70);
    goto corral_source_split_779;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p123, out_$p88);
    goto corral_source_split_778;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i118, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.i32.i64(out_$i91);
    goto corral_source_split_776;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 158} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p116, out_$p117, 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(out_$p115);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(out_$i113, 504)), $mul.ref(out_$i112, 56));
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(in_$i78);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i89);
    goto corral_source_split_770;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i109, 56));
    goto corral_source_split_769;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i91);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i32(out_$i107, 1);
    call {:si_unique_call 157} {:cexpr "used"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} out_$i107 := snprintf.ref.i64.ref.i32(out_$p88, out_$i92, out_$p100, out_$i106);
    call {:si_unique_call 156} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_766;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(out_$i105, in_$i78);
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i8.i32(out_$i104);
    goto corral_source_split_764;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i8($M.0, out_$p103);
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(out_$i101, 1));
    goto corral_source_split_762;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(in_$i78);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(out_$i94, 504)), $mul.ref(out_$i93, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(in_$i78);
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i89);
    goto corral_source_split_757;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i90);
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb55_dummy:
    call {:si_unique_call 1} out_$i92, out_$i93, out_$i94, out_$p99, out_$p100, out_$i101, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$p115, out_$p116, out_$p117, out_$i118, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p88, out_$i89, out_$i90, out_$i91, out_$i137, out_$i138, out_$p139, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := abituguru_probe_loop_$bb53(in_$p1, in_$p21, in_$i78, in_$i87, out_$i92, out_$i93, out_$i94, out_$p99, out_$p100, out_$i101, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$p115, out_$p116, out_$p117, out_$i118, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p88, out_$i89, out_$i90, out_$i91, out_$i137, out_$i138, out_$p139, in_$i70, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2);
    return;

  exit:
    return;
}



procedure abituguru_probe_loop_$bb53(in_$p1: ref, in_$p21: ref, in_$i78: i32, in_$i87: i32, in_$i92: i64, in_$i93: i64, in_$i94: i64, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p103: ref, in_$i104: i8, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i32, in_$i109: i64, in_$p111: ref, in_$i112: i64, in_$i113: i64, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p123: ref, in_$i124: i64, in_$p125: ref, in_$i126: i8, in_$i127: i64, in_$p130: ref, in_$i131: i64, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i137: i32, in_$i138: i32, in_$p139: ref, in_$i70: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$i92: i64, out_$i93: i64, out_$i94: i64, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p103: ref, out_$i104: i8, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i32, out_$i109: i64, out_$p111: ref, out_$i112: i64, out_$i113: i64, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p123: ref, out_$i124: i64, out_$p125: ref, out_$i126: i8, out_$i127: i64, out_$p130: ref, out_$i131: i64, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i137: i32, out_$i138: i32, out_$p139: ref, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8);
  modifies $M.0;



implementation abituguru_probe_loop_$bb44(in_$p1: ref, in_$p21: ref, in_$i73: i64, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i86: i1, in_$i87: i32, in_$i92: i64, in_$i93: i64, in_$i94: i64, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p103: ref, in_$i104: i8, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i32, in_$i109: i64, in_$p111: ref, in_$i112: i64, in_$i113: i64, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p123: ref, in_$i124: i64, in_$p125: ref, in_$i126: i8, in_$i127: i64, in_$p130: ref, in_$i131: i64, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i137: i32, in_$i138: i32, in_$p139: ref, in_$i140: i64, in_$p141: ref, in_$i142: i32, in_$i143: i64, in_$p144: ref, in_$i145: i8, in_$i146: i32, in_$i147: i64, in_$p149: ref, in_$i150: i64, in_$p151: ref, in_$i152: i8, in_$i153: i64, in_$p155: ref, in_$i156: i8, in_$i157: i32, in_$i158: i64, in_$i159: i64, in_$p162: ref, in_$i163: i64, in_$p165: ref, in_$i166: i8, in_$i167: i32, in_$i168: i32, in_$i169: i8, in_$i170: i64, in_$p172: ref, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$p85: ref, in_$i173: i32, in_$i174: i1, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i175: i32, in_$i176: i32, in_$p177: ref, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$i73: i64, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i86: i1, out_$i87: i32, out_$i92: i64, out_$i93: i64, out_$i94: i64, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p103: ref, out_$i104: i8, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i32, out_$i109: i64, out_$p111: ref, out_$i112: i64, out_$i113: i64, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p123: ref, out_$i124: i64, out_$p125: ref, out_$i126: i8, out_$i127: i64, out_$p130: ref, out_$i131: i64, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i137: i32, out_$i138: i32, out_$p139: ref, out_$i140: i64, out_$p141: ref, out_$i142: i32, out_$i143: i64, out_$p144: ref, out_$i145: i8, out_$i146: i32, out_$i147: i64, out_$p149: ref, out_$i150: i64, out_$p151: ref, out_$i152: i8, out_$i153: i64, out_$p155: ref, out_$i156: i8, out_$i157: i32, out_$i158: i64, out_$i159: i64, out_$p162: ref, out_$i163: i64, out_$p165: ref, out_$i166: i8, out_$i167: i32, out_$i168: i32, out_$i169: i8, out_$i170: i64, out_$p172: ref, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$p85: ref, out_$i173: i32, out_$i174: i1, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i175: i32, out_$i176: i32, out_$p177: ref, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8)
{

  entry:
    out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i86, out_$i87, out_$i92, out_$i93, out_$i94, out_$p99, out_$p100, out_$i101, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$p115, out_$p116, out_$p117, out_$i118, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p88, out_$i89, out_$i90, out_$i91, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p149, out_$i150, out_$p151, out_$i152, out_$i153, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p172, out_$i82, out_$i83, out_$i84, out_$p85, out_$i173, out_$i174, out_$p69, out_$i70, out_$i71, out_$i72, out_$i175, out_$i176, out_$p177, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i86, in_$i87, in_$i92, in_$i93, in_$i94, in_$p99, in_$p100, in_$i101, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p111, in_$i112, in_$i113, in_$p115, in_$p116, in_$p117, in_$i118, in_$p123, in_$i124, in_$p125, in_$i126, in_$i127, in_$p130, in_$i131, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$p88, in_$i89, in_$i90, in_$i91, in_$i137, in_$i138, in_$p139, in_$i140, in_$p141, in_$i142, in_$i143, in_$p144, in_$i145, in_$i146, in_$i147, in_$p149, in_$i150, in_$p151, in_$i152, in_$i153, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$p162, in_$i163, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$p172, in_$i82, in_$i83, in_$i84, in_$p85, in_$i173, in_$i174, in_$p69, in_$i70, in_$i71, in_$i72, in_$i175, in_$i176, in_$p177, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_731;

  $bb58:
    assume out_$i174 == 1;
    assume {:verifier.code 0} true;
    out_$p69, out_$i70, out_$i71, out_$i72 := out_$p85, out_$i173, out_$i84, out_$i83;
    goto $bb58_dummy;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$i175, out_$i176, out_$p177 := out_$i83, out_$i84, out_$p85;
    assume true;
    goto $bb58;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i174 := $sle.i32(out_$i173, 15);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$i173 := $add.i32(out_$i82, 1);
    call {:si_unique_call 154} {:cexpr "i"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_748;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_747;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$i82, out_$i83, out_$i84, out_$p85 := out_$i70, out_$i137, out_$i138, out_$p139;
    goto $bb51;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$i82, out_$i83, out_$i84, out_$p85 := out_$i70, out_$i72, out_$i71, out_$p69;
    goto $bb51;

  $bb49:
    assume out_$i81 == 1;
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i78, 2);
    goto corral_source_split_743;

  $bb47:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i78;
    assume true;
    goto $bb47;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i78, 0);
    goto corral_source_split_739;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} out_$i78 := abituguru_detect_bank1_sensor_type(in_$p21, out_$i77);
    call {:si_unique_call 153} {:cexpr "res"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_738;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    out_$i77 := $trunc.i32.i8(out_$i76);
    goto corral_source_split_737;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i75);
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.16, out_$p74);
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(out_$i73, 1));
    goto corral_source_split_734;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i70);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p172, out_$i169);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(out_$i170, 1));
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i170 := $sext.i32.i64(out_$i78);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$i169 := $trunc.i32.i8(out_$i168);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i168 := $add.i32(out_$i167, 1);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    out_$i167 := $zext.i8.i32(out_$i166);
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i8($M.0, out_$p165);
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(out_$i163, 1));
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    out_$i163 := $sext.i32.i64(out_$i78);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p162, out_$i152);
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(out_$i159, 16)), $mul.ref(out_$i158, 1));
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$i159 := $sext.i32.i64(out_$i78);
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$i158 := $sext.i32.i64(out_$i157);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i157 := $zext.i8.i32(out_$i156);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i8($M.0, out_$p155);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(out_$i153, 1));
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$i153 := $sext.i32.i64(out_$i78);
    goto corral_source_split_805;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i8($M.16, out_$p151);
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(out_$i150, 1));
    goto corral_source_split_803;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$i150 := $sext.i32.i64(out_$i70);
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p149, out_$i142);
    goto corral_source_split_801;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(15124, 1)), $mul.ref(out_$i147, 4));
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$i147 := $sext.i32.i64(out_$i146);
    goto corral_source_split_799;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    out_$i146 := $zext.i8.i32(out_$i145);
    goto corral_source_split_798;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i8($M.16, out_$p144);
    goto corral_source_split_797;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(out_$i143, 1));
    goto corral_source_split_796;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$i143 := $sext.i32.i64(out_$i70);
    goto corral_source_split_795;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i32($M.17, out_$p141);
    goto corral_source_split_794;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(abituguru_bank1_max_value, $mul.ref(0, 8)), $mul.ref(out_$i140, 4));
    goto corral_source_split_793;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i140 := $sext.i32.i64(out_$i78);
    goto corral_source_split_792;

  $bb56:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    out_$i137, out_$i138, out_$p139 := out_$i134, out_$i133, out_$p132;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$i136 := $sgt.i32(out_$i87, out_$i135);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$i135 := $add.i32(out_$i89, 1);
    call {:si_unique_call 161} {:cexpr "j"} boogie_si_record_i32(out_$i135);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i91, 1);
    call {:si_unique_call 160} {:cexpr "sysfs_attr_i"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_788;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    out_$i133 := $sub.i32(out_$i90, out_$i108);
    call {:si_unique_call 159} {:cexpr "sysfs_names_free"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref(out_$p88, $mul.ref(out_$i131, 1));
    goto corral_source_split_786;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i131 := $sext.i32.i64(out_$i108);
    goto corral_source_split_785;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p130, out_$i126);
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i127, 56)), $mul.ref(48, 1));
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i91);
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i8($M.16, out_$p125);
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(out_$i124, 1));
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$i124 := $sext.i32.i64(out_$i70);
    goto corral_source_split_779;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p123, out_$p88);
    goto corral_source_split_778;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i118, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.i32.i64(out_$i91);
    goto corral_source_split_776;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 158} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p116, out_$p117, 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_775;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(out_$p115);
    goto corral_source_split_774;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(out_$i113, 504)), $mul.ref(out_$i112, 56));
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i78);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i89);
    goto corral_source_split_770;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i109, 56));
    goto corral_source_split_769;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i91);
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i32(out_$i107, 1);
    call {:si_unique_call 157} {:cexpr "used"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} out_$i107 := snprintf.ref.i64.ref.i32(out_$p88, out_$i92, out_$p100, out_$i106);
    call {:si_unique_call 156} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_766;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(out_$i105, out_$i78);
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i8.i32(out_$i104);
    goto corral_source_split_764;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i8($M.0, out_$p103);
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($add.ref(in_$p21, $mul.ref(0, 15240)), $mul.ref(15024, 1)), $mul.ref(out_$i101, 1));
    goto corral_source_split_762;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i78);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(abituguru_sysfs_bank1_templ, $mul.ref(0, 1008)), $mul.ref(out_$i94, 504)), $mul.ref(out_$i93, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i78);
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i89);
    goto corral_source_split_757;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i90);
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    call out_$i92, out_$i93, out_$i94, out_$p99, out_$p100, out_$i101, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$p115, out_$p116, out_$p117, out_$i118, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p88, out_$i89, out_$i90, out_$i91, out_$i137, out_$i138, out_$p139, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := abituguru_probe_loop_$bb53(in_$p1, in_$p21, out_$i78, out_$i87, out_$i92, out_$i93, out_$i94, out_$p99, out_$p100, out_$i101, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$p115, out_$p116, out_$p117, out_$i118, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p88, out_$i89, out_$i90, out_$i91, out_$i137, out_$i138, out_$p139, out_$i70, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2);
    goto $bb53_last;

  $bb53_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_754;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$p88, out_$i89, out_$i90, out_$i91 := out_$p69, 0, out_$i71, out_$i72;
    goto $bb53;

  $bb55:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$p88, out_$i89, out_$i90, out_$i91 := out_$p132, out_$i135, out_$i133, out_$i134;
    assume false;
    return;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    out_$i87 := (if out_$i86 == 1 then 7 else 9);
    goto corral_source_split_752;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i32(out_$i78, 0);
    goto corral_source_split_751;

  $bb50:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb58_dummy:
    call {:si_unique_call 1} out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i86, out_$i87, out_$i92, out_$i93, out_$i94, out_$p99, out_$p100, out_$i101, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$p115, out_$p116, out_$p117, out_$i118, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p88, out_$i89, out_$i90, out_$i91, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p149, out_$i150, out_$p151, out_$i152, out_$i153, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p172, out_$i82, out_$i83, out_$i84, out_$p85, out_$i173, out_$i174, out_$p69, out_$i70, out_$i71, out_$i72, out_$i175, out_$i176, out_$p177, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := abituguru_probe_loop_$bb44(in_$p1, in_$p21, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i86, out_$i87, out_$i92, out_$i93, out_$i94, out_$p99, out_$p100, out_$i101, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$p115, out_$p116, out_$p117, out_$i118, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$p130, out_$i131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p88, out_$i89, out_$i90, out_$i91, out_$i137, out_$i138, out_$p139, out_$i140, out_$p141, out_$i142, out_$i143, out_$p144, out_$i145, out_$i146, out_$i147, out_$p149, out_$i150, out_$p151, out_$i152, out_$i153, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$p162, out_$i163, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p172, out_$i82, out_$i83, out_$i84, out_$p85, out_$i173, out_$i174, out_$p69, out_$i70, out_$i71, out_$i72, out_$i175, out_$i176, out_$p177, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2);
    return;

  exit:
    return;
}



procedure abituguru_probe_loop_$bb44(in_$p1: ref, in_$p21: ref, in_$i73: i64, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i8, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i86: i1, in_$i87: i32, in_$i92: i64, in_$i93: i64, in_$i94: i64, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$p103: ref, in_$i104: i8, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i32, in_$i109: i64, in_$p111: ref, in_$i112: i64, in_$i113: i64, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p123: ref, in_$i124: i64, in_$p125: ref, in_$i126: i8, in_$i127: i64, in_$p130: ref, in_$i131: i64, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i137: i32, in_$i138: i32, in_$p139: ref, in_$i140: i64, in_$p141: ref, in_$i142: i32, in_$i143: i64, in_$p144: ref, in_$i145: i8, in_$i146: i32, in_$i147: i64, in_$p149: ref, in_$i150: i64, in_$p151: ref, in_$i152: i8, in_$i153: i64, in_$p155: ref, in_$i156: i8, in_$i157: i32, in_$i158: i64, in_$i159: i64, in_$p162: ref, in_$i163: i64, in_$p165: ref, in_$i166: i8, in_$i167: i32, in_$i168: i32, in_$i169: i8, in_$i170: i64, in_$p172: ref, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$p85: ref, in_$i173: i32, in_$i174: i1, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i175: i32, in_$i176: i32, in_$p177: ref, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$i73: i64, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i8, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i86: i1, out_$i87: i32, out_$i92: i64, out_$i93: i64, out_$i94: i64, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$p103: ref, out_$i104: i8, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i32, out_$i109: i64, out_$p111: ref, out_$i112: i64, out_$i113: i64, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p123: ref, out_$i124: i64, out_$p125: ref, out_$i126: i8, out_$i127: i64, out_$p130: ref, out_$i131: i64, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i137: i32, out_$i138: i32, out_$p139: ref, out_$i140: i64, out_$p141: ref, out_$i142: i32, out_$i143: i64, out_$p144: ref, out_$i145: i8, out_$i146: i32, out_$i147: i64, out_$p149: ref, out_$i150: i64, out_$p151: ref, out_$i152: i8, out_$i153: i64, out_$p155: ref, out_$i156: i8, out_$i157: i32, out_$i158: i64, out_$i159: i64, out_$p162: ref, out_$i163: i64, out_$p165: ref, out_$i166: i8, out_$i167: i32, out_$i168: i32, out_$i169: i8, out_$i170: i64, out_$p172: ref, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$p85: ref, out_$i173: i32, out_$i174: i1, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i175: i32, out_$i176: i32, out_$p177: ref, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8);
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.11, $M.12, $M.22, $M.23, $M.24, $CurrAddr;



implementation abituguru_remove_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p14: ref, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i20: i64, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$i13: i32) returns (out_$p14: ref, out_$i15: i64, out_$p18: ref, out_$i19: i32, out_$i20: i64, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$i13: i32)
{

  entry:
    out_$p14, out_$i15, out_$p18, out_$i19, out_$i20, out_$p24, out_$p25, out_$i26, out_$i27, out_$i13 := in_$p14, in_$i15, in_$p18, in_$i19, in_$i20, in_$p24, in_$p25, in_$i26, in_$i27, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  $bb6:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i19;
    goto $bb6_dummy;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_1439;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_1438;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_1437;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    out_$p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i20, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i13, 1);
    call {:si_unique_call 258} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} device_remove_file(out_$p14, out_$p18);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 15240)), $mul.ref(184, 1)), $mul.ref(out_$i15, 56)), $mul.ref(0, 1));
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i13);
    goto corral_source_split_1432;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p14, out_$i15, out_$p18, out_$i19, out_$i20, out_$p24, out_$p25, out_$i26, out_$i27, out_$i13 := abituguru_remove_loop_$bb4(in_$p0, in_$p2, out_$p14, out_$i15, out_$p18, out_$i19, out_$i20, out_$p24, out_$p25, out_$i26, out_$i27, out_$i13);
    return;

  exit:
    return;
}



procedure abituguru_remove_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p14: ref, in_$i15: i64, in_$p18: ref, in_$i19: i32, in_$i20: i64, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$i13: i32) returns (out_$p14: ref, out_$i15: i64, out_$p18: ref, out_$i19: i32, out_$i20: i64, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$i13: i32);



implementation abituguru_detect_no_pwms_loop_$bb443(in_$p0: ref, in_$p682: ref, in_$i687: i32, in_$i688: i64, in_$p691: ref, in_$i692: i8, in_$i693: i32, in_$p696: ref, in_$i697: i8, in_$i698: i32, in_$i699: i32, in_$i700: i1, in_$i702: i32, in_$i703: i8, in_$i704: i32, in_$i705: i1, in_$i706: i32, in_$i701: i32) returns (out_$i687: i32, out_$i688: i64, out_$p691: ref, out_$i692: i8, out_$i693: i32, out_$p696: ref, out_$i697: i8, out_$i698: i32, out_$i699: i32, out_$i700: i1, out_$i702: i32, out_$i703: i8, out_$i704: i32, out_$i705: i1, out_$i706: i32, out_$i701: i32)
{

  entry:
    out_$i687, out_$i688, out_$p691, out_$i692, out_$i693, out_$p696, out_$i697, out_$i698, out_$i699, out_$i700, out_$i702, out_$i703, out_$i704, out_$i705, out_$i706, out_$i701 := in_$i687, in_$i688, in_$p691, in_$i692, in_$i693, in_$p696, in_$i697, in_$i698, in_$i699, in_$i700, in_$i702, in_$i703, in_$i704, in_$i705, in_$i706, in_$i701;
    goto $bb443, exit;

  $bb443:
    assume {:verifier.code 0} true;
    goto corral_source_split_3038;

  $bb448:
    assume out_$i705 == 1;
    assume {:verifier.code 0} true;
    out_$i687 := out_$i702;
    goto $bb448_dummy;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    out_$i706 := out_$i702;
    assume true;
    goto $bb448;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$i705 := $sgt.i32(out_$i704, out_$i702);
    goto corral_source_split_3055;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    out_$i704 := $zext.i8.i32(out_$i703);
    goto corral_source_split_3054;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    out_$i703 := $load.i8($M.0, in_$p682);
    goto corral_source_split_3053;

  $bb447:
    assume {:verifier.code 0} true;
    out_$i702 := $add.i32(out_$i687, 1);
    goto corral_source_split_3052;

  $bb446:
    assume !(out_$i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb447;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    out_$i701 := out_$i687;
    assume true;
    goto $bb446;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$i700 := $eq.i32(out_$i693, out_$i699);
    goto corral_source_split_3048;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$i699 := $and.i32(out_$i698, 15);
    goto corral_source_split_3047;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    out_$i698 := $zext.i8.i32(out_$i697);
    goto corral_source_split_3046;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    out_$i697 := $load.i8($M.0, out_$p696);
    goto corral_source_split_3045;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$p696 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(4, 5)), $mul.ref(0, 1));
    goto corral_source_split_3044;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i693 := $zext.i8.i32(out_$i692);
    goto corral_source_split_3043;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$i692 := $load.i8($M.0, out_$p691);
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$p691 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(1, 16)), $mul.ref(out_$i688, 1));
    goto corral_source_split_3041;

  $bb444:
    assume {:verifier.code 0} true;
    out_$i688 := $sext.i32.i64(out_$i687);
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb448_dummy:
    call {:si_unique_call 1} out_$i687, out_$i688, out_$p691, out_$i692, out_$i693, out_$p696, out_$i697, out_$i698, out_$i699, out_$i700, out_$i702, out_$i703, out_$i704, out_$i705, out_$i706, out_$i701 := abituguru_detect_no_pwms_loop_$bb443(in_$p0, in_$p682, out_$i687, out_$i688, out_$p691, out_$i692, out_$i693, out_$p696, out_$i697, out_$i698, out_$i699, out_$i700, out_$i702, out_$i703, out_$i704, out_$i705, out_$i706, out_$i701);
    return;

  exit:
    return;
}



procedure abituguru_detect_no_pwms_loop_$bb443(in_$p0: ref, in_$p682: ref, in_$i687: i32, in_$i688: i64, in_$p691: ref, in_$i692: i8, in_$i693: i32, in_$p696: ref, in_$i697: i8, in_$i698: i32, in_$i699: i32, in_$i700: i1, in_$i702: i32, in_$i703: i8, in_$i704: i32, in_$i705: i1, in_$i706: i32, in_$i701: i32) returns (out_$i687: i32, out_$i688: i64, out_$p691: ref, out_$i692: i8, out_$i693: i32, out_$p696: ref, out_$i697: i8, out_$i698: i32, out_$i699: i32, out_$i700: i1, out_$i702: i32, out_$i703: i8, out_$i704: i32, out_$i705: i1, out_$i706: i32, out_$i701: i32);



implementation abituguru_detect_no_pwms_loop_$bb352(in_$p0: ref, in_$p577: ref, in_$i582: i32, in_$i583: i64, in_$p586: ref, in_$i587: i8, in_$i588: i32, in_$p591: ref, in_$i592: i8, in_$i593: i32, in_$i594: i32, in_$i595: i1, in_$i597: i32, in_$i598: i8, in_$i599: i32, in_$i600: i1, in_$i601: i32, in_$i596: i32) returns (out_$i582: i32, out_$i583: i64, out_$p586: ref, out_$i587: i8, out_$i588: i32, out_$p591: ref, out_$i592: i8, out_$i593: i32, out_$i594: i32, out_$i595: i1, out_$i597: i32, out_$i598: i8, out_$i599: i32, out_$i600: i1, out_$i601: i32, out_$i596: i32)
{

  entry:
    out_$i582, out_$i583, out_$p586, out_$i587, out_$i588, out_$p591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i597, out_$i598, out_$i599, out_$i600, out_$i601, out_$i596 := in_$i582, in_$i583, in_$p586, in_$i587, in_$i588, in_$p591, in_$i592, in_$i593, in_$i594, in_$i595, in_$i597, in_$i598, in_$i599, in_$i600, in_$i601, in_$i596;
    goto $bb352, exit;

  $bb352:
    assume {:verifier.code 0} true;
    goto corral_source_split_2928;

  $bb357:
    assume out_$i600 == 1;
    assume {:verifier.code 0} true;
    out_$i582 := out_$i597;
    goto $bb357_dummy;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    out_$i601 := out_$i597;
    assume true;
    goto $bb357;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    out_$i600 := $sgt.i32(out_$i599, out_$i597);
    goto corral_source_split_2945;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    out_$i599 := $zext.i8.i32(out_$i598);
    goto corral_source_split_2944;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    out_$i598 := $load.i8($M.0, in_$p577);
    goto corral_source_split_2943;

  $bb356:
    assume {:verifier.code 0} true;
    out_$i597 := $add.i32(out_$i582, 1);
    goto corral_source_split_2942;

  $bb355:
    assume !(out_$i595 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i596 := out_$i582;
    assume true;
    goto $bb355;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$i595 := $eq.i32(out_$i588, out_$i594);
    goto corral_source_split_2938;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    out_$i594 := $and.i32(out_$i593, 15);
    goto corral_source_split_2937;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    out_$i593 := $zext.i8.i32(out_$i592);
    goto corral_source_split_2936;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$i592 := $load.i8($M.0, out_$p591);
    goto corral_source_split_2935;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    out_$p591 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(3, 5)), $mul.ref(0, 1));
    goto corral_source_split_2934;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    out_$i588 := $zext.i8.i32(out_$i587);
    goto corral_source_split_2933;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    out_$i587 := $load.i8($M.0, out_$p586);
    goto corral_source_split_2932;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    out_$p586 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(1, 16)), $mul.ref(out_$i583, 1));
    goto corral_source_split_2931;

  $bb353:
    assume {:verifier.code 0} true;
    out_$i583 := $sext.i32.i64(out_$i582);
    goto corral_source_split_2930;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb357_dummy:
    call {:si_unique_call 1} out_$i582, out_$i583, out_$p586, out_$i587, out_$i588, out_$p591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i597, out_$i598, out_$i599, out_$i600, out_$i601, out_$i596 := abituguru_detect_no_pwms_loop_$bb352(in_$p0, in_$p577, out_$i582, out_$i583, out_$p586, out_$i587, out_$i588, out_$p591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i597, out_$i598, out_$i599, out_$i600, out_$i601, out_$i596);
    return;

  exit:
    return;
}



procedure abituguru_detect_no_pwms_loop_$bb352(in_$p0: ref, in_$p577: ref, in_$i582: i32, in_$i583: i64, in_$p586: ref, in_$i587: i8, in_$i588: i32, in_$p591: ref, in_$i592: i8, in_$i593: i32, in_$i594: i32, in_$i595: i1, in_$i597: i32, in_$i598: i8, in_$i599: i32, in_$i600: i1, in_$i601: i32, in_$i596: i32) returns (out_$i582: i32, out_$i583: i64, out_$p586: ref, out_$i587: i8, out_$i588: i32, out_$p591: ref, out_$i592: i8, out_$i593: i32, out_$i594: i32, out_$i595: i1, out_$i597: i32, out_$i598: i8, out_$i599: i32, out_$i600: i1, out_$i601: i32, out_$i596: i32);



implementation abituguru_detect_no_pwms_loop_$bb261(in_$p0: ref, in_$p472: ref, in_$i477: i32, in_$i478: i64, in_$p481: ref, in_$i482: i8, in_$i483: i32, in_$p486: ref, in_$i487: i8, in_$i488: i32, in_$i489: i32, in_$i490: i1, in_$i492: i32, in_$i493: i8, in_$i494: i32, in_$i495: i1, in_$i496: i32, in_$i491: i32) returns (out_$i477: i32, out_$i478: i64, out_$p481: ref, out_$i482: i8, out_$i483: i32, out_$p486: ref, out_$i487: i8, out_$i488: i32, out_$i489: i32, out_$i490: i1, out_$i492: i32, out_$i493: i8, out_$i494: i32, out_$i495: i1, out_$i496: i32, out_$i491: i32)
{

  entry:
    out_$i477, out_$i478, out_$p481, out_$i482, out_$i483, out_$p486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i491 := in_$i477, in_$i478, in_$p481, in_$i482, in_$i483, in_$p486, in_$i487, in_$i488, in_$i489, in_$i490, in_$i492, in_$i493, in_$i494, in_$i495, in_$i496, in_$i491;
    goto $bb261, exit;

  $bb261:
    assume {:verifier.code 0} true;
    goto corral_source_split_2818;

  $bb266:
    assume out_$i495 == 1;
    assume {:verifier.code 0} true;
    out_$i477 := out_$i492;
    goto $bb266_dummy;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$i496 := out_$i492;
    assume true;
    goto $bb266;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$i495 := $sgt.i32(out_$i494, out_$i492);
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$i494 := $zext.i8.i32(out_$i493);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$i493 := $load.i8($M.0, in_$p472);
    goto corral_source_split_2833;

  $bb265:
    assume {:verifier.code 0} true;
    out_$i492 := $add.i32(out_$i477, 1);
    goto corral_source_split_2832;

  $bb264:
    assume !(out_$i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$i491 := out_$i477;
    assume true;
    goto $bb264;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$i490 := $eq.i32(out_$i483, out_$i489);
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$i489 := $and.i32(out_$i488, 15);
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$i488 := $zext.i8.i32(out_$i487);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$i487 := $load.i8($M.0, out_$p486);
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$p486 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(2, 5)), $mul.ref(0, 1));
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i483 := $zext.i8.i32(out_$i482);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$i482 := $load.i8($M.0, out_$p481);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$p481 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(1, 16)), $mul.ref(out_$i478, 1));
    goto corral_source_split_2821;

  $bb262:
    assume {:verifier.code 0} true;
    out_$i478 := $sext.i32.i64(out_$i477);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb266_dummy:
    call {:si_unique_call 1} out_$i477, out_$i478, out_$p481, out_$i482, out_$i483, out_$p486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i491 := abituguru_detect_no_pwms_loop_$bb261(in_$p0, in_$p472, out_$i477, out_$i478, out_$p481, out_$i482, out_$i483, out_$p486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i491);
    return;

  exit:
    return;
}



procedure abituguru_detect_no_pwms_loop_$bb261(in_$p0: ref, in_$p472: ref, in_$i477: i32, in_$i478: i64, in_$p481: ref, in_$i482: i8, in_$i483: i32, in_$p486: ref, in_$i487: i8, in_$i488: i32, in_$i489: i32, in_$i490: i1, in_$i492: i32, in_$i493: i8, in_$i494: i32, in_$i495: i1, in_$i496: i32, in_$i491: i32) returns (out_$i477: i32, out_$i478: i64, out_$p481: ref, out_$i482: i8, out_$i483: i32, out_$p486: ref, out_$i487: i8, out_$i488: i32, out_$i489: i32, out_$i490: i1, out_$i492: i32, out_$i493: i8, out_$i494: i32, out_$i495: i1, out_$i496: i32, out_$i491: i32);



implementation abituguru_detect_no_pwms_loop_$bb170(in_$p0: ref, in_$p367: ref, in_$i372: i32, in_$i373: i64, in_$p376: ref, in_$i377: i8, in_$i378: i32, in_$p381: ref, in_$i382: i8, in_$i383: i32, in_$i384: i32, in_$i385: i1, in_$i387: i32, in_$i388: i8, in_$i389: i32, in_$i390: i1, in_$i391: i32, in_$i386: i32) returns (out_$i372: i32, out_$i373: i64, out_$p376: ref, out_$i377: i8, out_$i378: i32, out_$p381: ref, out_$i382: i8, out_$i383: i32, out_$i384: i32, out_$i385: i1, out_$i387: i32, out_$i388: i8, out_$i389: i32, out_$i390: i1, out_$i391: i32, out_$i386: i32)
{

  entry:
    out_$i372, out_$i373, out_$p376, out_$i377, out_$i378, out_$p381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i386 := in_$i372, in_$i373, in_$p376, in_$i377, in_$i378, in_$p381, in_$i382, in_$i383, in_$i384, in_$i385, in_$i387, in_$i388, in_$i389, in_$i390, in_$i391, in_$i386;
    goto $bb170, exit;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  $bb175:
    assume out_$i390 == 1;
    assume {:verifier.code 0} true;
    out_$i372 := out_$i387;
    goto $bb175_dummy;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$i391 := out_$i387;
    assume true;
    goto $bb175;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$i390 := $sgt.i32(out_$i389, out_$i387);
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$i389 := $zext.i8.i32(out_$i388);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$i388 := $load.i8($M.0, in_$p367);
    goto corral_source_split_2723;

  $bb174:
    assume {:verifier.code 0} true;
    out_$i387 := $add.i32(out_$i372, 1);
    goto corral_source_split_2722;

  $bb173:
    assume !(out_$i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$i386 := out_$i372;
    assume true;
    goto $bb173;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i378, out_$i384);
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$i384 := $and.i32(out_$i383, 15);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i383 := $zext.i8.i32(out_$i382);
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i382 := $load.i8($M.0, out_$p381);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$p381 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(1, 5)), $mul.ref(0, 1));
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$i378 := $zext.i8.i32(out_$i377);
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i377 := $load.i8($M.0, out_$p376);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$p376 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(1, 16)), $mul.ref(out_$i373, 1));
    goto corral_source_split_2711;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i373 := $sext.i32.i64(out_$i372);
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb175_dummy:
    call {:si_unique_call 1} out_$i372, out_$i373, out_$p376, out_$i377, out_$i378, out_$p381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i386 := abituguru_detect_no_pwms_loop_$bb170(in_$p0, in_$p367, out_$i372, out_$i373, out_$p376, out_$i377, out_$i378, out_$p381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i386);
    return;

  exit:
    return;
}



procedure abituguru_detect_no_pwms_loop_$bb170(in_$p0: ref, in_$p367: ref, in_$i372: i32, in_$i373: i64, in_$p376: ref, in_$i377: i8, in_$i378: i32, in_$p381: ref, in_$i382: i8, in_$i383: i32, in_$i384: i32, in_$i385: i1, in_$i387: i32, in_$i388: i8, in_$i389: i32, in_$i390: i1, in_$i391: i32, in_$i386: i32) returns (out_$i372: i32, out_$i373: i64, out_$p376: ref, out_$i377: i8, out_$i378: i32, out_$p381: ref, out_$i382: i8, out_$i383: i32, out_$i384: i32, out_$i385: i1, out_$i387: i32, out_$i388: i8, out_$i389: i32, out_$i390: i1, out_$i391: i32, out_$i386: i32);



implementation abituguru_detect_no_pwms_loop_$bb36(in_$p0: ref, in_$p90: ref, in_$i96: i64, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$p104: ref, in_$i105: i8, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i111: i32, in_$i112: i8, in_$i113: i32, in_$i114: i1, in_$i95: i32, in_$i115: i32) returns (out_$i96: i64, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$p104: ref, out_$i105: i8, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i111: i32, out_$i112: i8, out_$i113: i32, out_$i114: i1, out_$i95: i32, out_$i115: i32)
{

  entry:
    out_$i96, out_$p99, out_$i100, out_$i101, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$i112, out_$i113, out_$i114, out_$i95, out_$i115 := in_$i96, in_$p99, in_$i100, in_$i101, in_$p104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i111, in_$i112, in_$i113, in_$i114, in_$i95, in_$i115;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2370;

  $bb42:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := out_$i111;
    goto $bb42_dummy;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i111;
    assume true;
    goto $bb42;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$i114 := $sgt.i32(out_$i113, out_$i111);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i8.i32(out_$i112);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i8($M.0, in_$p90);
    goto corral_source_split_2391;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i95, 1);
    call {:si_unique_call 375} {:cexpr "j"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_2390;

  $bb39:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i109 := out_$i95;
    assume true;
    goto $bb39;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i101, out_$i107);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i32(out_$i106, 15);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i8.i32(out_$i105);
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.0, out_$p104);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(15211, 1)), $mul.ref(0, 5)), $mul.ref(0, 1));
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i100);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i8($M.0, out_$p99);
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 15240)), $mul.ref(15026, 1)), $mul.ref(1, 16)), $mul.ref(out_$i96, 1));
    goto corral_source_split_2373;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i95);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i96, out_$p99, out_$i100, out_$i101, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$i112, out_$i113, out_$i114, out_$i95, out_$i115 := abituguru_detect_no_pwms_loop_$bb36(in_$p0, in_$p90, out_$i96, out_$p99, out_$i100, out_$i101, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i111, out_$i112, out_$i113, out_$i114, out_$i95, out_$i115);
    return;

  exit:
    return;
}



procedure abituguru_detect_no_pwms_loop_$bb36(in_$p0: ref, in_$p90: ref, in_$i96: i64, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$p104: ref, in_$i105: i8, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i111: i32, in_$i112: i8, in_$i113: i32, in_$i114: i1, in_$i95: i32, in_$i115: i32) returns (out_$i96: i64, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$p104: ref, out_$i105: i8, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i111: i32, out_$i112: i8, out_$i113: i32, out_$i114: i1, out_$i95: i32, out_$i115: i32);



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i32, in_$i150: i1, in_$i151: i32, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i32, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$i186: i32, in_$i187: i32, in_vslice_dummy_var_50: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i32, out_$i150: i1, out_$i151: i32, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i32, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$i186: i32, out_$i187: i32, out_vslice_dummy_var_50: i32)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_vslice_dummy_var_50 := in_$i0, in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i186, in_$i187, in_vslice_dummy_var_50;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 436} out_$i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 437} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i0);
    call {:si_unique_call 438} {:cexpr "tmp"} boogie_si_record_i32(out_$i0);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb50_dummy;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb13:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 446} {:cexpr "probed_1"} boogie_si_record_i32(1);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $M.30 := out_$i18;
    call {:si_unique_call 445} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, 1);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    out_$i17 := $M.30;
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 444} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_3267;

  $bb24:
    assume out_$i16 == 1;
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 0);
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_$i15 := $M.33;
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.33 := out_$i14;
    call {:si_unique_call 443} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3262;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} out_$i14 := abituguru_probe(out_$p13);
    goto corral_source_split_3261;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    out_$p13 := $M.28;
    goto corral_source_split_3260;

  $bb22:
    assume out_$i12 == 1;
    goto corral_source_split_3259;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 1);
    goto corral_source_split_3257;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    out_$i11 := $M.29;
    goto corral_source_split_3256;

  $bb20:
    assume out_$i10 == 1;
    goto corral_source_split_3255;

  $bb15:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 439} out_$i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 440} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i7);
    call {:si_unique_call 441} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i7);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i6 == 1;
    goto corral_source_split_3249;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    out_$i5 := $M.29;
    goto corral_source_split_3246;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_3245;

  $bb3:
    assume out_$i1 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $slt.i32(out_$i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 456} {:cexpr "probed_1"} boogie_si_record_i32(0);
    goto corral_source_split_3310;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.30 := out_$i38;
    call {:si_unique_call 455} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i32(out_$i37, 1);
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$i37 := $M.30;
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 454} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3306;

  $bb43:
    assume out_$i36 == 1;
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$i35 := $M.35;
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.35 := out_$i34;
    call {:si_unique_call 453} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} out_$i34 := abituguru_remove(out_$p33);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$p33 := $M.28;
    goto corral_source_split_3299;

  $bb41:
    assume out_$i32 == 1;
    goto corral_source_split_3298;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$i31 := $M.34;
    goto corral_source_split_3295;

  $bb38:
    assume out_$i30 == 1;
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 2);
    goto corral_source_split_3292;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i29 := $M.29;
    goto corral_source_split_3291;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 451} {:cexpr "probed_1"} boogie_si_record_i32(0);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $M.30 := out_$i28;
    call {:si_unique_call 450} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i28 := $sub.i32(out_$i27, 1);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$i27 := $M.30;
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 449} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_3285;

  $bb34:
    assume out_$i26 == 1;
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$i25 := $M.35;
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $M.35 := out_$i24;
    call {:si_unique_call 448} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} out_$i24 := abituguru_remove(out_$p23);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$p23 := $M.28;
    goto corral_source_split_3278;

  $bb32:
    assume out_$i22 == 1;
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 1);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i21 := $M.34;
    goto corral_source_split_3274;

  $bb29:
    assume out_$i20 == 1;
    goto corral_source_split_3273;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 1);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$i19 := $M.29;
    goto corral_source_split_3252;

  $bb17:
    assume out_$i9 == 1;
    goto corral_source_split_3251;

  $bb16:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb31;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb31;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb40;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb40;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} ldv_stop();
    goto corral_source_split_3312;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb19;

  $bb52:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb63;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb63;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 0);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$i47 := $M.30;
    goto corral_source_split_3325;

  $bb61:
    assume out_$i46 == 1;
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 2);
    goto corral_source_split_3322;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    out_$i45 := $M.31;
    goto corral_source_split_3321;

  $bb59:
    assume out_$i44 == 1;
    goto corral_source_split_3320;

  $bb54:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i41, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_3314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 458} out_$i41 := __VERIFIER_nondet_int();
    call {:si_unique_call 459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i41);
    call {:si_unique_call 460} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i41);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i40 == 1;
    goto corral_source_split_3314;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$i39 := $M.31;
    goto corral_source_split_3238;

  $bb5:
    assume out_$i2 == 1;
    goto corral_source_split_3237;

  $bb4:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb70:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb75:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} ldv_dev_pm_ops_2();
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 468} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 467} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_3347;

  $bb74:
    assume out_$i55 == 1;
    goto corral_source_split_3346;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 0);
    goto corral_source_split_3344;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i54 := $M.36;
    goto corral_source_split_3343;

  $bb72:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$i52 := $M.36;
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.36 := out_$i51;
    call {:si_unique_call 465} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} out_$i51 := abituguru_init();
    goto corral_source_split_3335;

  $bb69:
    assume out_$i50 == 1;
    goto corral_source_split_3334;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 1);
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$i49 := $M.31;
    goto corral_source_split_3317;

  $bb56:
    assume out_$i43 == 1;
    goto corral_source_split_3316;

  $bb55:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} ldv_stop();
    goto corral_source_split_3351;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb58;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb58;

  $bb82:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb130:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $M.32 := 15;
    call {:si_unique_call 476} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_3443;

  $bb129:
    assume out_$i85 == 1;
    goto corral_source_split_3442;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 0);
    goto corral_source_split_3440;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    out_$i84 := $M.37;
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $M.37 := out_$i83;
    call {:si_unique_call 475} {:cexpr "ldv_retval_21"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_3438;

  SeqInstr_27:
    goto corral_source_split_3437;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} out_$i83 := abituguru_resume(out_$p82);
    goto SeqInstr_26;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$p82 := $M.27;
    goto corral_source_split_3436;

  $bb127:
    assume out_$i81 == 1;
    goto corral_source_split_3435;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 12);
    goto corral_source_split_3433;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    out_$i80 := $M.32;
    goto corral_source_split_3432;

  $bb125:
    assume out_$i79 == 1;
    goto corral_source_split_3431;

  $bb123:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i58, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb117:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i58, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb107:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i58, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb84:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i58, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i58, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_3353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 471} out_$i58 := __VERIFIER_nondet_int();
    call {:si_unique_call 472} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i58);
    call {:si_unique_call 473} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i58);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume out_$i57 == 1;
    goto corral_source_split_3353;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$i56 := $M.32;
    goto corral_source_split_3242;

  $bb7:
    assume out_$i3 == 1;
    goto corral_source_split_3241;

  $bb6:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb135:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.32 := 15;
    call {:si_unique_call 479} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_3453;

  $bb136:
    assume out_$i91 == 1;
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 0);
    goto corral_source_split_3450;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$i90 := $M.38;
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $M.38 := out_$i89;
    call {:si_unique_call 478} {:cexpr "ldv_retval_20"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_3448;

  SeqInstr_30:
    goto corral_source_split_3447;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} out_$i89 := abituguru_resume(out_$p88);
    goto SeqInstr_29;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    out_$p88 := $M.27;
    goto corral_source_split_3446;

  $bb134:
    assume out_$i87 == 1;
    goto corral_source_split_3445;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 13);
    goto corral_source_split_3429;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$i86 := $M.32;
    goto corral_source_split_3428;

  $bb124:
    assume !(out_$i78 == 1);
    goto corral_source_split_3427;

  $bb141:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb143:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.32 := 3;
    call {:si_unique_call 482} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_3463;

  $bb142:
    assume out_$i97 == 1;
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 0);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$i96 := $M.39;
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.39 := out_$i95;
    call {:si_unique_call 481} {:cexpr "ldv_retval_19"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_3458;

  SeqInstr_33:
    goto corral_source_split_3457;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} out_$i95 := abituguru_suspend(out_$p94);
    goto SeqInstr_32;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$p94 := $M.27;
    goto corral_source_split_3456;

  $bb140:
    assume out_$i93 == 1;
    goto corral_source_split_3455;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 2);
    goto corral_source_split_3417;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    out_$i92 := $M.32;
    goto corral_source_split_3416;

  $bb119:
    assume out_$i76 == 1;
    goto corral_source_split_3415;

  $bb118:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb147:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb149:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.32 := 4;
    call {:si_unique_call 485} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_3473;

  $bb148:
    assume out_$i103 == 1;
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 0);
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i102 := $M.40;
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.40 := out_$i101;
    call {:si_unique_call 484} {:cexpr "ldv_retval_18"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_3468;

  SeqInstr_36:
    goto corral_source_split_3467;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} out_$i101 := abituguru_suspend(out_$p100);
    goto SeqInstr_35;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$p100 := $M.27;
    goto corral_source_split_3466;

  $bb146:
    assume out_$i99 == 1;
    goto corral_source_split_3465;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 2);
    goto corral_source_split_3421;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    out_$i98 := $M.32;
    goto corral_source_split_3420;

  $bb121:
    assume out_$i77 == 1;
    goto corral_source_split_3419;

  $bb120:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i58, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb153:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb155:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $M.32 := 5;
    call {:si_unique_call 488} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(5);
    goto corral_source_split_3483;

  $bb154:
    assume out_$i109 == 1;
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 0);
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    out_$i108 := $M.41;
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.41 := out_$i107;
    call {:si_unique_call 487} {:cexpr "ldv_retval_17"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_3478;

  SeqInstr_39:
    goto corral_source_split_3477;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} out_$i107 := abituguru_suspend(out_$p106);
    goto SeqInstr_38;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$p106 := $M.27;
    goto corral_source_split_3476;

  $bb152:
    assume out_$i105 == 1;
    goto corral_source_split_3475;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 2);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$i104 := $M.32;
    goto corral_source_split_3424;

  $bb122:
    assume !(out_$i77 == 1);
    goto corral_source_split_3423;

  $bb159:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $M.32 := 15;
    call {:si_unique_call 491} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(15);
    goto corral_source_split_3493;

  $bb160:
    assume out_$i115 == 1;
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 0);
    goto corral_source_split_3490;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i114 := $M.42;
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.42 := out_$i113;
    call {:si_unique_call 490} {:cexpr "ldv_retval_16"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_3488;

  SeqInstr_42:
    goto corral_source_split_3487;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} out_$i113 := abituguru_resume(out_$p112);
    goto SeqInstr_41;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p112 := $M.27;
    goto corral_source_split_3486;

  $bb158:
    assume out_$i111 == 1;
    goto corral_source_split_3485;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 14);
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i110 := $M.32;
    goto corral_source_split_3408;

  $bb115:
    assume out_$i74 == 1;
    goto corral_source_split_3407;

  $bb109:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i58, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb108:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i58, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb165:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb167:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $M.32 := 10;
    call {:si_unique_call 494} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(10);
    goto corral_source_split_3502;

  $bb166:
    assume out_$i120 == 1;
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    goto corral_source_split_3499;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    out_$i119 := $M.43;
    goto corral_source_split_3498;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.43 := out_$i118;
    call {:si_unique_call 493} {:cexpr "ldv_retval_15"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} out_$i118 := ldv_suspend_late_2();
    goto corral_source_split_3496;

  $bb164:
    assume out_$i117 == 1;
    goto corral_source_split_3495;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 5);
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$i116 := $M.32;
    goto corral_source_split_3412;

  $bb116:
    assume !(out_$i74 == 1);
    goto corral_source_split_3411;

  $bb171:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb173:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.32 := 12;
    call {:si_unique_call 497} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(12);
    goto corral_source_split_3511;

  $bb172:
    assume out_$i125 == 1;
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 0);
    goto corral_source_split_3508;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$i124 := $M.44;
    goto corral_source_split_3507;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.44 := out_$i123;
    call {:si_unique_call 496} {:cexpr "ldv_retval_14"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_3506;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} out_$i123 := ldv_restore_early_2();
    goto corral_source_split_3505;

  $bb170:
    assume out_$i122 == 1;
    goto corral_source_split_3504;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 7);
    goto corral_source_split_3397;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    out_$i121 := $M.32;
    goto corral_source_split_3396;

  $bb111:
    assume out_$i72 == 1;
    goto corral_source_split_3395;

  $bb110:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i58, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb177:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb179:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.32 := 14;
    call {:si_unique_call 500} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(14);
    goto corral_source_split_3520;

  $bb178:
    assume out_$i130 == 1;
    goto corral_source_split_3519;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 0);
    goto corral_source_split_3517;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    out_$i129 := $M.45;
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.45 := out_$i128;
    call {:si_unique_call 499} {:cexpr "ldv_retval_13"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_3515;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} out_$i128 := ldv_resume_early_2();
    goto corral_source_split_3514;

  $bb176:
    assume out_$i127 == 1;
    goto corral_source_split_3513;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 10);
    goto corral_source_split_3401;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    out_$i126 := $M.32;
    goto corral_source_split_3400;

  $bb113:
    assume out_$i73 == 1;
    goto corral_source_split_3399;

  $bb112:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i58, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb183:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb185:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $M.32 := 13;
    call {:si_unique_call 503} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(13);
    goto corral_source_split_3529;

  $bb184:
    assume out_$i135 == 1;
    goto corral_source_split_3528;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 0);
    goto corral_source_split_3526;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    out_$i134 := $M.46;
    goto corral_source_split_3525;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $M.46 := out_$i133;
    call {:si_unique_call 502} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_3524;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} out_$i133 := ldv_thaw_early_2();
    goto corral_source_split_3523;

  $bb182:
    assume out_$i132 == 1;
    goto corral_source_split_3522;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 9);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$i131 := $M.32;
    goto corral_source_split_3404;

  $bb114:
    assume !(out_$i73 == 1);
    goto corral_source_split_3403;

  $bb189:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb191:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.32 := 14;
    call {:si_unique_call 506} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(14);
    goto corral_source_split_3538;

  $bb190:
    assume out_$i140 == 1;
    goto corral_source_split_3537;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 0);
    goto corral_source_split_3535;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    out_$i139 := $M.47;
    goto corral_source_split_3534;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.47 := out_$i138;
    call {:si_unique_call 505} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i138);
    goto corral_source_split_3533;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} out_$i138 := ldv_resume_noirq_2();
    goto corral_source_split_3532;

  $bb188:
    assume out_$i137 == 1;
    goto corral_source_split_3531;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 11);
    goto corral_source_split_3389;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    out_$i136 := $M.32;
    goto corral_source_split_3388;

  $bb105:
    assume out_$i69 == 1;
    goto corral_source_split_3387;

  $bb99:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i58, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb86:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i58, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb85:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i58, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb195:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb197:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.32 := 8;
    call {:si_unique_call 509} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(8);
    goto corral_source_split_3547;

  $bb196:
    assume out_$i145 == 1;
    goto corral_source_split_3546;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 0);
    goto corral_source_split_3544;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    out_$i144 := $M.48;
    goto corral_source_split_3543;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $M.48 := out_$i143;
    call {:si_unique_call 508} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_3542;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} out_$i143 := ldv_freeze_noirq_2();
    goto corral_source_split_3541;

  $bb194:
    assume out_$i142 == 1;
    goto corral_source_split_3540;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 4);
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$i141 := $M.32;
    goto corral_source_split_3392;

  $bb106:
    assume !(out_$i69 == 1);
    goto corral_source_split_3391;

  $bb201:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb203:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $M.30 := out_$i152;
    call {:si_unique_call 513} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_3559;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    out_$i152 := $add.i32(out_$i151, 1);
    goto corral_source_split_3558;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    out_$i151 := $M.30;
    goto corral_source_split_3557;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $M.32 := 2;
    call {:si_unique_call 512} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_3556;

  $bb202:
    assume out_$i150 == 1;
    goto corral_source_split_3555;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 0);
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$i149 := $M.49;
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $M.49 := out_$i148;
    call {:si_unique_call 511} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i148);
    goto corral_source_split_3551;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} out_$i148 := ldv_prepare_2();
    goto corral_source_split_3550;

  $bb200:
    assume out_$i147 == 1;
    goto corral_source_split_3549;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 1);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$i146 := $M.32;
    goto corral_source_split_3376;

  $bb101:
    assume out_$i67 == 1;
    goto corral_source_split_3375;

  $bb100:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i58, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb207:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb209:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.32 := 9;
    call {:si_unique_call 516} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(9);
    goto corral_source_split_3568;

  $bb208:
    assume out_$i157 == 1;
    goto corral_source_split_3567;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 0);
    goto corral_source_split_3565;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$i156 := $M.50;
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $M.50 := out_$i155;
    call {:si_unique_call 515} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} out_$i155 := ldv_freeze_late_2();
    goto corral_source_split_3562;

  $bb206:
    assume out_$i154 == 1;
    goto corral_source_split_3561;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 4);
    goto corral_source_split_3381;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    out_$i153 := $M.32;
    goto corral_source_split_3380;

  $bb103:
    assume out_$i68 == 1;
    goto corral_source_split_3379;

  $bb102:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i58, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb213:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb215:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.32 := 13;
    call {:si_unique_call 519} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(13);
    goto corral_source_split_3577;

  $bb214:
    assume out_$i162 == 1;
    goto corral_source_split_3576;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 0);
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i161 := $M.51;
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.51 := out_$i160;
    call {:si_unique_call 518} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i160);
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} out_$i160 := ldv_thaw_noirq_2();
    goto corral_source_split_3571;

  $bb212:
    assume out_$i159 == 1;
    goto corral_source_split_3570;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 8);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$i158 := $M.32;
    goto corral_source_split_3384;

  $bb104:
    assume !(out_$i68 == 1);
    goto corral_source_split_3383;

  $bb219:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb221:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $M.32 := 6;
    call {:si_unique_call 522} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(6);
    goto corral_source_split_3586;

  $bb220:
    assume out_$i167 == 1;
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 0);
    goto corral_source_split_3583;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    out_$i166 := $M.52;
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.52 := out_$i165;
    call {:si_unique_call 521} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i165);
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} out_$i165 := ldv_poweroff_noirq_2();
    goto corral_source_split_3580;

  $bb218:
    assume out_$i164 == 1;
    goto corral_source_split_3579;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 3);
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    out_$i163 := $M.32;
    goto corral_source_split_3368;

  $bb97:
    assume out_$i65 == 1;
    goto corral_source_split_3367;

  $bb88:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i58, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb87:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i58, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb225:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb227:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.32 := 7;
    call {:si_unique_call 525} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(7);
    goto corral_source_split_3595;

  $bb226:
    assume out_$i172 == 1;
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 0);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$i171 := $M.53;
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.53 := out_$i170;
    call {:si_unique_call 524} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i170);
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} out_$i170 := ldv_poweroff_late_2();
    goto corral_source_split_3589;

  $bb224:
    assume out_$i169 == 1;
    goto corral_source_split_3588;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 3);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$i168 := $M.32;
    goto corral_source_split_3372;

  $bb98:
    assume !(out_$i65 == 1);
    goto corral_source_split_3371;

  $bb231:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb233:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.32 := 12;
    call {:si_unique_call 528} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(12);
    goto corral_source_split_3604;

  $bb232:
    assume out_$i177 == 1;
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 0);
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$i176 := $M.54;
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.54 := out_$i175;
    call {:si_unique_call 527} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} out_$i175 := ldv_restore_noirq_2();
    goto corral_source_split_3598;

  $bb230:
    assume out_$i174 == 1;
    goto corral_source_split_3597;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 6);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$i173 := $M.32;
    goto corral_source_split_3356;

  $bb90:
    assume out_$i62 == 1;
    goto corral_source_split_3355;

  $bb89:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i58, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb237:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb239:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb240;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.32 := 11;
    call {:si_unique_call 531} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(11);
    goto corral_source_split_3613;

  $bb238:
    assume out_$i182 == 1;
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 0);
    goto corral_source_split_3610;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i181 := $M.55;
    goto corral_source_split_3609;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $M.55 := out_$i180;
    call {:si_unique_call 530} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i180);
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} out_$i180 := ldv_suspend_noirq_2();
    goto corral_source_split_3607;

  $bb236:
    assume out_$i179 == 1;
    goto corral_source_split_3606;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 5);
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    out_$i178 := $M.32;
    goto corral_source_split_3360;

  $bb92:
    assume out_$i63 == 1;
    goto corral_source_split_3359;

  $bb91:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i58, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb243:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $M.30 := out_$i187;
    call {:si_unique_call 534} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_3620;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$i187 := $sub.i32(out_$i186, 1);
    goto corral_source_split_3619;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    out_$i186 := $M.30;
    goto corral_source_split_3618;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 533} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_3617;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} out_vslice_dummy_var_50 := ldv_complete_2();
    goto corral_source_split_3616;

  $bb242:
    assume out_$i184 == 1;
    goto corral_source_split_3615;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 15);
    goto corral_source_split_3365;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$i183 := $M.32;
    goto corral_source_split_3364;

  $bb94:
    assume out_$i64 == 1;
    goto corral_source_split_3363;

  $bb93:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i58, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} ldv_stop();
    goto corral_source_split_3622;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb96;

  $bb126:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb96;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} ldv_stop();
    goto corral_source_split_3624;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i3 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i4 == 1);
    goto $bb9;

  $bb50_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_vslice_dummy_var_50 := main_loop_$bb1(out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i186, out_$i187, out_vslice_dummy_var_50);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$i6: i1, in_$i7: i32, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i32, in_$i150: i1, in_$i151: i32, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i32, in_$i182: i1, in_$i183: i32, in_$i184: i1, in_$i186: i32, in_$i187: i32, in_vslice_dummy_var_50: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$i6: i1, out_$i7: i32, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i32, out_$i150: i1, out_$i151: i32, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i32, out_$i182: i1, out_$i183: i32, out_$i184: i1, out_$i186: i32, out_$i187: i32, out_vslice_dummy_var_50: i32);
  modifies $M.34, $M.30, $M.29, $M.33, $M.16, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.12, $M.22, $M.23, $M.24, $CurrAddr, $M.2, $M.35, $M.27, $M.32, $M.31, $M.36, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.56, $M.28, $M.37, $M.10, assertsPassed, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


